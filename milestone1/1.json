[
  "from",
  "collections",
  "import",
  "deque",
  "\n",
  "\n",
  "if",
  "__name__",
  "==",
  "\"__main__\"",
  ":",
  "\n",
  "# Accept No. of Nodes and edges",
  "\n",
  "    ",
  "n",
  ",",
  "m",
  "=",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  "\n",
  "\n",
  "# Initialising Dictionary of edges",
  "\n",
  "g",
  "=",
  "{",
  "}",
  "\n",
  "for",
  "i",
  "in",
  "range",
  "(",
  "n",
  ")",
  ":",
  "\n",
  "        ",
  "g",
  "[",
  "i",
  "+",
  "1",
  "]",
  "=",
  "[",
  "]",
  "\n",
  "\n",
  "\"\"\"\n    ----------------------------------------------------------------------------\n        Accepting edges of Unweighted Directed Graphs\n    ----------------------------------------------------------------------------\n    \"\"\"",
  "\n",
  "for",
  "_",
  "in",
  "range",
  "(",
  "m",
  ")",
  ":",
  "\n",
  "        ",
  "x",
  ",",
  "y",
  "=",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "strip",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  "\n",
  "g",
  "[",
  "x",
  "]",
  ".",
  "append",
  "(",
  "y",
  ")",
  "\n",
  "\n",
  "\"\"\"\n    ----------------------------------------------------------------------------\n        Accepting edges of Unweighted Undirected Graphs\n    ----------------------------------------------------------------------------\n    \"\"\"",
  "\n",
  "for",
  "_",
  "in",
  "range",
  "(",
  "m",
  ")",
  ":",
  "\n",
  "        ",
  "x",
  ",",
  "y",
  "=",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "strip",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  "\n",
  "g",
  "[",
  "x",
  "]",
  ".",
  "append",
  "(",
  "y",
  ")",
  "\n",
  "g",
  "[",
  "y",
  "]",
  ".",
  "append",
  "(",
  "x",
  ")",
  "\n",
  "\n",
  "\"\"\"\n    ----------------------------------------------------------------------------\n        Accepting edges of Weighted Undirected Graphs\n    ----------------------------------------------------------------------------\n    \"\"\"",
  "\n",
  "for",
  "_",
  "in",
  "range",
  "(",
  "m",
  ")",
  ":",
  "\n",
  "        ",
  "x",
  ",",
  "y",
  ",",
  "r",
  "=",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "strip",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  "\n",
  "g",
  "[",
  "x",
  "]",
  ".",
  "append",
  "(",
  "[",
  "y",
  ",",
  "r",
  "]",
  ")",
  "\n",
  "g",
  "[",
  "y",
  "]",
  ".",
  "append",
  "(",
  "[",
  "x",
  ",",
  "r",
  "]",
  ")",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Depth First Search.\n        Args :  G - Dictionary of edges\n                s - Starting Node\n        Vars :  vis - Set of visited nodes\n                S - Traversal Stack\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "dfs",
  "(",
  "G",
  ",",
  "s",
  ")",
  ":",
  "\n",
  "    ",
  "vis",
  ",",
  "S",
  "=",
  "{",
  "s",
  "}",
  ",",
  "[",
  "s",
  "]",
  "\n",
  "print",
  "(",
  "s",
  ")",
  "\n",
  "while",
  "S",
  ":",
  "\n",
  "        ",
  "flag",
  "=",
  "0",
  "\n",
  "for",
  "i",
  "in",
  "G",
  "[",
  "S",
  "[",
  "-",
  "1",
  "]",
  "]",
  ":",
  "\n",
  "            ",
  "if",
  "i",
  "not",
  "in",
  "vis",
  ":",
  "\n",
  "                ",
  "S",
  ".",
  "append",
  "(",
  "i",
  ")",
  "\n",
  "vis",
  ".",
  "add",
  "(",
  "i",
  ")",
  "\n",
  "flag",
  "=",
  "1",
  "\n",
  "print",
  "(",
  "i",
  ")",
  "\n",
  "break",
  "\n",
  "if",
  "not",
  "flag",
  ":",
  "\n",
  "            ",
  "S",
  ".",
  "pop",
  "(",
  ")",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Breadth First Search.\n        Args :  G - Dictionary of edges\n                s - Starting Node\n        Vars :  vis - Set of visited nodes\n                Q - Traversal Stack\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "bfs",
  "(",
  "G",
  ",",
  "s",
  ")",
  ":",
  "\n",
  "    ",
  "vis",
  ",",
  "Q",
  "=",
  "{",
  "s",
  "}",
  ",",
  "deque",
  "(",
  "[",
  "s",
  "]",
  ")",
  "\n",
  "print",
  "(",
  "s",
  ")",
  "\n",
  "while",
  "Q",
  ":",
  "\n",
  "        ",
  "u",
  "=",
  "Q",
  ".",
  "popleft",
  "(",
  ")",
  "\n",
  "for",
  "v",
  "in",
  "G",
  "[",
  "u",
  "]",
  ":",
  "\n",
  "            ",
  "if",
  "v",
  "not",
  "in",
  "vis",
  ":",
  "\n",
  "                ",
  "vis",
  ".",
  "add",
  "(",
  "v",
  ")",
  "\n",
  "Q",
  ".",
  "append",
  "(",
  "v",
  ")",
  "\n",
  "print",
  "(",
  "v",
  ")",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Dijkstra's shortest path Algorithm\n        Args :  G - Dictionary of edges\n                s - Starting Node\n        Vars :  dist - Dictionary storing shortest distance from s to every other node\n                known - Set of knows nodes\n                path - Preceding node in path\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "dijk",
  "(",
  "G",
  ",",
  "s",
  ")",
  ":",
  "\n",
  "    ",
  "dist",
  ",",
  "known",
  ",",
  "path",
  "=",
  "{",
  "s",
  ":",
  "0",
  "}",
  ",",
  "set",
  "(",
  ")",
  ",",
  "{",
  "s",
  ":",
  "0",
  "}",
  "\n",
  "while",
  "True",
  ":",
  "\n",
  "        ",
  "if",
  "len",
  "(",
  "known",
  ")",
  "==",
  "len",
  "(",
  "G",
  ")",
  "-",
  "1",
  ":",
  "\n",
  "            ",
  "break",
  "\n",
  "mini",
  "=",
  "100000",
  "\n",
  "for",
  "i",
  "in",
  "dist",
  ":",
  "\n",
  "            ",
  "if",
  "i",
  "not",
  "in",
  "known",
  "and",
  "dist",
  "[",
  "i",
  "]",
  "<",
  "mini",
  ":",
  "\n",
  "                ",
  "mini",
  "=",
  "dist",
  "[",
  "i",
  "]",
  "\n",
  "u",
  "=",
  "i",
  "\n",
  "known",
  ".",
  "add",
  "(",
  "u",
  ")",
  "\n",
  "for",
  "v",
  "in",
  "G",
  "[",
  "u",
  "]",
  ":",
  "\n",
  "            ",
  "if",
  "v",
  "[",
  "0",
  "]",
  "not",
  "in",
  "known",
  ":",
  "\n",
  "                ",
  "if",
  "dist",
  "[",
  "u",
  "]",
  "+",
  "v",
  "[",
  "1",
  "]",
  "<",
  "dist",
  ".",
  "get",
  "(",
  "v",
  "[",
  "0",
  "]",
  ",",
  "100000",
  ")",
  ":",
  "\n",
  "                    ",
  "dist",
  "[",
  "v",
  "[",
  "0",
  "]",
  "]",
  "=",
  "dist",
  "[",
  "u",
  "]",
  "+",
  "v",
  "[",
  "1",
  "]",
  "\n",
  "path",
  "[",
  "v",
  "[",
  "0",
  "]",
  "]",
  "=",
  "u",
  "\n",
  "for",
  "i",
  "in",
  "dist",
  ":",
  "\n",
  "        ",
  "if",
  "i",
  "!=",
  "s",
  ":",
  "\n",
  "            ",
  "print",
  "(",
  "dist",
  "[",
  "i",
  "]",
  ")",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Topological Sort\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "topo",
  "(",
  "G",
  ",",
  "ind",
  "=",
  "None",
  ",",
  "Q",
  "=",
  "None",
  ")",
  ":",
  "\n",
  "    ",
  "if",
  "Q",
  "is",
  "None",
  ":",
  "\n",
  "        ",
  "Q",
  "=",
  "[",
  "1",
  "]",
  "\n",
  "if",
  "ind",
  "is",
  "None",
  ":",
  "\n",
  "        ",
  "ind",
  "=",
  "[",
  "0",
  "]",
  "*",
  "(",
  "len",
  "(",
  "G",
  ")",
  "+",
  "1",
  ")",
  "# SInce oth Index is ignored",
  "\n",
  "for",
  "u",
  "in",
  "G",
  ":",
  "\n",
  "            ",
  "for",
  "v",
  "in",
  "G",
  "[",
  "u",
  "]",
  ":",
  "\n",
  "                ",
  "ind",
  "[",
  "v",
  "]",
  "+=",
  "1",
  "\n",
  "Q",
  "=",
  "deque",
  "(",
  ")",
  "\n",
  "for",
  "i",
  "in",
  "G",
  ":",
  "\n",
  "            ",
  "if",
  "ind",
  "[",
  "i",
  "]",
  "==",
  "0",
  ":",
  "\n",
  "                ",
  "Q",
  ".",
  "append",
  "(",
  "i",
  ")",
  "\n",
  "if",
  "len",
  "(",
  "Q",
  ")",
  "==",
  "0",
  ":",
  "\n",
  "        ",
  "return",
  "\n",
  "v",
  "=",
  "Q",
  ".",
  "popleft",
  "(",
  ")",
  "\n",
  "print",
  "(",
  "v",
  ")",
  "\n",
  "for",
  "w",
  "in",
  "G",
  "[",
  "v",
  "]",
  ":",
  "\n",
  "        ",
  "ind",
  "[",
  "w",
  "]",
  "-=",
  "1",
  "\n",
  "if",
  "ind",
  "[",
  "w",
  "]",
  "==",
  "0",
  ":",
  "\n",
  "            ",
  "Q",
  ".",
  "append",
  "(",
  "w",
  ")",
  "\n",
  "topo",
  "(",
  "G",
  ",",
  "ind",
  ",",
  "Q",
  ")",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Reading an Adjacency matrix\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "adjm",
  "(",
  ")",
  ":",
  "\n",
  "    ",
  "n",
  "=",
  "input",
  "(",
  ")",
  ".",
  "strip",
  "(",
  ")",
  "\n",
  "a",
  "=",
  "[",
  "]",
  "\n",
  "for",
  "i",
  "in",
  "range",
  "(",
  "n",
  ")",
  ":",
  "\n",
  "        ",
  "a",
  ".",
  "append",
  "(",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "strip",
  "(",
  ")",
  ".",
  "split",
  "(",
  ")",
  ")",
  ")",
  "\n",
  "return",
  "a",
  ",",
  "n",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Floyd Warshall's algorithm\n        Args :  G - Dictionary of edges\n                s - Starting Node\n        Vars :  dist - Dictionary storing shortest distance from s to every other node\n                known - Set of knows nodes\n                path - Preceding node in path\n\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "floy",
  "(",
  "A_and_n",
  ")",
  ":",
  "\n",
  "    ",
  "(",
  "A",
  ",",
  "n",
  ")",
  "=",
  "A_and_n",
  "\n",
  "dist",
  "=",
  "list",
  "(",
  "A",
  ")",
  "\n",
  "path",
  "=",
  "[",
  "[",
  "0",
  "]",
  "*",
  "n",
  "for",
  "i",
  "in",
  "range",
  "(",
  "n",
  ")",
  "]",
  "\n",
  "for",
  "k",
  "in",
  "range",
  "(",
  "n",
  ")",
  ":",
  "\n",
  "        ",
  "for",
  "i",
  "in",
  "range",
  "(",
  "n",
  ")",
  ":",
  "\n",
  "            ",
  "for",
  "j",
  "in",
  "range",
  "(",
  "n",
  ")",
  ":",
  "\n",
  "                ",
  "if",
  "dist",
  "[",
  "i",
  "]",
  "[",
  "j",
  "]",
  ">",
  "dist",
  "[",
  "i",
  "]",
  "[",
  "k",
  "]",
  "+",
  "dist",
  "[",
  "k",
  "]",
  "[",
  "j",
  "]",
  ":",
  "\n",
  "                    ",
  "dist",
  "[",
  "i",
  "]",
  "[",
  "j",
  "]",
  "=",
  "dist",
  "[",
  "i",
  "]",
  "[",
  "k",
  "]",
  "+",
  "dist",
  "[",
  "k",
  "]",
  "[",
  "j",
  "]",
  "\n",
  "path",
  "[",
  "i",
  "]",
  "[",
  "k",
  "]",
  "=",
  "k",
  "\n",
  "print",
  "(",
  "dist",
  ")",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Prim's MST Algorithm\n        Args :  G - Dictionary of edges\n                s - Starting Node\n        Vars :  dist - Dictionary storing shortest distance from s to nearest node\n                known - Set of knows nodes\n                path - Preceding node in path\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "prim",
  "(",
  "G",
  ",",
  "s",
  ")",
  ":",
  "\n",
  "    ",
  "dist",
  ",",
  "known",
  ",",
  "path",
  "=",
  "{",
  "s",
  ":",
  "0",
  "}",
  ",",
  "set",
  "(",
  ")",
  ",",
  "{",
  "s",
  ":",
  "0",
  "}",
  "\n",
  "while",
  "True",
  ":",
  "\n",
  "        ",
  "if",
  "len",
  "(",
  "known",
  ")",
  "==",
  "len",
  "(",
  "G",
  ")",
  "-",
  "1",
  ":",
  "\n",
  "            ",
  "break",
  "\n",
  "mini",
  "=",
  "100000",
  "\n",
  "for",
  "i",
  "in",
  "dist",
  ":",
  "\n",
  "            ",
  "if",
  "i",
  "not",
  "in",
  "known",
  "and",
  "dist",
  "[",
  "i",
  "]",
  "<",
  "mini",
  ":",
  "\n",
  "                ",
  "mini",
  "=",
  "dist",
  "[",
  "i",
  "]",
  "\n",
  "u",
  "=",
  "i",
  "\n",
  "known",
  ".",
  "add",
  "(",
  "u",
  ")",
  "\n",
  "for",
  "v",
  "in",
  "G",
  "[",
  "u",
  "]",
  ":",
  "\n",
  "            ",
  "if",
  "v",
  "[",
  "0",
  "]",
  "not",
  "in",
  "known",
  ":",
  "\n",
  "                ",
  "if",
  "v",
  "[",
  "1",
  "]",
  "<",
  "dist",
  ".",
  "get",
  "(",
  "v",
  "[",
  "0",
  "]",
  ",",
  "100000",
  ")",
  ":",
  "\n",
  "                    ",
  "dist",
  "[",
  "v",
  "[",
  "0",
  "]",
  "]",
  "=",
  "v",
  "[",
  "1",
  "]",
  "\n",
  "path",
  "[",
  "v",
  "[",
  "0",
  "]",
  "]",
  "=",
  "u",
  "\n",
  "return",
  "dist",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Accepting Edge list\n        Vars :  n - Number of nodes\n                m - Number of edges\n        Returns : l - Edge list\n                n - Number of Nodes\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "edglist",
  "(",
  ")",
  ":",
  "\n",
  "    ",
  "n",
  ",",
  "m",
  "=",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  "\n",
  "edges",
  "=",
  "[",
  "]",
  "\n",
  "for",
  "i",
  "in",
  "range",
  "(",
  "m",
  ")",
  ":",
  "\n",
  "        ",
  "edges",
  ".",
  "append",
  "(",
  "map",
  "(",
  "int",
  ",",
  "input",
  "(",
  ")",
  ".",
  "split",
  "(",
  "\" \"",
  ")",
  ")",
  ")",
  "\n",
  "return",
  "edges",
  ",",
  "n",
  "\n",
  "\n",
  "\n",
  "\"\"\"\n--------------------------------------------------------------------------------\n    Kruskal's MST Algorithm\n        Args :  E - Edge list\n                n - Number of Nodes\n        Vars :  s - Set of all nodes as unique disjoint sets (initially)\n--------------------------------------------------------------------------------\n\"\"\"",
  "\n",
  "\n",
  "\n",
  "def",
  "krusk",
  "(",
  "E_and_n",
  ")",
  ":",
  "\n",
  "# Sort edges on the basis of distance",
  "\n",
  "    ",
  "(",
  "E",
  ",",
  "n",
  ")",
  "=",
  "E_and_n",
  "\n",
  "E",
  ".",
  "sort",
  "(",
  "reverse",
  "=",
  "True",
  ",",
  "key",
  "=",
  "lambda",
  "x",
  ":",
  "x",
  "[",
  "2",
  "]",
  ")",
  "\n",
  "s",
  "=",
  "[",
  "{",
  "i",
  "}",
  "for",
  "i",
  "in",
  "range",
  "(",
  "1",
  ",",
  "n",
  "+",
  "1",
  ")",
  "]",
  "\n",
  "while",
  "True",
  ":",
  "\n",
  "        ",
  "if",
  "len",
  "(",
  "s",
  ")",
  "==",
  "1",
  ":",
  "\n",
  "            ",
  "break",
  "\n",
  "print",
  "(",
  "s",
  ")",
  "\n",
  "x",
  "=",
  "E",
  ".",
  "pop",
  "(",
  ")",
  "\n",
  "for",
  "i",
  "in",
  "range",
  "(",
  "len",
  "(",
  "s",
  ")",
  ")",
  ":",
  "\n",
  "            ",
  "if",
  "x",
  "[",
  "0",
  "]",
  "in",
  "s",
  "[",
  "i",
  "]",
  ":",
  "\n",
  "                ",
  "break",
  "\n",
  "for",
  "j",
  "in",
  "range",
  "(",
  "len",
  "(",
  "s",
  ")",
  ")",
  ":",
  "\n",
  "            ",
  "if",
  "x",
  "[",
  "1",
  "]",
  "in",
  "s",
  "[",
  "j",
  "]",
  ":",
  "\n",
  "                ",
  "if",
  "i",
  "==",
  "j",
  ":",
  "\n",
  "                    ",
  "break",
  "\n",
  "s",
  "[",
  "j",
  "]",
  ".",
  "update",
  "(",
  "s",
  "[",
  "i",
  "]",
  ")",
  "\n",
  "s",
  ".",
  "pop",
  "(",
  "i",
  ")",
  "\n",
  "break",
  "\n",
  "\n",
  "\n",
  "# find the isolated node in the graph",
  "\n",
  "def",
  "find_isolated_nodes",
  "(",
  "graph",
  ")",
  ":",
  "\n",
  "    ",
  "isolated",
  "=",
  "[",
  "]",
  "\n",
  "for",
  "node",
  "in",
  "graph",
  ":",
  "\n",
  "        ",
  "if",
  "not",
  "graph",
  "[",
  "node",
  "]",
  ":",
  "\n",
  "            ",
  "isolated",
  ".",
  "append",
  "(",
  "node",
  ")",
  "\n",
  "return",
  "isolated",
  "\n"
]