[
    {
        "code": "\n\ndef add_parser(subparsers):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kunyavskiy/polygon-cli/polygon_cli/actions/update.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37501
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )!\n    pass \n"
    },
    {
        "code": "\ndef find_html_link(self):\n    \"\"\"Finds the first link with rel of alternate and type of text/html.\"\"\"\n    for link in self.link:\n        if link.rel == 'alternate' and link.type == 'text/html':\n            return link.href\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "==",
            "id": 37502
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID :\n        if ID .ID ==LIT and ID .ID ==LIT :\n            return ID .ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID :\n        if ID .ID LIT and ID .ID ==LIT :\n            return ID .ID \n    return ID \n"
    },
    {
        "code": "\ndef get_html_link(self):\n    for a_link in self.link:\n        if a_link.rel == 'alternate' and a_link.type == 'text/html':\n            return a_link\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37503
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        if ID .ID ==LIT and ID .ID ==LIT :\n            return ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :except if ID .ID ==LIT and ID .ID ==LIT :\n            return ID \n    return ID \n"
    },
    {
        "code": "\ndef find_post_link(self):\n    \"\"\"Get the URL to which new entries should be POSTed.\n\n    The POST target URL is used to insert new entries.\n\n    Returns:\n      A str for the URL in the link with a rel matching the POST type.\n    \"\"\"\n    return self.find_url('http://schemas.google.com/g/2005#post')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37504
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID ID (LIT )\n"
    },
    {
        "code": "\ndef get_post_link(self):\n    return self.get_link('http://schemas.google.com/g/2005#post')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37505
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (LIT or \n"
    },
    {
        "code": "\ndef find_acl_link(self):\n    return self.find_url(\n        'http://schemas.google.com/acl/2007#accessControlList')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 37506
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (\n    LIT )\n"
    },
    {
        "code": "\ndef get_acl_link(self):\n    return self.get_link(\n        'http://schemas.google.com/acl/2007#accessControlList')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 37507
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\nas     return ID .ID (\n    LIT )\n"
    },
    {
        "code": "\ndef find_feed_link(self):\n    return self.find_url('http://schemas.google.com/g/2005#feed')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37508
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ncontinue def ID (ID ):\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef get_feed_link(self):\n    return self.get_link('http://schemas.google.com/g/2005#feed')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37509
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID :\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef find_previous_link(self):\n    return self.find_url('previous')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 37510
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return as ID .ID (LIT )\n"
    },
    {
        "code": "\ndef get_previous_link(self):\n    return self.get_link('previous')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37511
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "or def ID (ID ):\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef get_xml_blob(self):\n    \"\"\"Returns the XML blob as an atom.core.XmlElement.\n\n    Returns:\n      An XmlElement representing the blob's XML, or None if no\n      blob was set.\n    \"\"\"\n    if self._other_elements:\n        return self._other_elements[0]\n    else:\n        return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37512
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID :\n        return ID .ID [LIT ]\n    else :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID :await return ID .ID [LIT ]\n    else :\n        return ID \n"
    },
    {
        "code": "\ndef set_xml_blob(self, blob):\n    # Erase any existing extension_elements, clears the child nodes from the\n    # extendedProperty.\n    if isinstance(blob, atom.core.XmlElement):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37513
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID .ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID except (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID .ID .ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef get_id(self):\n    if self.id is not None and self.id.text is not None:\n        return self.id.text.strip()\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37514
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID and ID .ID .ID is not ID :\n        return ID .ID .ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is not ID and .ID .ID is not ID :\n        return ID .ID .ID .ID ()\n    return ID \n"
    },
    {
        "code": "\ndef is_media(self):\n    if self.find_media_edit_link():\n        return True\n    return False\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37515
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ():\n        return LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (lambda ):\n    if ID .ID ():\n        return LIT \n    return LIT \n"
    },
    {
        "code": "\ndef find_media_link(self):\n    \"\"\"Returns the URL to the media content, if the entry is a media entry.\n    Otherwise returns None.\n    \"\"\"\n    if self.is_media():\n        return self.content.src\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37516
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID ():\n        return ID .ID .ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID (:\n        return ID .ID .ID \n    return ID \n"
    },
    {
        "code": "\ndef get_id(self):\n    if self.id is not None and self.id.text is not None:\n        return self.id.text.strip()\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 89,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37517
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID and ID .ID .ID is not ID :\n        return ID .ID .ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is not ID and ID .ID .ID is not ID :\n        return ID .ID ..ID ()\n    return ID \n"
    },
    {
        "code": "\ndef get_generator(self):\n    if self.generator and self.generator.text:\n        return self.generator.text.strip()\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 37518
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID and ID .ID .ID :\n        return ID .ID .ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID and ID .ID .ID :\n        return ID .ID .ID .ID ()\n        !=return ID \n"
    },
    {
        "code": "\ndef add_insert(self, entry, batch_id_string=None):\n    \"\"\"Add an insert request to the operations in this batch request feed.\n\n    If the entry doesn't yet have an operation or a batch id, these will\n    be set to the insert operation and a batch_id specified as a parameter.\n\n    Args:\n      entry: BatchEntry The entry which will be sent in the batch feed as an\n          insert request.\n      batch_id_string: str (optional) The batch ID to be used to reference\n          this batch operation in the results feed. If this parameter is None,\n          the current length of the feed's entry array will be used as a\n          count. Note that batch_ids should either always be specified or\n          never, mixing could potentially result in duplicate batch ids.\n    \"\"\"\n    self.add_batch_entry(entry=entry, batch_id_string=batch_id_string,\n        operation_string=BATCH_INSERT)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37519
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef add_update(self, entry, batch_id_string=None):\n    \"\"\"Add an update request to the list of batch operations in this feed.\n\n    Sets the operation type of the entry to insert if it is not already set\n    and assigns the desired batch id to the entry so that it can be\n    referenced in the server's response.\n\n    Args:\n      entry: BatchEntry The entry which will be sent to the server as an\n          update (HTTP PUT) request. The item must have a valid atom id\n          so that the server knows which entry to replace.\n      batch_id_string: str (optional) The batch ID to be used to reference\n          this batch operation in the results feed. If this parameter is None,\n          the current length of the feed's entry array will be used as a\n          count. See also comments for AddInsert.\n    \"\"\"\n    self.add_batch_entry(entry=entry, batch_id_string=batch_id_string,\n        operation_string=BATCH_UPDATE)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37520
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =,\n    ID =ID )\n"
    },
    {
        "code": "\ndef add_delete(self, url_string=None, entry=None, batch_id_string=None):\n    \"\"\"Adds a delete request to the batch request feed.\n\n    This method takes either the url_string which is the atom id of the item\n    to be deleted, or the entry itself. The atom id of the entry must be\n    present so that the server knows which entry should be deleted.\n\n    Args:\n      url_string: str (optional) The URL of the entry to be deleted. You can\n         find this URL in the text member of the atom id for an entry.\n      entry: BatchEntry (optional) The entry to be deleted.\n      batch_id_string: str (optional)\n\n    Raises:\n      MissingRequiredParameters: Raised if neither a url_string nor an entry\n          are provided in the request.\n    \"\"\"\n    self.add_batch_entry(entry=entry, id_url_string=url_string,\n        batch_id_string=batch_id_string, operation_string=BATCH_DELETE)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 81,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37521
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    ID =ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    =ID ,ID =ID )\n"
    },
    {
        "code": "\ndef add_query(self, url_string=None, entry=None, batch_id_string=None):\n    \"\"\"Adds a query request to the batch request feed.\n\n    This method takes either the url_string which is the query URL\n    whose results will be added to the result feed. The query URL will\n    be encapsulated in a BatchEntry, and you may pass in the BatchEntry\n    with a query URL instead of sending a url_string.\n\n    Args:\n      url_string: str (optional)\n      entry: BatchEntry (optional)\n      batch_id_string: str (optional)\n\n    Raises:\n      MissingRequiredParameters\n    \"\"\"\n    self.add_batch_entry(entry=entry, id_url_string=url_string,\n        batch_id_string=batch_id_string, operation_string=BATCH_QUERY)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 37522
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    ID =ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    LIT \n    ID .ID (ID =ID ,ID =ID ,\n    yield ID =ID ,ID =ID )\n"
    },
    {
        "code": "\ndef find_batch_link(self):\n    return self.find_url('http://schemas.google.com/g/2005#batch')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/build/lib/gdata/data.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37523
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.es = gdata.apps.emailsettings.service.EmailSettingsService(\n      email=admin_email, password=admin_password, domain=domain)\n    self.es.ProgrammaticLogin()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37524
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID .ID .ID (\n    ID =ID ,ID =ID ,ID =ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID /(ID ):\n    ID .ID =ID .ID .ID .ID .ID (\n    ID =ID ,ID =ID ,ID =ID )\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef testCreateLabel(self):\n    result = self.es.CreateLabel(username, label='New label!!!')\n    self.assertEquals(result['label'], 'New label!!!')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 37525
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    else ID .ID (ID [LIT ],LIT )\n"
    },
    {
        "code": "\ndef testCreateFilter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37526
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef testCreateSendAsAlias(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 37527
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef testUpdateWebClipSettings(self):\n    result = self.es.UpdateWebClipSettings(username, enable=True)\n    self.assertEquals(result['enable'], 'true')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37528
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n"
    },
    {
        "code": "\ndef testUpdateForwarding(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37529
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef testUpdatePop(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37530
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef testUpdateImap(self):\n    result = self.es.UpdateImap(username, enable=True)\n    self.assertEquals(result['enable'], 'true')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37531
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT =\n    ID .ID (ID [LIT ],LIT )\n"
    },
    {
        "code": "\ndef testUpdateVacation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37532
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while pass \n"
    },
    {
        "code": "\ndef testUpdateSignature(self):\n    result = self.es.UpdateSignature(username, signature='Signature')\n    self.assertEquals(result['signature'], 'Signature')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37533
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n    ]"
    },
    {
        "code": "\ndef testUpdateLanguage(self):\n    result = self.es.UpdateLanguage(username, language='fr')\n    self.assertEquals(result['language'], 'fr')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37534
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )ID .ID (ID [LIT ],LIT )\n"
    },
    {
        "code": "\ndef testUpdateGeneral(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/apps/emailsettings/service_test.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37535
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    yield pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.profile_entry = gdata.health.ProfileEntryFromString(\n        test_data.HEALTH_PROFILE_ENTRY_DIGEST)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37536
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .ID yield \n"
    },
    {
        "code": "\ndef testToAndFromStringWithData(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37537
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    finally pass \n"
    },
    {
        "code": "\ndef testGetResultsTextFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37538
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n]ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testGetMedicationNameFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37539
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "(\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testGetProblemCodeValueFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37540
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID yield :\n    pass \n"
    },
    {
        "code": "\ndef testGetGetImmunizationActorIdFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37541
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID nonlocal :\n    pass \n"
    },
    {
        "code": "\ndef testGetGetProceduresNameFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37542
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )from \n    pass \n"
    },
    {
        "code": "\ndef testGetAlertsFromCcr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37543
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):def \n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.entry = gdata.health.ProfileListEntryFromString(\n        test_data.HEALTH_PROFILE_LIST_ENTRY)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37544
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .ID )\n",
        "wrong_code": "\n)ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .ID )\n"
    },
    {
        "code": "\ndef testToAndFromString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37545
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.feed = gdata.health.ProfileFeedFromString(\n        test_data.HEALTH_PROFILE_FEED)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37546
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID (\n    ID .!)\n"
    },
    {
        "code": "\ndef testToAndFromString(self):\n    for an_entry in self.feed.entry:\n        pass\n    for an_entry in new_profile_feed.entry:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37547
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID :\n        pass \n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\nID (ID ):\n    for ID in ID .ID .ID :\n        pass \n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef testConvertActualData(self):\n    for an_entry in self.feed.entry:\n        self.assert_(an_entry.ccr is not None)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 37548
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID :\n        ID .ID (ID .ID is not ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .=ID .ID :\n        ID .ID (ID .ID is not ID )\n"
    },
    {
        "code": "\ndef testHealthQueryToString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37549
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    def "
    },
    {
        "code": "\ndef testH9QueryToString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37550
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "def \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testDigestParam(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37551
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    import pass \n"
    },
    {
        "code": "\ndef testHealthProfileListQueryToString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37552
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "=\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testH9ProfileListQueryToString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-build/python-libs/gdata/tests/gdata_tests/health_test.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37553
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):await \n    pass \n"
    },
    {
        "code": "\ndef __init__(self, localWindow = 0, localMaxPacket = 0,\n                   remoteWindow = 0, remoteMaxPacket = 0,\n                   conn = None, data=None, avatar = None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37554
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,\nID =LIT ,ID =LIT ,\nID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID =LIT ,ID =LIT ,\nID =LIT ,ID =LIT ,\nID =ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return '<SSHChannel %s (lw %i rw %i)>' % (self.name,\n            self.localWindowLeft, self.remoteWindowLeft)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37555
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,\n    ID .ID ,:.ID )\n"
    },
    {
        "code": "\ndef logPrefix(self):\n    return \"SSHChannel %s (%s) on %s\" % (self.name, id,\n            self.conn.logPrefix())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37556
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID ,\n    ID .ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID ,\n    ID .ID .except ())\n"
    },
    {
        "code": "\ndef channelOpen(self, specificData):\n    \"\"\"\n        Called when the channel is opened.  specificData is any data that the\n        other side sent us when opening the channel.\n\n        @type specificData: C{str}\n        \"\"\"\n    log.msg('channel open')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37557
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "nonlocal \ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef openFailed(self, reason):\n    \"\"\"\n        Called when the the open failed for some reason.\n        reason.desc is a string descrption, reason.code the the SSH error code.\n\n        @type reason: L{error.ConchError}\n        \"\"\"\n    log.msg('other side refused open\\nreason: %s'% reason)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 37558
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (yield LIT %ID )\n"
    },
    {
        "code": "\ndef requestReceived(self, requestType, data):\n    if f:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 37559
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID for :\n        pass \n"
    },
    {
        "code": "\ndef dataReceived(self, data):\n    \"\"\"\n        Called when we receive data.\n\n        @type data: C{str}\n        \"\"\"\n    log.msg('got data %s'%repr(data))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 37560
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT %ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID lambda .ID (LIT %ID (ID ))\n"
    },
    {
        "code": "\ndef extReceived(self, dataType, data):\n    \"\"\"\n        Called when we receive extended data (usually standard error).\n\n        @type dataType: C{int}\n        @type data:     C{str}\n        \"\"\"\n    log.msg('got extended data %s %s'%(dataType, repr(data)))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 37561
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID (LIT %(ID ,ID (ID )))\n",
        "wrong_code": "\ndef ID (ID ,ID -ID ):\n    LIT \n    ID .ID (LIT %(ID ,ID (ID )))\n"
    },
    {
        "code": "\ndef eofReceived(self):\n    \"\"\"\n        Called when the other side will send no more data.\n        \"\"\"\n    log.msg('remote eof')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37562
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT LIT ID .ID (LIT )\n"
    },
    {
        "code": "\ndef closeReceived(self):\n    \"\"\"\n        Called when the other side has closed the channel.\n        \"\"\"\n    log.msg('remote close')\n    self.loseConnection()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37563
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT for \n    ID .ID ()\n"
    },
    {
        "code": "\ndef closed(self):\n    \"\"\"\n        Called when the channel is closed.  This means that both our side and\n        the remote side have closed the channel.\n        \"\"\"\n    log.msg('closed')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37564
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .(LIT )\n"
    },
    {
        "code": "\ndef writeSequence(self, data):\n    \"\"\"\n        Part of the Transport interface.  Write a list of strings to the\n        channel.\n\n        @type data: C{list} of C{str}\n        \"\"\"\n    self.write(''.join(data))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 37565
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    )ID .ID (LIT .ID (ID ))\n"
    },
    {
        "code": "\ndef loseConnection(self):\n    \"\"\"\n        Close the channel if there is no buferred data.  Otherwise, note the\n        request and return.\n        \"\"\"\n    self.closing = 1\n    if not self.buf and not self.extBuf:\n        self.conn.sendClose(self)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37566
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =LIT \n    if not ID .ID and not ID .ID :\n        ID .ID .ID (ID )\n",
        "wrong_code": "except \ndef ID (ID ):\n    LIT \n    ID .ID =LIT \n    if not ID .ID and not ID .ID :\n        ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef getPeer(self):\n    \"\"\"\n        Return a tuple describing the other side of the connection.\n\n        @rtype: C{tuple}\n        \"\"\"\n    return('SSH', )+self.conn.transport.getPeer()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 37567
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return (LIT ,)+ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return (LIT ,)+ID .ID .return ID .ID ()\n"
    },
    {
        "code": "\ndef getHost(self):\n    \"\"\"\n        Return a tuple describing our side of the connection.\n\n        @rtype: C{tuple}\n        \"\"\"\n    return('SSH', )+self.conn.transport.getHost()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37568
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return (LIT ,)+ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID )raise :\n    LIT \n    return (LIT ,)+ID .ID .ID .ID ()\n"
    },
    {
        "code": "\ndef stopWriting(self):\n    \"\"\"\n        Called when the remote buffer is full, as a hint to stop writing.\n        This can be ignored, but it can be helpful.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37569
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\nawait ID (ID ):\n    LIT \n"
    },
    {
        "code": "\ndef startWriting(self):\n    \"\"\"\n        Called when the remote buffer has more room, as a hint to continue\n        writing.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/conch/ssh/channel.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 37570
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\nLIT     LIT \n"
    },
    {
        "code": "\ndef __init__(self):\n    \"\"\"\n        Override init to set the C{useGtk} flag.\n        \"\"\"\n    gtk2reactor.Gtk2Reactor.__init__(self, useGtk=False)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/internet/glib2reactor.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 37571
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID ,ID =for LIT )\n"
    },
    {
        "code": "\n\n\ndef install():\n    \"\"\"\n    Configure the twisted mainloop to be run inside the glib mainloop.\n    \"\"\"\n    reactor = Glib2Reactor()\n    from twisted.internet.main import installReactor\n    installReactor(reactor)\n    \n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/internet/glib2reactor.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37572
        },
        "correct_code": "\n\n\ndef ID ():\n    LIT \n    ID =ID ()\n    from ID .ID .ID import ID \n    ID (ID )\n\n",
        "wrong_code": "\n\n\ndef ID ():\n    LIT \n    ID =ID [)\n    from ID .ID .ID import ID \n    ID (ID )\n\n"
    },
    {
        "code": "def test_insertImages(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/lore/test/test_lmath.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37573
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (in ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    nntp.NNTPClient.__init__(self)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37574
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "def ID (ID ):\n:    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef assertEquals(self, foo, bar):\n    if foo != bar: raise AssertionError(\"%r != %r!\" % (foo, bar))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37575
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=ID :raise ID (LIT %(ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=ID :raise ID (LIT %(ID ,ID ))!="
    },
    {
        "code": "\ndef connectionMade(self):\n    nntp.NNTPClient.connectionMade(self)\n    self.fetchSubscriptions()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37576
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .as ()\n"
    },
    {
        "code": "\n\ndef gotSubscriptions(self, subscriptions):\n    self.assertEquals(len(subscriptions), len(SUBSCRIPTIONS))\n    for s in subscriptions:\n        assert s in SUBSCRIPTIONS\n\n    self.fetchGroups()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37577
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ),ID (ID ))\n    for ID in ID :\n        assert ID in ID \n\n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID (ID global ,ID (ID ))\n    for ID in ID :\n        assert ID in ID \n\n    ID .ID ()\n"
    },
    {
        "code": "\ndef gotAllGroups(self, info):\n    self.assertEquals(info[0], ALL_GROUPS[0])\n    \n    self.fetchGroup('alt.test.nntp')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 37578
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID [LIT ],ID [LIT ])\n\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID [LIT ],ID [LIT ])pass \n\n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef getAllGroupsFailed(self, error):\n    raise AssertionError(\"fetchGroups() failed: %s\" % (error,))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37579
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n",
        "wrong_code": "\n\npass def ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n"
    },
    {
        "code": "\n\ndef gotGroup(self, info):\n    self.assertEquals(len(info), 6)\n    self.assertEquals(info, GROUP)\n    \n    self.postArticle(POST_STRING)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37580
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ),LIT )\n    ID .ID (ID ,ID )\n\n    ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ),LIT )\n    ID .ID (ID ,ID )\n\n    ID .elif (ID )\n"
    },
    {
        "code": "\n\ndef getSubscriptionsFailed(self, error):\n    raise AssertionError(\"fetchSubscriptions() failed: %s\" % (error,))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37581
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %await ID ,))\n"
    },
    {
        "code": "\n\ndef getGroupFailed(self, error):\n    raise AssertionError(\"fetchGroup() failed: %s\" % (error,))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37582
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n",
        "wrong_code": "\n\ndef ID (,ID ):\n    raise ID (LIT %(ID ,))\n"
    },
    {
        "code": "\n\ndef postFailed(self, error):\n    raise AssertionError(\"postArticle() failed: %s\" % (error,))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37583
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n",
        "wrong_code": "\n\ndef ID (ID ,ID )\n    raise ID (LIT %(ID ,))\n"
    },
    {
        "code": "\n\ndef postedOk(self):\n    self.fetchArticle(1)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37584
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID break LIT )\n"
    },
    {
        "code": "\n\ndef gotArticle(self, info):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37585
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID :\n    pass \n"
    },
    {
        "code": "\n\ndef getArticleFailed(self, error):\n    raise AssertionError(\"fetchArticle() failed: %s\" % (error,))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37586
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(ID ,))\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    raise ID (LIT %(.,))\n"
    },
    {
        "code": "def setUp(self):\n    \n    for s in SUBSCRIPTIONS:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37587
        },
        "correct_code": "def ID (ID ):\n\n    for ID in ID :\n        pass \n",
        "wrong_code": "def ID )ID ):\n\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef testLoopback(self):\n    return loopback.loopbackAsync(self.server, self.client)\n\n    # XXX This test is woefully incomplete.  It tests the single\n    # most common code path and nothing else.  Expand it and the\n    # test fairy will leave you a surprise.\n\n    #         reactor.iterate(1) # fetchGroups()\n    #         reactor.iterate(1) # fetchGroup()\n    #         reactor.iterate(1) # postArticle()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/news/test/test_nntp.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37588
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID .ID ,ID .ID )\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):pass     return ID .ID (ID .ID ,ID .ID )\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n"
    },
    {
        "code": "\n\ndef getWarningMethod():\n    \"\"\"\n    Return the warning method currently used to record deprecation warnings.\n    \"\"\"\n    return warn\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37589
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    return ID \n",
        "wrong_code": "class \n\ndef ID ():\n    LIT \n    return ID \n"
    },
    {
        "code": "\n\n\ndef setWarningMethod(newMethod):\n    \"\"\"\n    Set the warning method to use to record deprecation warnings.\n\n    The callable should take message, category and stacklevel. The return\n    value is ignored.\n    \"\"\"\n    global warn\n    warn = newMethod\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 3,
            "fix_type": "delete",
            "id": 37590
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    LIT \n    global ID \n    ID =ID \n",
        "wrong_code": "\n\n\nas def ID (ID ):\n    LIT \n    global ID \n    ID =ID \n"
    },
    {
        "code": "\n\n\ndef _getDeprecationDocstring(version):\n    return \"Deprecated in %s.\" % getVersionString(version)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37591
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    return LIT %ID (ID )\n",
        "wrong_code": "\n\n\ndef ID (ID ):\nbreak     return LIT %ID (ID )\n"
    },
    {
        "code": "\n\n\ndef _getDeprecationWarningString(fqpn, version, format=None):\n    if format is None:\n        format = DEPRECATION_WARNING_FORMAT\n    return format % {\n        'fqpn': fqpn,\n        'version': getVersionString(version)}\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37592
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ,ID =ID ):\n    if ID is ID :\n        ID =ID \n    return ID %{\n    LIT :ID ,\n    LIT :ID (ID )}\n",
        "wrong_code": "\n\n\ndef ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        ID =ID \n    return ID %{\n    LIT :ID ,\n    LIT :ID (ID )}\n"
    },
    {
        "code": "\n\n\ndef getDeprecationWarningString(callableThing, version, format=None):\n    \"\"\"\n    Return a string indicating that the callable was deprecated in the given\n    version.\n\n    @type callableThing: C{callable}\n    @param callableThing: Callable object to be deprecated\n\n    @type version: L{twisted.python.versions.Version}\n    @param version: Version that C{fqpn} was deprecated in\n\n    @type format: C{str}\n    @param format: A user-provided format to interpolate warning values into,\n        or L{DEPRECATION_WARNING_FORMAT} if C{None} is given\n\n    @rtype: C{str}\n    @return: A textual description of the deprecation\n    \"\"\"\n    return _getDeprecationWarningString(\n        _fullyQualifiedName(callableThing), version, format)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37593
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    return ID (\n    ID (ID ),ID ,ID )\n",
        "wrong_code": "\n\nfrom \ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    return ID (\n    ID (ID ),ID ,ID )\n"
    },
    {
        "code": "\ndef deprecatedFunction(*args, **kwargs):\n    warn(\n        warningString,\n        DeprecationWarning,\n        stacklevel=2)\n    return function(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "*",
            "id": 37594
        },
        "correct_code": "\ndef ID (*ID ,**ID ):\n    ID (\n    ID ,\n    ID ,\n    ID =LIT )\n    return ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (:ID ,**ID ):\n    ID (\n    ID ,\n    ID ,\n    ID =LIT )\n    return ID (*ID ,**ID )\n"
    },
    {
        "code": "def deprecationDecorator(function):\n\n    def deprecatedFunction(*args, **kwargs):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 37595
        },
        "correct_code": "def ID (ID ):\n\n    def ID (*ID ,**ID ):\n        pass \n",
        "wrong_code": "def ID (ID ):\n\n    def ID (return *ID ,**ID ):\n        pass \n"
    },
    {
        "code": "\n\n\ndef deprecated(version):\n    def deprecationDecorator(function):\n\n        def deprecatedFunction(*args, **kwargs):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37596
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    def ID (ID ):\n\n        def ID (*ID ,**ID ):\n            pass \n",
        "wrong_code": "\n\nis \ndef ID (ID ):\n    def ID (ID ):\n\n        def ID (*ID ,**ID ):\n            pass \n"
    },
    {
        "code": "def __init__(self, module):\n    object.__setattr__(self, '_module', module)\n    object.__setattr__(self, '_deprecatedAttributes', {})\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 37597
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT ,ID )\n    ID .ID (ID ,LIT ,{})\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .with ID (ID ,LIT ,ID )\n    ID .ID (ID ,LIT ,{})\n"
    },
    {
        "code": "\n\ndef __repr__(self):\n    \"\"\"\n        Get a string containing the type of the module proxy and a\n        representation of the wrapped module object.\n        \"\"\"\n    _module = object.__getattribute__(self, '_module')\n    return '<%s module=%r>' % (\n        type(self).__name__,\n        _module)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37598
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID ,LIT )\n    return LIT %(\n    ID (ID ).ID ,\n    ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID ID .ID (ID ,LIT )\n    return LIT %(\n    ID (ID ).ID ,\n    ID )\n"
    },
    {
        "code": "\n\ndef __setattr__(self, name, value):\n    \"\"\"\n        Set an attribute on the wrapped module object.\n        \"\"\"\n    _module = object.__getattribute__(self, '_module')\n    setattr(_module, name, value)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37599
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =ID .ID (ID ,LIT )\n    ID (ID ,ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =ID .ID (ID ,LIT lambda \n    ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\n\ndef __getattribute__(self, name):\n    if getter is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37600
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID continue ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, module, name, version, message):\n    self.version = version\n    self.message = message\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37601
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =import \n    ID .ID =ID \n"
    },
    {
        "code": "\n\ndef get(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37602
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass if "
    },
    {
        "code": "\n\n\ndef _deprecateAttribute(proxy, name, version, message):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 3,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37603
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n\n!ID (ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\n\ndef deprecatedModuleAttribute(version, message, moduleName, name):\n    if not isinstance(module, _ModuleProxy):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/python/deprecate.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37604
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\n\ndef ID (ID ,ID ,\n,ID ):\n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, service):\n    self.service = service\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/runner/inetd.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37605
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .not =ID \n"
    },
    {
        "code": "def jellyFor(jellier):\n    \"\"\"\n        Jelly myself for jellier.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/spread/interfaces.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 37606
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (ID ):\n    LIT \n!"
    },
    {
        "code": "def unjellyFor(jellier, jellyList):\n    \"\"\"\n        Unjelly myself for the jellier.\n\n        @param jellier: A stateful object which exists for the lifetime of a\n        single call to L{unjelly}.\n\n        @param jellyList: The C{list} which represents the jellied state of the\n        object to be unjellied.\n\n        @return: The object which results from unjellying.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/spread/interfaces.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37607
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "ID (ID ,ID ):\n    LIT \n"
    },
    {
        "code": "def requestAvatar(self, avatarId, mind, *interfaces):\n    return sip.IContact, None, lambda: None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37608
        },
        "correct_code": "def ID (ID ,ID ,ID ,*ID ):\n    return ID .ID ,ID ,lambda :ID \n",
        "wrong_code": "ID (ID ,ID ,ID ,*ID ):\n    return ID .ID ,ID ,lambda :ID \n"
    },
    {
        "code": "def setUp(self):\n    self.l = []\n    self.parser = sip.MessagesParser(self.l.append)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37609
        },
        "correct_code": "def ID (ID ):\n    ID .ID =[]\n    ID .ID =ID .ID (ID .ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =[]\n    ID .ID =ID .ID (ID .ID .)\n"
    },
    {
        "code": "\ndef feedMessage(self, message):\n    self.parser.dataReceived(message)\n    self.parser.dataDone()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 37610
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n    ID .ID .ID ()\nwith "
    },
    {
        "code": "\ndef validateMessage(self, m, method, uri, headers, body):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37611
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n-ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef testSimple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 37612
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef testTwoMessages(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37613
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "lambda \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testGarbage(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37614
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID [):\n    pass \n"
    },
    {
        "code": "\ndef testThreeInOne(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 37615
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    /\n"
    },
    {
        "code": "\ndef testShort(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37616
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass pass "
    },
    {
        "code": "\ndef testSimpleResponse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37617
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID lambda ID ):\n    pass \n"
    },
    {
        "code": "\ndef feedMessage(self, message):\n    for c in message:\n        self.parser.dataReceived(c)\n    self.parser.dataDone()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 75,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37618
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID :\n        ID .ID .ID (ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID :\n        ID .ID .ID (ID )\n    ID .ID .if ()\n"
    },
    {
        "code": "\ndef testRequest(self):\n    r = sip.Request(\"INVITE\", \"sip:foo\")\n    r.addHeader(\"foo\", \"bar\")\n    self.assertEquals(\n        r.toString(),\n        \"INVITE sip:foo SIP/2.0\\r\\nFoo: bar\\r\\n\\r\\n\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37619
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .ID (LIT ,LIT )\n    ID .ID (\n    ID .ID (),\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .is (LIT ,LIT )\n    ID .ID (\n    ID .ID (),\n    LIT )\n"
    },
    {
        "code": "\ndef testResponse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37620
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n/ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testStatusCode(self):\n    r = sip.Response(200)\n    self.assertEquals(r.toString(), \"SIP/2.0 200 OK\\r\\n\\r\\n\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37621
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID (),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID .ID (LIT )\n    ID .ID (ID .ID (),LIT )\n"
    },
    {
        "code": "\ndef checkRoundtrip(self, v):\n    s = v.toString()\n    self.assertEquals(s, sip.parseViaHeader(s).toString())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 69,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37622
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID (ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID (ID ).ID ))\n"
    },
    {
        "code": "\ndef testExtraWhitespace(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37623
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_complex(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 37624
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef finally ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_simple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37625
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef testSimpler(self):\n    v = sip.Via(\"example.com\")\n    self.checkRoundtrip(v)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 37626
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (if ID )\n"
    },
    {
        "code": "\n\ndef test_deprecatedRPort(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 37627
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\nclass     pass \n"
    },
    {
        "code": "\n\ndef test_rport(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37628
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID continue (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_rportValue(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 37629
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass from \n"
    },
    {
        "code": "\n\ndef testNAT(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37630
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nlambda def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_unknownParams(self):\n   \"\"\"\n       Parsing and serializing Via headers with unknown parameters should work.\n       \"\"\"\n   s = \"SIP/2.0/UDP example.com:5060;branch=a12345b;bogus;pie=delicious\"\n   v = sip.parseViaHeader(s)\n   self.assertEqual(v.toString(), s)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37631
        },
        "correct_code": "\n\ndef ID (ID ):\n   LIT \n   ID =LIT \n   ID =ID .ID (ID )\n   ID .ID (ID .ID (),ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n   LIT \n   ID =LIT \n   ID =ID .ID (ID )\n   ID .ID (or .ID (),ID )\n"
    },
    {
        "code": "\ndef testRoundtrip(self):\n    for url in [\n        \"sip:j.doe@big.com\",\n        \"sip:j.doe:secret@big.com;transport=tcp\",\n        \"sip:j.doe@big.com?subject=project\",\n        \"sip:example.com\",\n        ]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37632
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT ,\n    ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in [\n    LIT ,\n    LIT ,\n    LIT ,\n    ,\n    ]:\n        pass \n"
    },
    {
        "code": "def getAddress(self, logicalURL):\n    return defer.succeed(sip.URL(\"server.com\", port=5060))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 37633
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT ,ID =LIT ))\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID .ID (!ID .ID (LIT ,ID =LIT ))\n"
    },
    {
        "code": "def getAddress(self, logicalURL):\n    return defer.fail(LookupError())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 37634
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID (ID ())\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID .ID (ID ())\n    is "
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 37635
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass (\n"
    },
    {
        "code": "\ndef testRequestForward(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37636
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef testReceivedRequestForward(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37637
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef testResponseWrongVia(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37638
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef testResponseForward(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 37639
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass class \n"
    },
    {
        "code": "\ndef testReceivedResponseForward(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37640
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testResponseToUs(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37641
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )None :\n    pass \n"
    },
    {
        "code": "\ndef testLoop(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37642
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):is     pass \n"
    },
    {
        "code": "\ndef testCantForwardRequest(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37643
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):for \n    pass \n"
    },
    {
        "code": "\ndef testCantForwardResponse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37644
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID assert :\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37645
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    for d, uri in self.registry.users.values():\n        d.cancel()\n    del self.proxy\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 37646
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID .ID .ID ():\n        ID .ID ()\n    del ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID .ID ID .ID ():\n        ID .ID ()\n    del ID .ID \n"
    },
    {
        "code": "\ndef register(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37647
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef unregister(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37648
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):while     pass \n"
    },
    {
        "code": "\ndef testRegister(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37649
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testUnregister(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37650
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n!def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef addPortal(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 37651
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass :\n"
    },
    {
        "code": "\ndef testFailedAuthentication(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37652
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef if (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_basicAuthentication(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37653
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )is :\n    pass \n"
    },
    {
        "code": "\n\ndef test_failedBasicAuthentication(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 37654
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \n/"
    },
    {
        "code": "\n\ndef testWrongDomainRegister(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37655
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nNone def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testWrongToDomainRegister(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37656
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID await ):\n    pass \n"
    },
    {
        "code": "\ndef testWrongDomainLookup(self):\n    return d\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37657
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID return "
    },
    {
        "code": "\ndef testNoContactLookup(self):\n    return d\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37658
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (continue ID ):\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self):\n    sip.Base.__init__(self)\n    self.received = []\n    self.deferred = defer.Deferred()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 37659
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID =[]\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID is =[]\n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\ndef handle_response(self, response, addr):\n    self.received.append(response)\n    self.deferred.callback(self.received)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37660
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID .ID (ID )\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID .ID (ID )\n    ID ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37661
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):as \n    pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    for d, uri in self.registry.users.values():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37662
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID .ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID .ID .():\n        pass \n"
    },
    {
        "code": "def check(received):\n    self.assertEquals(len(received), 1)\n    r = received[0]\n    self.assertEquals(r.code, 200)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37663
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID (ID ),LIT )\n    ID =ID [LIT ]\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID (ID ),LIT \n    ID =ID [LIT ]\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef testRegister(self):\n    def check(received):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37664
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    raise ID (ID ):\n        pass \n"
    },
    {
        "code": "def check(received):\n    self.assertEquals(len(received), 1)\n    r = received[0]\n    self.assertEquals(r.code, 200)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37665
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID (ID ),LIT )\n    ID =ID [LIT ]\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .(ID (ID ),LIT )\n    ID =ID [LIT ]\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_amoralRPort(self):\n    def check(received):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37666
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID pass :\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def generateNonce(self):\n    return '92956076410767313901322208775'\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37667
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "is def ID (ID ):\n    return LIT \n"
    },
    {
        "code": "def generateOpaque(self):\n    return '1674186428'\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37668
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ):LIT \n    return LIT \n"
    },
    {
        "code": "\ndef _cbReg(self, reg):\n    if 3600 < reg.secondsToExpiry or reg.secondsToExpiry < 3598:\n        raise RuntimeError(\n            \"bad seconds to expire: %s\" % reg.secondsToExpiry)\n    reg.secondsToExpiry = 3600\n    return reg\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 94,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37669
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if LIT <ID .ID or ID .ID <LIT :\n        raise ID (\n        LIT %ID .ID )\n    ID .ID =LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if LIT <ID .ID or ID .ID <LIT :\n        raise ID (\n        LIT %ID .ID global \n    ID .ID =LIT \n    return ID \n"
    },
    {
        "code": "\ndef getRegistrationInfo(self, uri):\n    d = sip.InMemoryRegistry.getRegistrationInfo(self, uri)\n    return d.addCallback(self._cbReg)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37670
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID ,ID )\n    return ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID ,ID \n    return ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef registerAddress(self, domainURL, logicalURL, physicalURL):\n    d = sip.InMemoryRegistry.registerAddress(\n        self, domainURL, logicalURL, physicalURL)\n    return d.addCallback(self._cbReg)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37671
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID .ID (\n    ID ,ID ,ID ,ID )\n    return ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID ID .ID .ID (\n    ID ,ID ,ID ,ID )\n    return ID .ID (ID .ID )\n"
    },
    {
        "code": "def setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 37672
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID lambda (ID ):\n    pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    for d, uri in self.registry.users.values():\n        d.cancel()\n    del self.proxy\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 37673
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID .ID .ID ():\n        ID .ID ()\n    del ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID ]ID .ID .ID ():\n        ID .ID ()\n    del ID .ID \n"
    },
    {
        "code": "\ndef testChallenge(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37674
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef =(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_deprecatedDigestCalcHA1(self):\n    \"\"\"\n        L{sip.DigestCalcHA1} is deprecated.\n        \"\"\"\n    self.callDeprecated(Version(\"Twisted\", 9, 0, 0),\n                        sip.DigestCalcHA1, '', '', '', '', '', '')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 37675
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),\n    ID .ID ,LIT ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\ndef     LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),\n    ID .ID ,LIT ,LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\n\ndef test_deprecatedDigestCalcResponse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 37676
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\nfor     pass \n"
    },
    {
        "code": "\ndef test_deprecatedBasicAuthorizer(self):\n    \"\"\"\n        L{sip.BasicAuthorizer} is deprecated.\n        \"\"\"\n    self.callDeprecated(Version(\"Twisted\", 9, 0, 0), sip.BasicAuthorizer)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 37677
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),ID .ID ID )\n"
    },
    {
        "code": "\n\ndef test_deprecatedDigestAuthorizer(self):\n    \"\"\"\n        L{sip.DigestAuthorizer} is deprecated.\n        \"\"\"\n    self.callDeprecated(Version(\"Twisted\", 9, 0, 0), sip.DigestAuthorizer)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 37678
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT LIT ,LIT ),ID .ID )\n"
    },
    {
        "code": "\n\ndef test_deprecatedDigestedCredentials(self):\n    \"\"\"\n        L{sip.DigestedCredentials} is deprecated.\n        \"\"\"\n    self.callDeprecated(Version(\"Twisted\", 9, 0, 0),\n                        sip.DigestedCredentials, '', {}, {})\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/test/test_sip.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 37679
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),\n    ID .ID ,LIT ,{},{})\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID (LIT ,LIT ,LIT ,LIT ),\n    finally ID .ID ,LIT ,{},{})\n"
    },
    {
        "code": "\ndef __init__(self):\n    self._calls = []\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37680
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID raise :\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef runcall(self, *args, **kwargs):\n    self._calls.append('runcall')\n    args[0](*args[1:], **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 37681
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (LIT )\n    ID [LIT ](*ID [LIT :],**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (==LIT )\n    ID [LIT ](*ID [LIT :],**ID )\n"
    },
    {
        "code": "\ndef __init__(self, stream=None, tbformat=None, rterrors=None,\n             publisher=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37682
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,\nID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID not ID ,ID =ID ,ID =ID ,ID =ID ,\nID =ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef startTest(self, method):\n    \"\"\"\n        Report the beginning of a run of a single test method\n        @param method: an object that is adaptable to ITestMethod\n        \"\"\"\n    self._calls.append('startTest')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37683
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .(LIT )\n"
    },
    {
        "code": "\n\ndef stopTest(self, method):\n    \"\"\"\n        Report the status of a single test method\n        @param method: an object that is adaptable to ITestMethod\n        \"\"\"\n    self._calls.append('stopTest')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 37684
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID ((ID ,ID ):\n    LIT \n    ID .ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef cleanupErrors(self, errs):\n    \"\"\"called when the reactor has been left in a 'dirty' state\n        @param errs: a list of L{twisted.python.failure.Failure}s\n        \"\"\"\n    self._calls.append('cleanupError')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37685
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (LIT in \n"
    },
    {
        "code": "\n\ndef addSuccess(self, test):\n    self._calls.append('addSuccess')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37686
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (,ID ):\n    ID .ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef done(self):\n    \"\"\"\n        Do nothing. These tests don't care about done.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37687
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n"
    },
    {
        "code": "def tearDown(self):\n    self.runner._tearDownLogFile()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37688
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "def ID (ID )del :\n    ID .ID .ID ()\n"
    },
    {
        "code": "\n\ndef test_empty(self):\n    \"\"\"\n        Empty test method, used by the other tests.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 37689
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\n\ndef try ID (ID ):\n    LIT \n"
    },
    {
        "code": "\n\ndef _getObservers(self):\n    return log.theLogPublisher.observers\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37690
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\n\ndef ID (ID :\n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef test_addObservers(self):\n    self.assertEqual(newCount, originalCount)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37691
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\n\nID (ID ):\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "def setUpLogFile():\n    oldSetUpLogFile()\n    l.append(self.runner._logFileObserver)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37692
        },
        "correct_code": "def ID ():\n    ID ()\n    ID .ID (ID .ID .ID )\n",
        "wrong_code": "def ID ():\n    ID ()\n    ID .ID return ID .ID .ID )\n"
    },
    {
        "code": "\n\ndef test_logFileAlwaysActive(self):\n    def setUpLogFile():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37693
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID )in :\n    def ID ():\n        pass \n"
    },
    {
        "code": "def setUpLogFile():\n    oldSetUpLogFile()\n    l.append(self.runner._logFileObject)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37694
        },
        "correct_code": "def ID ():\n    ID ()\n    ID .ID (ID .ID .ID )\n",
        "wrong_code": "def ID ()\n    ID ()\n    ID .ID (ID .ID .ID )\n"
    },
    {
        "code": "\n\ndef test_logFileGetsClosed(self):\n    def setUpLogFile():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 37695
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID ():=\n        pass \n"
    },
    {
        "code": "def setUp(self):\n    self.stream = StringIO.StringIO()\n    self.runner = runner.TrialRunner(CapturingReporter, stream=self.stream)\n    self.test = TestTrialRunner('test_empty')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 37696
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID (ID ,ID =ID .ID )\n    ID .ID =ID (LIT )\n",
        "wrong_code": "def ID (ID .):\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID (ID ,ID =ID .ID )\n    ID .ID =ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_publisher(self):\n    \"\"\"\n        The reporter constructed by L{runner.TrialRunner} is passed\n        L{twisted.python.log} as the value for the C{publisher} parameter.\n        \"\"\"\n    result = self.runner._makeResult()\n    self.assertIdentical(result._publisher, log)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37697
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID ()\n    ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .from ()\n    ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.test = TestTrialRunner('test_empty')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37698
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID =ID (LIT )\n"
    },
    {
        "code": "\n\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37699
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nelse \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef makeTestFixtures(self):\n    \"\"\"\n        Set C{self.test} and C{self.suite}, where C{self.suite} is an empty\n        TestSuite.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 37700
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\n\ndef ID (pass ID ):\n    LIT \n"
    },
    {
        "code": "\n\ndef test_empty(self):\n    \"\"\"\n        If there are no tests, the reporter should not receive any events to\n        report.\n        \"\"\"\n    result = self.runner.run(runner.TestSuite())\n    self.assertEqual(result._calls, [])\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37701
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (ID .ID ())\n    ID .ID (ID .ID ,[])\n",
        "wrong_code": "\n\ndef ID as (ID ):\n    LIT \n    ID =ID .ID .ID (ID .ID ())\n    ID .ID (ID .ID ,[])\n"
    },
    {
        "code": "\n\ndef test_singleCaseReporting(self):\n    \"\"\"\n        If we are running a single test, check the reporter starts, passes and\n        then stops the test during a dry run.\n        \"\"\"\n    result = self.runner.run(self.test)\n    self.assertEqual(result._calls, ['startTest', 'addSuccess', 'stopTest'])\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37702
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (ID .ID )\n    ID .ID (ID .ID ,[LIT ,LIT ,LIT ])\n",
        "wrong_code": "\n\ndef ](ID ):\n    LIT \n    ID =ID .ID .ID (ID .ID )\n    ID .ID (ID .ID ,[LIT ,LIT ,LIT ])\n"
    },
    {
        "code": "\n\ndef test_testsNotRun(self):\n    \"\"\"\n        When we are doing a dry run, the tests should not actually be run.\n        \"\"\"\n    self.runner.run(self.test)\n    self.assertEqual(self.log, [])\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37703
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID .ID )\n    ID .ID (ID .ID ,[])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID .ID )\n    ID .ID (.ID ,[])\n"
    },
    {
        "code": "def test_foo(test):\n    self.log.append('test_foo')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 37704
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID (LIT )\n    def "
    },
    {
        "code": "def makeTestFixtures(self):\n    class MockTest(unittest.TestCase):\n        def test_foo(test):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 37705
        },
        "correct_code": "def ID (ID ):\n    class ID (ID .ID ):\n        def ID (ID ):\n            pass \n",
        "wrong_code": "def ID (ID ):\n    class ID (ID .ID ):\n        def ID (ID ):\n\n"
    },
    {
        "code": "def test_foo(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37706
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID )+\n    pass \n"
    },
    {
        "code": "\n\n# XXX There should really be a general way to hook the plugin system\n# for tests.\ndef getPlugins(iface, *a, **kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37707
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,*ID ,**ID ):\n    pass \nfrom "
    },
    {
        "code": "def setUp(self):\n\n\n    # XXX There should really be a general way to hook the plugin system\n    # for tests.\n    def getPlugins(iface, *a, **kw):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 37708
        },
        "correct_code": "def ID (ID ):\n\n\n#COMMENT\n\n#COMMENT\n\n    def ID (ID ,*ID ,**ID ):\n        pass \n",
        "wrong_code": "def ID (ID ):\n\n\n#COMMENT\n\n#COMMENT\n\n    def ID (ID ,*ID ,**ID ):\n        import \n"
    },
    {
        "code": "\n\ndef tearDown(self):\n    plugin.getPlugins = self.original\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37709
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID .ID \n",
        "wrong_code": "\n\nis ID (ID ):\n    ID .ID =ID .ID \n"
    },
    {
        "code": "\n\ndef parseOptions(self, args):\n    self.config.parseOptions(args)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 37710
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n[    ID .ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef getRunner(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37711
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_runner_can_get_reporter(self):\n    runner = self.getRunner()\n    self.assertEqual(result, runner._makeResult().__class__)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37712
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID ().ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID ID ()\n    ID .ID (ID ,ID .ID ().ID )\n"
    },
    {
        "code": "\n\ndef test_runner_get_result(self):\n    result = runner._makeResult()\n    self.assertEqual(result.__class__, self.config['reporter'])\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 37713
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID .ID ,ID .ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID .ID ,ID .and ID [LIT ])\n"
    },
    {
        "code": "\n\ndef test_uncleanWarningsOffByDefault(self):\n    \"\"\"\n        By default Trial sets the 'uncleanWarnings' option on the runner to\n        False. This means that dirty reactor errors will be reported as\n        errors. See L{test_reporter.TestDirtyReactor}.\n        \"\"\"\n    self.parseOptions([])\n    runner = self.getRunner()\n    self.assertNotIsInstance(runner._makeResult(),\n                             reporter.UncleanWarningsReporterWrapper)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37714
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID ([])\n    ID =ID .ID ()\n    ID .ID (ID .ID (),\n    ID .ID )\n",
        "wrong_code": ",\ndef ID (ID ):\n    LIT \n    ID .ID ([])\n    ID =ID .ID ()\n    ID .ID (ID .ID (),\n    ID .ID )\n"
    },
    {
        "code": "\n\ndef test_getsUncleanWarnings(self):\n    \"\"\"\n        Specifying '--unclean-warnings' on the trial command line will cause\n        reporters to be wrapped in a device which converts unclean errors to\n        warnings.  See L{test_reporter.TestDirtyReactor} for implications.\n        \"\"\"\n    self.parseOptions(['--unclean-warnings'])\n    runner = self.getRunner()\n    self.assertIsInstance(runner._makeResult(),\n                          reporter.UncleanWarningsReporterWrapper)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37715
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID ([LIT ])\n    ID =ID .ID ()\n    ID .ID (ID .ID (),\n    ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT not ID .ID ([LIT ])\n    ID =ID .ID ()\n    ID .ID (ID .ID (),\n    ID .ID )\n"
    },
    {
        "code": "\n\ndef test_runner_working_directory(self):\n    self.parseOptions(['--temp-directory', 'some_path'])\n    runner = self.getRunner()\n    self.assertEquals(runner.workingDirectory, 'some_path')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37716
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID ([LIT ,LIT ])\n    ID =ID .ID ()\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\n\ndef ID (None ):\n    ID .ID ([LIT ,LIT ])\n    ID =ID .ID ()\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "def test_first(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 37717
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID in (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_second(self):\n    \"\"\"\n                Record the working directory for later analysis.\n                \"\"\"\n    where['record'] = os.getcwd()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37718
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT ID [LIT ]=ID .ID ()\n"
    },
    {
        "code": "def test_concurrent(self):\n    \"\"\"\n                Try to start another runner in the same working directory and\n                assert that it raises L{_WorkingDirectoryBusy}.\n                \"\"\"\n    self.assertRaises(\n        util._WorkingDirectoryBusy,\n        secondRunner.run, ConcurrentCase('test_failure'))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 37719
        },
        "correct_code": "def ID (ID ):\n    LIT \n    ID .ID (\n    ID .ID ,\n    ID .ID ,ID (LIT ))\n",
        "wrong_code": "def ID (ID ):\n    LIT \n    ID .ID (\n    ID .ID ,\n    ID .ID ,ID global (LIT ))\n"
    },
    {
        "code": "\ndef test_failure(self):\n    \"\"\"\n                Should not be called, always fails.\n                \"\"\"\n    self.fail(\"test_failure should never be called.\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37720
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID raise ID ):\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_runner_normal(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37721
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID break ):\n    pass \n"
    },
    {
        "code": "def get_debugger():\n    return debugger\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37722
        },
        "correct_code": "def ID ():\n    return ID \n",
        "wrong_code": "def ID ):\n    return ID \n"
    },
    {
        "code": "\n\ndef test_runner_debug(self):\n    def get_debugger():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37723
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID ((:\n        pass \n"
    },
    {
        "code": "def dummyRemove():\n    \"\"\"\n            Raise an C{OSError} to emulate the branch of L{runner._removeSafely}\n            in which path removal fails.\n            \"\"\"\n    raise OSError()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37724
        },
        "correct_code": "def ID ():\n    LIT \n    raise ID ()\n",
        "wrong_code": "def ID ():class LIT \n    raise ID ()\n"
    },
    {
        "code": "\n\ndef test_removeSafelyRemoveFailsMoveSucceeds(self):\n    def dummyRemove():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37725
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\nID (ID ):\n    def ID ():\n        pass \n"
    },
    {
        "code": "def dummyRemove():\n    \"\"\"\n            Raise an C{OSError} to emulate the branch of L{runner._removeSafely}\n            in which path removal fails.\n            \"\"\"\n    raise OSError(\"path removal failed\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37726
        },
        "correct_code": "def ID ():\n    LIT \n    raise ID (LIT )\n",
        "wrong_code": "def ID ():\n    LIT break raise ID (LIT )\n"
    },
    {
        "code": "\ndef dummyMoveTo(path):\n    \"\"\"\n            Raise an C{OSError} to emulate the branch of L{runner._removeSafely}\n            in which path movement fails.\n            \"\"\"\n    raise OSError(\"path movement failed\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 37727
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    raise ID (LIT )\ndel "
    },
    {
        "code": "\n\ndef test_removeSafelyRemoveFailsMoveFails(self):\n    def dummyRemove():\n        pass\n\n    def dummyMoveTo(path):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37728
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n\n    def ID ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_imports(self):\n    # FIXME, HTF do you test the reactor can be cleaned up ?!!!\n    from twisted.trial.runner import TrialSuite\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 37729
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    from ID .ID .ID import ID \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    if from ID .ID .ID import ID \n"
    },
    {
        "code": "def test_foo(self):\n    self.count.append(None)\n    if len(self.count) == 3:\n        self.fail('Count reached 3')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37730
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID (ID )\n    if ID (ID .ID )==LIT :\n        ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID (ID except \n    if ID (ID .ID )==LIT :\n        ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37731
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "in \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_runUntilFailure(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37732
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "[\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef _getFailures(self, result):\n    \"\"\"\n        Get the number of failures that were reported to a result.\n        \"\"\"\n    return len(result.failures)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37733
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\n\ndef ID ,(ID ,ID ):\n    LIT \n    return ID (ID .ID )\n"
    },
    {
        "code": "def decorate(test, interface):\n    decorated.append((test, interface))\n    return test\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37734
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ((ID ,ID ))\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ):/\n    ID .ID ((ID ,ID ))\n    return ID \n"
    },
    {
        "code": "\n\ndef test_runUntilFailureDecorate(self):\n    def decorate(test, interface):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37735
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\n*ID (ID ):\n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def decorate(test, interface):\n    decorated.append((test, interface))\n    return test\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 37736
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ((ID ,ID ))\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ).ID ((ID ,ID ))\n    return ID \n"
    },
    {
        "code": "\n\ndef test_runUntilFailureForceGCDecorate(self):\n    def decorate(test, interface):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37737
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID (,ID ):\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    TestUntilFailure.setUp(self)\n    self.runner = runner.TrialRunner(reporter.Reporter, stream=self.stream,\n                                     uncleanWarnings=True)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 86,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37738
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID )\n    ID .ID =ID .ID (ID .ID ,ID =ID .ID ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID )\n    ID .ID =ID .ID (ID .ID ,ID =ID .ID ,\n    ID =LIT )class "
    },
    {
        "code": "\ndef _getFailures(self, result):\n    \"\"\"\n        Get the number of failures that were reported to a result that\n        is wrapped in an UncleanFailureWrapper.\n        \"\"\"\n    return len(result._originalReporter.failures)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 37739
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    as return ID (ID .ID .ID )\n"
    },
    {
        "code": "\ndef run(self, result):\n    try:\n        raise RuntimeError(\"error that occurs outside of a test\")\n    except RuntimeError:\n        log.err(failure.Failure())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 37740
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        raise ID (LIT )\n    except ID :\n        ID .ID (ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        raise ID (LIT )\n    except ID :\n        ID .ID (ID .ID ())import \n"
    },
    {
        "code": "\ndef tearDown(self):\n    self.flushLoggedErrors(RuntimeError)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37741
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID )="
    },
    {
        "code": "\n\ndef test_construct(self):\n    \"\"\"\n        Check that we can construct a L{runner.LoggedSuite} and that it\n        starts empty.\n        \"\"\"\n    suite = runner.LoggedSuite()\n    self.assertEqual(suite.countTestCases(), 0)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37742
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID (ID .ID (),LIT )\n",
        "wrong_code": "not \n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID (ID .ID (),LIT )\n"
    },
    {
        "code": "\n\ndef test_capturesError(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37743
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.description = \"description\"\n    self.holder = runner.TestHolder(self.description)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37744
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID .ID =ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID .not =ID .ID (ID .ID )\n"
    },
    {
        "code": "\n\ndef test_holder(self):\n    \"\"\"\n        Check that L{runner.TestHolder} takes a description as a parameter\n        and that this description is returned by the C{id} and\n        C{shortDescription} methods.\n        \"\"\"\n    self.assertEqual(self.holder.id(), self.description)\n    self.assertEqual(self.holder.shortDescription(), self.description)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 37745
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID .ID (),ID .ID )\n    ID .ID (ID .ID .ID (),ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ]ID .ID (ID .ID .ID (),ID .ID )\n    ID .ID (ID .ID .ID (),ID .ID )\n"
    },
    {
        "code": "\n\ndef test_holderImplementsITestCase(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 37746
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    global \n"
    },
    {
        "code": "\n\ndef test_runsWithStandardResult(self):\n    self.holder.run(result)\n    self.assertTrue(result.wasSuccessful())\n    self.assertEquals(1, result.testsRun)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37747
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID (ID .ID ())\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID (ID .ID ())ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    # make a real Failure so we can construct ErrorHolder()\n    try:\n        pass\n    except ZeroDivisionError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "except",
            "id": 37748
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    try :\n        pass \n    break ID :\n        pass \n"
    },
    {
        "code": "\n\ndef test_runsWithStandardResult(self):\n    self.holder.run(result)\n    self.assertFalse(result.wasSuccessful())\n    self.assertEquals(1, result.testsRun)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 37749
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID (ID .ID ())\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID .ID (ID )\n    ID .ID (ID .ID ())\n    ID .ID (LIT ,ID .ID )\n]"
    },
    {
        "code": "def test_foo(self, blah):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 37750
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    pass *\n"
    },
    {
        "code": "def test_bar():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37751
        },
        "correct_code": "def ID ():\n    pass \n",
        "wrong_code": "yield def ID ():\n    pass \n"
    },
    {
        "code": "\ndef _test(self, method):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37752
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ))\n    pass \n"
    },
    {
        "code": "\ndef test_extraArg(self):\n    \"\"\"\n        Test when the method has extra (useless) arguments.\n        \"\"\"\n    self._test('test_foo')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37753
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_noArg(self):\n    \"\"\"\n        Test when the method doesn't have even self as argument.\n        \"\"\"\n    self._test('test_bar')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37754
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID return LIT )\n"
    },
    {
        "code": "\ndef test_decorated(self):\n    \"\"\"\n        Test a decorated method also fails.\n        \"\"\"\n    self._test('test_spam')\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37755
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )def "
    },
    {
        "code": "def test_foo(test):\n    called.append(True)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 37756
        },
        "correct_code": "def ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (LIT )except \n"
    },
    {
        "code": "\ndef test_basic(self):\n    class MockTest(unittest.TestCase):\n        def test_foo(test):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37757
        },
        "correct_code": "\ndef ID (ID ):\n    class ID (ID .ID ):\n        def ID (ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    class (ID .ID ):\n        def ID (ID ):\n            pass \n"
    },
    {
        "code": "def test_foo1(test):\n    called.append(1)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 37758
        },
        "correct_code": "def ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (LIT )\n!"
    },
    {
        "code": "def test_foo2(test):\n    raise KeyboardInterrupt()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 37759
        },
        "correct_code": "def ID (ID ):\n    raise ID ()\n",
        "wrong_code": "def ID (ID ):\n    raise ID ()break \n"
    },
    {
        "code": "def test_foo3(test):\n    called.append(2)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37760
        },
        "correct_code": "def ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID LIT )\n"
    },
    {
        "code": "def test_foo(test):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37761
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_cleanup(self):\n    class MockTest(unittest.TestCase):\n        def test_foo(test):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37762
        },
        "correct_code": "\n\ndef ID (ID ):\n    class ID (ID .ID ):\n        def ID (ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    class ID ]ID .ID ):\n        def ID (ID ):\n            pass \n"
    },
    {
        "code": "\ndef printErrors(self, *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37763
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ):import \n    pass \n"
    },
    {
        "code": "\ndef printSummary(self, *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 37764
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    pass :\n"
    },
    {
        "code": "\ndef write(self, *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "*",
            "id": 37765
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,import ID ):\n    pass \n"
    },
    {
        "code": "\ndef writeln(self, *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 37766
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n\n"
    },
    {
        "code": "def f():\n    # We have to use a pyunit test, otherwise we'll get deprecation\n    # warnings about using iterate() in a test.\n    trialRunner.run(pyunit.TestCase('id'))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37767
        },
        "correct_code": "def ID ():\n#COMMENT\n\n#COMMENT\n\n    ID .ID (ID .ID (LIT ))\n",
        "wrong_code": "as ID ():\n#COMMENT\n\n#COMMENT\n\n    ID .ID (ID .ID (LIT ))\n"
    },
    {
        "code": "\n\ndef test_reporterDeprecations(self):\n    def f():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/trial/test/test_runner.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37768
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n        in "
    },
    {
        "code": "\n\ndef getElementsByTagName(iNode, name):\n    while len(slice)>0:\n        if c.nodeName == name:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 37769
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    while ID (ID )>LIT :\n        if ID .ID ==ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    while ID (ID )>LIT :\n    def if ID .ID ==ID :\n            pass \n"
    },
    {
        "code": "\n\n\ndef getElementsByTagNameNoCase(iNode, name):\n    while len(slice)>0:\n        if c.nodeName.lower() == name:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 99,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37770
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ):\n    while ID (ID )>LIT :\n        if ID .ID .ID ()==ID :\n            pass \n",
        "wrong_code": "\n\n\ndef ID (ID ,ID ):\n    while ID (ID )>LIT :\n        if ID .ID .ID ()==ID :\n            pass \n    except "
    },
    {
        "code": "\ndef unescape(text, chars=REV_HTML_ESCAPE_CHARS):\n    \"Perform the exact opposite of 'escape'.\"\n    for s, h in chars:\n        text = text.replace(h, s)\n    return text\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37771
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "\nimport ID (ID ,ID =ID ):\n    LIT \n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef escape(text, chars=HTML_ESCAPE_CHARS):\n    \"Escape a few XML special chars with XML entities.\"\n    for s, h in chars:\n        text = text.replace(s, h)\n    return text\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37772
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID :\n    LIT \n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self, filename, expect, got, endLine, endCol, begLine, begCol):\n   pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 37773
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n   pass \n",
        "wrong_code": "\ndef ID (ID ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n   pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return (\"expected </%s>, got </%s> line: %s col: %s, began line: %s col: %s\"\n            % (self.expect, self.got, self.endLine, self.endCol, self.begLine,\n               self.begCol))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 37774
        },
        "correct_code": "\ndef ID (ID ):\n    return (LIT \n    %(ID .ID ,ID .ID ,ID .ID ,ID .ID ,ID .ID ,\n    ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return (LIT \n    %(ID .ID ,ID .ID ,ID global ID ,ID .ID ,ID .ID ,\n    ID .ID ))\n"
    },
    {
        "code": "\ndef __init__(self, parentNode=None):\n    self.parentNode = parentNode\n    self.childNodes = []\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37775
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ,ID =ID raise :\n    ID .ID =ID \n    ID .ID =[]\n"
    },
    {
        "code": "\ndef writexml(self, stream, indent='', addindent='', newl='', strip=0,\n             nsprefixes={}, namespace=''):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 37776
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =del LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    raise ID ()\n"
    },
    {
        "code": "\ndef toxml(self, indent='', addindent='', newl='', strip=0, nsprefixes={},\n          namespace=''):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 37777
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,ID ={},\nID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID del =LIT ,ID =LIT ,ID ={},\nID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef writeprettyxml(self, stream, indent='', addindent=' ', newl='\\n', strip=0):\n    return self.writexml(stream, indent, addindent, newl, strip)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 78,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37778
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    return ID .ID (ID ,ID ,ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    return ID .ID (ID ,,ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef toprettyxml(self, indent='', addindent=' ', newl='\\n', strip=0):\n    return self.toxml(indent, addindent, newl, strip)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37779
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    return ID .ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    return ID .ID (ID ,ID ,if ,ID )\n"
    },
    {
        "code": "\ndef cloneNode(self, deep=0, parent=None):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37780
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (as ID ,ID =LIT ,ID =ID ):\n    raise ID ()\n"
    },
    {
        "code": "\ndef hasChildNodes(self):\n    if self.childNodes:\n        return 1\n    else:\n        return 0\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 37781
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        return LIT \n    else :\n        return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        return LIT \n    in else :\n        return LIT \n"
    },
    {
        "code": "\n\ndef insertBefore(self, new, ref):\n    if not isinstance(new, Node) or not isinstance(ref, Node):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37782
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    if not ID (ID ,ID )or not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\n:def ID (ID ,ID ,ID ):\n    if not ID (ID ,ID )or not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef removeChild(self, child):\n    if not isinstance(child, Node):\n        pass\n    if child in self.childNodes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 37783
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        pass \n    if ID in ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        pass \n        from if ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\n\ndef lastChild(self):\n    return self.childNodes[-1]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37784
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID [-LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID .ID [-LIT ]\n]"
    },
    {
        "code": "\n\ndef firstChild(self):\n    if len(self.childNodes):\n        return self.childNodes[0]\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37785
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID .ID ):\n        return ID .ID [LIT ]\n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID ID .ID ):\n        return ID .ID [LIT ]\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self, documentElement=None):\n    Node.__init__(self)\n    if documentElement:\n        self.appendChild(documentElement)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37786
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (ID )\n    if ID :\n        ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    and .ID (ID )\n    if ID :\n        ID .ID (ID )\n"
    },
    {
        "code": "\ndef cloneNode(self, deep=0, parent=None):\n    if deep:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37787
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID :yield pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef isEqualToDocument(self, n):\n    return (self.doctype == n.doctype) and Node.isEqualToNode(self, n)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37788
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return (ID .ID ==ID .ID )and ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    return (ID .ID ==ID .ID )and ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef get_documentElement(self):\n    return self.childNodes[0]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37789
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID [LIT ]\n",
        "wrong_code": "in \ndef ID (ID ):\n    return ID .ID [LIT ]\n"
    },
    {
        "code": "\ndef appendChild(self, child):\n    \"\"\"\n        Make the given L{Node} the I{document element} of this L{Document}.\n\n        @param child: The L{Node} to make into this L{Document}'s document\n            element.\n\n        @raise ValueError: If this document already has a document element.\n        \"\"\"\n    if self.childNodes:\n        raise ValueError(\"Only one element per document.\")\n    Node.appendChild(self, child)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 84,
            "fix_type": "delete",
            "id": 37790
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        raise ID (LIT )\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        raise ID (LIT )\n    ID .ID (ID ,.ID )\n"
    },
    {
        "code": "\ndef writexml(self, stream, indent='', addindent='', newl='', strip=0,\n             nsprefixes={}, namespace=''):\n    if self.doctype:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37791
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,]=LIT ,\nID ={},ID =LIT ):\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\n# of dubious utility (?)\ndef createElement(self, name, **kw):\n    return Element(name, **kw)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37792
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ,**ID ):\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n]#COMMENT\n\ndef ID (ID ,ID ,**ID ):\n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef createTextNode(self, text):\n    return Text(text)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37793
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    return ID (ID )\n"
    },
    {
        "code": "\ndef createComment(self, text):\n    return Comment(text)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37794
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "\nwhile def ID (ID ,ID ):\n    return ID (ID )\n"
    },
    {
        "code": "\ndef getElementsByTagName(self, name):\n    if self.documentElement.caseInsensitive:\n        return getElementsByTagNameNoCase(self, name)\n    return getElementsByTagName(self, name)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 37795
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID :\n        return ID (ID ,ID )\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef async ID (ID ,ID ):\n    if ID .ID .ID :\n        return ID (ID ,ID )\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef __init__(self, eref, parentNode=None):\n    Node.__init__(self, parentNode)\n    self.eref = eref\n    self.nodeValue = self.data = \"&\" + eref + \";\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 37796
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,ID )\n    ID .ID =ID \n    ID .ID =ID .ID =LIT +ID +LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ID =ID ):\n    ID .ID (ID ,ID )\n    ID .ID =ID \n    ID .ID =ID .ID =LIT +ID +LIT \n"
    },
    {
        "code": "\ndef isEqualToEntityReference(self, n):\n    if not isinstance(n, EntityReference):\n        return 0\n    return (self.eref == n.eref) and (self.nodeValue == n.nodeValue)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 75,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37797
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return LIT \n    return (ID .ID ==ID .ID )and (ID .ID ==ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return LIT \n    return continue ID .ID ==ID .ID )and (ID .ID ==ID .ID )\n"
    },
    {
        "code": "\ndef writexml(self, stream, indent='', addindent='', newl='', strip=0,\n             nsprefixes={}, namespace=''):\n    stream.write(self.nodeValue)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 37798
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    ID .ID (ID finally ID )\n"
    },
    {
        "code": "\ndef cloneNode(self, deep=0, parent=None):\n    return EntityReference(self.eref, parent)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 37799
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):with \n    return ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef __init__(self, data, parentNode=None):\n    Node.__init__(self, parentNode)\n    self.value = self.data = self.nodeValue = data\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 37800
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,ID )\n    ID .ID =ID .ID =ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,ID )\n    ID .ID =ID None .ID =ID .ID =ID \n"
    },
    {
        "code": "\ndef isEqualToCharacterData(self, n):\n    return self.value == n.value\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37801
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ==ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .==ID .ID \n"
    },
    {
        "code": "\ndef cloneNode(self, deep=0, parent=None):\n    return Comment(self.nodeValue, parent)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37802
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ID :\n    return ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef __init__(self, data, parentNode=None, raw=0):\n    CharacterData.__init__(self, data, parentNode)\n    self.raw = raw\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 37803
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ):\n    ID .ID (ID ,ID ,ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ):\n    ID .ID (ID ,ID ,ID )\n    ID -.ID =ID \n"
    },
    {
        "code": "\n\ndef isEqualToNode(self, other):\n    \"\"\"\n        Compare this text to C{text}.  If the underlying values and the C{raw}\n        flag are the same, return C{True}, otherwise return C{False}.\n        \"\"\"\n    return (\n        CharacterData.isEqualToNode(self, other) and\n        self.raw == other.raw)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 80,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37804
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return (\n    ID .ID (ID ,ID )and \n    ID .ID ==ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return (\n    ID .ID (ID ,ID )and \n    ID .ID ==.ID )\n"
    },
    {
        "code": "\n\ndef cloneNode(self, deep=0, parent=None):\n    return Text(self.nodeValue, parent, self.raw)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37805
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ,ID =ID ):\n    return ID (ID .ID ,ID ,ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ,ID =ID )\n    return ID (ID .ID ,ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"Text(%s\" % repr(self.nodeValue) + ')'\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 37806
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID (ID .ID )+LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %ID (ID .lambda ID )+LIT \n"
    },
    {
        "code": "def cloneNode(self, deep=0, parent=None):\n    return CDATASection(self.nodeValue, parent)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37807
        },
        "correct_code": "def ID (ID ,ID =LIT ,ID =ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "def ID (ID ,is =LIT ,ID =ID ):\n    return ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef writexml(self, stream, indent='', addindent='', newl='', strip=0,\n             nsprefixes={}, namespace=''):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 37808
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,\nID ={},ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,elif \nID ={},ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef _genprefix():\n    i = 0\n    while True:\n        yield  'p' + str(i)\n        i = i + 1\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37809
        },
        "correct_code": "\ndef ID ():\n    ID =LIT \n    while LIT :\n        yield LIT +ID (ID )\n        ID =ID +LIT \n",
        "wrong_code": "\ndef ID ():\n    ID =LIT \n    while :\n        yield LIT +ID (ID )\n        ID =ID +LIT \n"
    },
    {
        "code": "\ndef addPrefixes(self, pfxs):\n    if self.nsprefixes is None:\n        self.nsprefixes = pfxs\n    else:\n        self.nsprefixes.update(pfxs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37810
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :\n        ID .ID =ID \n    else :\n        ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    if ID .ID is ID :\n        ID .ID =ID \n    else :\n        ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef endTag(self, endTagName):\n    if not self.preserveCase:\n        endTagName = endTagName.lower()\n    self.endTagName = endTagName\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37811
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID :\n        ID =ID .ID ()\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,=):\n    if not ID .ID :\n        ID =ID .ID ()\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef isEqualToElement(self, n):\n    if self.caseInsensitive:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37812
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\nLIT     if ID .ID :\n        pass \n"
    },
    {
        "code": "\n\ndef isEqualToNode(self, other):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37813
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "global \n\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef cloneNode(self, deep=0, parent=None):\n    if deep:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37814
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID nonlocal \n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef getElementsByTagName(self, name):\n    if self.caseInsensitive:\n        return getElementsByTagNameNoCase(self, name)\n    return getElementsByTagName(self, name)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37815
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        return ID (ID ,ID )\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID yield (ID ,ID ):\n    if ID .ID :\n        return ID (ID ,ID )\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef hasAttributes(self):\n    return 1\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37816
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT \nwith "
    },
    {
        "code": "\ndef getAttribute(self, name, default=None):\n    return self.attributes.get(name, default)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37817
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (,ID ,ID =ID ):\n    return ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef getAttributeNS(self, ns, name, default=None):\n    if self.attributes.has_key(nsk):\n        pass\n    if ns == self.namespace:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37818
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    if ID .ID .ID (ID ):\n        pass \n    if ID ==ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,,ID =ID ):\n    if ID .ID .ID (ID ):\n        pass \n    if ID ==ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef getAttributeNode(self, name):\n    return _Attr(self.getAttribute(name), self)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37819
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID (ID ),ID )\n",
        "wrong_code": "!\ndef ID (ID ,ID ):\n    return ID (ID .ID (ID ),ID )\n"
    },
    {
        "code": "\ndef setAttribute(self, name, attr):\n    self.attributes[name] = attr\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37820
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID ]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,-ID ):\n    ID .ID [ID ]=ID \n"
    },
    {
        "code": "\ndef removeAttribute(self, name):\n    if name in self.attributes:\n        del self.attributes[name]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37821
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID .ID :\n        del ID .ID [ID ]\n",
        "wrong_code": "\nID (ID ,ID ):\n    if ID in ID .ID :\n        del ID .ID [ID ]\n"
    },
    {
        "code": "\ndef hasAttribute(self, name):\n    return name in self.attributes\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37822
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID in ID .ID \n",
        "wrong_code": "\ndef ID from (ID ,ID ):\n    return ID in ID .ID \n"
    },
    {
        "code": "\n\ndef __repr__(self):\n    if self.attributes:\n        pass\n    if self._filename:\n        pass\n    if self._markpos:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 37823
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef break ID (ID ):\n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _unescapeDict(d):\n    dd = {}\n    for k, v in d.items():\n        dd[k] = unescape(v)\n    return dd\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 71,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 37824
        },
        "correct_code": "\ndef ID (ID ):\n    ID ={}\n    for ID ,ID in ID .ID ():\n        ID [ID ]=ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID ={}\n    for ID ,ID in ID .ID ():\n        ID [ID ]ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef _reverseDict(d):\n    dd = {}\n    for k, v in d.items():\n        dd[v]=k\n    return dd\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 37825
        },
        "correct_code": "\ndef ID (ID ):\n    ID ={}\n    for ID ,ID in ID .ID ():\n        ID [ID ]=ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID ={}\n    for ID ,ID in ID .ID ():\n        ID ID ]=ID \n    return ID \n"
    },
    {
        "code": "\n\ndef __init__(self, beExtremelyLenient=0, caseInsensitive=1, preserveCase=0,\n             soonClosers=soonClosers, laterClosers=laterClosers):\n    pass\n    # self.indentlevel = 0\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37826
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,\nID =ID ,ID =ID ):\n    pass \n    #COMMENT\n\n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,\nID =ID ,ID =ID is :\n    pass \n    #COMMENT\n\n"
    },
    {
        "code": "\ndef _getparent(self):\n    if self.elementstack:\n        return self.elementstack[-1]\n    else:\n        return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 37827
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        return ID .ID [-LIT ]\n    else :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        return ID .ID [-LIT =]\n    else :\n        return ID \n"
    },
    {
        "code": "\ndef gotDoctype(self, doctype):\n    self._mddoctype = doctype\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37828
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n:"
    },
    {
        "code": "\ndef _gotStandalone(self, factory, data):\n    if parent:\n        pass\n    elif self.beExtremelyLenient:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 37829
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID :\n        pass \n    elif ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    yield if ID :\n        pass \n    elif ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef gotText(self, data):\n    if data.strip() or self.shouldPreserveSpace():\n        self._gotStandalone(Text, data)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 37830
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID ()or ID .ID ():\n        ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID ()or ID .ID ():\n        ID .ID async (ID ,ID )\n"
    },
    {
        "code": "\ndef gotComment(self, data):\n    self._gotStandalone(Comment, data)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37831
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (],ID )\n"
    },
    {
        "code": "\ndef gotEntityReference(self, entityRef):\n    self._gotStandalone(EntityReference, entityRef)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37832
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef gotCData(self, cdata):\n    self._gotStandalone(CDATASection, cdata)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 37833
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (elif ID ,ID )\n"
    },
    {
        "code": "\ndef connectionLost(self, reason):\n    if self.elementstack:\n        if self.beExtremelyLenient:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37834
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        if ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        if ID .:\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef parseString(st, *args, **kw):\n    if isinstance(st, UnicodeType):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37835
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    if \n    (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef parseXML(readable):\n    \"\"\"Parse an XML readable object.\"\"\"\n    return parse(readable, caseInsensitive=0, preserveCase=1)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37836
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID =LIT ,=LIT )\n"
    },
    {
        "code": "\n\ndef parseXMLString(st):\n    \"\"\"Parse an XML readable object.\"\"\"\n    return parseString(st, caseInsensitive=0, preserveCase=1)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37837
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID class ID ):\n    LIT \n    return ID (ID ,ID =LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef __init__(self, node='div'):\n    if isinstance(node, StringTypes):\n        node = Element(node)\n    self.node = node\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37838
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    if ID (ID ,ID ):\n        ID =ID (ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    if ID (ID ,ID ):\n        (=ID (ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __getattr__(self, name):\n    if name[0] == '_':\n        raise AttributeError(\"no private attrs\")\n    return lambda **kw: self.add(name,**kw)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 37839
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]==LIT :\n        raise ID (LIT )\n    return lambda **ID :ID .ID (ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID for LIT ]==LIT :\n        raise ID (LIT )\n    return lambda **ID :ID .ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef __setitem__(self, key, val):\n    self.node.setAttribute(key, val)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 37840
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )return :\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef __getitem__(self, key):\n    return self.node.getAttribute(key)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37841
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\n+def ID (ID ,ID ):\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef text(self, txt, raw=0):\n    nn = Text(txt, raw=raw)\n    self.node.appendChild(nn)\n    return self\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37842
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    ID =ID (ID ,ID =ID )\n    ID .ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    ID =ID (ID ,ID =ID )\n    while .ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef add(self, tagName, **kw):\n    for k, v in kw.items():\n        if k[0] == '_':\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/microdom.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37843
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    for ID ,ID in ID .ID ():\n        if ID [LIT ]==LIT :\n            pass \n",
        "wrong_code": "\ndef ID LIT ID ,ID ,**ID ):\n    for ID ,ID in ID .ID ():\n        if ID [LIT ]==LIT :\n            pass \n"
    },
    {
        "code": "\ndef registerProducer(self, prod,s):\n    self.go = 1\n    while self.go:\n        prod.resumeProducing()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37844
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =LIT \n    while ID .ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (,ID ,ID ,ID ):\n    ID .ID =LIT \n    while ID .ID :\n        ID .ID ()\n"
    },
    {
        "code": "\ndef unregisterProducer(self):\n    self.go = 0\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37845
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):raise \n    ID .ID =LIT \n"
    },
    {
        "code": "\n\ndef __init__(self, postpath, session=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37846
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,,ID =ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef getHeader(self, name):\n    \"\"\"\n        Retrieve the value of a request header.\n\n        @type name: C{str}\n        @param name: The name of the request header for which to retrieve the\n            value.  Header names are compared case-insensitively.\n\n        @rtype: C{str} or L{NoneType}\n        @return: The value of the specified request header.\n        \"\"\"\n    return self.headers.get(name.lower(), None)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 37847
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID .ID (),ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    except ID .ID .ID (ID .ID (),ID )\n"
    },
    {
        "code": "\n\ndef setHeader(self, name, value):\n    \"\"\"TODO: make this assert on write() if the header is content-length\n        \"\"\"\n    self.outgoingHeaders[name.lower()] = value\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 37848
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID [ID .ID ()]=ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID ID .ID ()]=ID \n"
    },
    {
        "code": "\ndef getSession(self):\n    if self.session:\n        return self.session\n    assert not self.written, \"Session cannot be requested after data has been written.\"\n    self.session = self.protoSession\n    return self.session\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 117,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37849
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        return ID .ID \n    assert not ID .ID ,LIT \n    ID .ID =ID .ID \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        return ID .ID \n    assert not ID .ID ,LIT \n    ID .ID =ID .ID \n    return ID .\n"
    },
    {
        "code": "\n\ndef render(self, resource):\n    result = resource.render(self)\n    if result is server.NOT_DONE_YET:\n        return\n    self.write(result)\n    self.finish()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 37850
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID (ID )\n    if ID is ID .ID :\n        return \n    ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\n\nbreak def ID (ID ,ID ):\n    ID =ID .ID (ID )\n    if ID is ID .ID :\n        return \n    ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\n\ndef write(self, data):\n    self.written.append(data)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37851
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID global ):\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef notifyFinish(self):\n    \"\"\"\n        Return a L{Deferred} which is called back with C{None} when the request\n        is finished.  This will probably only work if you haven't called\n        C{finish} yet.\n        \"\"\"\n    finished = Deferred()\n    self._finishedDeferreds.append(finished)\n    return finished\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37852
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID ()\n    ID .ID .ID (ID )\n    return ID \n",
        "wrong_code": "del \ndef ID (ID ):\n    LIT \n    ID =ID ()\n    ID .ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef finish(self):\n    if self._finishedDeferreds is not None:\n        for obs in observers:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37853
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID is not ID :\n        for ID in ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID .ID is not .:\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\n\ndef processingFailed(self, reason):\n    if self._finishedDeferreds is not None:\n        for obs in observers:\n            obs.errback(reason)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 106,
            "fix_type": "delete",
            "id": 37854
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        for ID in ID :\n            ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        for ID in ID :\n            ID .ID (ID )\n            from "
    },
    {
        "code": "\n\ndef addArg(self, name, value):\n    self.args[name] = [value]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37855
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID ]=[ID ]\n",
        "wrong_code": "\n\ndef ID (,ID ,ID ):\n    ID .ID [ID ]=[ID ]\n"
    },
    {
        "code": "\n\ndef setResponseCode(self, code, message=None):\n    \"\"\"\n        Set the HTTP status response code, but takes care that this is called\n        before any data is written.\n        \"\"\"\n    assert not self.written, \"Response code cannot be set after data has been written: %s.\" % \"@@@@\".join(self.written)\n    self.responseCode = code\n    self.responseMessage = message\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 115,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37856
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    assert not ID .ID ,LIT %LIT .ID (ID .ID )\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    assert not ID .ID ,LIT %LIT .ID (ID .ID )\n    ID .ID =ID \n    ID .ID =ID \nfor "
    },
    {
        "code": "\n\ndef setLastModified(self, when):\n    assert not self.written, \"Last-Modified cannot be set after data has been written: %s.\" % \"@@@@\".join(self.written)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 37857
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    assert not ID .ID ,LIT %LIT .ID (ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID continue ID ):\n    assert not ID .ID ,LIT %LIT .ID (ID .ID )\n"
    },
    {
        "code": "\n\ndef setETag(self, tag):\n    assert not self.written, \"ETag cannot be set after data has been written: %s.\" % \"@@@@\".join(self.written)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37858
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    assert not ID .ID ,LIT %LIT .ID (ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    assert not ID .ID ,LIT %LIT ID (ID .ID )\n"
    },
    {
        "code": "\n\ndef getClientIP(self):\n    \"\"\"\n        Return the IPv4 address of the client which made this request, if there\n        is one, otherwise C{None}.\n        \"\"\"\n    if isinstance(self.client, IPv4Address):\n        return self.client.host\n    return None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37859
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    if ID (ID .ID ,ID ):\n        return ID .ID .ID \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    if ID (ID .ID ,ID :\n        return ID .ID .ID \n    return ID \n"
    },
    {
        "code": "def testListEntities(self):\n    r = resource.Resource()\n    self.failUnlessEqual([], r.listEntities())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37860
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID ()\n    ID .ID ([],ID .ID ())\n",
        "wrong_code": "def ID (ID ):ID =ID .ID ()\n    ID .ID ([],ID .ID ())\n"
    },
    {
        "code": "def render(self, request):\n    if http.CACHED in (request.setLastModified(10),\n                       request.setETag('MatchingTag')):\n        return ''\n    else:\n        return \"correct\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 100,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37861
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID .ID in (ID .ID (LIT ),\n    ID .ID (LIT )):\n        return LIT \n    else :\n        return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    if ID .ID in (ID .ID (LIT ),\n    ID .ID (LIT )):\n        return LIT \n    else nonlocal \n        return LIT \n"
    },
    {
        "code": "\ndef __init__(self):\n    self.written = StringIO()\n    self.producers = []\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37862
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID global (ID ):\n    ID .ID =ID ()\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef getPeer(self):\n    return IPv4Address(\"TCP\", '192.168.1.1', 12344)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37863
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT ,LIT ,LIT )\n!"
    },
    {
        "code": "\ndef write(self, bytes):\n    assert isinstance(bytes, str)\n    self.written.write(bytes)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37864
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    assert ID (ID ,ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    assert ID (ID ,ID )ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef writeSequence(self, iovec):\n    map(self.write, iovec)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37865
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID (ID .,ID )\n"
    },
    {
        "code": "\ndef getHost(self):\n    return IPv4Address(\"TCP\", '10.0.0.1', self.port)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37866
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT ,LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT ,LIT ,or .ID )\n"
    },
    {
        "code": "\ndef registerProducer(self, producer, streaming):\n    self.producers.append((producer, streaming))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37867
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    .ID .ID ((ID ,ID ))\n"
    },
    {
        "code": "\ndef loseConnection(self):\n    self.disconnected = True\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37868
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    .ID =LIT \n"
    },
    {
        "code": "\ndef __init__(self):\n    self.transport = self.TCP()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37869
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\n,def ID (ID ):\n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\n\ndef requestDone(self, request):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37870
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID )\n    pass \n"
    },
    {
        "code": "def test_simplestSite(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37871
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (except ):\n    pass \n"
    },
    {
        "code": "def setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37872
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n+    pass \n"
    },
    {
        "code": "\n\ndef test_defaultReactor(self):\n    \"\"\"\n        If not value is passed to L{server.Session.__init__}, the global\n        reactor is used.\n        \"\"\"\n    session = server.Session(server.Site(resource.Resource()), '123')\n    self.assertIdentical(session._reactor, reactor)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37873
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .ID (ID .ID ()),LIT )\n    ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (.ID (ID .ID ()),LIT )\n    ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_startCheckingExpiration(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37874
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):import     pass \n"
    },
    {
        "code": "\n\ndef test_expire(self):\n    # And there should be no pending delayed calls.\n    self.assertFalse(self.clock.calls)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 37875
        },
        "correct_code": "\n\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (ID .ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (ID .raise ID .ID )\n"
    },
    {
        "code": "\n\ndef test_expireWhileChecking(self):\n    \"\"\"\n        L{server.Session.expire} expires the session even if the timeout call\n        isn't due yet.\n        \"\"\"\n    self.session.startCheckingExpiration()\n    self.test_expire()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 37876
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n    ID .class ID ()\n"
    },
    {
        "code": "def expired():\n    callbackRan[0] = True\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 37877
        },
        "correct_code": "def ID ():\n    ID [LIT ]=LIT \n",
        "wrong_code": "def ID ():\n    ID LIT ]=LIT \n"
    },
    {
        "code": "\n\ndef test_notifyOnExpire(self):\n    def expired():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37878
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ():\n        pass \n"
    },
    {
        "code": "\n\ndef test_touch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37879
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )*:\n    pass \n"
    },
    {
        "code": "\n\ndef test_startCheckingExpirationParameterDeprecated(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37880
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID from ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_checkExpiredDeprecated(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37881
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID global ):\n    pass \n"
    },
    {
        "code": "\n\n# Conditional requests:\n# If-None-Match, If-Modified-Since\n\n# make conditional request:\n#   normal response if condition succeeds\n#   if condition fails:\n#      response code\n#      no body\n\ndef httpBody(whole):\n    return whole.split('\\r\\n\\r\\n', 1)[1]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 117,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 37882
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID (LIT ,LIT )[LIT ]\n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID (LIT ,LIT )LIT ]\n"
    },
    {
        "code": "\ndef httpHeader(whole, key):\n    for header in headers.split('\\r\\n'):\n        if header.lower().startswith(key):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37883
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID (LIT ):\n        if ID .ID ().ID (ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):)    for ID in ID .ID (LIT ):\n        if ID .ID ().ID (ID ):\n            pass \n"
    },
    {
        "code": "\ndef httpCode(whole):\n    l1 = whole.split('\\r\\n', 1)[0]\n    return int(l1.split()[1])\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37884
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT )[LIT ]\n    return ID (ID .ID ()[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT )[]\n    return ID (ID .ID ()[LIT ])\n"
    },
    {
        "code": "\n# XXX: test web.distrib.\n\ndef setUp(self):\n    for l in [\"GET / HTTP/1.1\",\n              \"Accept: text/html\"]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 37885
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    for ID in [LIT ,\n    LIT ]:\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    for ID raise [LIT ,\n    LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    self.channel.connectionLost(None)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 37886
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID )!\n"
    },
    {
        "code": "\n\ndef _modifiedTest(self, modifiedSince):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 37887
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n\n"
    },
    {
        "code": "\n\ndef test_modified(self):\n    \"\"\"\n        If a request is made with an I{If-Modified-Since} header value with\n        a timestamp indicating a time before the last modification of the\n        requested resource, a 200 response is returned along with a response\n        body containing the resource.\n        \"\"\"\n    self._modifiedTest(http.datetimeToString(1))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37888
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID (LIT ))\n",
        "wrong_code": "\n\ndef ID (ID )\n    LIT \n    ID .ID (ID .ID (LIT ))\n"
    },
    {
        "code": "\n\ndef test_unmodified(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37889
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID if (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_invalidTimestamp(self):\n    \"\"\"\n        If a request is made with an I{If-Modified-Since} header value which\n        cannot be parsed, the header is treated as not having been present\n        and a normal 200 response is returned with a response body\n        containing the resource.\n        \"\"\"\n    self._modifiedTest(\"like, maybe a week ago, I guess?\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 37890
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n*    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_invalidTimestampYear(self):\n    \"\"\"\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a string in the year position which is not an integer, the\n        header is treated as not having been present and a normal 200\n        response is returned with a response body containing the resource.\n        \"\"\"\n    self._modifiedTest(\"Thu, 01 Jan blah 00:00:10 GMT\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37891
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID :\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_invalidTimestampTooLongAgo(self):\n    \"\"\"\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a year before the epoch, the header is treated as not\n        having been present and a normal 200 response is returned with a\n        response body containing the resource.\n        \"\"\"\n    self._modifiedTest(\"Thu, 01 Jan 1899 00:00:10 GMT\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 37892
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    lambda \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_invalidTimestampMonth(self):\n    \"\"\"\n        If a request is made with an I{If-Modified-Since} header value which\n        contains a string in the month position which is not a recognized\n        month abbreviation, the header is treated as not having been present\n        and a normal 200 response is returned with a response body\n        containing the resource.\n        \"\"\"\n    self._modifiedTest(\"Thu, 01 Blah 1970 00:00:10 GMT\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37893
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID in ):\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_etagMatchedNot(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 37894
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \n    class "
    },
    {
        "code": "\ndef test_etagMatched(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37895
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )async \n    pass \n"
    },
    {
        "code": "def testCheckGoogle(self):\n    raise unittest.SkipTest(\"no violation of google ToS\")\n    d = google.checkGoogle('site:www.twistedmatrix.com twisted')\n    d.addCallback(self.assertEquals, 'http://twistedmatrix.com/')\n    return d\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 37896
        },
        "correct_code": "def ID (ID ):\n    raise ID .ID (LIT )\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    raise ID .ID (lambda )\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n    return ID \n"
    },
    {
        "code": "\ndef test_interface(self):\n    \"\"\"\n        L{server.Request} instances provide L{iweb.IRequest}.\n        \"\"\"\n    self.assertTrue(\n        verifyObject(iweb.IRequest, server.Request(DummyChannel(), True)))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37897
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (\n    ID (ID .ID ,ID .ID (ID (),LIT )))\n",
        "wrong_code": "\ndef ID (ID )\n    LIT \n    ID .ID (\n    ID (ID .ID ,ID .ID (ID (),LIT )))\n"
    },
    {
        "code": "\n\ndef testChildLink(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 37898
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass ,\n"
    },
    {
        "code": "\ndef testPrePathURLSimple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 37899
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nas def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testPrePathURLNonDefault(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37900
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    del pass \n"
    },
    {
        "code": "\ndef testPrePathURLSSLPort(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37901
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID assert ):\n    pass \n"
    },
    {
        "code": "\ndef testPrePathURLSSLPortAndSSL(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37902
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nlambda "
    },
    {
        "code": "\ndef testPrePathURLHTTPPortAndSSL(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37903
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass is "
    },
    {
        "code": "\ndef testPrePathURLSSLNonDefault(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37904
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    :pass \n"
    },
    {
        "code": "\ndef testPrePathURLSetSSLHost(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37905
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_prePathURLQuoting(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37906
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "def getChildWithDefault(self, name, request):\n    request.rememberRootURL()\n    return resource.Resource.getChildWithDefault(self, name, request)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37907
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID ()\n    return ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID ()\n    return ID .ID .ID (ID ,,ID )\n"
    },
    {
        "code": "def render(self, request):\n    return ''\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 37908
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "def ID ID ,ID ):\n    return LIT \n"
    },
    {
        "code": "def createServer(self, r):\n    chan = DummyChannel()\n    chan.site = server.Site(r)\n    return chan\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37909
        },
        "correct_code": "def ID (ID ,ID ):\n    ID =ID ()\n    ID .ID =ID .ID (ID )\n    return ID \n",
        "wrong_code": "def ID (or ID ,ID ):\n    ID =ID ()\n    ID .ID =ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef testSimple(self):\n    for url in ['/foo/', '/foo/bar', '/foo/bar/baz', '/foo/bar/']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37910
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef testRoot(self):\n    for url in ['/', '/bar', '/bar/baz', '/bar/']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37911
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):return \n    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "def render_GET(self, request):\n    return \"hi hi\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 37912
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    return LIT \nnot "
    },
    {
        "code": "\ndef render_HEH(self, request):\n    return \"ho ho\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 37913
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID )break :\n    return LIT \n"
    },
    {
        "code": "def _getReq(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 37914
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    pass \nif "
    },
    {
        "code": "\ndef testGoodMethods(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37915
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "nonlocal \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testBadMethods(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37916
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef testImplicitHead(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 37917
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ,"
    },
    {
        "code": "def __init__(self,default):\n    self.default = default\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37918
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "=def ID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\n\ndef getChildWithDefault(self, name, request):\n    d = defer.succeed(self.default)\n    resource = util.DeferredResource(d)\n    return resource.getChildWithDefault(name, request)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 93,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37919
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (ID .ID )\n    ID =ID .ID (ID )\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (ID .ID )\n    ID =ID .ID (ID )\n    return ID .ID (ID ,!=)\n"
    },
    {
        "code": "\ndef testDeferredResource(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37920
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nfor ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_render(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37921
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID from ):\n    pass \n"
    },
    {
        "code": "def setUp(self):\n    self.site = http.HTTPFactory()\n    self.site.logFile = StringIO()\n    self.request = DummyRequestForLogTest(self.site, False)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 37922
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID .ID ()\n    ID .ID .ID =ID ()\n    ID .ID =ID (ID .ID ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID !ID .ID ()\n    ID .ID .ID =ID ()\n    ID .ID =ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef testSimple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37923
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nis "
    },
    {
        "code": "\ndef testMethodQuote(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37924
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID LIT ID ):\n    pass \n"
    },
    {
        "code": "\ndef testRequestQuote(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 37925
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):with \n    pass \n"
    },
    {
        "code": "\ndef testProtoQuote(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37926
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID pass ):\n    pass \n"
    },
    {
        "code": "\ndef testRefererQuote(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37927
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (-):\n    pass \n"
    },
    {
        "code": "\ndef testUserAgentQuote(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/test/test_web.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37928
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef componentFactory(componentid, password):\n    \"\"\"\n    XML stream factory for external server-side components.\n\n    @param componentid: JID of the component.\n    @type componentid: L{unicode}\n    @param password: password used to authenticate to the server.\n    @type password: L{str}\n    \"\"\"\n    a = ConnectComponentAuthenticator(componentid, password)\n    return xmlstream.XmlStreamFactory(a)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 37929
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ,ID )\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ,)ID )\n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, xs):\n    self.xmlstream = xs\n    self._deferred = None\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37930
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\n,ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef initialize(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37931
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n."
    },
    {
        "code": "\ndef _cbHandshake(self, _):\n    # we have successfully shaken hands and can now consider this\n    # entity to represent the component JID.\n    self.xmlstream.thisEntity = self.xmlstream.otherEntity\n    self._deferred.callback(None)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37932
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    ID .ID .ID =ID .ID .ID \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    ID .ID .=ID .ID .ID \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, componentjid, password):\n    \"\"\"\n        @type componentjid: L{str}\n        @param componentjid: Jabber ID that this component wishes to bind to.\n\n        @type password: L{str}\n        @param password: Password/secret this component uses to authenticate.\n        \"\"\"\n    # Note that we are sending 'to' our desired component JID.\n    xmlstream.ConnectAuthenticator.__init__(self, componentjid)\n    self.password = password\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37933
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    #COMMENT\n\n    ID .ID .ID (ID ,ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )nonlocal \n    LIT \n    #COMMENT\n\n    ID .ID .ID (ID ,ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef associateWithStream(self, xs):\n    xs.version = (0, 0)\n    xmlstream.ConnectAuthenticator.associateWithStream(self, xs)\n\n    xs.initializers = [ComponentInitiatingInitializer(xs)]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 37934
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =(LIT ,LIT )\n    ID .ID .ID (ID ,ID )\n\n    ID .ID =[ID (ID )]\n",
        "wrong_code": "\ncontinue ID (ID ,ID ):\n    ID .ID =(LIT ,LIT )\n    ID .ID .ID (ID ,ID )\n\n    ID .ID =[ID (ID )]\n"
    },
    {
        "code": "\ndef __init__(self, secret):\n    self.secret = secret\n    xmlstream.ListenAuthenticator.__init__(self)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37935
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID =ID \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef associateWithStream(self, xs):\n    \"\"\"\n        Associate the authenticator with a stream.\n\n        This sets the stream's version to 0.0, because the XEP-0114 component\n        protocol was not designed for XMPP 1.0.\n        \"\"\"\n    xs.version = (0, 0)\n    xmlstream.ListenAuthenticator.associateWithStream(self, xs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 37936
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =(LIT ,LIT )\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =(LIT for LIT )\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef onElement(self, element):\n    if (element.uri, element.name) == (self.namespace, 'handshake'):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37937
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if (ID .ID ,ID .ID )==(ID .ID ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "*\n\ndef ID (ID ,ID ):\n    if (ID .ID ,ID .ID )==(ID .ID ,LIT ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef onHandshake(self, handshake):\n    if handshake != calculatedHash:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 37938
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID !=ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID !=ID :\n        .\n    else :\n        pass \n"
    },
    {
        "code": "\ndef componentConnected(self, xs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37939
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef componentDisconnected(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37940
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef transportConnected(self, xs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37941
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (for ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef send(self, obj):\n    \"\"\"\n        Send data over service parent's XML stream.\n\n        @note: L{ServiceManager} maintains a queue for data sent using this\n        method when there is no current established XML stream. This data is\n        then sent as soon as a new stream has been established and initialized.\n        Subsequently, L{componentConnected} will be called again. If this\n        queueing is not desired, use C{send} on the XmlStream object (passed to\n        L{componentConnected}) directly.\n\n        @param obj: data to be sent over the XML stream. This is usually an\n        object providing L{domish.IElement}, or serialized XML. See\n        L{xmlstream.XmlStream} for details.\n        \"\"\"\n\n    self.parent.send(obj)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 37942
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef [ID (ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, jid, password):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37943
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID :\n    pass \n"
    },
    {
        "code": "\ndef getFactory(self):\n    return self._xsFactory\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 37944
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID \nfrom "
    },
    {
        "code": "\ndef _connected(self, xs):\n    self.xmlstream = xs\n    for c in self:\n        if ijabber.IService.providedBy(c):\n            c.transportConnected(xs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 37945
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    for ID in ID :\n        if ID .ID .ID (ID ):\n            ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    for ID in ID *:\n        if ID .ID .ID (ID ):\n            ID .ID (ID )\n"
    },
    {
        "code": "\ndef _disconnected(self, _):\n\n    # Notify all child services which implement\n    # the IService interface\n    for c in self:\n        if ijabber.IService.providedBy(c):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 85,
            "fix_type": "delete",
            "id": 37946
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID :\n        if ID .ID .ID (ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID :\n        if ID .ID .ID (ID continue ):\n            pass \n"
    },
    {
        "code": "\ndef buildServiceManager(jid, password, strport):\n    client_svc = jstrports.client(strport, svc.getFactory())\n    client_svc.setServiceParent(svc)\n    return svc\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37947
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (ID ,ID .ID ())\n    ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef .(ID ,ID ,ID ):\n    ID =ID .ID (ID ,ID .ID ())\n    ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self):\n    self.routes = {}\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37948
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID None ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\n\ndef addRoute(self, destination, xs):\n    \"\"\"\n        Add a new route.\n\n        The passed XML Stream C{xs} will have an observer for all stanzas\n        added to route its outgoing traffic. In turn, traffic for\n        C{destination} will be passed to this stream.\n\n        @param destination: Destination of the route to be added as a host name\n                            or C{None} for the default route.\n        @type destination: C{str} or C{NoneType}.\n        @param xs: XML Stream to register the route for.\n        @type xs: L{EventDispatcher<utility.EventDispatcher>}.\n        \"\"\"\n    self.routes[destination] = xs\n    xs.addObserver('/*', self.route)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 71,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37949
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID [ID ]=ID \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID [ID ]=ID \n    ID .ID (LIT ,.ID )\n"
    },
    {
        "code": "\n\ndef removeRoute(self, destination, xs):\n    if (xs == self.routes[destination]):\n        del self.routes[destination]\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 37950
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    if (ID ==ID .ID [ID ]):\n        del ID .ID [ID ]\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    if (ID ==ID .ID [ID ):\n        del ID .ID [ID ]\n"
    },
    {
        "code": "\n\ndef route(self, stanza):\n\n    if destination.host in self.routes:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37951
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n    if ID .ID in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "import \n\ndef ID (ID ,ID ):\n\n    if ID .ID in ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef authenticatorFactory():\n    return ListenComponentAuthenticator(self.secret)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37952
        },
        "correct_code": "\ndef ID ():\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID ():\n    return ID (with .ID )\n"
    },
    {
        "code": "\ndef __init__(self, router, secret='secret'):\n\n    def authenticatorFactory():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 37953
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n\n    def ID ():\n        pass \n",
        "wrong_code": "\ndef except ID (ID ,ID ,ID =LIT ):\n\n    def ID ():\n        pass \n"
    },
    {
        "code": "\ndef logDataIn(buf):\n    log.msg(\"RECV (%d): %r\" % (xs.serial, buf))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 37954
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT %(ID .ID ,ID ))\n",
        "wrong_code": "\ndef ID (assert ID ):\n    ID .ID (LIT %(ID .ID ,ID ))\n"
    },
    {
        "code": "\ndef logDataOut(buf):\n    log.msg(\"SEND (%d): %r\" % (xs.serial, buf))\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 37955
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT %(ID .ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n!=    ID .ID (LIT %(ID .ID ,ID ))\n"
    },
    {
        "code": "\n\ndef onAuthenticated(self, xs):\n    xs.addObserver(xmlstream.STREAM_END_EVENT, self.onConnectionLost, 0,\n                                               destination, xs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 37956
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID .ID ,ID .ID ,LIT ,\n    ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID .ID ,ID .ID ,LIT =,\n    ID ,ID )\n"
    },
    {
        "code": "\n\ndef onError(self, reason):\n    log.err(reason, \"Stream Error\")\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 37957
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):del \n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\n\ndef onConnectionLost(self, destination, xs, reason):\n    self.router.removeRoute(destination, xs)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/words/protocols/jabber/component.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 37958
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ,ID finally :\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef __getitem__(key):\n    \"\"\"Get a value for a key\n\n        A KeyError is raised if there is no value for the key.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "",
            "id": 37959
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n/"
    },
    {
        "code": "\ndef get(key, default=None):\n    \"\"\"Get a value for a key\n\n        The default is returned if there is no value for the key.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 37960
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):!\n    LIT \n"
    },
    {
        "code": "\ndef __contains__(key):\n    \"\"\"Tell if a key exists in the mapping.\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37961
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID ==ID ):\n    LIT \n"
    },
    {
        "code": "\ndef __delitem__(key):\n    \"\"\"Delete a value from the mapping using the key.\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37962
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef __setitem__(key, value):\n    \"\"\"Set a new item in the mapping.\"\"\"\n    \n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37963
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n",
        "wrong_code": "\ndef ID (,ID ):\n    LIT \n\n"
    },
    {
        "code": "\ndef keys():\n    \"\"\"Return the keys of the mapping object.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37964
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID ():\n+    LIT \n"
    },
    {
        "code": "\ndef __iter__():\n    \"\"\"Return an iterator for the keys of the mapping object.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 37965
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID ():\n    (\n"
    },
    {
        "code": "\ndef values():\n    \"\"\"Return the values of the mapping object.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37966
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\nID ():\n    LIT \n"
    },
    {
        "code": "\ndef items():\n    \"\"\"Return the items of the mapping object.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37967
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID ()elif \n    LIT \n"
    },
    {
        "code": "\ndef __len__():\n    \"\"\"Return the number of items.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37968
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID ()or \n    LIT \n"
    },
    {
        "code": "\ndef iterkeys():\n    \"iterate over keys; equivalent to __iter__\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37969
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID (:\n    LIT \n"
    },
    {
        "code": "\ndef itervalues():\n    \"iterate over values\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 37970
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef except ():\n    LIT \n"
    },
    {
        "code": "\ndef iteritems():\n    \"iterate over items\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37971
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID global ):\n    LIT \n"
    },
    {
        "code": "\ndef copy():\n    \"return copy of dict\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 37972
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID except ():\n    LIT \n"
    },
    {
        "code": "\ndef has_key(key):\n    \"\"\"Tell if a key exists in the mapping; equivalent to __contains__\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 37973
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID )while \n    LIT \n"
    },
    {
        "code": "\ndef clear():\n    \"delete all items\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 37974
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "is \ndef ID ():\n    LIT \n"
    },
    {
        "code": "\ndef update(d):\n    \" Update D from E: for k in E.keys(): D[k] = E[k]\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 37975
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef setdefault(key, default=None):\n    \"D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 37976
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    assert \n"
    },
    {
        "code": "\ndef pop(k, *args):\n    \"\"\"remove specified key and return the corresponding value\n        *args may contain a single default value, or may not be supplied.\n        If key is not found, default is returned if given, otherwise \n        KeyError is raised\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37977
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ,*):\n    LIT \n"
    },
    {
        "code": "\ndef popitem():\n    \"\"\"remove and return some (key, value) pair as a\n        2-tuple; but raise KeyError if mapping is empty\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/zope/zope/interface/common/mapping.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 37978
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID (:\n    LIT \n"
    },
    {
        "code": "\ndef __init__(self, addr=None):\n    if addr is None:\n        pass\n    if HANDSHAKE is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/ase/android.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 37979
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n    if ID try is not ID :\n        pass \n"
    },
    {
        "code": "\ndef _rpc(self, method, *args):\n    if result['error'] is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/ase/android.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 37980
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    if ID [LIT ]is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):    if ID [LIT ]is not ID :\n        pass \n"
    },
    {
        "code": "def rpc_call(*args):\n    return self._rpc(name, *args)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/ase/android.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 37981
        },
        "correct_code": "def ID (*ID ):\n    return ID .ID (ID ,*ID )\n",
        "wrong_code": "def ID (*ID lambda ):\n    return ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef __getattr__(self, name):\n    def rpc_call(*args):\n        return self._rpc(name, *args)\n    return rpc_call\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/ase/android.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37982
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    def ID (*ID ):\n        return ID .ID (ID ,*ID )\n    return ID \n",
        "wrong_code": "\ndef ID !ID ,ID ):\n    def ID (*ID ):\n        return ID .ID (ID ,*ID )\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self, response):\n    try:\n        pass\n    except:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 37983
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    continue try :\n        pass \n    except :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, email=None, password=None, domain=None, source=None,\n             server='apps-apis.google.com', additional_headers=None,\n             **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 37984
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ,\nID =LIT ,ID =ID ,\n**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID nonlocal \nID =LIT ,ID =ID ,\n**ID ):\n    pass \n"
    },
    {
        "code": "\ndef _baseURL(self):\n    return \"/a/feeds/%s\" % self.domain \n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37985
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID else ID ):\n    return LIT %ID .ID \n"
    },
    {
        "code": "\ndef AddAllElementsFromAllPages(self, link_finder, func):\n    while next is not None:\n        for a_entry in next_feed.entry:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37986
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    while ID is not ID :\n        for ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID break ID ,ID ,ID ):\n    while ID is not ID :\n        for ID in ID .ID :\n            pass \n"
    },
    {
        "code": "def GetGeneratorForAllEmailLists(\n  self, num_retries=gdata.service.DEFAULT_NUM_RETRIES,\n  delay=gdata.service.DEFAULT_DELAY, backoff=gdata.service.DEFAULT_BACKOFF):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 37987
        },
        "correct_code": "def ID (\nID ,ID =ID .ID .ID ,\nID =ID .ID .ID ,ID =ID .ID .ID ):\n    pass \n",
        "wrong_code": "def ID (\nID ,ID =ID .ID .ID ,\nID =ID .ID .ID ,ID =ID .ID class .ID ):\n    pass \n"
    },
    {
        "code": "\ndef RetrieveAllEmailLists(self):\n    \"\"\"Retrieve all email list of a domain.\"\"\"\n\n    ret = self.RetrievePageOfEmailLists()\n    # pagination\n    return self.AddAllElementsFromAllPages(\n      ret, gdata.apps.EmailListFeedFromString)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 37988
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID =ID .ID ()\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID )):\n    LIT \n\n    ID =ID .ID ()\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef RetrieveEmailList(self, list_name):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 86,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37989
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass or "
    },
    {
        "code": "\ndef RetrieveEmailLists(self, recipient):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 37990
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID :ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef RemoveRecipientFromEmailList(self, recipient, list_name):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37991
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef GetGeneratorForAllRecipients(\n  self, list_name, num_retries=gdata.service.DEFAULT_NUM_RETRIES,\n  delay=gdata.service.DEFAULT_DELAY, backoff=gdata.service.DEFAULT_BACKOFF):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 37992
        },
        "correct_code": "\ndef ID (\nID ,ID ,ID =ID .ID .ID ,\nID =ID .ID .ID ,ID =ID .ID .ID ):\n    pass \n",
        "wrong_code": "\ndef ID (\nID ,ID ,ID elif =ID .ID .ID ,\nID =ID .ID .ID ,ID =ID .ID .ID ):\n    pass \n"
    },
    {
        "code": "\ndef RetrieveAllRecipients(self, list_name):\n    \"\"\"Retrieve all recipient of an email list.\"\"\"\n\n    ret = self.RetrievePageOfRecipients(list_name)\n    # pagination\n    return self.AddAllElementsFromAllPages(\n      ret, gdata.apps.EmailListRecipientFeedFromString)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 96,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37993
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID =ID .ID (ID )\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID =ID .ID (ID )\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID ..ID )\n"
    },
    {
        "code": "\ndef AddRecipientToEmailList(self, recipient, list_name):\n\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 37994
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )\n\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef DeleteEmailList(self, list_name):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 37995
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :]pass \n"
    },
    {
        "code": "\ndef CreateEmailList(self, list_name):\n    try: \n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 37996
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef elif ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef DeleteNickname(self, nickname):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 37997
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef GetGeneratorForAllNicknames(\n  self, num_retries=gdata.service.DEFAULT_NUM_RETRIES,\n  delay=gdata.service.DEFAULT_DELAY, backoff=gdata.service.DEFAULT_BACKOFF):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 37998
        },
        "correct_code": "\ndef ID (\nID ,ID =ID .ID .ID ,\nID =ID .ID .ID ,ID =ID .ID .ID ):\n    pass \n",
        "wrong_code": "\ndef ID (\nID ,ID =ID .ID ID ,\nID =ID .ID .ID ,ID =ID .ID .ID ):\n    pass \n"
    },
    {
        "code": "\ndef RetrieveAllNicknames(self):\n    \"\"\"Retrieve all nicknames in the domain\"\"\"\n\n    ret = self.RetrievePageOfNicknames()\n    # pagination\n    return self.AddAllElementsFromAllPages(\n      ret, gdata.apps.NicknameFeedFromString)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 37999
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID =ID .ID ()\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID .ID .ID )\n",
        "wrong_code": "\nID (ID ):\n    LIT \n\n    ID =ID .ID ()\n    #COMMENT\n\n    return ID .ID (\n    ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef RetrieveNicknames(self, user_name):\n    try:\n        pass\n    except gdata.service.RequestError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python3-alpha/python-libs/gdata/apps/service.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 38000
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):    try :\n        pass \n    except ID .ID .ID as ID :\n        pass \n"
    }
]