[
    {
        "code": "\ndef exit(self):\n    raise SystemExit(0)\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/examples/web/singleclickandrun.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21501
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID .:\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef started(self, *args):\n    try:\n        pass\n    except ValueError:\n        pass\n\n    raise SystemExit(code)\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/core/exitcodeapp.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21502
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    try :\n        pass \n    except ID :\n        pass \n\n    raise ID (ID )\n",
        "wrong_code": "\ndef (ID ,*ID ):\n    try :\n        pass \n    except ID :\n        pass \n\n    raise ID (ID )\n"
    },
    {
        "code": "\n\ndef main():\n    App().run()\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/core/exitcodeapp.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21503
        },
        "correct_code": "\n\ndef ID ():\n    ID ().ID ()\n",
        "wrong_code": "\n\nID ():\n    ID ().ID ()\n"
    },
    {
        "code": "\n\ndef test_main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/core/test_loader.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21504
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef !=():\n    pass \n"
    },
    {
        "code": "\ndef foo(self):\n    print(\"A!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 21505
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (*)\n"
    },
    {
        "code": "\ndef foo(self):\n    print(\"B!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21506
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (LIT )\n    or "
    },
    {
        "code": "\ndef foo(self):\n    print(\"C!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21507
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID (LIT )\n"
    },
    {
        "code": "\ndef foo(self):\n    print(\"D!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21508
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (LIT )await "
    },
    {
        "code": "\ndef foo(self):\n    print(\"E!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 21509
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (assert )\n"
    },
    {
        "code": "\ndef foo(self):\n    print(\"F!\")\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21510
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef ID (ID async ):\n    ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_kill():\n    while len(a):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 21511
        },
        "correct_code": "\n\ndef ID ():\n    while ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID ()assert :\n    while ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_inspect():\n    if pytest.PYVER[:2] == (3, 3):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21512
        },
        "correct_code": "\n\ndef ID ():\n    if ID .ID [:LIT ]==(LIT ,LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID .ID [:LIT ]nonlocal ==(LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_findroot():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 21513
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    lambda pass \n"
    },
    {
        "code": "\n\ndef test_reprhandler():\n    a = A()\n    s = reprhandler(a.foo)\n    assert s == \"<handler[*][foo] (A.foo)>\"\n\n    f = lambda: None\n    pytest.raises(AttributeError, reprhandler, f)\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 105,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 21514
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID ()\n    ID =ID (ID .ID )\n    assert ID ==LIT \n\n    ID =lambda :ID \n    ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID ()\n    ID =ID (ID .ID )\n    assert ID ==LIT \n\n    ID =lambda :ID \n    ID .ID (ID ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_tryimport():\n    import os\n    m = tryimport(\"os\")\n    assert m is os\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21515
        },
        "correct_code": "\n\ndef ID ():\n    import ID \n    ID =ID (LIT )\n    assert ID is ID \n",
        "wrong_code": "\n\ndef ID ():\n    import ID \n    ID =ID (LIT \n    assert ID is ID \n"
    },
    {
        "code": "\n\ndef test_tryimport_obj():\n    from os import path\n    m = tryimport(\"os\", \"path\")\n    assert m is path\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 21516
        },
        "correct_code": "\n\ndef ID ():\n    from ID import ID \n    ID =ID (LIT ,LIT )\n    assert ID is ID \n",
        "wrong_code": "\n\ndef ID ():\n    from ID import ID \n    ID =ID else (LIT ,LIT )\n    assert ID is ID \n"
    },
    {
        "code": "\n\ndef test_tryimport_fail():\n    m = tryimport(\"asdf\")\n    assert m is None\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/tools/test_tools.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21517
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (LIT )\n    assert ID is ID \n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID (LIT )\n    assert ID is \n"
    },
    {
        "code": "\ndef index(self):\n    return \"Hello World!\"\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/web/test_methods.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 21518
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT class \n"
    },
    {
        "code": "\n\ndef test_GET(webapp):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/web/test_methods.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21519
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID or ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_HEAD(webapp):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circuits/circuits/tests/web/test_methods.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 21520
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \n*"
    },
    {
        "code": "def _final_version(parsed_version):\n    for part in parsed_version:\n        if (part[:1] == '*') and (part not in _final_parts):\n            return False\n    return True\n",
        "metadata": {
            "file": "py150_files/data/vmi356/filemanager/bootstrap.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21521
        },
        "correct_code": "def ID (ID ):\n    for ID in ID :\n        if (ID [:LIT ]==LIT )and (ID not in ID ):\n            return LIT \n    return LIT \n",
        "wrong_code": "def ID (ID ),:\n    for ID in ID :\n        if (ID [:LIT ]==LIT )and (ID not in ID ):\n            return LIT \n    return LIT \n"
    },
    {
        "code": "\ndef message(self, *args, **opts):\n    if len(args) < 1 or len(args) > 1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/commands/rmwatcher.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 21522
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID (ID )<LIT or ID (ID )>LIT :\n        pass \n",
        "wrong_code": "\n]def ID (ID ,*ID ,**ID ):\n    if ID (ID )<LIT or ID (ID )>LIT :\n        pass \n"
    },
    {
        "code": "\ndef execute(self, arbiter, props):\n    self._get_watcher(arbiter, props['name'])\n    return arbiter.rm_watcher(props['name'], props.get('nostop', False))\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/commands/rmwatcher.py",
            "fix_location": 97,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21523
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID [LIT ])\n    return ID .ID (ID [LIT ],ID .ID (LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID [LIT ])\n    return ID .ID (ID [LIT ],ID .ID (LIT ,LIT )pass \n"
    },
    {
        "code": "\ndef __init__(self, host=None, port=None, prefix=None, sample_rate=1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21524
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =LIT :\n    pass \n"
    },
    {
        "code": "\ndef send(self, bucket, value, sample_rate=None):\n    if sample_rate != 1:\n        pass\n\n    if self.prefix:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 74,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21525
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    if ID !=LIT :\n        pass \n\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    if ID !=LIT :\n        pass \n\n    if ID ID :\n        pass \n"
    },
    {
        "code": "\ndef decrement(self, bucket, delta=1):\n    if delta > 0:\n        delta = - delta\n    self.increment(bucket, delta)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21526
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID >LIT :\n        ID =-ID \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,in ,ID =LIT ):\n    if ID >LIT :\n        ID =-ID \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef increment(self, bucket, delta=1):\n    self.send(bucket, \"%d|c\" % delta)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21527
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    ID .ID (ID ,LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT :\n    ID .ID (ID ,LIT %ID )\n"
    },
    {
        "code": "\ndef gauge(self, bucket, value):\n    self.send(bucket, \"%s|g\" % value)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 21528
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT %ID )\n",
        "wrong_code": "\ndef global ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT %ID )\n"
    },
    {
        "code": "\ndef timed(self, bucket, value):\n    self.send(bucket, \"%s|ms\" % value)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21529
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (,LIT %ID )\n"
    },
    {
        "code": "\ndef stop(self):\n    self.socket.close()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21530
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef __init__(self, endpoint, pubsub_endpoint, check_delay, ssh_server,\n             **config):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21531
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\n**ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID ,ID ,ID ,ID ,\n**ID ):\n    pass \n"
    },
    {
        "code": "\ndef handle_recv(self, data):\n    watcher_name, action, msg = self.split_data(data)\n    self.statsd.increment('%s.%s' % (watcher_name, action))\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21532
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID ,ID ,ID =ID .ID (ID )\n    ID .ID .ID (LIT %(ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ,ID ,ID =ID .ID (ID )\n    ID ..ID (LIT %(ID ,ID ))\n"
    },
    {
        "code": "\ndef stop(self):\n    self.statsd.stop()\n    super(StatsdEmitter, self).stop()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 21533
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n    finally ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "\ndef __init__(self, *args, **config):\n    self.loop_rate = float(config.get(\"loop_rate\", 60))  # in seconds\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21534
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID =ID (ID .ID (LIT ,LIT ))#COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ,*,**ID ):\n    ID .ID =ID (ID .ID (LIT ,LIT ))#COMMENT\n\n"
    },
    {
        "code": "\ndef handle_init(self):\n    self.period = ioloop.PeriodicCallback(self.look_after,\n                                          self.loop_rate * 1000, self.loop)\n    self.period.start()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 77,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21535
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID (ID .ID ,\n    ID .ID *LIT ,ID .ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID .ID (ID .ID ,\n    ID .ID *LIT ,ID .ID )\n    ID ID .ID ()\n"
    },
    {
        "code": "\ndef handle_stop(self):\n    self.period.stop()\n    self.statsd.stop()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21536
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID .ID ()\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef handle_recv(self, data):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21537
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n    :"
    },
    {
        "code": "\ndef look_after(self):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/plugins/statsd.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21538
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    (raise ID ()\n"
    },
    {
        "code": "def send(msg):\n    sys.stdout.write('{0}:{1}\\n'.format(child_id, msg))\n    sys.stdout.flush()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/tests/test_command_signal.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21539
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID (LIT .ID (ID ,ID ))\n    ID .ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID (LIT .ID (ID ,ID ))\n    ID .finally .ID ()\n"
    },
    {
        "code": "\ndef callback(sig, frame=None):\n    global exiting\n    name = names[sig]\n    send(name)\n    if name in exit_signals:\n        exiting = True\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/tests/test_command_signal.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21540
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    global ID \n    ID =ID [ID ]\n    ID (ID )\n    if ID in ID :\n        ID =LIT \n",
        "wrong_code": "\ndef ID (,ID =ID ):\n    global ID \n    ID =ID [ID ]\n    ID (ID )\n    if ID in ID :\n        ID =LIT \n"
    },
    {
        "code": "\n\ndef run_process_recursive(child_id):\n    run_process(child_id, recursive=True, num_children=2)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/tests/test_command_signal.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21541
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID (ID ,ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID (ID ,ID =LIT ,(=LIT )\n"
    },
    {
        "code": "\ndef assert_read(channel, *values):\n    for value in values:\n        data = yield read_from_stream(stream, channel)\n        self.assertEqual(data, value)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/tests/test_command_signal.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 21542
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    for ID in ID :\n        ID =yield ID (ID ,ID )\n        ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    for ID in ID :\n        ID =yield ID .(ID ,ID )\n        ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _reload_hook(self, key, hook, ignore_error):\n    hook_name = key.split('.')[-1]\n    self._resolve_hook(hook_name, hook, ignore_error, reload_module=True)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 21543
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID (LIT )[-LIT ]\n    ID .ID (ID ,ID ,ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID (LIT )[-LIT ]\n    ID .ID (while ID ,ID ,ID ,ID =LIT )\n"
    },
    {
        "code": "\n@property\ndef _redirector_class(self):\n    return PapaRedirector if self.use_papa else Redirector\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21544
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID if ID .ID else ID \n",
        "wrong_code": "\n@ID \ndef ID (ID )\n    return ID if ID .ID else ID \n"
    },
    {
        "code": "\n@property\ndef _process_class(self):\n    return PapaProcessProxy if self.use_papa else Process\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 21545
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID if ID .ID else ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID if ID .ID :else ID \n"
    },
    {
        "code": "\ndef _create_redirectors(self):\n    if self.stdout_stream or self.stderr_stream:\n        if self.stream_redirector:\n            pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21546
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID or ID .ID :\n        if ID .ID :\n            pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID or ID .ID :\n        if ID .ID :\n            pass !=else :\n        pass \n"
    },
    {
        "code": "\ndef _resolve_hooks(self, hooks):\n    if hooks is None:\n        pass\n    for name, (callable_or_name, ignore_failure) in hooks.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 21547
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n    for ID ,(ID ,ID )in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID is ID :\n        as pass \n    for ID ,(ID ,ID )in ID .ID ():\n        pass \n"
    },
    {
        "code": "\n@property\ndef pending_socket_event(self):\n    return self.on_demand and not self.arbiter.socket_event\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 21548
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID and not ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef return ID (ID ):\n    return ID .ID and not ID .ID .ID \n"
    },
    {
        "code": "\n@classmethod\ndef load_from_config(cls, config):\n    if 'env' in config:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21549
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    if LIT in ID :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):\n    if LIT in ID :\n        pass \n        global "
    },
    {
        "code": "\n@util.debuglog\ndef initialize(self, evpub_socket, sockets, arbiter):\n    self.evpub_socket = evpub_socket\n    self.sockets = sockets\n    self.arbiter = arbiter\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21550
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ,ID ,ID ):\n    ID .continue =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.processes)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 21551
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ]ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef notify_event(self, topic, msg):\n\n    if self.evpub_socket is not None and not self.evpub_socket.closed:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21552
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    if ID .ID is not ID and not ID .ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID yield :\n\n    if ID .ID is not ID and not ID .ID .ID :\n        pass \n"
    },
    {
        "code": "\n@gen.coroutine\n@util.debuglog\ndef remove_expired_processes(self):\n    for i, process in enumerate(expired_processes):\n        if removes[i]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 21553
        },
        "correct_code": "\n@ID .ID \n@ID .ID \ndef ID (ID ):\n    for ID ,ID in ID (ID ):\n        if ID [ID ]:\n            pass \n",
        "wrong_code": "\n@ID .ID \n@ID .ID for \ndef ID (ID ):\n    for ID ,ID in ID (ID ):\n        if ID [ID ]:\n            pass \n"
    },
    {
        "code": "\n@gen.coroutine\n@util.debuglog\ndef reap_and_manage_processes(self):\n    \"\"\"Reap & manage processes.\"\"\"\n    if self.is_stopped():\n        return\n    self.reap_processes()\n    yield self.manage_processes()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 21554
        },
        "correct_code": "\n@ID .ID \n@ID .ID \ndef ID (ID ):\n    LIT \n    if ID .ID ():\n        return \n    ID .ID ()\n    yield ID .ID ()\n",
        "wrong_code": "\n@ID .ID \n@ID .ID \ndef ID (ID ):\n    LIT \n    if ID .import ID ():\n        return \n    ID .ID ()\n    yield ID .ID ()\n"
    },
    {
        "code": "\ndef _get_sockets_fds(self):\n    # XXX should be cached\n    if self.sockets is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21555
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    if ID .ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    if ID and .ID is ID :\n        pass \n"
    },
    {
        "code": "\n@util.debuglog\ndef send_signal_children(self, pid, signum, recursive=False):\n    \"\"\"Send signal to all children.\n        \"\"\"\n    process = self.processes[int(pid)]\n    process.send_signal_children(signum, recursive)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 21556
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ,ID ,ID =LIT ):\n    LIT \n    ID =ID .ID [ID (ID )]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ,ID ,ID =LIT ):\n    LIT \n    ID =ID .ID [ID (ID ()]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\n@util.debuglog\ndef status(self):\n    return self._status\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 3,
            "fix_type": "delete",
            "id": 21557
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n@==ID .ID \ndef ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\n@util.debuglog\ndef process_info(self, pid, extended=False):\n    if extended and 'extended_stats' in self.hooks:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21558
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ,ID =LIT ):\n    if ID and LIT in ID .ID :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ,ID =LIT ):\n    if ID and LIT in ID \n    ID :\n        pass \n"
    },
    {
        "code": "\n@util.debuglog\ndef info(self, extended=False):\n    if extended and 'extended_stats' in self.hooks:\n        for pid, stats in result.items():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21559
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ):\n    if ID and LIT in ID .ID :\n        for ID ,ID in ID .ID ():\n            pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,=LIT ):\n    if ID and LIT in ID .ID :\n        for ID ,ID in ID .ID ():\n            pass \n"
    },
    {
        "code": "\n@util.synchronized(\"watcher_stop\")\n@gen.coroutine\ndef stop(self):\n    # stop streams too since we are stopping the watcher completely\n    yield self._stop(True)\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 21560
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \ndef ID (ID ):\n#COMMENT\n\n    yield ID .ID (LIT )\n",
        "wrong_code": "\n@ID .ID (or )\n@ID .ID \ndef ID (ID ):\n#COMMENT\n\n    yield ID .ID (LIT )\n"
    },
    {
        "code": "\ndef get_active_processes(self):\n    \"\"\"return a list of pids of active processes (not already stopped)\"\"\"\n    return [p for p in self.processes.values()\n            if p.status not in (DEAD_OR_ZOMBIE, UNEXISTING)]\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21561
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return [ID for ID in ID .ID .ID ()\n    if ID .ID not in (ID ,ID )]\n",
        "wrong_code": "\ndef ID (ID break :\n    LIT \n    return [ID for ID in ID .ID .ID ()\n    if ID .ID not in (ID ,ID )]\n"
    },
    {
        "code": "\ndef get_active_pids(self):\n    \"\"\"return a list of pids of active processes (not already stopped)\"\"\"\n    return [p.pid for p in self.processes.values()\n            if p.status not in (DEAD_OR_ZOMBIE, UNEXISTING)]\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21562
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return [ID .ID for ID in ID .ID .ID ()\n    if ID .ID not in (ID ,ID )]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return [ID .ID for ID in ID .ID .ID ()\n    if ID for ID not in (ID ,ID )]\n"
    },
    {
        "code": "\n@property\ndef pids(self):\n    \"\"\"Returns a list of PIDs\"\"\"\n    return [process.pid for process in self.processes]\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 21563
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return [ID .ID for ID in ID .ID ]\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return [ID .ID for ID in ID .ID ]\n)"
    },
    {
        "code": "\n@property\ndef _nextwid(self):\n    try:\n        pass\n    except IndexError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21564
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "pass @ID \ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\n@util.synchronized(\"watcher_start\")\n@gen.coroutine\ndef start(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 21565
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\n@ID .if ID \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n@util.synchronized(\"watcher_restart\")\n@gen.coroutine\ndef restart(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 21566
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\nimport ID .ID \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n@gen.coroutine\n@util.debuglog\ndef _restart(self):\n    yield self._stop()\n    yield self._start()\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 21567
        },
        "correct_code": "\n@ID .ID \n@ID .ID \ndef ID (ID ):\n    yield ID .ID ()\n    yield ID .ID ()\n",
        "wrong_code": "\n@ID .ID \n@ID .ID \ndef ID (finally ID ):\n    yield ID .ID ()\n    yield ID .ID ()\n"
    },
    {
        "code": "\n@util.synchronized(\"watcher_reload\")\n@gen.coroutine\ndef reload(self, graceful=True, sequential=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21568
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \ndef ID (ID ,ID =LIT ,ID =LIT ):\n    pass \n",
        "wrong_code": "or \n@ID .ID (LIT )\n@ID .ID \ndef ID (ID ,ID =LIT ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\n@gen.coroutine\ndef set_numprocesses(self, np):\n    if np < 0:\n        pass\n    if self.singleton and np > 1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 100,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21569
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID <LIT :\n        pass \n    if ID .ID and ID >LIT :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID <LIT :\n        pass \n    if ID .ID and ID >LIT :\n        pass import "
    },
    {
        "code": "\n@util.synchronized(\"watcher_incr\")\n@gen.coroutine\n@util.debuglog\ndef incr(self, nb=1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21570
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \n@ID .ID \ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\n@ID ID (LIT )\n@ID .ID \n@ID .ID \ndef ID (ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\n@util.synchronized(\"watcher_decr\")\n@gen.coroutine\n@util.debuglog\ndef decr(self, nb=1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 21571
        },
        "correct_code": "\n@ID .ID (LIT )\n@ID .ID \n@ID .ID \ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )@ID .ID \n@ID .ID \ndef ID (ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef is_stopping(self):\n    return self._status == 'stopping'\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21572
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID ==LIT !="
    },
    {
        "code": "\ndef is_stopped(self):\n    return self._status == 'stopped'\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "==",
            "id": 21573
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID nonlocal LIT \n"
    },
    {
        "code": "\ndef is_active(self):\n    return self._status == 'active'\n",
        "metadata": {
            "file": "py150_files/data/circus-tent/circus/circus/watcher.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21574
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return assert .ID ==LIT \n"
    },
    {
        "code": "\n@unittest.skip(\"TODO\")\ndef test_count_internal_ballots(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21575
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    finally pass \n"
    },
    {
        "code": "\ndef test_get_majority(self):\n    for total, expected in cases:\n        with self.subTest(total=total, expected=expected):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 21576
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        with ID .ID (ID =ID ,ID =ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        with ID .ID (ID =ID ,ID =return ID ):\n            pass \n"
    },
    {
        "code": "\ndef test_get_winner(self):\n    for totals, winner in cases:\n        with self.subTest(totals=totals, winner=winner):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 21577
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        with ID .ID (ID =ID ,ID =ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        with ID .ID (ID =ID ,ID =ID ):\n            pass \nin "
    },
    {
        "code": "\ndef test_get_lowest__no_totals(self):\n    \"\"\"Test passing an empty totals dict.\"\"\"\n    with self.assertRaises(ValueError):\n        get_lowest({})\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21578
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID ({})\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    with ID .ID (ID None :\n        ID ({})\n"
    },
    {
        "code": "\ndef test_get_lowest(self):\n    for totals, lowest in cases:\n        with self.subTest(totals=totals, lowest=lowest):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21579
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        with ID .ID (ID =ID ,ID =ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID nonlocal ID in ID :\n        with ID .ID (ID =ID ,ID =ID ):\n            pass \n"
    },
    {
        "code": "\ndef _test_parse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjerdonek/open-rcv/openrcv/test/test_counting.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21580
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.iface = UCSCEnsemblInterface('Bio.Seq.Genome.HUMAN.hg18')\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 21581
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\nglobal     ID .ID =ID (LIT )\n"
    },
    {
        "code": "\ndef test_nonexistent(self):\n    'Test trying to use a genome with no Ensembl data at UCSC'\n    badname = 'Nonexistent.Fake.Bogus'\n    try:\n        badiface = UCSCEnsemblInterface(badname)\n    except KeyError:\n        return\n    raise ValueError(\"Bad sequence name %s has failed to return an error\" %\n                     badname)\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 88,
            "fix_type": "delete",
            "id": 21582
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =LIT \n    try :\n        ID =ID (ID )\n    except ID :\n        return \n    raise ID (LIT %\n    ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =LIT \n    try :\n        ID =ID (ID )\n    except ID :\n    while return \n    raise ID (LIT %\n    ID )\n"
    },
    {
        "code": "\ndef test_transcriptdb(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21583
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_genedb(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21584
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    (\n"
    },
    {
        "code": "\ndef test_proteindb(self):\n    self.assertEqual(repr(prot), 'ENSP00000372525')\n    self.assertEqual(repr(prot.sequence), 'ENSP00000372525[0:801]')\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21585
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID (ID ),LIT )\n    ID .ID (ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):for     ID .ID (ID (ID ),LIT )\n    ID .ID (ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_exondb(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 21586
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n*def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_snp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21587
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef /(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_maps(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cjlee112/pygr/tests/apps_ucscensembl_test.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21588
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n.ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self, username=None, context=None):\n\n    if username is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ckan/ckanapi/ckanapi/localckan.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21589
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n\n    if ID is ID :\n        pass \n",
        "wrong_code": "def ID (ID ,ID =ID ,ID =ID *:\n\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef get_site_username(self):\n    user = self._get_action('get_site_user')({'ignore_auth': True}, ())\n    return user['name']\n",
        "metadata": {
            "file": "py150_files/data/ckan/ckanapi/ckanapi/localckan.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21590
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )({LIT :LIT },())\n    return ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID while :\n    ID =ID .ID (LIT )({LIT :LIT },())\n    return ID [LIT ]\n"
    },
    {
        "code": "\n\ndef load_class(full_class_string):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ckcollab/polished/polished/main.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21591
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ckcollab/polished/polished/main.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 21592
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\ncontinue     pass \n"
    },
    {
        "code": "\ndef test_01_config(self):\n    shutil.rmtree('/tmp/lxc', ignore_errors=True)\n    out = subprocess.check_output('lxc-config lxc.lxcpath', shell=True, close_fds=True).strip()\n    assert out == '/tmp/lxc'\n",
        "metadata": {
            "file": "py150_files/data/claudyus/LXC-Web-Panel/tests/mock_lxc.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21593
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID =LIT )\n    ID =ID .ID (LIT ,ID =LIT ,ID =LIT ).ID ()\n    assert ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID =LIT )\n    ID =ID .ID (LIT ,ID =LIT ,ID =LIT ).ID )\n    assert ID ==LIT \n"
    },
    {
        "code": "\ndef test_04_ls(self):\n    out = subprocess.check_output('lxc-ls --fancy | grep test', shell=True, close_fds=True).strip()\n    assert 'lxctest' in out\n",
        "metadata": {
            "file": "py150_files/data/claudyus/LXC-Web-Panel/tests/mock_lxc.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21594
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,ID =LIT ,ID =LIT ).ID ()\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID (ID :\n    ID =ID .ID (LIT ,ID =LIT ,ID =LIT ).ID ()\n    assert LIT in ID \n"
    },
    {
        "code": "\ndef test_06_destroy(self):\n    subprocess.check_output('lxc-destroy -n lxctest', shell=True, close_fds=True).strip()\n    assert 'lxctest' not in os.listdir('/tmp/lxc')\n",
        "metadata": {
            "file": "py150_files/data/claudyus/LXC-Web-Panel/tests/mock_lxc.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21595
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID =LIT ,ID =LIT ).ID ()\n    assert LIT not in ID .ID (LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID (LIT ,ID =LIT ,ID =LIT ).ID ()\n    assert LIT not in ID .ID (LIT )\n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clintecker/django-chunks/chunks/migrations/0002_auto__add_field_chunk_description.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21596
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef in (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef backwards(self, orm):\n    \n    # Deleting field 'Chunk.description'\n    db.delete_column('chunks_chunk', 'description')\n",
        "metadata": {
            "file": "py150_files/data/clintecker/django-chunks/chunks/migrations/0002_auto__add_field_chunk_description.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 21597
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (assert LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self, point, callable, name=None, priority=50):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 21598
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,except ID ,ID ,ID =ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef _get_on(self):\n    raise AttributeError(_attr_error)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21599
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    raise ID (ID /\n"
    },
    {
        "code": "def _set_on(self, value):\n    raise AttributeError(_attr_error)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21600
        },
        "correct_code": "def ID (ID ,ID ):\n    raise ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    raise ID (ID \n"
    },
    {
        "code": "def tool_decorator(f):\n    if not hasattr(f, \"_cp_config\"):\n        pass\n    for k, v in kwargs.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21601
        },
        "correct_code": "def ID (ID ):\n    if not ID (ID ,LIT ):\n        pass \n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "def ID (ID ):\n*    if not ID (ID ,LIT ):\n        pass \n    for ID ,ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef _setup(self):\n    if p is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21602
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID yield ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, callable, name=None):\n    Tool.__init__(self, 'before_handler', callable, name)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21603
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,LIT lambda ID ,ID )\n"
    },
    {
        "code": "def handle_func(*a, **kw):\n    if not handled:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 21604
        },
        "correct_code": "def ID (*ID ,**ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "def ID (*ID ,**ID ):try \n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef handler(self, *args, **kwargs):\n    def handle_func(*a, **kw):\n        if not handled:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 101,
            "fix_type": "delete",
            "id": 21605
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    def ID (*ID ,**ID ):\n        if not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    def ID (*ID ,**ID ):\n        if not ID :\n            pass \n            *"
    },
    {
        "code": "\ndef _wrapper(self, **kwargs):\n    if self.callable(**kwargs):\n        cherrypy.serving.request.handler = None\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21606
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    if ID .ID (**ID ):\n        ID .ID .ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,**ID :\n    if ID .ID (**ID ):\n        ID .ID .ID .ID =ID \n"
    },
    {
        "code": "\ndef _setup(self):\n    if p is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21607
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID :\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, newhandler, point='before_handler', name=None, priority=50):\n    self.newhandler = newhandler\n    self._point = point\n    self._name = name\n    self._priority = priority\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 21608
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def wrap(*args, **kwargs):\n    return self.newhandler(innerfunc, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 21609
        },
        "correct_code": "def ID (*ID ,**ID ):\n    return ID .ID (ID ,*ID ,**ID )\n",
        "wrong_code": "def ID (*ID ,**ID ):\n    break ID .ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef callable(self, debug=False):\n    def wrap(*args, **kwargs):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21610
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    def ID (*ID ,**ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    def ID (*ID ,**ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, callable, name=None):\n    Tool.__init__(self, None, callable, name)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21611
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID (ID ,,ID ,ID )\n"
    },
    {
        "code": "\ndef _wrapper(self):\n    self.callable(**self._merged_args())\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21612
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (**ID .ID ())\n",
        "wrong_code": "\ndef ID (yield ID ):\n    ID .ID (**ID .ID ())\n"
    },
    {
        "code": "\ndef _setup(self):\n    \"\"\"Hook this tool into cherrypy.request.\n\n        The standard CherryPy request object will automatically call this\n        method when the tool is \"turned on\" in config.\n        \"\"\"\n    cherrypy.serving.request.error_response = self._wrapper\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21613
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID ...ID .ID =ID .ID \n"
    },
    {
        "code": "\ndef __init__(self):\n    # _sessions.init must be bound after headers are read\n    Tool.__init__(self, 'before_request_body', _sessions.init)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21614
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (ID ,LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    -.ID (ID ,LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef _lock_session(self):\n    cherrypy.serving.session.acquire_lock()\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21615
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID except (ID ):\n    ID .ID .ID .ID ()\n"
    },
    {
        "code": "\ndef _setup(self):\n    if p is None:\n        pass\n    if locking == 'implicit':\n        pass\n    elif locking == 'early':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21616
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if +is ID :\n        pass \n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef regenerate(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21617
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef _setargs(self):\n    for name in dir(cptools.SessionAuth):\n        if not name.startswith(\"__\"):\n            setattr(self, name, None)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21618
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID ):\n        if not ID .ID (LIT ):\n            ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID ):\n        if not not .ID (LIT ):\n            ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef _wrapper(self, **kwargs):\n    if _caching.get(**kwargs):\n        pass\n    else:\n        if request.cacheable:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21619
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    if ID .ID (**ID ):\n        pass \n    else :\n        if ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    if ID .ID (**ID ):\n        elif \n    else :\n        if ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef _setup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21620
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):in     pass \n"
    },
    {
        "code": "\ndef __init__(self, namespace):\n    self.namespace = namespace\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 21621
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =from ID \n"
    },
    {
        "code": "\ndef __setattr__(self, name, value):\n    # If the Tool._name is None, supply it from the attribute name.\n    if isinstance(value, Tool):\n        if value._name is None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21622
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if ID (ID ,ID ):\n        if ID .ID is ID :\n            pass \n",
        "wrong_code": "\ndef while (ID ,ID ,ID ):\n#COMMENT\n\n    if ID (ID ,ID ):\n        if ID .ID is ID :\n            pass \n"
    },
    {
        "code": "def populate(k, v):\n    toolname, arg = k.split(\".\", 1)\n    bucket = map.setdefault(toolname, {})\n    bucket[arg] = v\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21623
        },
        "correct_code": "def ID (ID ,ID ):\n    ID ,ID =ID .ID (LIT ,LIT )\n    ID =ID .ID (ID ,{})\n    ID [ID ]=ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ,ID =ID .ID (LIT ,LIT )\n    ID =ID .ID (,{})\n    ID [ID ]=ID \n"
    },
    {
        "code": "\ndef __enter__(self):\n    def populate(k, v):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21624
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,except ):\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, point, warnmsg=None):\n    self.point = point\n    if warnmsg is not None:\n        self.warnmsg = warnmsg\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21625
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    if ID is not ID :\n        ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,)=ID ):\n    ID .ID =ID \n    if ID is not ID :\n        ID .ID =ID \n"
    },
    {
        "code": "def tool_decorator(f):\n    return f\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 21626
        },
        "correct_code": "def ID (ID ):\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    return ID \n    try "
    },
    {
        "code": "\ndef __call__(self, *args, **kwargs):\n    warnings.warn(self.warnmsg)\n    def tool_decorator(f):\n        return f\n    return tool_decorator\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21627
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID .ID )\n    def ID (ID ):\n        return ID \n    return ID \n",
        "wrong_code": "for \ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID .ID )\n    def ID (ID ):\n        return ID \n    return ID \n"
    },
    {
        "code": "\ndef _setup(self):\n    warnings.warn(self.warnmsg)\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/server/cherrypy/cherrypy/_cptools.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 21628
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .try ID )\n"
    },
    {
        "code": "\ndef __init__(self, rsrcmgr, pageno=1, laparams=None):\n    self.pageno = pageno\n    self.laparams = laparams\n    self._stack = []\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21629
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =[]\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ):\n    ID .ID =ID \n    ID .=ID \n    ID .ID =[]\n    return \n"
    },
    {
        "code": "\ndef begin_page(self, page, ctm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21630
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef end_page(self, page):\n    if self.laparams is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21631
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n.    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef begin_figure(self, name, bbox, matrix):\n    self.cur_item = LTFigure(name, bbox, mult_matrix(matrix, self.ctm))\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21632
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID (ID ,ID ,ID (ID ,ID .ID ))\n    return \n",
        "wrong_code": "\ndef (ID ,ID ,ID ,ID ):\n    ID .ID =ID (ID ,ID ,ID (ID ,ID .ID ))\n    return \n"
    },
    {
        "code": "\ndef end_figure(self, _):\n    self.cur_item = self._stack.pop()\n    self.cur_item.add(fig)\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21633
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .ID .ID ()\n    ID .ID .ID (ID )\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .==.ID ()\n    ID .ID .ID (ID )\n    return \n"
    },
    {
        "code": "\ndef render_image(self, name, stream):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 21634
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\nas     pass \n"
    },
    {
        "code": "\ndef render_char(self, matrix, font, fontsize, scaling, rise, cid):\n    try:\n        pass\n    except PDFUnicodeNotDefined:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 21635
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID !(ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef handle_undefined_char(self, font, cid):\n    if self.debug:\n        print >>sys.stderr, 'undefined: %r, %r' % (font, cid)\n    return '(cid:%d)' % cid\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 91,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21636
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        ID >>ID .ID ,LIT %(ID ,ID )\n    return LIT %ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        ID >>ID .ID ,LIT %(ID ,ID )\n    return LIT %\n"
    },
    {
        "code": "\ndef receive_layout(self, ltpage):\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 21637
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return \n",
        "wrong_code": "\ndef ID (ID ID ):\n    return \n"
    },
    {
        "code": "\ndef __init__(self, rsrcmgr, pageno=1, laparams=None):\n    PDFLayoutAnalyzer.__init__(self, rsrcmgr, pageno=pageno, laparams=laparams)\n    self.result = None\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 21638
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ):\n    ID .ID (ID ,ID ,ID =ID ,ID =ID )\n    ID .ID =ID \n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ):\n    (ID .ID (ID ,ID ,ID =ID ,ID =ID )\n    ID .ID =ID \n    return \n"
    },
    {
        "code": "\ndef receive_layout(self, ltpage):\n    self.result = ltpage\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21639
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =\n    return \n"
    },
    {
        "code": "\ndef get_result(self):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21640
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID not ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, rsrcmgr, outfp, codec='utf-8', pageno=1, laparams=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 21641
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID import LIT ,ID =LIT ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, rsrcmgr, outfp, codec='utf-8', pageno=1, laparams=None,\n             showpageno=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21642
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =ID ,\nID =LIT ):\n    pass \n",
        "wrong_code": "global \ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =ID ,\nID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef write_text(self, text):\n    self.outfp.write(text.encode(self.codec, 'ignore'))\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21643
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID (ID .ID ,LIT ))\n    return \n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID .ID (ID .ID (ID .ID ,LIT ))\n    return \n"
    },
    {
        "code": "\n# Some dummy functions to save memory/CPU when all that is wanted is text.\n# This stops all the image and drawing ouput from being recorded and taking\n# up RAM.\ndef render_image(self, name, stream):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 21644
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):]\n    pass \n"
    },
    {
        "code": "def paint_path(self, gstate, stroke, fill, evenodd, path):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21645
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "ID ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef write(self, text):\n    self.outfp.write(text)\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21646
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n    return \n",
        "wrong_code": "\ndef (ID ,ID ):\n    ID .ID .ID (ID )\n    return \n"
    },
    {
        "code": "\ndef write_header(self):\n    self.write('<html><head>\\n')\n    self.write('<meta http-equiv=\"Content-Type\" content=\"text/html; charset=%s\">\\n' % self.codec)\n    self.write('</head><body>\\n')\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21647
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT %ID .ID )\n    ID .ID (LIT )\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .(LIT %ID .ID )\n    ID .ID (LIT )\n    return \n"
    },
    {
        "code": "\ndef write_footer(self):\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 21648
        },
        "correct_code": "\ndef ID (ID ):\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    )\n"
    },
    {
        "code": "\ndef write_text(self, text):\n    self.write(enc(text, self.codec))\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21649
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ,ID .ID ))\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ,ID .ID )\n    return \n"
    },
    {
        "code": "\ndef place_rect(self, color, borderwidth, x, y, w, h):\n    if color is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21650
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID /ID ,ID ,ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef place_border(self, color, borderwidth, item):\n    self.place_rect(color, borderwidth, item.x0, item.y1, item.width, item.height)\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21651
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID (ID ,ID ,ID .ID ,ID .ID ,ID .ID ,ID .ID )\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .(ID ,ID ,ID .ID ,ID .ID ,ID .ID ,ID .ID )\n    return \n"
    },
    {
        "code": "\ndef place_image(self, item, borderwidth, x, y, w, h):\n    if self.outdir is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21652
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    if ID .ID is not ID \n        pass \n"
    },
    {
        "code": "\ndef place_text(self, color, text, x, y, size):\n    if color is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21653
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef else (ID ,ID ,ID ,ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef begin_textbox(self, color, borderwidth, x, y, w, h, writing_mode):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21654
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    !=\n"
    },
    {
        "code": "\ndef put_text(self, text, fontname, fontsize):\n    if font != self._font:\n        if self._font is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21655
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID !=ID .ID :\n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID !=ID .ID :\n        if ID .ID is not ID or \n            pass \n"
    },
    {
        "code": "\ndef put_newline(self):\n    self.write('<br>')\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21656
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    return \n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID (LIT )\n    return \n"
    },
    {
        "code": "\ndef end_textbox(self, color):\n    if self._font is not None:\n        pass\n    self.write('</div>')\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21657
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n    ID .ID (LIT )\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n        continue ID .ID (LIT )\n        return \n    "
    },
    {
        "code": "def show_group(item):\n    if isinstance(item, LTTextGroup):\n        self.place_border('textgroup', 1, item)\n        for child in item:\n            show_group(child)\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21658
        },
        "correct_code": "def ID (ID ):\n    if ID (ID ,ID ):\n        ID .ID (LIT ,LIT ,ID )\n        for ID in ID :\n            ID (ID )\n    return \n",
        "wrong_code": "def ID (ID ):\n    if ID (ID ,ID ):\n        ID .ID (LIT class LIT ,ID )\n        for ID in ID :\n            ID (ID )\n    return \n"
    },
    {
        "code": "\ndef close(self):\n    self.write_footer()\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21659
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .)\n    return \n"
    },
    {
        "code": "\ndef __init__(self, rsrcmgr, outfp, codec='utf-8', pageno=1, laparams=None, outdir=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21660
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,,ID =LIT ,ID =LIT ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef write_header(self):\n    self.outfp.write('<?xml version=\"1.0\" encoding=\"%s\" ?>\\n' % self.codec)\n    self.outfp.write('<pages>\\n')\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 21661
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT %ID .ID )\n    ID .ID .ID (LIT )\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (del LIT %ID .ID )\n    ID .ID .ID (LIT )\n    return \n"
    },
    {
        "code": "\ndef write_footer(self):\n    self.outfp.write('</pages>\\n')\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21662
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT ])\n    return \n"
    },
    {
        "code": "\ndef write_text(self, text):\n    self.outfp.write(enc(text, self.codec))\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21663
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID (ID ,ID .ID ))\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID try :\n    ID .ID .ID (ID (ID ,ID .ID ))\n    return \n"
    },
    {
        "code": "def show_group(item):\n    if isinstance(item, LTTextBox):\n        pass\n    elif isinstance(item, LTTextGroup):\n        for child in item:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21664
        },
        "correct_code": "def ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    elif ID (ID ,ID ):\n        for ID in ID :\n            pass \n",
        "wrong_code": "def ID (ID ):\n    if ID (and ,ID ):\n        pass \n    elif ID (ID ,ID ):\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef close(self):\n    self.write_footer()\n    return\n",
        "metadata": {
            "file": "py150_files/data/clips/pattern/pattern/web/pdf/converter.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21665
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    return \n",
        "wrong_code": "async \ndef ID (ID ):\n    ID .ID ()\n    return \n"
    },
    {
        "code": "\ndef response_success(response, code=None):\n    if code is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21666
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =):\n    if ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef response_error(response, code=None):\n    if code is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21667
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,:\n    if ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef compare_req_resp(req_obj, resp_obj):\n    for k,v in req_obj.iteritems():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21668
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID !ID ():\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 21669
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef tearDown(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21670
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "assert \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_update_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21671
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    global pass \n"
    },
    {
        "code": "\ndef test_model_validation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21672
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass del "
    },
    {
        "code": "\ndef test_resource_fields(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21673
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef def (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_restricted_auth(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 21674
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ==ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get(self):\n    resp = self.app.get('/user/')\n    objs = json.loads(resp.data)['data']\n    self.assertEqual(len(objs), 2)\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 87,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21675
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID =ID .ID (ID .ID )[LIT ]\n    ID .ID (ID (ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID =ID .ID (ID .ID )[LIT ]\n    ID .ID (ID ID ),LIT )\n"
    },
    {
        "code": "\ndef test_get_primary_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21676
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID if :\n    pass \n"
    },
    {
        "code": "\ndef test_get_empty_primary_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21677
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ["
    },
    {
        "code": "\ndef test_post(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21678
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_post_auto_art_tag(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21679
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_broken_reference(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21680
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (-):\n    pass \n"
    },
    {
        "code": "\ndef test_dummy_auth(self):\n    resp = self.app.get('/auth/')\n    response_success(resp, code=401)\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21681
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ID (LIT )\n    ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_pagination(self):\n    for i in range(1,102):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21682
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (LIT ,LIT ):\n        pass \n",
        "wrong_code": "\ndef (ID ):\n    for ID in ID (LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\ndef test_garbage_args(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21683
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass *"
    },
    {
        "code": "\ndef test_fields(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 21684
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_invalid_json(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21685
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "!\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_chunked_request(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21686
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID else (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_dbref_vs_objectid(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 21687
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )for :\n    pass \n"
    },
    {
        "code": "\ndef test_view_methods(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21688
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (]ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_methods_success(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21689
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID while ):\n    pass \n"
    },
    {
        "code": "\ndef test_fetch_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21690
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_list_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21691
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ID :\n    pass \n"
    },
    {
        "code": "\ndef test_create_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21692
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (=):\n    pass \n"
    },
    {
        "code": "\ndef test_update_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 21693
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    lambda "
    },
    {
        "code": "\ndef test_bulk_update_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21694
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID with :\n    pass \n"
    },
    {
        "code": "\ndef test_delete_method_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21695
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_request_bad_accept(self):\n    self.assertEqual(resp.data, 'Invalid Accept header requested')\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21696
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    elif ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.app = example.app.test_client()\n    example.documents.Language.drop_collection()\n    example.documents.Person.drop_collection()\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21697
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID .ID ()\n    ID .ID .ID .ID ()\n    ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID =ID .ID .ID ()\n    ID .ID .ID .ID ()\n    ID .ID .ID .ID ()\n"
    },
    {
        "code": "\ndef tearDown(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21698
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID class ):\n    pass \n"
    },
    {
        "code": "\ndef test_person(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 21699
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nas "
    },
    {
        "code": "\ndef test_receive_bad_json(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21700
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_send_bad_json(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/closeio/flask-mongorest/tests/__init__.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21701
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/search.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21702
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID else :\n    pass \n"
    },
    {
        "code": "\ndef run(self, options, args):\n    if not args:\n        pass\n    if sys.stdout.isatty():\n        pass\n    if pypi_hits:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/search.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21703
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID :\n        pass \n    if ID .ID .ID ():\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n    if not ID :\n        pass \n    if ID .ID .ID ():\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef search(self, query, index_url):\n    return hits\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/search.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21704
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):nonlocal     return ID \n"
    },
    {
        "code": "\n\ndef compare_versions(version1, version2):\n    try:\n        pass\n    # in case of abnormal version number, fall back to LooseVersion\n    except ValueError:\n        pass\n    try:\n        pass\n    except TypeError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/search.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 21705
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    try :\n        pass \n        #COMMENT\n\n    except ID :\n        pass \n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    try :\n        pass \n        #COMMENT\n\n    except ID :\n        for pass \n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\n\ndef highest_version(versions):\n    return reduce((lambda v1, v2: compare_versions(v1, v2) == 1 and v1 or v2), versions)\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/search.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 21706
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID ((lambda ID ,ID :ID (ID ,ID )==LIT and ID or ID ),ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID ((with lambda ID ,ID :ID (ID ,ID )==LIT and ID or ID ),ID )\n"
    },
    {
        "code": "def initialize(self, io_loop=None):\n    self.io_loop = io_loop or IOLoop.current()\n    self.channel = pycares.Channel(sock_state_cb=self._sock_state_cb)\n    self.fds = {}\n",
        "metadata": {
            "file": "py150_files/data/D-L/SimpleBookMarks/src/tornado/platform/caresresolver.py",
            "fix_location": 73,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 21707
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID .ID =ID or ID .ID ()\n    ID .ID =ID .ID (ID =ID .ID )\n    ID .ID ={}\n",
        "wrong_code": "def ID (ID ,ID =ID ):\n    ID .ID =ID or ID .ID ()\n    ID .ID =ID .ID (ID ID .ID )\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef _sock_state_cb(self, fd, readable, writable):\n    if not state:\n        pass\n    elif fd in self.fds:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/D-L/SimpleBookMarks/src/tornado/platform/caresresolver.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21708
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if not ID :\n        pass \n    elif ID in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if not ID !=\n        pass \n    elif ID in ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _handle_events(self, fd, events):\n    if events & IOLoop.READ:\n        pass\n    if events & IOLoop.WRITE:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/D-L/SimpleBookMarks/src/tornado/platform/caresresolver.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 21709
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID &ID .ID :\n        pass \n    if ID &ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID &ID .ID :\n        pass \n    if assert ID &ID .ID :\n        pass \n"
    },
    {
        "code": "def wsgi_app(self, environ, start_response):\n    status = \"200 OK\"\n    response_headers = [(\"Content-Type\", \"text/plain\")]\n    start_response(status, response_headers)\n    return [b\"Hello world!\"]\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 21710
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID =LIT \n    ID =[(LIT ,LIT )]\n    ID (ID ,ID )\n    return [LIT ]\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID =LIT \n    ID =[(LIT :,LIT )]\n    ID (ID ,ID )\n    return [LIT ]\n"
    },
    {
        "code": "\ndef get_app(self):\n    return WSGIContainer(validator(self.wsgi_app))\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21711
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID .ID ))\n",
        "wrong_code": "\ndef (ID ):\n    return ID (ID (ID .ID ))\n"
    },
    {
        "code": "\ndef test_simple(self):\n    response = self.fetch(\"/\")\n    self.assertEqual(response.body, b\"Hello world!\")\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 21712
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    (ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "def get(self):\n    self.write(\"Hello world!\")\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21713
        },
        "correct_code": "def ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "def get(self, path):\n    self.write(path)\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21714
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID not :\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_simple(self):\n    response = self.fetch(\"/\")\n    self.assertEqual(response.body, b\"Hello world!\")\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21715
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID class (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_path_quoting(self):\n    response = self.fetch(\"/path/foo%20bar%C3%A9\")\n    self.assertEqual(response.body, u(\"foo bar\\u00e9\").encode(\"utf-8\"))\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21716
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,ID (LIT ).ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):)    ID =ID .ID (LIT )\n    ID .ID (ID .ID ,ID (LIT ).ID (LIT ))\n"
    },
    {
        "code": "\ndef test_types(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21717
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nexcept ID (ID ):\n    pass \n"
    },
    {
        "code": "def get_app(self):\n    return WSGIContainer(validator(WSGIApplication(self.get_handlers())))\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21718
        },
        "correct_code": "def ID (ID ):\n    return ID (ID (ID (ID .ID ())))\n",
        "wrong_code": "def ID (ID )\n    return ID (ID (ID (ID .ID ())))\n"
    },
    {
        "code": "def get_app(self):\n    self.app = WSGIApplication(self.get_handlers(),\n                               **self.get_app_kwargs())\n    return WSGIContainer(validator(self.app))\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21719
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID (ID .ID (),\n    **ID .ID ())\n    return ID (ID (ID .ID ))\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =ID (ID .ID [),\n    **ID .ID ())\n    return ID (ID (ID .ID ))\n"
    },
    {
        "code": "\n\ndef wrap_web_tests():\n    for cls in web_test.wsgi_safe_tests:\n        class WSGIWrappedTest(cls):\n            def get_app(self):\n                pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/lib/python2.7/site-packages/tornado/test/wsgi_test.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 21720
        },
        "correct_code": "\n\ndef ID ():\n    for ID in ID .ID :\n        class ID (ID ):\n            def ID (ID ):\n                pass \n",
        "wrong_code": "\n\ndef ID ()break :\n    for ID in ID .ID :\n        class ID (ID ):\n            def ID (ID ):\n                pass \n"
    },
    {
        "code": "\ndef setup_module(mod):\n    setup_module_1(mod)\n    setup_module_2(mod)\n    setup_module_3(mod)\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/share/doc/pycurl/tests/multi_socket_select_test.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21721
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID )\n    ID (ID )\n    ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ID \n    ID (ID )\n    ID (ID )\n"
    },
    {
        "code": "\ndef teardown_module(mod):\n    teardown_module_3(mod)\n    teardown_module_2(mod)\n    teardown_module_1(mod)\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/share/doc/pycurl/tests/multi_socket_select_test.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 21722
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID )\n    ID (ID )\n    ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID )\n    ID (ID )\n    ID (ID )\n    ="
    },
    {
        "code": "\n# socket callback\ndef socket(event, socket, multi, data):\n    if event == pycurl.POLL_REMOVE:\n        pass\n    else:\n        if socket not in sockets:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/share/doc/pycurl/tests/multi_socket_select_test.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21723
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ,ID ,ID ):\n    if ID ==ID .ID :\n        pass \n    else :\n        if ID not in ID :\n            pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID ,ID ,ID ):\n    if ID ==ID .ID :\n        pass \n    else break \n        if ID not in ID :\n            pass \n"
    },
    {
        "code": "\ndef check(self, event, multi, socket_events):\n    for event_, multi_ in socket_events:\n        if event == event_ and multi == multi_:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudaice/simple-data/misc/virtenv/share/doc/pycurl/tests/multi_socket_select_test.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 21724
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    for ID ,ID in ID :\n        if ID ==ID and ID ==ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    for ID ,ID in ID :\n        if ID import ==ID and ID ==ID :\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, url, username, language='en'):\n\n    if has_sqoop_has_security():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 21725
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n\n    if ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID else ,ID ,ID =LIT ):\n\n    if ID ():\n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"SqoopClient at %s with security %s\" % (self._url, self._security_enabled)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21726
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID ID ,ID .ID )\n"
    },
    {
        "code": "\n@property\ndef url(self):\n    return self._url\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21727
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return .ID \n"
    },
    {
        "code": "\n@property\ndef headers(self):\n    return {\n      'Accept': 'application/json',\n      'Accept-Language': self._language,\n      'sqoop-user-name': self._username\n    }\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 21728
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return {\n    LIT :LIT ,\n    LIT :ID .ID ,\n    LIT :ID .ID \n    }\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return {\n    LIT :LIT ,\n    LIT :ID .ID ,\n    LIT :ID .for ID \n    }\n"
    },
    {
        "code": "\ndef get_version(self):\n    return self._root.get('version', headers=self.headers)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21729
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID (LIT ,ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID ID (LIT ,ID =ID .ID )\n"
    },
    {
        "code": "\ndef get_driver(self):\n    resp_dict = self._root.get('%s/driver' % API_VERSION, headers=self.headers)\n    driver = Driver.from_dict(resp_dict)\n    return driver\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21730
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT %ID ,ID =ID .ID )\n    ID =ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID !=(ID ):\n    ID =ID .ID .ID (LIT %ID ,ID =ID .ID )\n    ID =ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef get_connectors(self):\n    connectors = [ Connector.from_dict(connector_dict) for connector_dict in resp_dict['connectors'] ]\n    return connectors\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 21731
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n"
    },
    {
        "code": "\ndef get_connector(self, connector_id):\n    if resp_dict['connector']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21732
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]:\n        pass ["
    },
    {
        "code": "\ndef get_links(self):\n    links = [Link.from_dict(link_dict) for link_dict in resp_dict['links']]\n    return links\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21733
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID None for ID in ID [LIT ]]\n    return ID \n"
    },
    {
        "code": "\ndef get_link(self, link_id):\n    if resp_dict['link']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 21734
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [LIT \n    :\n        pass \n"
    },
    {
        "code": "\ndef create_link(self, link):\n\n    # Lame check that iterates to make sure we have an error\n    # Server responds with: {'validation-result': [{},{}]} or {'validation-result': [{KEY: ERROR},{KEY: ERROR}]}\n    for result in resp['validation-result']:\n        if result:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21735
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID [LIT ]:\n        if ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,global ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID [LIT ]:\n        if ID :\n            pass \n"
    },
    {
        "code": "\ndef delete_link(self, link):\n    resp = self._root.delete('%s/link/%d/' % (API_VERSION, link.id), headers=self.headers)\n    return None\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21736
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .(LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID \n"
    },
    {
        "code": "\ndef get_jobs(self):\n    jobs = [Job.from_dict(job_dict) for job_dict in resp_dict['jobs']]\n    return jobs\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 21737
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]return ID \n"
    },
    {
        "code": "\ndef get_job(self, job_id):\n    if resp_dict['job']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21738
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ]:\n        :\n"
    },
    {
        "code": "\ndef delete_job(self, job):\n    resp_dict = self._root.delete('%s/job/%s' % (API_VERSION, job.id), headers=self.headers)\n    return None\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21739
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .(LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID \n"
    },
    {
        "code": "\ndef get_job_status(self, job):\n    resp_dict = self._root.get('%s/job/%d/status' % (API_VERSION, job.id), headers=self.headers)\n    return Submission.from_dict(resp_dict['submission'])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21740
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID .ID (ID [LIT ])\n",
        "wrong_code": "\nexcept ID (ID ,ID ):\n    ID =ID .ID .ID (LIT %(ID ,ID .ID ),ID =ID .ID )\n    return ID .ID (ID [LIT ])\n"
    },
    {
        "code": "\ndef start_job(self, job):\n    if resp_dict['submission']['status'] in SqoopClient.STATUS_BAD:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 21741
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ][LIT ]in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):    if ID [LIT ][LIT ]in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef get_submissions(self):\n    submissions = [Submission.from_dict(submission_dict) for submission_dict in resp_dict['submissions']]\n    return submissions\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21742
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n",
        "wrong_code": "\ndef ID (class ID ):\n    ID =[ID .ID (ID )for ID in ID [LIT ]]\n    return ID \n"
    },
    {
        "code": "\ndef set_user(self, user):\n    self._user = user\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21743
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID lambda :\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_language(self, language):\n    self._language = language\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/sqoop/src/sqoop/client/base.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21744
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):global     ID .ID =ID \n"
    },
    {
        "code": "\ndef handle(self, *args, **options):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/useradmin/src/useradmin/management/commands/useradmin_sync_with_unix.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 21745
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID and ):\n    pass \n"
    },
    {
        "code": "\n\ndef get_cluster_or_404(id):\n    try:\n        pass\n    except (TypeError, ValueError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/apps/zookeeper/src/zookeeper/utils.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21746
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\nID (ID ):\n    try :\n        pass \n    except (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef update_last_login(sender, user, **kwargs):\n    \"\"\"\n    A signal receiver which updates the last_login date for\n    the user logging in.\n    \"\"\"\n    user.last_login = timezone.now()\n    user.save(update_fields=['last_login'])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 21747
        },
        "correct_code": "\n\ndef ID (ID ,ID ,**ID ):\n    LIT \n    ID .ID =ID .ID ()\n    ID .ID (ID =[LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,**ID )-:\n    LIT \n    ID .ID =ID .ID ()\n    ID .ID (ID =[LIT ])\n"
    },
    {
        "code": "def get_by_natural_key(self, codename, app_label, model):\n    return self.get(\n        codename=codename,\n        content_type=ContentType.objects.get_by_natural_key(app_label,\n                                                            model),\n    )\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 75,
            "fix_type": "delete",
            "id": 21748
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    return ID .ID (\n    ID =ID ,\n    ID =ID .ID .ID (ID ,\n    ID ),\n    )\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n    return ID .ID (\n    ID =ID ,\n    ID =ID .ID .-ID (ID ,\n    ID ),\n    )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"%s | %s | %s\" % (\n        six.text_type(self.content_type.app_label),\n        six.text_type(self.content_type),\n        six.text_type(self.name))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21749
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(\n    ID .ID (ID .ID .ID ),\n    ID .ID (ID .ID ),\n    ID .ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(\n    ID .(ID .ID .ID ),\n    ID .ID (ID .ID ),\n    ID .ID (ID .ID ))\n"
    },
    {
        "code": "\ndef natural_key(self):\n    return (self.codename,) + self.content_type.natural_key()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21750
        },
        "correct_code": "\ndef ID (ID ):\n    return (ID .ID ,)+ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return (ID .ID ,+ID .ID .ID ()\n"
    },
    {
        "code": "def get_by_natural_key(self, name):\n    return self.get(name=name)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 21751
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID (ID =ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID .ID or (ID =ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21752
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):or     return ID .ID \n"
    },
    {
        "code": "\ndef natural_key(self):\n    return (self.name,)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21753
        },
        "correct_code": "\ndef ID (ID ):\n    return (ID .ID ,)\n",
        "wrong_code": "\ndef ID (ID )assert \n    return (ID .ID ,)\n"
    },
    {
        "code": "\n@classmethod\ndef normalize_email(cls, email):\n    try:\n        pass\n    except ValueError:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21754
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \nreturn ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef get_by_natural_key(self, username):\n    return self.get(**{self.model.USERNAME_FIELD: username})\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 21755
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (**{ID .ID .ID :ID })\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (**{ID .ID .ID :ID })class \n"
    },
    {
        "code": "\ndef _create_user(self, username, email, password,\n                 is_staff, is_superuser, **extra_fields):\n    if not username:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21756
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,\nID ,ID ,**ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,\n[,ID ,**ID ):\n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef create_user(self, username, email=None, password=None, **extra_fields):\n    return self._create_user(username, email, password, False, False,\n                             **extra_fields)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21757
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,**ID ):\n    return ID .ID (ID ,ID ,ID ,LIT ,LIT ,\n    **ID )\n",
        "wrong_code": "in \ndef ID (ID ,ID ,ID =ID ,ID =ID ,**ID ):\n    return ID .ID (ID ,ID ,ID ,LIT ,LIT ,\n    **ID )\n"
    },
    {
        "code": "\ndef create_superuser(self, username, email, password, **extra_fields):\n    return self._create_user(username, email, password, True, True,\n                             **extra_fields)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21758
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,**ID ):\n    return ID .ID (ID ,ID ,ID ,LIT ,LIT ,\n    **ID )\n",
        "wrong_code": "continue def ID (ID ,ID ,ID ,ID ,**ID ):\n    return ID .ID (ID ,ID ,ID ,LIT ,LIT ,\n    **ID )\n"
    },
    {
        "code": "\ndef get_username(self):\n    \"Return the identifying username for this User\"\n    return getattr(self, self.USERNAME_FIELD)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21759
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID .ID )\n]"
    },
    {
        "code": "\ndef __str__(self):\n    return self.get_username()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21760
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (return )\n"
    },
    {
        "code": "\ndef natural_key(self):\n    return (self.get_username(),)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 21761
        },
        "correct_code": "\ndef ID (ID ):\n    return (ID .ID (),)\n",
        "wrong_code": "\ndef ID (ID ):\n    return =(ID .ID (),)\n"
    },
    {
        "code": "\ndef is_anonymous(self):\n    \"\"\"\n        Always returns False. This is a way of comparing User objects to\n        anonymous users.\n        \"\"\"\n    return False\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21762
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\ndef ID def (ID ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\ndef is_authenticated(self):\n    \"\"\"\n        Always return True. This is a way to tell if the user has been\n        authenticated in templates.\n        \"\"\"\n    return True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21763
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,:\n    LIT \n    return LIT \n"
    },
    {
        "code": "\ndef set_password(self, raw_password):\n    self.password = make_password(raw_password)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 21764
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .del ID =ID (ID )\n"
    },
    {
        "code": "def setter(raw_password):\n    self.set_password(raw_password)\n    self.save(update_fields=[\"password\"])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21765
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID )\n    ID .ID (ID =[LIT ])\n",
        "wrong_code": "def ID def ID ):\n    ID .ID (ID )\n    ID .ID (ID =[LIT ])\n"
    },
    {
        "code": "\ndef check_password(self, raw_password):\n    def setter(raw_password):\n        pass\n    return check_password(raw_password, self.password, setter)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21766
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    def ID (ID ):\n        pass \n    return ID (ID ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):-    def ID (ID ):\n        pass \n    return ID (ID ,ID .ID ,ID )\n"
    },
    {
        "code": "\ndef set_unusable_password(self):\n    # Sets a value that will never be a valid hash\n    self.password = make_password(None)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21767
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID =ID (ID )\n",
        "wrong_code": "\ndef ID (ID break ):\n#COMMENT\n\n    ID .ID =ID (ID )\n"
    },
    {
        "code": "\ndef has_usable_password(self):\n    return is_password_usable(self.password)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 21768
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID )if :\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef get_full_name(self):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21769
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID else :\n    raise ID ()\n"
    },
    {
        "code": "\ndef get_short_name(self):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21770
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (+ID ):\n    raise ID ()\n"
    },
    {
        "code": "\n\n# A few helper functions for common logic between User and AnonymousUser.\ndef _user_get_all_permissions(user, obj):\n    for backend in auth.get_backends():\n        if hasattr(backend, \"get_all_permissions\"):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 107,
            "fix_type": "delete",
            "id": 21771
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if ID (ID ,LIT ):\n            pass \n        +"
    },
    {
        "code": "\ndef get_group_permissions(self, obj=None):\n    for backend in auth.get_backends():\n        if hasattr(backend, \"get_group_permissions\"):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 21772
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    for ID in ID .ID ():\n        if ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    for ID in ID .import ID ():\n        if ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "\ndef get_all_permissions(self, obj=None):\n    return _user_get_all_permissions(self, obj)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21773
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return global ID (ID ,ID )\n"
    },
    {
        "code": "\ndef has_perm(self, perm, obj=None):\n\n    # Active superusers have all permissions.\n    if self.is_active and self.is_superuser:\n        pass\n\n    # Otherwise we need to check the backends.\n    return _user_has_perm(self, perm, obj)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 120,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 21774
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n\n#COMMENT\n\n    if ID .ID and ID .ID :\n        pass \n\n        #COMMENT\n\n    return ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n\n#COMMENT\n\n    if ID .ID and ID .ID :\n        pass \n\n        #COMMENT\n\n    return ID (ID ,ID ID )\n"
    },
    {
        "code": "\ndef has_perms(self, perm_list, obj=None):\n    \"\"\"\n        Returns True if the user has each of the specified permissions. If\n        object is passed, it checks if the user has all required perms for this\n        object.\n        \"\"\"\n    for perm in perm_list:\n        if not self.has_perm(perm, obj):\n            return False\n    return True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 100,
            "fix_type": "delete",
            "id": 21775
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    for ID in ID :\n        if not ID .ID (ID ,ID ):\n            return LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    for ID in ID :\n        if not ID .ID (ID ,ID ):\n            .return LIT \n    return LIT \n"
    },
    {
        "code": "\ndef has_module_perms(self, app_label):\n    \"\"\"\n        Returns True if the user has any permissions in the given app label.\n        Uses pretty much the same logic as has_perm, above.\n        \"\"\"\n    # Active superusers have all permissions.\n    if self.is_active and self.is_superuser:\n        return True\n\n    return _user_has_module_perms(self, app_label)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21776
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    #COMMENT\n\n    if ID .ID and ID .ID :\n        return LIT \n\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    #COMMENT\n\n    if ID .ID and ID .ID \n        return LIT \n\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef get_absolute_url(self):\n    return \"/users/%s/\" % urlquote(self.username)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21777
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %ID (ID .ID )import "
    },
    {
        "code": "\ndef get_full_name(self):\n    \"\"\"\n        Returns the first_name plus the last_name, with a space in between.\n        \"\"\"\n    full_name = '%s %s' % (self.first_name, self.last_name)\n    return full_name.strip()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 21778
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =LIT %(ID .ID ,ID .ID )\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =LIT %(ID .ID ,ID .ID )as \n    return ID .ID ()\n"
    },
    {
        "code": "\ndef get_short_name(self):\n    \"Returns the short name for the user.\"\n    return self.first_name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21779
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\ndef (ID ):\n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\ndef email_user(self, subject, message, from_email=None):\n    \"\"\"\n        Sends an email to this User.\n        \"\"\"\n    send_mail(subject, message, from_email, [self.email])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21780
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    LIT \n    ID (ID ,ID ,ID ,[ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    LIT \n    ID (ID ,ID ,ID ,[ID (ID ])\n"
    },
    {
        "code": "\ndef __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21781
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return 'AnonymousUser'\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21782
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "import \ndef ID (ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return isinstance(other, self.__class__)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 21783
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID else ,ID ):\n    return ID (ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __ne__(self, other):\n    return not self.__eq__(other)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21784
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return not ID .ID (ID )\n",
        "wrong_code": "]def ID (ID ,ID ):\n    return not ID .ID (ID )\n"
    },
    {
        "code": "\ndef __hash__(self):\n    return 1  # instances always return the same hash value\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21785
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID =:\n    return LIT #COMMENT\n\n"
    },
    {
        "code": "\ndef save(self):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21786
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID \n",
        "wrong_code": "pass def ID (ID ):\n    raise ID \n"
    },
    {
        "code": "\ndef delete(self):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 21787
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ):\ntry     raise ID \n"
    },
    {
        "code": "\ndef set_password(self, raw_password):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 21788
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID )del :\n    raise ID \n"
    },
    {
        "code": "\ndef check_password(self, raw_password):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21789
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    raise ID \nassert "
    },
    {
        "code": "\ndef _get_groups(self):\n    return self._groups\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21790
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID del :\n    return ID .ID \n"
    },
    {
        "code": "\ndef _get_user_permissions(self):\n    return self._user_permissions\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 21791
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .+ID \n"
    },
    {
        "code": "\ndef get_group_permissions(self, obj=None):\n    return set()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21792
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID ()\n",
        "wrong_code": "\ndef None (ID ,ID =ID ):\n    return ID ()\n"
    },
    {
        "code": "\ndef get_all_permissions(self, obj=None):\n    return _user_get_all_permissions(self, obj=obj)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21793
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID (ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return ID (ID ,ID =ID )\n    ("
    },
    {
        "code": "\ndef has_perm(self, perm, obj=None):\n    return _user_has_perm(self, perm, obj=obj)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 21794
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    return ID (ID ,ID ,ID =ID )\n",
        "wrong_code": "\ndef global ID (ID ,ID ,ID =ID ):\n    return ID (ID ,ID ,ID =ID )\n"
    },
    {
        "code": "\ndef has_perms(self, perm_list, obj=None):\n    for perm in perm_list:\n        if not self.has_perm(perm, obj):\n            return False\n    return True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21795
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    for ID in ID :\n        if not ID .ID (ID ,ID ):\n            return LIT \n    return LIT \n",
        "wrong_code": "\ndef ID from ID ,ID ,ID =ID ):\n    for ID in ID :\n        if not ID .ID (ID ,ID ):\n            return LIT \n    return LIT \n"
    },
    {
        "code": "\ndef has_module_perms(self, module):\n    return _user_has_module_perms(self, module)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21796
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (!ID ,ID ):\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef is_anonymous(self):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21797
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):None \n    return LIT \n"
    },
    {
        "code": "\ndef is_authenticated(self):\n    return False\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/auth/models.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 21798
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID )import :\n    return LIT \n"
    },
    {
        "code": "\ndef get_by_natural_key(self, app_label, model):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21799
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \nfor "
    },
    {
        "code": "\ndef _get_opts(self, model, for_concrete_model):\n    if for_concrete_model:\n        pass\n    elif model._deferred:\n        model = model._meta.proxy_for_model\n    return model._meta\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21800
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID :\n        pass \n    elif ID .ID :\n        ID =ID .ID .ID \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID :\n    if ID :\n        pass \n    elif ID .ID :\n        ID =ID .ID .ID \n    return ID .ID \n"
    },
    {
        "code": "\ndef _get_from_cache(self, opts):\n    key = (opts.app_label, opts.model_name)\n    return self.__class__._cache[self.db][key]\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21801
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =(ID .ID ,ID .ID )\n    return ID .ID .ID [ID .ID ][ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =(ID .,ID .ID )\n    return ID .ID .ID [ID .ID ][ID ]\n"
    },
    {
        "code": "\ndef get_for_model(self, model, for_concrete_model=True):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 21802
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT )if :\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef get_for_id(self, id):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21803
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef clear_cache(self):\n    \"\"\"\n        Clear out the content-type cache. This needs to happen during database\n        flushes to prevent caching of \"stale\" content type IDs (see\n        django.contrib.contenttypes.management.update_contenttypes for where\n        this gets called).\n        \"\"\"\n    self.__class__._cache.clear()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 21804
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID def .ID .ID .ID ()\n"
    },
    {
        "code": "\ndef _add_to_cache(self, using, ct):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21805
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    if not model or self.name != model._meta.verbose_name_raw:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 21806
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID or ID .ID !=ID .ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not ID or ID .ID !=ID .and ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef model_class(self):\n    \"Returns the Python model class for this type of content.\"\n    return models.get_model(self.app_label, self.model,\n                            only_installed=False)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21807
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (ID .ID ,ID .ID ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    LIT \n    return ID .ID (ID .ID ,ID .ID ,\n    ID =LIT )\n"
    },
    {
        "code": "\ndef get_object_for_this_type(self, **kwargs):\n    \"\"\"\n        Returns an object of this type for the keyword arguments given.\n        Basically, this is a proxy around this object_type's get_object() model\n        method. The ObjectNotExist exception, if thrown, will not be caught,\n        so code that calls this method should catch it.\n        \"\"\"\n    return self.model_class()._base_manager.using(self._state.db).get(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 21808
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    LIT \n    return ID .ID ().ID .ID (ID .ID .ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\nwith     LIT \n    return ID .ID ().ID .ID (ID .ID .ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef get_all_objects_for_this_type(self, **kwargs):\n    \"\"\"\n        Returns all objects of this type for the keyword arguments given.\n        \"\"\"\n    return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21809
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    LIT \n    return ID .ID ().ID .ID (ID .ID .ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    LIT lambda return ID .ID ().ID .ID (ID .ID .ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef natural_key(self):\n    return (self.app_label, self.model)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/contenttypes/models.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 21810
        },
        "correct_code": "\ndef ID (ID ):\n    return (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    async (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\n# JavaScript construction utilities for the Bounds and Projection.\ndef ol_bounds(extent):\n    return 'new OpenLayers.Bounds(%s)' % str(extent)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/admin/widgets.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21811
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    return LIT %ID (ID )\n",
        "wrong_code": "is #COMMENT\n\ndef ID (ID ):\n    return LIT %ID (ID )\n"
    },
    {
        "code": "def ol_projection(srid):\n    return 'new OpenLayers.Projection(\"EPSG:%s\")' % srid\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/admin/widgets.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21812
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID \n",
        "wrong_code": "def ID (ID :\n    return LIT %ID \n"
    },
    {
        "code": "def __init__(self, x, y):\n    self.x = x\n    self.y = y\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21813
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.e = Envelope(0, 0, 5, 5)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 21814
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID finally ID (LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test01_init(self):\n    try:\n        pass\n    except OGRException:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 21815
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass in \n"
    },
    {
        "code": "\ndef test02_properties(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21816
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nglobal "
    },
    {
        "code": "\ndef test03_equivalence(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21817
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "class def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test04_expand_to_include_pt_2_params(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21818
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n==ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test05_expand_to_include_pt_2_tuple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 21819
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nif "
    },
    {
        "code": "\ndef test06_expand_to_include_extent_4_params(self):\n    \"Testing Envelope expand_to_include -- extent as 4 parameters.\"\n    self.e.expand_to_include(-1, 1, 3, 7)\n    self.assertEqual((-1, 0, 5, 7), self.e)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 95,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21820
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (-LIT ,LIT ,LIT ,LIT )\n    ID .ID ((-LIT ,LIT ,LIT ,LIT ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (-LIT ,LIT ,LIT ,LIT )\n    ID .ID ((-LIT ,LIT ,LIT ,LIT not ,ID .ID )\n"
    },
    {
        "code": "\ndef test06_expand_to_include_extent_4_tuple(self):\n    self.e.expand_to_include((-1, 1, 3, 7))\n    self.assertEqual((-1, 0, 5, 7), self.e)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 21821
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ((-LIT ,LIT ,LIT ,LIT ))\n    ID .ID ((-LIT ,LIT ,LIT ,LIT ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID ((-LIT ,LIT ,-,LIT ))\n    ID .ID ((-LIT ,LIT ,LIT ,LIT ),ID .ID )\n"
    },
    {
        "code": "\ndef test07_expand_to_include_envelope(self):\n    self.assertEqual((-1, 0, 5, 7), self.e)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 21822
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((-LIT ,LIT ,LIT ,LIT ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((-LIT ,LIT ,LIT LIT ),ID .ID )\n"
    },
    {
        "code": "\ndef test08_expand_to_include_point(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/gdal/tests/test_envelope.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21823
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test01_fixture_load(self):\n    \"Ensure geography features loaded properly.\"\n    self.assertEqual(8, City.objects.count())\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/tests/geogapp/tests.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21824
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID .ID ())\n("
    },
    {
        "code": "\ndef test02_distance_lookup(self):\n    for cities in [cities1, cities2]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/tests/geogapp/tests.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 21825
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [ID ,ID ]:\n        pass \n",
        "wrong_code": "\ndef None ID (ID ):\n    for ID in [ID ,ID ]:\n        pass \n"
    },
    {
        "code": "\ndef test03_distance_method(self):\n    \"Testing GeoQuerySet.distance() support on non-point geography fields.\"\n    # `GeoQuerySet.distance` is not allowed geometry fields.\n    htown = City.objects.get(name='Houston')\n    qs = Zipcode.objects.distance(htown.point)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/tests/geogapp/tests.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 21826
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID .ID (ID =LIT )\n    ID =ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID .ID (ID =LIT )\n    ID =ID yield .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test04_invalid_operators_functions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/tests/geogapp/tests.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21827
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    lambda "
    },
    {
        "code": "\ndef test06_geography_area(self):\n    z = Zipcode.objects.area().get(code='77002')\n    self.assertAlmostEqual(z.area.sq_m, ref_area, tol)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/gis/tests/geogapp/tests.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21828
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID ().ID (ID =LIT )\n    ID .ID (ID .ID .ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    =ID .ID .ID ().ID (ID =LIT )\n    ID .ID (ID .ID .ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef load(self):\n    try:\n        pass\n    except (signing.BadSignature, ValueError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "",
            "id": 21829
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except (ID .ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n        except (ID .ID ,ID ):\n        pass \n    "
    },
    {
        "code": "\ndef create(self):\n    \"\"\"\n        To create a new key, we simply make sure that the modified flag is set\n        so that the cookie is set on the client for the current request.\n        \"\"\"\n    self.modified = True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21830
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    :LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef save(self, must_create=False):\n    \"\"\"\n        To save, we get the session key as a securely signed string and then\n        set the modified flag so that the cookie is set on the client for the\n        current request.\n        \"\"\"\n    self._session_key = self._get_session_key()\n    self.modified = True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21831
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID .ID ()\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID .ID (not \n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef exists(self, session_key=None):\n    \"\"\"\n        This method makes sense when you're talking to a shared resource, but\n        it doesn't matter when you're storing the information in the client's\n        cookie.\n        \"\"\"\n    return False\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21832
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (,ID =ID ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\ndef delete(self, session_key=None):\n    \"\"\"\n        To delete, we clear the session key and the underlying data structure\n        and set the modified flag so that the cookie is set on the client for\n        the current request.\n        \"\"\"\n    self._session_key = ''\n    self._session_cache = {}\n    self.modified = True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 21833
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    ID .ID =LIT \n    ID .ID ={}\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    ID .ID =LIT \n    ID .ID with ={}\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef cycle_key(self):\n    \"\"\"\n        Keeps the same data but with a new key.  To do this, we just have to\n        call ``save()`` and it will automatically save a cookie with a new key\n        at the end of the request.\n        \"\"\"\n    self.save()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21834
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID ()\n",
        "wrong_code": "\ndef ID is ID ):\n    LIT \n    ID .ID ()\n"
    },
    {
        "code": "\ndef _get_session_key(self):\n    \"\"\"\n        Most session backends don't need to override this method, but we do,\n        because instead of generating a random string, we want to actually\n        generate a secure url-safe Base64-encoded string of data as our\n        session key.\n        \"\"\"\n    session_cache = getattr(self, '_session_cache', {})\n    return signing.dumps(session_cache, compress=True,\n        salt='django.contrib.sessions.backends.signed_cookies',\n        serializer=self.serializer)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 107,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21835
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (ID ,LIT ,{})\n    return ID .ID (ID ,ID =LIT ,\n    ID =LIT ,\n    ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (ID ,LIT ,{})\n    return ID .ID (ID ,ID =LIT ,\n    ID =LIT ,\n    ID =ID import ID )\n"
    },
    {
        "code": "\n@classmethod\ndef clear_expired(cls):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/contrib/sessions/backends/signed_cookies.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21836
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": ",@ID \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self, server, params, library, value_not_found_exception):\n    if isinstance(server, six.string_types):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21837
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    if ID (ID ,ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    if ID (ID ,yield .ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n@property\ndef _cache(self):\n    if getattr(self, '_client', None) is None:\n        pass\n\n    return self._client\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21838
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if ID (ID ,LIT ,ID )is ID :\n        pass \n\n    return ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):==\n    if ID (ID ,LIT ,ID )is ID :\n        pass \n\n    return ID .ID \n"
    },
    {
        "code": "\ndef make_key(self, key, version=None):\n    # Python 2 memcache requires the key to be a byte string.\n    return force_str(super(BaseMemcachedCache, self).make_key(key, version))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 21839
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n#COMMENT\n\n    return ID (ID (ID ,ID ).ID (ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n#COMMENT\n\n    return ID (else ID (ID ,ID ).ID (ID ,ID ))\n"
    },
    {
        "code": "\ndef add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 21840
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    pass yield \n"
    },
    {
        "code": "\ndef get(self, key, default=None, version=None):\n    if val is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 21841
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,else ID =ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 21842
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\nreturn     pass \n"
    },
    {
        "code": "\ndef delete(self, key, version=None):\n    key = self.make_key(key, version=version)\n    self._cache.delete(key)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21843
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID =ID .ID (ID ,ID =ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "try def ID (ID ,ID ,ID =ID ):\n    ID =ID .ID (ID ,ID =ID )\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef get_many(self, keys, version=None):\n    if ret:\n        for k, v in ret.items():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21844
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID :\n        for ID ,ID in ID .ID ():\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):class     if ID :\n        for ID ,ID in ID .ID ():\n            pass \n"
    },
    {
        "code": "\ndef close(self, **kwargs):\n    self._cache.disconnect_all()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21845
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID return ID ,**ID ):\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef set_many(self, data, timeout=DEFAULT_TIMEOUT, version=None):\n    for key, value in data.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 21846
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    for ID ,ID in ID .ID ():lambda \n        pass \n"
    },
    {
        "code": "\ndef delete_many(self, keys, version=None):\n    l = lambda x: self.make_key(x, version=version)\n    self._cache.delete_multi(map(l, keys))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 21847
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID =lambda ID :ID .ID (ID ,ID =ID )\n    ID .ID .ID (ID (ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID =lambda ID :ID .ID (ID ,ID =ID )\n    ID .ID .ID (ID (ID ,ID )del )\n"
    },
    {
        "code": "\ndef clear(self):\n    self._cache.flush_all()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21848
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (-):\n    ID .ID .ID ()\n"
    },
    {
        "code": "def __init__(self, server, params):\n    import memcache\n    super(MemcachedCache, self).__init__(server, params,\n                                         library=memcache,\n                                         value_not_found_exception=ValueError)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 91,
            "fix_type": "delete",
            "id": 21849
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    import ID \n    ID (ID ,ID ).ID (ID ,ID ,\n    ID =ID ,\n    ID =ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    import ID \n    ID (ID ,ID ).ID (ID ,ID ,\n    ID =ID ,\n    ID =ID continue )\n"
    },
    {
        "code": "\n@property\ndef _cache(self):\n    if getattr(self, '_client', None) is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 21850
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if ID (ID ,LIT ,ID )is ID :\n        pass \n",
        "wrong_code": "\nLIT ID \ndef ID (ID ):\n    if ID (ID ,LIT ,ID )is ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, server, params):\n    self._local = local()\n    super(PyLibMCCache, self).__init__(server, params,\n                                       library=pylibmc,\n                                       value_not_found_exception=pylibmc.NotFound)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 21851
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID ()\n    ID (ID ,ID ).ID (ID ,ID ,\n    ID =ID ,\n    ID =ID .ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID is =ID ()\n    ID (ID ,ID ).ID (ID ,ID ,\n    ID =ID ,\n    ID =ID .ID )\n"
    },
    {
        "code": "\n@property\ndef _cache(self):\n    if client:\n        pass\n    if self._options:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/cache/backends/memcached.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21852
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    if ID :\n        !\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\n@staticmethod\ndef emit_post_syncdb(verbosity, interactive, database):\n    for app in models.get_apps():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/core/management/commands/flush.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21853
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID ():\n        pass \n",
        "wrong_code": "\n@ID continue def ID (ID ,ID ,ID ):\n    for ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef ignore(*args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/backends/dummy/base.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21854
        },
        "correct_code": "\ndef ID (*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (*ID ,continue **ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/backends/dummy/base.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21855
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,*ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef is_usable(self):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/backends/dummy/base.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21856
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\n[ID (ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self):\n    super(Manager, self).__init__()\n    self._set_creation_counter()\n    self.model = None\n    self._inherited = False\n    self._db = None\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21857
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID ()\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ].ID ()\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _set_creation_counter(self):\n    \"\"\"\n        Sets the creation counter value for this instance and increments the\n        class-level copy.\n        \"\"\"\n    self.creation_counter = Manager.creation_counter\n    Manager.creation_counter += 1\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21858
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID .ID \n    ID .ID +=LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID .ID \n    ID None ID +=LIT \n"
    },
    {
        "code": "\ndef _copy_to_model(self, model):\n    mgr._set_creation_counter()\n    mgr.model = model\n    mgr._inherited = True\n    return mgr\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 21859
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ()\n    ID .ID =ID \n    ID .ID =LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ()ID .ID =ID \n    ID .ID =LIT \n    return ID \n"
    },
    {
        "code": "\ndef db_manager(self, using):\n    obj = copy.copy(self)\n    obj._db = using\n    return obj\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21860
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID )\n    ID .ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID )\n    ID .ID =\n    return ID \n"
    },
    {
        "code": "\n@property\ndef db(self):\n    return self._db or router.db_for_read(self.model)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "or",
            "id": 21861
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID or ID .ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID .ID return ID .ID (ID .ID )\n"
    },
    {
        "code": "\n#######################\n# PROXIES TO QUERYSET #\n#######################\n\ndef get_queryset(self):\n    \"\"\"Returns a new QuerySet object.  Subclasses can override this method\n        to easily customize the behavior of the Manager.\n        \"\"\"\n    return QuerySet(self.model, using=self._db)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 21862
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    return ID (ID .ID ,ID =ID .ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    return ID (ID .ID ,ID del =ID .ID )\n"
    },
    {
        "code": "\ndef none(self):\n    return self.get_queryset().none()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21863
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID )None \n    return ID .ID ().ID ()\n"
    },
    {
        "code": "\ndef all(self):\n    return self.get_queryset()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21864
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (else )\n"
    },
    {
        "code": "\ndef count(self):\n    return self.get_queryset().count()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21865
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID ().()\n"
    },
    {
        "code": "\ndef dates(self, *args, **kwargs):\n    return self.get_queryset().dates(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 21866
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**or ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef datetimes(self, *args, **kwargs):\n    return self.get_queryset().datetimes(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21867
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID raise \n"
    },
    {
        "code": "\ndef distinct(self, *args, **kwargs):\n    return self.get_queryset().distinct(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 21868
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )==:\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef extra(self, *args, **kwargs):\n    return self.get_queryset().extra(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21869
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):except     return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef get(self, *args, **kwargs):\n    return self.get_queryset().get(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21870
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n    )"
    },
    {
        "code": "\ndef get_or_create(self, **kwargs):\n    return self.get_queryset().get_or_create(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21871
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID ().ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID =ID ().ID (**ID )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return self.get_queryset().create(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21872
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID ().ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID LIT ).ID (**ID )\n"
    },
    {
        "code": "\ndef bulk_create(self, *args, **kwargs):\n    return self.get_queryset().bulk_create(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21873
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (await ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef filter(self, *args, **kwargs):\n    return self.get_queryset().filter(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 21874
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID assert (*ID ,**ID )\n"
    },
    {
        "code": "\ndef aggregate(self, *args, **kwargs):\n    return self.get_queryset().aggregate(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21875
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\nif "
    },
    {
        "code": "\ndef annotate(self, *args, **kwargs):\n    return self.get_queryset().annotate(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21876
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().(*ID ,**ID )\n"
    },
    {
        "code": "\ndef complex_filter(self, *args, **kwargs):\n    return self.get_queryset().complex_filter(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 21877
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )class \n"
    },
    {
        "code": "\ndef exclude(self, *args, **kwargs):\n    return self.get_queryset().exclude(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21878
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID .**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef in_bulk(self, *args, **kwargs):\n    return self.get_queryset().in_bulk(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21879
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*None ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef iterator(self, *args, **kwargs):\n    return self.get_queryset().iterator(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21880
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*,**ID )\n"
    },
    {
        "code": "\ndef earliest(self, *args, **kwargs):\n    return self.get_queryset().earliest(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 21881
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID yield ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef latest(self, *args, **kwargs):\n    return self.get_queryset().latest(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21882
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ()while ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef first(self):\n    return self.get_queryset().first()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21883
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID )\n    return ID .ID ().ID ()\n"
    },
    {
        "code": "\ndef last(self):\n    return self.get_queryset().last()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21884
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID ().ID ()async "
    },
    {
        "code": "\ndef order_by(self, *args, **kwargs):\n    return self.get_queryset().order_by(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21885
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID pass ).ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef select_for_update(self, *args, **kwargs):\n    return self.get_queryset().select_for_update(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "*",
            "id": 21886
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,[ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef select_related(self, *args, **kwargs):\n    return self.get_queryset().select_related(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21887
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID (.ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef prefetch_related(self, *args, **kwargs):\n    return self.get_queryset().prefetch_related(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 21888
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,(ID )\n"
    },
    {
        "code": "\ndef values(self, *args, **kwargs):\n    return self.get_queryset().values(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21889
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*del ,**ID )\n"
    },
    {
        "code": "\ndef values_list(self, *args, **kwargs):\n    return self.get_queryset().values_list(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 21890
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )break :\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef update(self, *args, **kwargs):\n    return self.get_queryset().update(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 21891
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().!ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef reverse(self, *args, **kwargs):\n    return self.get_queryset().reverse(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21892
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef defer(self, *args, **kwargs):\n    return self.get_queryset().defer(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21893
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef only(self, *args, **kwargs):\n    return self.get_queryset().only(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21894
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ()ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef using(self, *args, **kwargs):\n    return self.get_queryset().using(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 21895
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**while ID )\n"
    },
    {
        "code": "\ndef exists(self, *args, **kwargs):\n    return self.get_queryset().exists(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21896
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID ().ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID (.ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef _insert(self, objs, fields, **kwargs):\n    return insert_query(self.model, objs, fields, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 21897
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,**ID ):\n    return ID (ID .ID ,ID ,ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,LIT ID ):\n    return ID (ID .ID ,ID ,ID ,**ID )\n"
    },
    {
        "code": "\ndef _update(self, values, **kwargs):\n    return self.get_queryset()._update(values, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21898
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    return ID .ID ().ID (ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    return ID .ID ().ID (ID ,**ID \n"
    },
    {
        "code": "\ndef raw(self, raw_query, params=None, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 21899
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID /(ID ,ID ,ID =ID ,*ID ,**ID ):\n    pass \n"
    },
    {
        "code": "# This class ensures managers aren't accessible via model instances.\n# For example, Poll.objects works, but poll_obj.objects raises AttributeError.\ndef __init__(self, manager):\n    self.manager = manager\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 21900
        },
        "correct_code": "#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "#COMMENT\n\n#COMMENT\n\nID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __get__(self, instance, type=None):\n    if instance != None:\n        raise AttributeError(\"Manager isn't accessible via %s instances\" % type.__name__)\n    return self.manager\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 91,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21901
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID !=ID :\n        raise ID (LIT %ID .ID )\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID !=ID :\n        raise ID (LIT %ID .ID )\n    return ID .except \n"
    },
    {
        "code": "# This class provides a better error message when you try to access a\n# manager on an abstract model.\ndef __init__(self, model):\n    self.model = model\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 21902
        },
        "correct_code": "#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    ID .ID =for ID \n"
    },
    {
        "code": "\ndef __get__(self, instance, type=None):\n    raise AttributeError(\"Manager isn't available; %s is abstract\" % (\n        self.model._meta.object_name,\n    ))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21903
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    raise ID (LIT %(\n    ID .ID .ID .ID ,\n    ))\n",
        "wrong_code": "\ndef ID (,ID ,ID =ID ):\n    raise ID (LIT %(\n    ID .ID .ID .ID ,\n    ))\n"
    },
    {
        "code": "# This class provides a better error message when you try to access a\n# manager on a swapped model.\ndef __init__(self, model):\n    self.model = model\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21904
        },
        "correct_code": "#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    finally .ID =ID \n"
    },
    {
        "code": "\ndef __get__(self, instance, type=None):\n    raise AttributeError(\"Manager isn't available; %s has been swapped for '%s'\" % (\n        self.model._meta.object_name, self.model._meta.swapped\n    ))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21905
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    raise ID (LIT %(\n    ID .ID .ID .ID ,ID .ID .ID .ID \n    ))\n",
        "wrong_code": "\ndef ID (,ID ,ID =ID ):\n    raise ID (LIT %(\n    ID .ID .ID .ID ,ID .ID .ID .ID \n    ))\n"
    },
    {
        "code": "def __init__(self, model):\n    super(EmptyManager, self).__init__()\n    self.model = model\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21906
        },
        "correct_code": "def ID (ID ,ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID (ID ,ID .ID ()\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get_queryset(self):\n    return super(EmptyManager, self).get_queryset().none()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/db/models/manager.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21907
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID ,ID ).ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID ,ID ).().ID ()\n"
    },
    {
        "code": "def value_encode(self, val):\n    # If encoded now contains any quoted chars, we need double quotes\n    # around the whole string.\n    if \"\\\\\" in encoded and not encoded.startswith('\"'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/http/cookie.py",
            "fix_location": 91,
            "fix_type": "delete",
            "id": 21908
        },
        "correct_code": "def ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    if LIT in ID and not ID .ID (LIT ):\n        pass \n",
        "wrong_code": "def ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    if LIT in ID and not ID .ID (LIT ):\n        pass )\n"
    },
    {
        "code": "def load(self, rawdata):\n    if six.PY2 and isinstance(rawdata, six.text_type):\n        pass\n    for key in self.bad_cookies:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/http/cookie.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 21909
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID .ID and ID (ID ,ID .ID ):\n        pass \n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    if ID .ID and ID (ID ,ID .ID )del :\n        pass \n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\n            # override private __set() method:\n            # (needed for using our Morsel, and for laxness with CookieError\ndef _BaseCookie__set(self, key, real_value, coded_value):\n    try:\n        pass\n    except http_cookies.CookieError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/http/cookie.py",
            "fix_location": 85,
            "fix_type": "delete",
            "id": 21910
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ,ID ):\n    try :\n        pass \n    except ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ,ID ):\n    try :\n        pass \n    except ID \n    .ID :\n        pass \n"
    },
    {
        "code": "def patched_isclass(obj):\n    return isclass(obj) and hasattr(obj, '__module__')\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21911
        },
        "correct_code": "def ID (ID ):\n    return ID (ID )and ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID )and ID global ID ,LIT )\n"
    },
    {
        "code": "# On Jython, isclass() reports some modules as classes. Patch it.\ndef patch_isclass(isclass):\n    def patched_isclass(obj):\n        return isclass(obj) and hasattr(obj, '__module__')\n    return patched_isclass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21912
        },
        "correct_code": "#COMMENT\n\ndef ID (ID ):\n    def ID (ID ):\n        return ID (ID )and ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "#COMMENT\n\ndef ID (ID ):\n    def ID (ID ):not return ID (ID )and ID (ID ,LIT )\n    return ID \n"
    },
    {
        "code": "def register_optionflag(name):\n    # Create a new flag unless `name` is already known.\n    return OPTIONFLAGS_BY_NAME.setdefault(name, 1 << len(OPTIONFLAGS_BY_NAME))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 21913
        },
        "correct_code": "def ID (ID ):\n#COMMENT\n\n    return ID .ID (ID ,LIT <<ID (ID ))\n",
        "wrong_code": "def ID (ID ):\n#COMMENT\n\n    return ID .ID (in ID ,LIT <<ID (ID ))\n"
    },
    {
        "code": "\ndef _indent(s, indent=4):\n    \"\"\"\n    Add the given number of space characters to the beginning every\n    non-blank line in `s`, and return the result.\n    \"\"\"\n    # This regexp matches the start of non-blank lines:\n    return re.sub('(?m)^(?!$)', indent*' ', s)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21914
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    #COMMENT\n\n    return ID .ID (LIT ,ID *LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    #COMMENT\n\n    return ID .ID (LIT ,or *LIT ,ID )\n"
    },
    {
        "code": "\ndef _exception_traceback(exc_info):\n    exc_type, exc_val, exc_tb = exc_info\n    traceback.print_exception(exc_type, exc_val, exc_tb, file=excout)\n    return excout.getvalue()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21915
        },
        "correct_code": "\ndef ID (ID ):\n    ID ,ID ,ID =ID \n    ID .ID (ID ,ID ,ID ,ID =ID )\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ,ID ,ID =ID \n    ID .ID (ID ,,ID ,ID =ID )\n    return ID .ID ()\n"
    },
    {
        "code": "\ndef truncate(self,   size=None):\n    StringIO.truncate(self, size)\n    if hasattr(self, \"softspace\"):\n        del self.softspace\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21916
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (ID ,ID )\n    if ID (ID ,LIT ):\n        del ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID \n:\n    ID .ID (ID ,ID )\n    if ID (ID ,LIT ):\n        del ID .ID \n"
    },
    {
        "code": "\ndef _comment_line(line):\n    \"Return a commented form of the given line\"\n    line = line.rstrip()\n    if line:\n        return '# '+line\n    else:\n        return '#'\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21917
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    if ID :\n        return LIT +ID \n    else :\n        return LIT \n",
        "wrong_code": "\ndef ID ID ):\n    LIT \n    ID =ID .ID ()\n    if ID :\n        return LIT +ID \n    else :\n        return LIT \n"
    },
    {
        "code": "def __init__(self, out):\n    self.__out = out\n    self.__debugger_used = False\n    pdb.Pdb.__init__(self, stdout=out)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21918
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID .ID (ID ,ID =ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID .ID (ID ,await =ID )\n"
    },
    {
        "code": "\ndef set_trace(self, frame=None):\n    if frame is None:\n        frame = sys._getframe().f_back\n    pdb.Pdb.set_trace(self, frame)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 21919
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        ID =ID .ID ().ID \n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        ID =ID .ID ().ID async \n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef set_continue(self):\n    # Calling set_continue unconditionally would break unit test\n    # coverage reporting, as Bdb.set_continue calls sys.settrace(None).\n    if self.__debugger_used:\n        pdb.Pdb.set_continue(self)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 21920
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID .ID :\n        ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID .ID :\n        ID .ID .ID (LIT ID )\n"
    },
    {
        "code": "\ndef trace_dispatch(self, *args):\n    # Call Pdb's trace dispatch method.\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21921
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n#COMMENT\n\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef (ID ,*ID ):\n#COMMENT\n\n    try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "def __init__(self, examples, globs, name, filename, lineno, docstring):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21922
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ))\n    pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    if len(self.examples) == 0:\n        pass\n    elif len(self.examples) == 1:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 21923
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID .ID )==LIT :\n        pass \n    elif ID (ID .ID )==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID .ID )==LIT :\n        pass \n    elif ID (ID else .ID )==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\n# This lets us sort tests by name:\ndef _cmpkey(self):\n    return (self.name, self.filename, self.lineno, id(self))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 21924
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    return (ID .ID ,ID .ID ,ID .ID ,ID (ID ))\n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    return (ID .ID ,ID .ID ,ID .ID is ,ID (ID ))\n"
    },
    {
        "code": "def __cmp__(self, other):\n    if not isinstance(other, DocTest):\n        return -1\n    return cmp(self._cmpkey(), other._cmpkey())\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 82,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 21925
        },
        "correct_code": "def ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return -LIT \n    return ID (ID .ID (),ID .ID ())\n",
        "wrong_code": "def ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return -LIT \n    return ID (ID ID (),ID .ID ())\n"
    },
    {
        "code": "\ndef __lt__(self, other):\n    return self._cmpkey() < other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 21926
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()<ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (+)<ID .ID ()\n"
    },
    {
        "code": "\ndef __le__(self, other):\n    return self._cmpkey() <= other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21927
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()<=ID .ID ()\n",
        "wrong_code": "\ndef ID (,ID ):\n    return ID .ID ()<=ID .ID ()\n"
    },
    {
        "code": "\ndef __gt__(self, other):\n    return self._cmpkey() > other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 21928
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()>ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID def .ID ()>ID .ID ()\n"
    },
    {
        "code": "\ndef __ge__(self, other):\n    return self._cmpkey() >= other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 21929
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()>=ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()except >=ID .ID ()\n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return self._cmpkey() == other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 21930
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()==ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()assert ==ID .ID ()\n"
    },
    {
        "code": "\ndef __ne__(self, other):\n    return self._cmpkey() != other._cmpkey()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 21931
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ()!=ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID +.ID ()!=ID .ID ()\n"
    },
    {
        "code": "\ndef get_doctest(self, string, globs, name, filename, lineno):\n    \"\"\"\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        \"\"\"\n    return DocTest(self.get_examples(string, name), globs,\n                   name, filename, lineno, string)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21932
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    LIT \n    return ID (ID .ID (ID ,ID ),ID ,\n    ID ,ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,def ,ID ,ID ):\n    LIT \n    return ID (ID .ID (ID ,ID ),ID ,\n    ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef get_examples(self, string, name='<string>'):\n    \"\"\"\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it's most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called \\\"line 1\\\" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        \"\"\"\n    return [x for x in self.parse(string, name)\n            if isinstance(x, Example)]\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 21933
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n    return [ID for ID in ID .ID (ID ,ID )\n    if ID (ID ,ID )]\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n    return ID for ID in ID .ID (ID ,ID )\n    if ID (ID ,ID )]\n"
    },
    {
        "code": "\ndef _min_indent(self, s):\n    if len(indents) > 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 21934
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID )>LIT :\n        pass \n        raise else :\n        pass \n"
    },
    {
        "code": "\ndef _check_prefix(self, lines, prefix, name, lineno):\n    for i, line in enumerate(lines):\n        if line and not line.startswith(prefix):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 21935
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    for ID ,ID in ID (ID ):\n        if ID and not ID .ID (ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    for ID ,ID ID (ID ):\n        if ID and not ID .ID (ID ):\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, verbose=False, parser=DocTestParser(),\n             recurse=True, exclude_empty=True):\n    self._exclude_empty = exclude_empty\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 21936
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID (),\nID =LIT ,ID =LIT ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID (),\nID =LIT ,ID =LIT ):\n    ID .ID =ID \n-"
    },
    {
        "code": "\ndef __init__(self, checker=None, verbose=None, optionflags=0):\n    if verbose is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21937
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =LIT ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,=ID ,ID =LIT ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef report_success(self, out, test, example, got):\n    \"\"\"\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        \"\"\"\n    if self._verbose:\n        out(\"ok\\n\")\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 82,
            "fix_type": "modify",
            "fix_token": "",
            "id": 21938
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    if ID .ID :\n        ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    if ID .ID :\n        ID (LIT )\n        if "
    },
    {
        "code": "\ndef report_failure(self, out, test, example, got):\n    \"\"\"\n        Report that the given example failed.\n        \"\"\"\n    out(self._failure_header(test, example) +\n        self._checker.output_difference(example, got, self.optionflags))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 21939
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID (ID .ID (ID ,ID )+\n    ID .ID .ID (ID ,ID ,ID .ID ))\n",
        "wrong_code": "\nreturn ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID (ID .ID (ID ,ID )+\n    ID .ID .ID (ID ,ID ,ID .ID ))\n"
    },
    {
        "code": "\ndef report_unexpected_exception(self, out, test, example, exc_info):\n    \"\"\"\n        Report that the given example raised an unexpected exception.\n        \"\"\"\n    out(self._failure_header(test, example) +\n        'Exception raised:\\n' + _indent(_exception_traceback(exc_info)))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 21940
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID (ID .ID (ID ,ID )+\n    LIT +ID (ID (ID )))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID (ID .ID (ID ,ID )+\n    LIT +ID (ID (ID )None ))\n"
    },
    {
        "code": "\ndef __record_outcome(self, test, f, t):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 21941
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):lambda \n    pass \n"
    },
    {
        "code": "def __patched_linecache_getlines(self, filename, module_globals=None):\n    if m and m.group('name') == self.test.name:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21942
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID (LIT )==ID .ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID (LIT )==ID .ID .ID :\n        )\n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, test, example, got):\n    self.test = test\n    self.example = example\n    self.got = got\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21943
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID is ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return str(self.test)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21944
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ID .ID )\n"
    },
    {
        "code": "def __init__(self, test, example, exc_info):\n    self.test = test\n    self.example = example\n    self.exc_info = exc_info\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21945
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID del ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return str(self.test)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 21946
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID :\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef run(self, test, compileflags=None, out=None, clear_globs=True):\n    if clear_globs:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21947
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =LIT )\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef report_unexpected_exception(self, out, test, example, exc_info):\n    raise UnexpectedException(test, example, exc_info)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 21948
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (ID ,ID ,ID )\n",
        "wrong_code": ",\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef report_failure(self, out, test, example, got):\n    raise DocTestFailure(test, example, got)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 21949
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID )class :\n    raise ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef runstring(self, s, name):\n    if self.verbose:\n        pass\n    if self.verbose:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 21950
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n    ,pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef rundoc(self, object, name=None, module=None):\n    for test in tests:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 21951
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =global ID ,ID =ID ):\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef rundict(self, d, name, module=None):\n    if module is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21952
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    if ID is -:\n        pass \n"
    },
    {
        "code": "\ndef run__test__(self, d, name):\n    import new\n    m = new.module(name)\n    m.__test__ = d\n    return self.rundoc(m, name)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 21953
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    import ID \n    ID =ID .ID (ID )\n    ID .ID =ID \n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    import ID \n    ID =ID .=ID (ID )\n    ID .ID =ID \n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef summarize(self, verbose=None):\n    return self.testrunner.summarize(verbose)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21954
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (raise ,ID =ID ):\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef merge(self, other):\n    self.testrunner.merge(other.testrunner)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 21955
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .None ID )\n"
    },
    {
        "code": "\ndef set_unittest_reportflags(flags):\n    \"\"\"Sets the unittest option flags.\n\n    The old flag is returned so that a runner could restore the old\n    value if it wished to:\n\n      >>> old = _unittest_reportflags\n      >>> set_unittest_reportflags(REPORT_NDIFF |\n      ...                          REPORT_ONLY_FIRST_FAILURE) == old\n      True\n\n      >>> import doctest\n      >>> doctest._unittest_reportflags == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n\n    Only reporting flags can be set:\n\n      >>> set_unittest_reportflags(ELLIPSIS)\n      Traceback (most recent call last):\n      ...\n      ValueError: ('Only reporting flags allowed', 8)\n\n      >>> set_unittest_reportflags(old) == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n    \"\"\"\n    global _unittest_reportflags\n\n    if (flags & REPORTING_FLAGS) != flags:\n        raise ValueError(\"Only reporting flags allowed\", flags)\n    old = _unittest_reportflags\n    _unittest_reportflags = flags\n    return old\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21956
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    global ID \n\n    if (ID &ID )!=ID :\n        raise ID (LIT ,ID )\n    ID =ID \n    ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    global ID \n\n    if (ID &ID )!=ID \n        raise ID (LIT ,ID )\n    ID =ID \n    ID =ID \n    return ID \n"
    },
    {
        "code": "\ndef __init__(self, test, optionflags=0, setUp=None, tearDown=None,\n             checker=None, runner=DocTestRunner):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 21957
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ,ID =ID ,\nID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ,ID =ID ,\nID =ID ,ID +ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    test = self._dt_test\n\n    if self._dt_setUp is not None:\n        self._dt_setUp(test)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21958
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID \n\n    if ID .ID is not ID :\n        ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):return \n    ID =ID .ID \n\n    if ID .ID is not ID :\n        ID .ID (ID )\n"
    },
    {
        "code": "\ndef tearDown(self):\n    test = self._dt_test\n\n    if self._dt_tearDown is not None:\n        self._dt_tearDown(test)\n\n    test.globs.clear()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21959
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID \n\n    if ID .ID is not ID :\n        ID .ID (ID )\n\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    is ID =ID .ID \n\n    if ID .ID is not ID :\n        ID .ID (ID )\n\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef runTest(self):\n\n    if not (optionflags & REPORTING_FLAGS):\n        pass\n\n    try:\n        pass\n    finally:\n        pass\n\n    if failures:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 99,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 21960
        },
        "correct_code": "\ndef ID (ID ):\n\n    if not (ID &ID ):\n        pass \n\n    try :\n        pass \n    finally :\n        pass \n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    if not (ID &ID ):\n        pass \n\n    try :\n        pass \n    finally :\n        for \n\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef format_failure(self, err):\n    if test.lineno is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21961
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :\n        pass \n    else :\n        pass or "
    },
    {
        "code": "\ndef debug(self):\n    self.tearDown()\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 21962
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .async ID ()\n"
    },
    {
        "code": "\ndef id(self):\n    return self._dt_test.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21963
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ::\n    return ID .ID .ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    name = self._dt_test.name.split('.')\n    return \"%s (%s)\" % (name[-1], '.'.join(name[:-1]))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 21964
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (LIT )\n    return LIT %(ID [-LIT ],LIT .ID (ID [:-LIT ]))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (del )\n    return LIT %(ID [-LIT ],LIT .ID (ID [:-LIT ]))\n"
    },
    {
        "code": "\ndef shortDescription(self):\n    return \"Doctest: \" + self._dt_test.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21965
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT +ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID )\n    return LIT +ID .ID .ID \n"
    },
    {
        "code": "\ndef id(self):\n    return '_'.join(self._dt_test.name.split('.'))\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21966
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (ID .ID .ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT .ID (while ID .ID .ID .ID (LIT ))\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return self._dt_test.filename\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21967
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID !ID ):\n    return ID .ID .ID \n"
    },
    {
        "code": "\ndef format_failure(self, err):\n    return ('Failed doctest test for %s\\n  File \"%s\", line 0\\n\\n%s'\n            % (self._dt_test.name, self._dt_test.filename, err)\n            )\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21968
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return (LIT \n    %(ID .ID .ID ,ID .ID .ID ,ID )\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return (LIT \n    %(ID .ID .ID ,ID .ID .for ,ID )\n    )\n"
    },
    {
        "code": "\ndef testsource(module, name):\n    if not test:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21969
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n*    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef debug_src(src, pm=False, globs=None):\n    \"\"\"Debug a single doctest docstring, in argument `src`'\"\"\"\n    testsrc = script_from_examples(src)\n    debug_script(testsrc, pm, globs)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21970
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    LIT \n    ID =ID (ID )\n    ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,with =ID ):\n    LIT \n    ID =ID (ID )\n    ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef debug(module, name, pm=False):\n    \"\"\"Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    \"\"\"\n    module = _normalize_module(module)\n    testsrc = testsource(module, name)\n    debug_script(testsrc, pm, module.__dict__)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 21971
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n    ID =ID (ID )\n    ID =ID (ID ,ID )\n    ID (ID ,ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n    ID =ID (ID )\n    ID =ID (ID ID ID )\n    ID (ID ,ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __init__(self, val):\n    \"\"\"val -> _TestClass object with associated value val.\n\n        >>> t = _TestClass(123)\n        >>> print(t.get())\n        123\n        \"\"\"\n\n    self.val = val\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 21972
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    del .ID =ID \n"
    },
    {
        "code": "\ndef square(self):\n    \"\"\"square() -> square TestClass's associated value\n\n        >>> _TestClass(13).square().get()\n        169\n        \"\"\"\n\n    self.val = self.val ** 2\n    return self\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 21973
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID =ID .ID **LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT class \n\n    ID .ID =ID .ID **LIT \n    return ID \n"
    },
    {
        "code": "\ndef get(self):\n    \"\"\"get() -> return TestClass's associated value.\n\n        >>> x = _TestClass(-42)\n        >>> print(x.get())\n        -42\n        \"\"\"\n\n    return self.val\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 21974
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ==LIT \n\n    return ID .ID \n"
    },
    {
        "code": "\ndef _test():\n    r = unittest.TextTestRunner()\n    r.run(DocTestSuite())\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/django/test/_doctest.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21975
        },
        "correct_code": "\ndef ID ():\n    ID =ID .ID ()\n    ID .ID (ID ())\n",
        "wrong_code": "ID def ID ():\n    ID =ID .ID ()\n    ID .ID (ID ())\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/admin_changelist/models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21976
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID break :\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/admin_changelist/models.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21977
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID else ID ):\n    return ID .ID \n"
    },
    {
        "code": "def get_queryset(self):\n    return super(OrderedObjectManager, self).get_queryset().order_by('number')\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/admin_changelist/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 21978
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (LIT )\n",
        "wrong_code": "def ID (ID )\n    return ID (ID ,ID ).ID ().ID (LIT )\n"
    },
    {
        "code": "\ndef setUp(self):\n    sys.stdout = self.output\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 21979
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID (ID )finally \n    ID .ID =ID .ID \n"
    },
    {
        "code": "\ndef tearDown(self):\n    if self.old_DJANGO_AUTO_COMPLETE:\n        os.environ['DJANGO_AUTO_COMPLETE'] = self.old_DJANGO_AUTO_COMPLETE\n    else:\n        del os.environ['DJANGO_AUTO_COMPLETE']\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 21980
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        ID .ID [LIT ]=ID .ID \n    else :\n        del ID .ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        ID .ID [LIT ]=ID .ID \n    else :\n        del ID except ID [LIT ]\n"
    },
    {
        "code": "\ndef _user_input(self, input_str):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21981
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID pass :\n    pass \n"
    },
    {
        "code": "\ndef _run_autocomplete(self):\n    try:\n        pass\n    except SystemExit:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 21982
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass with except ID :\n        pass \n"
    },
    {
        "code": "\ndef test_django_admin_py(self):\n    \"django_admin.py will autocomplete option flags\"\n    self._user_input('django-admin.py sqlall --v')\n    output = self._run_autocomplete()\n    self.assertEqual(output, ['--verbosity='])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21983
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID if (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n"
    },
    {
        "code": "\ndef test_manage_py(self):\n    \"manage.py will autocomplete option flags\"\n    self._user_input('manage.py sqlall --v')\n    output = self._run_autocomplete()\n    self.assertEqual(output, ['--verbosity='])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 82,
            "fix_type": "delete",
            "id": 21984
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ]assert )\n"
    },
    {
        "code": "\ndef test_custom_command(self):\n    \"A custom command can autocomplete option flags\"\n    self._user_input('django-admin.py test_command --l')\n    output = self._run_autocomplete()\n    self.assertEqual(output, ['--list'])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21985
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID import (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n"
    },
    {
        "code": "\ndef test_subcommands(self):\n    \"Subcommands can be autocompleted\"\n    self._user_input('django-admin.py sql')\n    output = self._run_autocomplete()\n    self.assertEqual(output, ['sql sqlall sqlclear sqlcustom sqldropindexes sqlflush sqlindexes sqlinitialdata sqlsequencereset'])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 21986
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID try (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n"
    },
    {
        "code": "\ndef test_help(self):\n    \"No errors, just an empty list if there are no autocomplete options\"\n    self._user_input('django-admin.py help --')\n    output = self._run_autocomplete()\n    self.assertEqual(output, [''])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21987
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n"
    },
    {
        "code": "\ndef test_runfcgi(self):\n    \"Command arguments will be autocompleted\"\n    self._user_input('django-admin.py runfcgi h')\n    output = self._run_autocomplete()\n    self.assertEqual(output, ['host='])\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 75,
            "fix_type": "delete",
            "id": 21988
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID =ID .ID ()\n    ID .ID (ID elif ,[LIT ])\n"
    },
    {
        "code": "\ndef test_app_completion(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/bash_completion/tests.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 21989
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (with ID ):\n    pass \n"
    },
    {
        "code": "def get_fun_people(self):\n    return self.filter(fun=True)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 21990
        },
        "correct_code": "def ID (ID ):\n    return ID .ID (ID =LIT )\n",
        "wrong_code": "def ID (ID ):\nin     return ID .ID (ID =LIT )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"%s %s\" % (self.first_name, self.last_name)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21991
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID ID ):\n    return LIT %(ID .ID ,ID .ID )\n"
    },
    {
        "code": "def get_queryset(self):\n    return super(PublishedBookManager, self).get_queryset().filter(is_published=True)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21992
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n",
        "wrong_code": "def ID ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.title\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 21993
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef (ID ):\n    return ID .ID \n"
    },
    {
        "code": "def get_queryset(self):\n    return super(FastCarManager, self).get_queryset().filter(top_speed__gt=150)\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21994
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n",
        "wrong_code": "def ID ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/custom_managers/models.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 21995
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID \nexcept "
    },
    {
        "code": "\ndef testClassFixtures(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/fixtures_model_package/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 21996
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID [ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_syncdb(self):\n    with transaction.atomic():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/fixtures_model_package/tests.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 21997
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID ID ):\n    with ID .ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef test_flush(self):\n\n    with transaction.atomic():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/fixtures_model_package/tests.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 21998
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    with ID .ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n    with ID .ID ():\n        pass \n    ,"
    },
    {
        "code": "def test_initial_data(self):\n    \"Fixtures can load initial data into models defined in packages\"\n    # syncdb introduces 1 initial data object from initial_data.json\n    self.assertQuerysetEqual(\n        Book.objects.all(), [\n            'Achieving self-awareness of Python programs'\n        ],\n        lambda a: a.name\n    )\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/fixtures_model_package/tests.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 21999
        },
        "correct_code": "def ID (ID ):\n    LIT \n    #COMMENT\n\n    ID .ID (\n    ID .ID .ID (),[\n    LIT \n    ],\n    lambda ID :ID .ID \n    )\n",
        "wrong_code": "def ID (ID and :\n    LIT \n    #COMMENT\n\n    ID .ID (\n    ID .ID .ID (),[\n    LIT \n    ],\n    lambda ID :ID .ID \n    )\n"
    },
    {
        "code": "\ndef get_context_data(self, **kwargs):\n    context = super(CustomTemplateView, self).get_context_data(**kwargs)\n    context.update({'key': 'value'})\n    return context\n",
        "metadata": {
            "file": "py150_files/data/cloudera/hue/desktop/core/ext-py/Django-1.6.10/tests/generic_views/views.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 22000
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID =ID (ID ,ID ).ID (**ID )\n    ID .ID ({LIT :LIT })\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID =ID (ID ,ID ).ID ((ID )\n    ID .ID ({LIT :LIT })\n    return ID \n"
    }
]