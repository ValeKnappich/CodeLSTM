[
    {
        "code": "\ndef read_config(self, file):\n    self.parser.read(file)\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/citools/config.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28001
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID ](ID ,ID ):\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef get(self, *args, **kwargs):\n    return self.parser.get(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/citools/config.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28002
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID .ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    return ID .ID .(*ID ,**ID )\n"
    },
    {
        "code": "\ndef merge_with_cmd(self, namespace):\n    for key in self.NAMESPACE_CONFIG_MAP:\n        if key in kwargs and kwargs[key]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/citools/config.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28003
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        if ID in ID and ID [ID ]:\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID from :\n    for ID in ID .ID :\n        if ID in ID and ID [ID ]:\n            pass \n"
    },
    {
        "code": "\ndef test_after_tag(self):\n    self.assertEquals((0, 7, 20), compute_version('tools-0.7-20-g1754c3f'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 28004
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,or ,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_after_tag_without_name(self):\n    self.assertEquals((0, 7, 20), compute_version('0.7-20-g1754c3f'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 28005
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT while LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_after_tag_with_project_suffix(self):\n    self.assertEquals((0, 7, 20), compute_version('0.7-our-tools-project-20-g1754c3f'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 28006
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_on_tag(self):\n    self.assertEquals((0, 7, 0), compute_version('tools-0.7'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28007
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .while ((LIT ,LIT ,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_on_tag_with_suffix(self):\n    self.assertEquals((0, 7, 0), compute_version('0.7-our-tools-project'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 28008
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,(),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_after_tag_twodigit(self):\n    self.assertEquals((234, 7, 20), compute_version('tools-234.7-20-g1754c3f'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 28009
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT )for ID (LIT ))\n"
    },
    {
        "code": "\ndef test_first_release_tag(self):\n    self.assertEquals((0, 0, 1), compute_version('0.0'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28010
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID LIT ))\n"
    },
    {
        "code": "\ndef test_bad_release_tag(self):\n    self.assertRaises(ValueError, compute_version, 'arghpaxorgz-zsdf')\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28011
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID (ID ,ID ,LIT )\n"
    },
    {
        "code": "\ndef test_on_tag_with_suffix_four_digits(self):\n    self.assertEquals((0, 7, 3, 0), compute_version('0.7.3-our-tools-project'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 28012
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((-,LIT ,LIT ,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_project_with_digit_in_name(self):\n    self.assertEquals((9, 7, 3, 45, 532, 11, 44), compute_version('log4j-9.7.3.45.532.11-44-g1754c3f'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 28013
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ,LIT ,LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ,LIT ,LIT ,LIT continue ,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_multiple_digit_versin(self):\n    self.assertEquals((0, 10, 2), compute_version('log4j-0.10-2-gbb6aff8'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 28014
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((LIT import ,LIT ,LIT ),ID (LIT ))\n"
    },
    {
        "code": "\ndef test_version_replacing_three_digits(self):\n\n    expected_output = \"\"\"arakadabra\nblah blah\nVERSION = (0, 0, 1)\nx = (3, 2, 1)\nfor i in x:\n    print 'olah'\"\"\"\n\n    self.assertEquals(expected_output, ''.join(replace_version(source, version=(0, 0, 1))))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 28015
        },
        "correct_code": "\ndef ID (ID ):\n\n    ID =LIT \n\n    ID .ID (ID ,LIT .ID (ID (ID ,ID =(LIT ,LIT ,LIT ))))\n",
        "wrong_code": "\ndef ID (ID ):\n\n    ID =LIT \n\n    ID .ID (finally ID ,LIT .ID (ID (ID ,ID =(LIT ,LIT ,LIT ))))\n"
    },
    {
        "code": "\ndef test_version_replacing_lot_digits(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28016
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "=\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28017
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "not \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef prepare_tagged_repo_with_file(self, tag):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 28018
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n"
    },
    {
        "code": "\ndef test_without_tag(self):\n    self.assertEquals('0.0', get_git_describe())\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28019
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID ())\n",
        "wrong_code": "\ndef ID else (ID ):\n    ID .ID (LIT ,ID ())\n"
    },
    {
        "code": "\ndef test_tag_retrieved(self):\n    self.prepare_tagged_repo_with_file(tag='0.1-lol')\n    self.assertEquals('0.1-lol', get_git_describe())\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 28020
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )\n    ID .ID (LIT ,ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )\n    ID .ID (LIT ,ID ())==\n"
    },
    {
        "code": "\ndef test_number_of_commit_since_tag(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28021
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    or "
    },
    {
        "code": "\n\ndef test_pattern_used_to_filter_everything_acting_like_without_tag(self):\n    self.prepare_tagged_repo_with_file(tag='0.1-lol')\n\n    self.assertEquals('0.0', get_git_describe(accepted_tag_pattern='myproject-*'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28022
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID (ID =LIT )\n\n    ID .ID (LIT ,ID (ID =LIT ))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID ((=LIT )\n\n    ID .ID (LIT ,ID (ID =LIT ))\n"
    },
    {
        "code": "\n\ndef _check_filtering_works(self, tag, retag, search_pattern, expected_result_start):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 28023
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n    not "
    },
    {
        "code": "\ndef test_pattern_used_to_filter_only_matching_tags(self):\n    self._check_filtering_works(tag='release/project-0.1', retag=\"xxxx\",\n        search_pattern='release/project-[0-9]*',\n        expected_result_start='release/project-0.1-1')\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28024
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT ,\n    ID =LIT ,\n    ID =LIT )\n",
        "wrong_code": "elif \ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT ,\n    ID =LIT ,\n    ID =LIT )\n"
    },
    {
        "code": "\ndef test_pattern_used_to_separate_bad_suffixes(self):\n    self._check_filtering_works(tag='project-0.1',\n        retag=\"project-meta-0.1\",\n        search_pattern='project-[0-9]*',\n        expected_result_start='project-0.1-1')\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28025
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,\n    ID =LIT ,\n    ID =LIT ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (return ID ):\n    ID .ID (ID =LIT ,\n    ID =LIT ,\n    ID =LIT ,\n    ID =LIT )\n"
    },
    {
        "code": "\ndef test_pattern_used_to_separate_bad_prefixes(self):\n    self._check_filtering_works(tag='project-0.1',\n        retag=\"myproject-0.1\",\n        search_pattern='project-[0-9]*',\n        expected_result_start='project-0.1-1')\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28026
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,\n    ID =LIT ,\n    ID =LIT ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,\n    ID =LIT ,\n    ID =LIT ,\n    (=LIT )\n"
    },
    {
        "code": "\ndef tearDown(self):\n    # delete temporary repository and restore ENV vars after update\n    rmtree(self.repo)\n    os.chdir(self.oldcwd)\n    TestCase.tearDown(self)\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 28027
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID (ID .ID )\n    ID .ID (ID .ID )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\nassert     ID (ID .ID )\n    ID .ID (ID .ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28028
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n\ndef test_proper_child_version(self):\n    self.assertEquals((1, 0, 59, 1), compute_version(get_git_describe(repository_directory=self.repo_one, fix_environment=True)))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28029
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ,LIT ),ID (ID (ID =ID .ID ,ID =LIT )))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID /(LIT ,LIT ,LIT ,LIT ),ID (ID (ID =ID .ID ,ID =LIT )))\n"
    },
    {
        "code": "\ndef test_proper_second_child_version(self):\n    self.assertEquals((2, 0, 12), compute_version(get_git_describe(repository_directory=self.repo_two, fix_environment=True)))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 28030
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID (ID (ID =ID .ID ,ID =LIT )))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .async ID ((LIT ,LIT ,LIT ),ID (ID (ID =ID .ID ,ID =LIT )))\n"
    },
    {
        "code": "\ndef test_computing_meta_version(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28031
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nelse ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_computing_meta_version_accepts_branch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28032
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID yield ):\n    pass \n"
    },
    {
        "code": "\ndef test_current_branch_is_default_for_deps(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28033
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID while ):\n    pass \n"
    },
    {
        "code": "\ndef test_repository_fetching(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28034
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_fetched_repository_has_same_version(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28035
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_sum_same_length(self):\n    self.assertEquals((0, 2), sum_versions((0, 1), (0, 1)))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28036
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ),ID ((LIT ,LIT ),(LIT ,LIT )))\n",
        "wrong_code": "\ndef ID assert (ID ):\n    ID .ID ((LIT ,LIT ),ID ((LIT ,LIT ),(LIT ,LIT )))\n"
    },
    {
        "code": "\ndef test_sum_various_length(self):\n    self.assertEquals((1, 3, 3), sum_versions((1, 2, 3), (0, 1)))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28037
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID ((LIT ,LIT ,LIT ),(LIT ,LIT )))\n",
        "wrong_code": "\ndef ID LIT ID ):\n    ID .ID ((LIT ,LIT ,LIT ),ID ((LIT ,LIT ,LIT ),(LIT ,LIT )))\n"
    },
    {
        "code": "\ndef test_sum_bad_number(self):\n    self.assertRaises(ValueError, sum_versions, (1, 2, 3), (0, -23))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28038
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,(LIT ,LIT ,LIT ),(LIT ,-LIT ))\n",
        "wrong_code": "\ndef ID (except ID ):\n    ID .ID (ID ,ID ,(LIT ,LIT ,LIT ),(LIT ,-LIT ))\n"
    },
    {
        "code": "\ndef test_sum_bad_number_in_first_version(self):\n    self.assertRaises(ValueError, sum_versions, (-1, 2, 3), (0, 128, 0))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28039
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,(-LIT ,LIT ,LIT ),(LIT ,LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID :\n    ID .ID (ID ,ID ,(-LIT ,LIT ,LIT ),(LIT ,LIT ,LIT ))\n"
    },
    {
        "code": "def test_single_tag_parsed(self):\n    self.assertEquals(['repo-1.2'], get_tags_from_line(' (repo-1.2)'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28040
        },
        "correct_code": "def ID (ID ):\n    ID .ID ([LIT ],ID (LIT ))\n",
        "wrong_code": "def (ID ):\n    ID .ID ([LIT ],ID (LIT ))\n"
    },
    {
        "code": "\ndef test_multiple_tags_or_branches_parsed(self):\n    self.assertEquals(['repo-1.1', 'branch'], get_tags_from_line(' (repo-1.1, branch)'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28041
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID )None :\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n"
    },
    {
        "code": "\ndef test_multiple_tags_or_heads_parsed(self):\n    self.assertEquals(['HEAD', 'master'], get_tags_from_line(' (HEAD, master)'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28042
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n",
        "wrong_code": "\ndef ID nonlocal (ID ):\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n"
    },
    {
        "code": "\ndef test_multiple_tags_in_alternative_form_or_branches_parsed(self):\n    self.assertEquals(['repo-1.2', 'origin/master'], get_tags_from_line(' (tag: repo-1.2, origin/master)'))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28043
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n",
        "wrong_code": "not \ndef ID (ID ):\n    ID .ID ([LIT ,LIT ],ID (LIT ))\n"
    },
    {
        "code": "\ndef prepare(self, tag_latest_version=False):\n\n    if tag_latest_version:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28044
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT def :\n\n    if ID :\n        pass \n"
    },
    {
        "code": "\n    \ndef test_higher_version_always_preferred(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28045
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID )\n    try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef test_higher_version_preferred_even_when_tag_is_on_top_of_the_tree(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 28046
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    finally pass :\n        pass \n"
    },
    {
        "code": "\ndef test_highest_tag_retrieved(self):\n    self.assertEquals('citools-0.4', get_highest_tag(['citools-0.3.520', 'citools-0.2', 'citools-0.4']))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 28047
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID ([LIT ,LIT ,LIT ]))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID ([LIT ,LIT [LIT ]))\n"
    },
    {
        "code": "def test_slash_just_dashed(self):\n    self.assertEquals(\"story-123\", get_branch_suffix(Mock(spec=[]), \"story/123\"))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28048
        },
        "correct_code": "def ID (ID ):\n    ID .ID (LIT ,ID (ID (ID =[]),LIT ))\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (LIT ,ID (ID (ID =[]),LIT ))from "
    },
    {
        "code": "\ndef test_map_obeyed(self):\n    dist = Mock()\n    dist.branch_rename_map = {'spam' : 'egg'}\n    self.assertEquals(\"egg\", get_branch_suffix(dist, \"spam\"))\n",
        "metadata": {
            "file": "py150_files/data/ella/citools/tests/test_versioning.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 28049
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID ={LIT :LIT }\n    ID .ID (LIT ,ID (ID ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID =,{LIT :LIT }\n    ID .ID (LIT ,ID (ID ,LIT ))\n"
    },
    {
        "code": "\n@patch('eventtracker.tasks._get_carrot_object')\ndef test_track_sends_event(get_carrot_object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/django-event-tracker/tests/test_tasks.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28050
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID (LIT )\ndef ID for ID ):\n    pass \n"
    },
    {
        "code": "\n\n@patch('eventtracker.tasks._get_carrot_object')\n@patch('eventtracker.models.get_mongo_collection')\n@patch('eventtracker.models.save_event')\ndef test_collect_events_calls_save_event_for_every_event_in_queue(save_event, get_mongo_collection, get_carrot_object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/django-event-tracker/tests/test_tasks.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28051
        },
        "correct_code": "\n\n@ID (LIT )\n@ID (LIT )\n@ID (LIT )\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\n@ID (LIT )\n@ID (LIT \ndef ID (ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_save_event_inserts_into_collection():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/django-event-tracker/tests/test_tasks.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 28052
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass if \n"
    },
    {
        "code": "def __init__(self):\n    self._patterns = {}\n    self.root_mapping = {}\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 28053
        },
        "correct_code": "def ID (ID ):\n    ID .ID ={}\n    ID .ID ={}\n",
        "wrong_code": "def ID (ID ):\n    ID .ID {}\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef has_custom_detail(self, obj):\n    return obj.__class__ in self.root_mapping\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 28054
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID in ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    [return ID .ID in ID .ID \n"
    },
    {
        "code": "\ndef _get_custom_detail_view(self, model):\n    if model not in self.root_mapping:\n        raise Http404()\n    return self.root_mapping[model]\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28055
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID not in ID .ID :\n        raise ID ()\n    return ID .ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID not in ID .:\n        raise ID ()\n    return ID .ID [ID ]\n"
    },
    {
        "code": "\ndef call_custom_detail(self, request, context):\n    model = context['object'].__class__\n    view = self._get_custom_detail_view(model)\n    return view(request, context)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 81,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28056
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID [LIT ].ID \n    ID =ID .ID (ID )\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID [LIT ].ID \n    ID =ID .ID (ID )\n    return ID (,ID )\n"
    },
    {
        "code": "\ndef register_custom_detail(self, model, view):\n    assert model not in self.root_mapping, \"You can only register one function for model %r\" % model.__name__\n    self.root_mapping[model] = view\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "not",
            "id": 28057
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    assert ID not in ID .ID ,LIT %ID .ID \n    ID .ID [ID ]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    assert ID yield in ID .ID ,LIT %ID .ID \n    ID .ID [ID ]=ID \n"
    },
    {
        "code": "\ndef register(self, urlpatterns, prefix=None, model=None):\n    if prefix:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 28058
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n    :"
    },
    {
        "code": "\ndef _get_resolver(self, obj):\n    return RegexURLResolver(r'^', self._patterns.get(str(obj._meta), []) + self._patterns.get(ALL, []))\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 28059
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (LIT ,ID .ID .ID (ID (ID .ID ),[])+ID .ID .ID (ID ,[]))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (LIT ,continue ID .ID .ID (ID (ID .ID ),[])+ID .ID .ID (ID ,[]))\n"
    },
    {
        "code": "\ndef resolve(self, obj, url_remainder):\n    return self._get_resolver(obj).resolve(url_remainder)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28060
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID (ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID (ID ).(ID )\n"
    },
    {
        "code": "\ndef reverse(self, obj, view_name, *args, **kwargs):\n    return obj.get_absolute_url() + self._get_resolver(obj).reverse(view_name, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28061
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,*ID ,**ID ):\n    return ID .ID ()+ID .ID (ID ).ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,*ID ,**ID ):\n    return ID .ID ()+ID .ID (ID ).ID (ID ,*ID ,**ID )\n    nonlocal "
    },
    {
        "code": "\ndef call_custom_view(self, request, obj, url_remainder, context):\n    view, args, kwargs = self.resolve(obj, url_remainder)\n    return view(request, context, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/ella/core/custom_urls.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 28062
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    ID ,ID ,ID =ID .ID (ID ,ID )\n    return ID (ID ,ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID class ,ID ,ID ):\n    ID ,ID ,ID =ID .ID (ID ,ID )\n    return ID (ID ,ID ,*ID ,**ID )\n"
    },
    {
        "code": "def setUp(self):\n    object_rendering.connect(self.object_rendering)\n    object_rendered.connect(self.object_rendered)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28063
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID .ID )\n    ID .ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID .ID )\n    ID .(ID .ID )\n"
    },
    {
        "code": "\ndef object_rendered(self, *args, **kwargs):\n    self.signals_received.setdefault('object_rendered', []).append((args, kwargs))\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28064
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (LIT ,[]).ID ((ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,*,**ID ):\n    ID .ID .ID (LIT ,[]).ID ((ID ,ID ))\n"
    },
    {
        "code": "\ndef object_rendering(self, *args, **kwargs):\n    self.signals_received.setdefault('object_rendering', []).append((args, kwargs))\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28065
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (LIT ,[]).ID ((ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,*class ID ,**ID ):\n    ID .ID .ID (LIT ,[]).ID ((ID ,ID ))\n"
    },
    {
        "code": "\ndef tearDown(self):\n    object_rendering.disconnect(self.object_rendering)\n    object_rendered.disconnect(self.object_rendered)\n    utils.PUBLISHABLE_CT = None\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 28066
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID )\n    ID .ID (ID .ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID )+\n    ID .ID (ID .ID )\n    ID .ID =ID \n"
    },
    {
        "code": "def test_author_view(self):\n    for p in self.publishables:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28067
        },
        "correct_code": "def ID (ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "def ID (ID )\n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "def test_fail_on_no_template(self):\n    tools.assert_raises(TemplateDoesNotExist, self.client.get, '/')\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 28068
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID .ID .ID ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,ID .ID .ID ,LIT =)\n"
    },
    {
        "code": "\ndef test_template_overloading(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 28069
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef -ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_signals_fired_for_homepage(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28070
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "try \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_second_nested_template_overloading(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28071
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_homepage_context(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 28072
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass ID \n"
    },
    {
        "code": "\ndef test_second_nested_category_view(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28073
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_category_template_is_used_in_view(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28074
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ]:\n    pass \n"
    },
    {
        "code": "def test_404_is_shown_on_debug_off(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28075
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID async :\n    pass \n"
    },
    {
        "code": "\ndef test_welcome_page_is_shown_as_hompage_on_debug(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28076
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):,\n    pass \n"
    },
    {
        "code": "def setUp(self):\n    super(TestListContentType, self).setUp()\n    create_and_place_more_publishables(self)\n    list_all_publishables_in_category_by_hour(self, category=self.category)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 28077
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID (ID )\n    ID (ID ,ID =ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID (ID )def \n    ID (ID ,ID =ID .ID )\n"
    },
    {
        "code": "\ndef test_without_home_listings_first_page_is_an_archive(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28078
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\npass ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_only_nested_category_and_year_returns_all_listings(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28079
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID for (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_incorrect_page_number_raises_404(self):\n    template_loader.templates['404.html'] = ''\n    response = self.client.get('/2008/', {'p': 200})\n    tools.assert_equals(404, response.status_code)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28080
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID [LIT ]=LIT \n    ID =ID .ID .ID (LIT ,{LIT :LIT })\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID [LIT ]=LIT \n    ID =ID .ID .ID (LIT ,{LIT :LIT })\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "def setUp(self):\n    for i, t in enumerate(self.templates):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 28081
        },
        "correct_code": "def ID (ID ):\n    for ID ,ID in ID (ID .ID ):\n        pass \n",
        "wrong_code": "def ID (ID ):\n    for ID ,ID in ID (ID .ID ):\n    None pass \n"
    },
    {
        "code": "\ndef test_fallback(self):\n    for t in self.templates[-4:]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 28082
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID [-LIT :]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID [-LIT :]return :\n        pass \n"
    },
    {
        "code": "\ndef test_ct(self):\n    for t in self.templates[-3:]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28083
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID [-LIT :]:\n        pass \n",
        "wrong_code": "\ndef ID for ID ):\n    for ID in ID .ID [-LIT :]:\n        pass \n"
    },
    {
        "code": "\ndef test_category(self):\n    for t in self.templates[-2:]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28084
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID [-LIT :]:\n        pass \n",
        "wrong_code": ")\ndef ID (ID ):\n    for ID in ID .ID [-LIT :]:\n        pass \n"
    },
    {
        "code": "\ndef test_category_ct(self):\n    del template_loader.templates[self.templates[-1]]\n    tools.assert_equals('3', self.client.get(self.url).content)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28085
        },
        "correct_code": "\ndef ID (ID ):\n    del ID .ID [ID .ID [-LIT ]]\n    ID .ID (LIT ,ID .ID .ID (ID .ID ).ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    del ID .ID [ID .ID [-LIT ]]\n    ID .ID LIT ,ID .ID .ID (ID .ID ).ID )\n"
    },
    {
        "code": "\ndef test_category_ct_slug(self):\n    tools.assert_equals('4', self.client.get(self.url).content)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28086
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID .ID (ID .ID ).ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID .is (ID .ID ).ID )\n"
    },
    {
        "code": "def setUp(self):\n    super(TestObjectDetail, self).setUp()\n    template_loader.templates['page/object.html'] = ''\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 28087
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID [LIT ]=LIT \n",
        "wrong_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    while ID .ID [LIT ]=LIT \n"
    },
    {
        "code": "\ndef test_timezone_localized_url(self):\n    if not timezone.use_tz:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28088
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \nassert "
    },
    {
        "code": "\ndef test_signals_fired_for_detail(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 28089
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass from \n"
    },
    {
        "code": "\ndef test_object_detail(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28090
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_static_object_detail_redirects_to_correct_url_on_wrong_slug(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28091
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndel def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_static_object_detail_redirects_to_correct_url_on_wrong_category(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28092
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    !"
    },
    {
        "code": "\ndef test_static_redirects_preserve_custom_url_remainder(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28093
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n(ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_static_object_detail(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28094
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "try \n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_same_publications_can_live_while_not_published(self):\n    create_and_place_a_publishable(self, published=False)\n    self.client.get('/nested-category/%d-first-article/' % orig_publishable.id)\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28095
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID =LIT )\n    ID .ID .ID (LIT %ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID =LIT )\n    ID .ID .ID (LIT %ID .as )\n"
    },
    {
        "code": "def test_homepage_uses_only_path(self):\n    tools.assert_equals(\n        [u'page/category/ni-hao-category/category.html', u'page/category.html'],\n        get_templates('category.html', category=self.category)\n    )\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 28096
        },
        "correct_code": "def ID (ID ):\n    ID .ID (\n    [LIT ,LIT ],\n    ID (LIT ,ID =ID .ID )\n    )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (\n    )[LIT ,LIT ],\n    ID (LIT ,ID =ID .ID )\n    )\n"
    },
    {
        "code": "\ndef test_first_nested_uses_only_path(self):\n    tools.assert_equals(\n        [u'page/category/nested-category/category.html', u'page/category.html'],\n        get_templates('category.html', category=self.category_nested)\n    )\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28097
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    [LIT ,LIT ],\n    ID (LIT ,ID =ID .ID )\n    )\n",
        "wrong_code": "\ndef ID (ID )assert :\n    ID .ID (\n    [LIT ,LIT ],\n    ID (LIT ,ID =ID .ID )\n    )\n"
    },
    {
        "code": "\ndef test_more_nested_uses_fallback_to_parents(self):\n    tools.assert_equals(\n        [u'page/category/nested-category/second-nested-category/category.html', u'page/category/nested-category/category.html', u'page/category.html'],\n        get_templates('category.html', category=self.category_nested_second)\n    )\n",
        "metadata": {
            "file": "py150_files/data/ella/ella/test_ella/test_core/test_views.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28098
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    [LIT ,LIT ,LIT ],\n    ID (LIT ,ID =ID .ID )\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n    [LIT ,LIT ,LIT ],\n    ID LIT ,ID =ID .ID )\n    )\n"
    },
    {
        "code": "\ndef __init__(self):\n    if not os.path.exists(self.base_dir):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28099
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID .ID (ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ),:\n    if not ID .ID .ID (ID .ID ):\n        pass \n"
    },
    {
        "code": "def _install_init(self, path):\n        ipath = os.path.join(path, '__init__.py')\n        # print('Installing: ', ipath)\n        self._touch(ipath)\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28100
        },
        "correct_code": "def ID (ID ,ID ):\n        ID =ID .ID .ID (ID ,LIT )\n        #COMMENT\n\n        ID .ID (ID )\n",
        "wrong_code": ":ID (ID ,ID ):\n        ID =ID .ID .ID (ID ,LIT )\n        #COMMENT\n\n        ID .ID (ID )\n"
    },
    {
        "code": "\ndef _setup_package(self, path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n    self._install_init(path)\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28101
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID .ID (ID ):\n        ID .ID (ID )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID .ID ID (ID ):\n        ID .ID (ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef _touch(self, path):\n    with open(path, 'a'):\n        os.utime(path, None)\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28102
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    with ID (ID ,LIT ):\n        ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):/    with ID (ID ,LIT ):\n        ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _install_path(self, fullname):\n    return os.path.join(self.base_dir, top, username, repo, modname+'.py')\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 28103
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID .ID ,ID ,ID ,ID ,ID +LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID .ID yield ,ID ,ID ,ID ,ID +LIT )\n"
    },
    {
        "code": "\ndef find_module(self, fullname, path=None):\n    # print('find_module', fullname, path)\n    if fullname.startswith('github'):\n        self._make_package(fullname)\n    return None\n",
        "metadata": {
            "file": "py150_files/data/ellisonbg/antipackage/antipackage.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28104
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID .ID (LIT ):\n        ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID .ID (LIT ):while ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\n\n@responses.activate\ndef test_awsm_short_method():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellisonleao/pyshorteners/tests/test_awsm.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28105
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID while ):\n    pass \n"
    },
    {
        "code": "\n\n@responses.activate\ndef test_awsm_short_method_bad_response():\n\n    with pytest.raises(ShorteningErrorException):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellisonleao/pyshorteners/tests/test_awsm.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 28106
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID ():\n\n    ,with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\n@responses.activate\ndef test_awsm_expand_method_bad_response():\n\n    with pytest.raises(ExpandingErrorException):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellisonleao/pyshorteners/tests/test_awsm.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28107
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID not ):\n\n    with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_generate_tool_staticmethod():\n    tool = Awsm._generate_random_tool()\n    assert len(tool) == 4\n",
        "metadata": {
            "file": "py150_files/data/ellisonleao/pyshorteners/tests/test_awsm.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28108
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID ()\n    assert ID (ID )==LIT \n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID .ID )\n    assert ID (ID )==LIT \n"
    },
    {
        "code": "\n\ndef test_bad_key():\n    s = Shortener(Shorteners.AWSM)\n\n    with pytest.raises(TypeError):\n        s.short(expanded)\n",
        "metadata": {
            "file": "py150_files/data/ellisonleao/pyshorteners/tests/test_awsm.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28109
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (ID .ID )\n\n    with ID .ID (ID ):\n        ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID (ID .ID )\n\n    with ID .ID (ID )async \n        ID .ID (ID )\n"
    },
    {
        "code": "\ndef get_urls(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_conversation/app.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28110
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nfrom def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_urls(self):\n    urls = super(PollsApp, self).get_urls()\n    urls += [\n        url(r'^', include(self.polls_app.urls)),\n    ]\n    return urls\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_conversation/app.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28111
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID +=[\n    ID (LIT ,ID (ID .ID .ID )),\n    ]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):async     ID =ID (ID ,ID ).ID ()\n    ID +=[\n    ID (LIT ,ID (ID .ID .ID )),\n    ]\n    return ID \n"
    },
    {
        "code": "\ndef get_urls(self):\n    urls = super(AttachmentsApp, self).get_urls()\n    urls += [\n        url(r'^', include(self.attachments_app.urls)),\n    ]\n    return urls\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_conversation/app.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 28112
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID +=[\n    ID (LIT ,ID (ID .ID .ID )),\n    ]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID +=!\n    ID (LIT ,ID (ID .ID .ID )),\n    ]\n    return ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    if self.name:\n        return '{} - {}'.format(self.codename, self.name)\n    return self.codename\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 28113
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        return LIT .ID (ID .ID ,ID .ID )\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        return LIT .ID (ID .ID ,ID return .ID )\n    return ID .ID \n"
    },
    {
        "code": "\ndef clean(self):\n    super(AbstractForumPermission, self).clean()\n    if not self.is_global and not self.is_local:\n        raise ValidationError(_('A forum permission should be at least either global or local'))\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 99,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28114
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    if not ID .ID and not ID .ID :\n        raise ID (ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    if not ID .ID and not ID .ID :\n        raise ID (ID (LIT )\n"
    },
    {
        "code": "\ndef clean(self):\n    if self.forum is None and not self.permission.is_global:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 28115
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is ID and not ID .ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is ID and not ID .ID .ID :\n        pass \n["
    },
    {
        "code": "\ndef __str__(self):\n    if self.forum:\n        pass\n    return '{} - {}'.format(self.permission, self.user)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 28116
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    return LIT .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID raise .ID :\n        pass \n    return LIT .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef clean(self):\n    if (self.user is None and not self.anonymous_user) \\\n                or (self.user and self.anonymous_user):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 85,
            "fix_type": "delete",
            "id": 28117
        },
        "correct_code": "\ndef ID (ID ):\n    if (ID .ID is ID and not ID .ID )or (ID .ID and ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if (ID .ID is ID and not ID .ID )or (ID .ID and ID .ID ):\n        break pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    if self.forum:\n        pass\n    return '{} - {}'.format(self.permission, self.group)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_permission/abstract_models.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 28118
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    return LIT .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    :return LIT .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef get(self, request, pk=None):\n\n    if pk is not None:\n        pass\n    else:\n        pass\n\n    if len(forums):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 98,
            "fix_type": "insert",
            "fix_token": "",
            "id": 28119
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n\n    if ID is not ID :\n        pass \n    else :\n        pass \n\n    if ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n\n    if ID is not ID :\n        pass \n    else :\n        pass \n\n        if ID (ID ):\n        pass \n    "
    },
    {
        "code": "\n@method_decorator(login_required)\ndef dispatch(self, request, *args, **kwargs):\n    return super(MarkForumsReadView, self).dispatch(request, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28120
        },
        "correct_code": "\n@ID (ID )\ndef ID (ID ,ID ,*ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\n@ID else ID )\ndef ID (ID ,ID ,*ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef get(self, request, pk):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 28121
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )/:\n    pass \n"
    },
    {
        "code": "\ndef get_controlled_object(self):\n    \"\"\"\n        Return the considered forum in order to allow permission checks.\n        \"\"\"\n    return Forum.objects.get(pk=self.kwargs['pk'])\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28122
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID =ID .ID [LIT ])\n",
        "wrong_code": "\ndef ID (ID :):\n    LIT \n    return ID .ID .ID (ID =ID .ID [LIT ])\n"
    },
    {
        "code": "\n@method_decorator(login_required)\ndef dispatch(self, request, *args, **kwargs):\n    return super(MarkTopicsReadView, self).dispatch(request, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28123
        },
        "correct_code": "\n@ID (ID )\ndef ID (ID ,ID ,*ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\n@ID (ID )\ndef ID (ID ,ID ,*nonlocal ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef get_queryset(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28124
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID with (ID ):\n    pass \n"
    },
    {
        "code": "\n@method_decorator(login_required)\ndef dispatch(self, request, *args, **kwargs):\n    return super(UnreadTopicsView, self).dispatch(request, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/machina/apps/forum_tracking/views.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 28125
        },
        "correct_code": "\n@ID (ID )\ndef ID (ID ,ID ,*ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\n@ID (ID )\ndef ID pass (ID ,ID ,*ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "@pytest.fixture(autouse=True)\ndef setup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28126
        },
        "correct_code": "@ID .ID (ID =LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "@ID .ID (ID =LIT )def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_cannot_validate_if_the_user_cannot_move_forums(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28127
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_cannot_validate_if_the_forum_is_a_category(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28128
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "else \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_cannot_validate_if_the_forum_is_a_link(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28129
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef )(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_cannot_validate_if_the_forum_is_the_topic_forum(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28130
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID as (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_validates_if_the_user_has_the_required_permission(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28131
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID /ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_locks_the_topic_if_it_was_already_locked(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/functional/moderation/test_forms.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28132
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID global :\n    pass \n"
    },
    {
        "code": "@pytest.fixture(autouse=True)\ndef setup(self):\n    self.forum = create_forum()\n    machina_settings.DEFAULT_AUTHENTICATED_USER_FORUM_PERMISSIONS = ['can_see_forum', ]\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 28133
        },
        "correct_code": "@ID .ID (ID =LIT )\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =[LIT ,]\n",
        "wrong_code": "@ID .ID (ID =LIT )\ndef ID (ID )):\n    ID .ID =ID ()\n    ID .ID =[LIT ,]\n"
    },
    {
        "code": "\ndef teardown_method(self, method):\n    machina_settings.DEFAULT_AUTHENTICATED_USER_FORUM_PERMISSIONS = []\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 28134
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ]ID .ID =[]\n"
    },
    {
        "code": "\ndef test_knows_that_a_superuser_has_all_the_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28135
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_knows_that_an_inactive_user_has_no_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28136
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": ":\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_allows_the_use_of_default_permissions(self):\n    # Setup\n    user = UserFactory.create()\n    checker = ForumPermissionChecker(user)\n    # Run & check\n    assert checker.has_perm('can_see_forum', self.forum)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28137
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID =ID .ID ()\n    ID =ID (ID )\n    #COMMENT\n\n    assert ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID =ID .()\n    ID =ID (ID )\n    #COMMENT\n\n    assert ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_can_use_global_permissions(self):\n    # Run & check\n    assert checker.has_perm('can_read_forum', self.forum)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 28138
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    assert ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    assert ID .ID (LIT ,ID .ID is )\n"
    },
    {
        "code": "\ndef test_knows_that_user_permissions_take_precedence_over_user_global_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28139
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID or ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_knows_that_group_permissions_take_precedence_over_group_global_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28140
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    for "
    },
    {
        "code": "\ndef test_knows_that_user_permissions_take_precedence_over_group_permissions(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-machina/tests/unit/permission/test_checker.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28141
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )[:\n    pass \n"
    },
    {
        "code": "\ndef do_render(self, parser, value, option=None, parent=None):\n    if self.definition_string and self.format_string:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-precise-bbcode/precise_bbcode/bbcode/tag.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28142
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    if ID .ID and ID .ID :\n        pass \n",
        "wrong_code": "\ndef (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    if ID .ID and ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef render(self, value, option=None, parent=None):\n    \"\"\"\n        The render function is used to transform a BBCodeTag and its context (value, option) to\n        the corresponding HTML output.\n\n            value\n                The context between start and end tags, or None for standalone tags.\n                Whether this has been rendered depends on render_embedded tag option.\n            option\n                The value of an option passed to the tag.\n            parent\n                The parent BBCodeTag instance, if the tag is being rendered inside another tag,\n                otherwise None.\n        \"\"\"\n    # The default implementation will raise a NotImplementedError to ensure\n    # that any subclasses must override this method if the definition string\n    # and the format string are not used.\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-precise-bbcode/precise_bbcode/bbcode/tag.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28143
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID )\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    raise ID \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    for attr, value in kwargs.items():\n        setattr(self, attr, value)\n",
        "metadata": {
            "file": "py150_files/data/ellmetha/django-precise-bbcode/precise_bbcode/bbcode/tag.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28144
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    for ID ,ID in ID .ID ():\n        ID (ID ,ID ,ID )\n",
        "wrong_code": "\nglobal ID (ID ,**ID ):\n    for ID ,ID in ID .ID ():\n        ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef create_reverse_dictionary(dictionary):\n    dictionary_reverse = {}\n\n    for word in dictionary:\n        index = dictionary[word]\n        dictionary_reverse[index] = word\n    return dictionary_reverse\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28145
        },
        "correct_code": "\ndef ID (ID ):\n    ID ={}\n\n    for ID in ID :\n        ID =ID [ID ]\n        ID [ID ]=ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID ={}\n\n    for ID in ID :\n        break =ID [ID ]\n        ID [ID ]=ID \n    return ID \n"
    },
    {
        "code": "\ndef sent2matrix(sentence, dictionary):\n\n    for i in xrange(len(words)):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28146
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID (ID (ID )):\n        pass \n",
        "wrong_code": "=\ndef ID (ID ,ID ):\n\n    for ID in ID (ID (ID )):\n        pass \n"
    },
    {
        "code": "\ndef matrix2sent(matrix, reverse_dictionary):\n    for i in xrange(matrix.shape[0]):\n        text = text + \" \" + reverse_dictionary[matrix[i]]\n\n    return text\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 28147
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID .ID [LIT ]):\n        ID =ID +LIT +ID [ID [ID ]]\n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):==\n    for ID in ID (ID .ID [LIT ]):\n        ID =ID +LIT +ID [ID [ID ]]\n\n    return ID \n"
    },
    {
        "code": "\ndef create_2digit_mnist_image_leftright(digit1, digit2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28148
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nexcept def ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef create_2digit_mnist_image_topbottom(digit1, digit2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28149
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n    !"
    },
    {
        "code": "\ndef create_1digit_mnist_image_topleft(digit1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 28150
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    -pass \n"
    },
    {
        "code": "\ndef create_1digit_mnist_image_topright(digit1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28151
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )(\n    pass \n"
    },
    {
        "code": "\ndef create_1digit_mnist_image_bottomright(digit1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 28152
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID !(ID ):\n    pass \n"
    },
    {
        "code": "\ndef create_1digit_mnist_image_bottomleft(digit1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emansim/text2image/mnist-captions/create-captions.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 28153
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nasync     pass \n"
    },
    {
        "code": "\n\ndef xio_client_from_environment():\n    if config_file_path is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/flocker-drivers/xtremio/testtools_emc_xio.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 28154
        },
        "correct_code": "\n\ndef ID ():\n    if ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID is not ID :\n        pass \n    else :and \n        pass \n"
    },
    {
        "code": "\n\ndef detach_destroy_volumes(api):\n\n    for volume in volumes:\n        if volume.attached_to is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/flocker-drivers/xtremio/testtools_emc_xio.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 28155
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    for ID in ID :\n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n    for ID in ID :\n        if ID .ID is *not ID :\n            pass \n"
    },
    {
        "code": "\n\ndef destroy_volume_folder(api):\n    \"\"\"\n    Destroy all volumes folders\n    :param : api object\n    \"\"\"\n    api.destroy_volume_folder()\n",
        "metadata": {
            "file": "py150_files/data/emccode/flocker-drivers/xtremio/testtools_emc_xio.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 28156
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID .*ID ()\n"
    },
    {
        "code": "\n\ndef tidy_xio_client_for_test(test_case):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/flocker-drivers/xtremio/testtools_emc_xio.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28157
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ](ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef main(config, args):\n    try:\n        pass\n    except Exception as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/hbcli/controllers/config.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 28158
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    try :\n        pass \n    except continue ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef get_handler(self, message, **configs):\n    message = json.loads(message)\n    message['recording_id'] = self.recording_id\n\n    return self.message_handler(message, configs)\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28159
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID =ID .ID (ID )\n    ID [LIT ]=ID .ID \n\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    ID =ID .ID (ID )\n    ID [LIT ]=.ID \n\n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef set_recording_id(self, recording_id):\n    self.recording_id = recording_id\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 28160
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ID \n"
    },
    {
        "code": "\ndef execute(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28161
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nlambda "
    },
    {
        "code": "\ndef __init__(self):\n    AbstractModule.__init__(self)\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28162
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID /:\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef _subscribe(self, redis):\n    self.redis_subscriber = redis\n    redis.subscribe()\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28163
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID not ID .ID ()\n"
    },
    {
        "code": "\ndef configure(self, **configs):\n    self.configs = configs\n    self.redis_host = configs['redis_host']\n    self.redis_port = configs['redis_port']\n    self.redis_sub_queue = configs['traffic_sub_queue']\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 28164
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID .ID =ID \n    ID .ID nonlocal =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n"
    },
    {
        "code": "\ndef start(self, **params):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 28165
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,!=ID ):\n    pass \n"
    },
    {
        "code": "\ndef stop(self, **params):\n    try:\n        if self.redis_subscriber:\n            pass\n    except AttributeError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/emccode/heliosburn/heliosburn/proxy/modules/traffic_recorder.py",
            "fix_location": 99,
            "fix_type": "delete",
            "id": 28166
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    try :\n        if ID .ID :\n            pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    try :\n        if ID .ID :\n            pass \n    except ID :\n        pass \nand "
    },
    {
        "code": "\n\ndef response(resp=None, status=200, content_type='application/json'):\n    return Response(response=resp, status=status, content_type=content_type)\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28167
        },
        "correct_code": "\n\ndef ID (ID =ID ,ID =LIT ,ID =LIT ):\n    return ID (ID =ID ,ID =ID ,ID =ID )\n",
        "wrong_code": "\n\ndef ID (ID =ID ,ID =LIT ,ID =LIT ):\n    return ID (ID =ID ,ID =\n    ,ID =ID )\n"
    },
    {
        "code": "\n\n@app.route('/')\ndef index():\n    return render('index.html')\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28168
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    return ID (LIT )\n",
        "wrong_code": "\n\n@ID ID (LIT )\ndef ID ():\n    return ID (LIT )\n"
    },
    {
        "code": "\n\n@app.route('/list', methods=['GET'])\ndef list_keys():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28169
        },
        "correct_code": "\n\n@ID .ID (LIT ,ID =[LIT ])\ndef ID ():\n    pass \n",
        "wrong_code": "\n\n@ID ID (LIT ,ID =[LIT ])\ndef ID ():\n    pass \n"
    },
    {
        "code": "\n\n@app.route('/favicon.ico')\ndef favicon():\n    return send_from_directory(os.path.join(app.root_path, 'static'),\n                               'favicon.ico',\n                               mimetype='image/vnd.microsoft.icon')\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 28170
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    return ID (ID .ID .ID (ID .ID ,LIT ),\n    LIT ,\n    ID =LIT )\n",
        "wrong_code": "\n\n@ID .ID (pass )\ndef ID ():\n    return ID (ID .ID .ID (ID .ID ,LIT ),\n    LIT ,\n    ID =LIT )\n"
    },
    {
        "code": "\ndef get_storm():\n    return Storm(ssh_config)\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28171
        },
        "correct_code": "\ndef ID ():\n    return ID (ID )\n",
        "wrong_code": "\nID ():\n    return ID (ID )\n"
    },
    {
        "code": "\n\ndef run(port, debug, ssh_config=None):\n\n    def get_storm():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/emre/storm/storm/web.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28172
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n\n    def ID ()\n        pass \n"
    },
    {
        "code": "\n\ndef tostr(b):\n    \"\"\" Python 3 bytes encoder. Used to print filename in\n      diffstat output. Assumes that filenames are in utf-8.\n  \"\"\"\n    if not PY3K:\n        return b\n\n    # [ ] figure out how to print non-utf-8 filenames without\n    #     information loss\n    return b.decode('utf-8')\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28173
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    if not ID :\n        return ID \n\n        #COMMENT\n\n        #COMMENT\n\n    return ID .ID (LIT )\n",
        "wrong_code": "\n]\ndef ID (ID ):\n    LIT \n    if not ID :\n        return ID \n\n        #COMMENT\n\n        #COMMENT\n\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef handle(self, record):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28174
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef emit(self, record):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 28175
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\nNone     pass \n"
    },
    {
        "code": "\ndef createLock(self):\n    self.lock = None\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28176
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID )assert \n    ID .ID =ID \n"
    },
    {
        "code": "\n\ndef setdebug():\n\n    if streamhandler not in logger.handlers:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 28177
        },
        "correct_code": "\n\ndef ID ():\n\n    if ID not in ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    if ID not in ID .ID :\n        pass \n    ,"
    },
    {
        "code": "\n\ndef xnormpath(path):\n    \"\"\" Cross-platform version of os.path.normpath \"\"\"\n    # replace escapes and Windows slashes\n    normalized = posixpath.normpath(path).replace(b'\\\\', b'/')\n    # fold the result\n    return posixpath.normpath(normalized)\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 28178
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID (ID ).ID (LIT ,LIT )\n    #COMMENT\n\n    return ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID (ID ).ID (pass LIT ,LIT )\n    #COMMENT\n\n    return ID .ID (ID )\n"
    },
    {
        "code": "\n\n# -----------------------------------------------\n# Main API functions\n\ndef fromfile(filename):\n    if res == True:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 28179
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID *):\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\n\ndef fromstring(s):\n    \"\"\" Parse text string and return PatchSet()\n      object (or False if parsing fails)\n  \"\"\"\n    ps = PatchSet(StringIO(s))\n    if ps.errors == 0:\n        return ps\n    return False\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28180
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID (ID ))\n    if ID .ID ==LIT :\n        return ID \n    return LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID (ID ))\n    if ID .ID ==LIT if \n        return ID \n    return LIT \n"
    },
    {
        "code": "\n\ndef fromurl(url):\n    \"\"\" Parse patch from an URL, return False\n      if an error occured. Note that this also\n      can throw urlopen() exceptions.\n  \"\"\"\n    ps = PatchSet(urllib_request.urlopen(url))\n    if ps.errors == 0:\n        return ps\n    return False\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 91,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28181
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID .ID (ID ))\n    if ID .ID ==LIT :\n        return ID \n    return LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID .ID (ID ))\n    if ID .ID ==LIT :\n        return ID return LIT \n"
    },
    {
        "code": "\n\n# --- Utility functions ---\n# [ ] reuse more universal pathsplit()\ndef pathstrip(path, n):\n    while os.path.dirname(pathlist[0]) != b'':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28182
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    while ID .ID .ID (ID [LIT ])!=LIT :\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\ndef ID =ID ,ID ):\n    while ID .ID .ID (ID [LIT ])!=LIT :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self):\n    self.invalid = False\n    self.desc = ''\n    self.text = []\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28183
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID .ID =LIT \n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =LIT ID .ID =LIT \n    ID .ID =[]\n"
    },
    {
        "code": "\ndef __init__(self):\n    self.target = None\n    self.hunks = []\n    self.hunkends = []\n    self.header = []\n\n    self.type = None\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 28184
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =[]\n    ID .ID =[]\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =[await ]\n    ID .ID =[]\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __iter__(self):\n    for h in self.hunks:\n        yield h\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28185
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID for \n        yield ID \n"
    },
    {
        "code": "\ndef __init__(self, stream=None):\n    # --- /API ---\n\n    if stream:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28186
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID )\n#COMMENT\n\n\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.items)\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28187
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID )finally \n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef __iter__(self):\n    for i in self.items:\n        yield i\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 28188
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID -.ID :\n        yield ID \n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    # we don't call parent, it is magically created by __new__ method\n\n    self._exhausted = False\n    self._lineno = False  # after end of stream equal to the num of lines\n    self._line = False  # will be reset to False after end of stream\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 28189
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n#COMMENT\n\n\n    ID .ID =LIT \n    ID .ID =LIT #COMMENT\n\n    ID .ID =LIT #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\ntry #COMMENT\n\n\n    ID .ID =LIT \n    ID .ID =LIT #COMMENT\n\n    ID .ID =LIT #COMMENT\n\n"
    },
    {
        "code": "\ndef next(self):\n    if self._exhausted:\n        pass\n\n    try:\n        pass\n    except StopIteration:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28190
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID ]ID :\n        pass \n\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\n@property\ndef is_empty(self):\n    return self._exhausted\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28191
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n@ID def ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\n@property\ndef line(self):\n    return self._line\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 28192
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n@pass ID \ndef ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\n@property\ndef lineno(self):\n    return self._lineno\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28193
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "lambda \n@ID \ndef ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef revert(self, strip=0, root=None):\n    \"\"\" apply patch in reverse order \"\"\"\n    reverted = copy.deepcopy(self)\n    reverted._reverse()\n    return reverted.apply(strip, root)\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28194
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    LIT \n    ID =ID .ID (ID )\n    ID .ID ()\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID +ID ,ID =LIT ,ID =ID ):\n    LIT \n    ID =ID .ID (ID )\n    ID .ID ()\n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef can_patch(self, filename):\n    for p in self.items:\n        if filename == abspath(p.source):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 28195
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        if ID ==ID (ID .ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID !in ID .ID :\n        if ID ==ID (ID .ID ):\n            pass \n"
    },
    {
        "code": "\ndef write_hunks(self, srcname, tgtname, hunks):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/ensime/ensime-sublime/patch.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28196
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,,):\n    pass \n"
    },
    {
        "code": "\ndef main():\n    sys.exit(comtypes.test.run(sys.argv[1:]))\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/runtests.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28197
        },
        "correct_code": "\ndef ID ():\n    ID .ID (ID .ID .ID (ID .ID [LIT :]))\n",
        "wrong_code": "\ndef ID ():\n    ID .\n    (ID .ID .ID (ID .ID [LIT :]))\n"
    },
    {
        "code": "\ndef test(self):\n    import comtypes.test.test_showevents\n    doctest.testmod(comtypes.test.test_showevents, optionflags=doctest.ELLIPSIS)\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28198
        },
        "correct_code": "\ndef ID (ID ):\n    import ID .ID .ID \n    ID .ID (ID .ID .ID ,ID =ID .ID )\n",
        "wrong_code": "\ndef ID (+ID ):\n    import ID .ID .ID \n    ID .ID (ID .ID .ID ,ID =ID .ID )\n"
    },
    {
        "code": "def IE_ShowEvents(self):\n    '''\n            >>> from comtypes.client import CreateObject, ShowEvents, PumpEvents\n            >>>\n            >>> o = CreateObject(\"InternetExplorer.Application\")\n            >>> con = ShowEvents(o)\n            # event found: DWebBrowserEvents2_StatusTextChange\n            # event found: DWebBrowserEvents2_ProgressChange\n            # event found: DWebBrowserEvents2_CommandStateChange\n            # event found: DWebBrowserEvents2_DownloadBegin\n            # event found: DWebBrowserEvents2_DownloadComplete\n            # event found: DWebBrowserEvents2_TitleChange\n            # event found: DWebBrowserEvents2_PropertyChange\n            # event found: DWebBrowserEvents2_BeforeNavigate2\n            # event found: DWebBrowserEvents2_NewWindow2\n            # event found: DWebBrowserEvents2_NavigateComplete2\n            # event found: DWebBrowserEvents2_DocumentComplete\n            # event found: DWebBrowserEvents2_OnQuit\n            # event found: DWebBrowserEvents2_OnVisible\n            # event found: DWebBrowserEvents2_OnToolBar\n            # event found: DWebBrowserEvents2_OnMenuBar\n            # event found: DWebBrowserEvents2_OnStatusBar\n            # event found: DWebBrowserEvents2_OnFullScreen\n            # event found: DWebBrowserEvents2_OnTheaterMode\n            # event found: DWebBrowserEvents2_WindowSetResizable\n            # event found: DWebBrowserEvents2_WindowSetLeft\n            # event found: DWebBrowserEvents2_WindowSetTop\n            # event found: DWebBrowserEvents2_WindowSetWidth\n            # event found: DWebBrowserEvents2_WindowSetHeight\n            # event found: DWebBrowserEvents2_WindowClosing\n            # event found: DWebBrowserEvents2_ClientToHostWindow\n            # event found: DWebBrowserEvents2_SetSecureLockIcon\n            # event found: DWebBrowserEvents2_FileDownload\n            # event found: DWebBrowserEvents2_NavigateError\n            # event found: DWebBrowserEvents2_PrintTemplateInstantiation\n            # event found: DWebBrowserEvents2_PrintTemplateTeardown\n            # event found: DWebBrowserEvents2_UpdatePageStatus\n            # event found: DWebBrowserEvents2_PrivacyImpactedStateChange\n            # event found: DWebBrowserEvents2_NewWindow3\n            >>> res = o.Navigate2(\"http://www.python.org\")\n            Event DWebBrowserEvents2_PropertyChange(None, '{265b75c1-4158-11d0-90f6-00c04fd497ea}')\n            Event DWebBrowserEvents2_BeforeNavigate2(None, <POINTER(IWebBrowser2) ...>, VARIANT(vt=0x400c, byref('http://www.python.org/')), VARIANT(vt=0x400c, byref(0)), VARIANT(vt=0x400c, byref(None)), VARIANT(vt=0x400c, byref(VARIANT(vt=0x400c, byref(None)))), VARIANT(vt=0x400c, byref(None)), VARIANT(vt=0x400b, byref(False)))\n            Event DWebBrowserEvents2_DownloadBegin(None)\n            Event DWebBrowserEvents2_PropertyChange(None, '{D0FCA420-D3F5-11CF-B211-00AA004AE837}')\n            >>> res = PumpEvents(0.01)\n            Event DWebBrowserEvents2_CommandStateChange(None, 2, False)\n            Event DWebBrowserEvents2_CommandStateChange(None, 1, False)\n            >>> res = o.Quit()\n            >>> res = PumpEvents(0.01)\n            Event DWebBrowserEvents2_OnQuit(None)\n            >>>\n            '''\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 28199
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (ID ):\n    LIT \n    while "
    },
    {
        "code": "def IE_ShowEvents(self):\n    '''\n            >>> from comtypes.client import CreateObject, ShowEvents, PumpEvents\n            >>>\n            >>> o = CreateObject(\"InternetExplorer.Application\")\n            >>> con = ShowEvents(o)\n            # event found: DWebBrowserEvents2_StatusTextChange\n            # event found: DWebBrowserEvents2_ProgressChange\n            # event found: DWebBrowserEvents2_CommandStateChange\n            # event found: DWebBrowserEvents2_DownloadBegin\n            # event found: DWebBrowserEvents2_DownloadComplete\n            # event found: DWebBrowserEvents2_TitleChange\n            # event found: DWebBrowserEvents2_PropertyChange\n            # event found: DWebBrowserEvents2_BeforeNavigate2\n            # event found: DWebBrowserEvents2_NewWindow2\n            # event found: DWebBrowserEvents2_NavigateComplete2\n            # event found: DWebBrowserEvents2_DocumentComplete\n            # event found: DWebBrowserEvents2_OnQuit\n            # event found: DWebBrowserEvents2_OnVisible\n            # event found: DWebBrowserEvents2_OnToolBar\n            # event found: DWebBrowserEvents2_OnMenuBar\n            # event found: DWebBrowserEvents2_OnStatusBar\n            # event found: DWebBrowserEvents2_OnFullScreen\n            # event found: DWebBrowserEvents2_OnTheaterMode\n            # event found: DWebBrowserEvents2_WindowSetResizable\n            # event found: DWebBrowserEvents2_WindowSetLeft\n            # event found: DWebBrowserEvents2_WindowSetTop\n            # event found: DWebBrowserEvents2_WindowSetWidth\n            # event found: DWebBrowserEvents2_WindowSetHeight\n            # event found: DWebBrowserEvents2_WindowClosing\n            # event found: DWebBrowserEvents2_ClientToHostWindow\n            # event found: DWebBrowserEvents2_SetSecureLockIcon\n            # event found: DWebBrowserEvents2_FileDownload\n            # event found: DWebBrowserEvents2_NavigateError\n            # event found: DWebBrowserEvents2_PrintTemplateInstantiation\n            # event found: DWebBrowserEvents2_PrintTemplateTeardown\n            # event found: DWebBrowserEvents2_UpdatePageStatus\n            # event found: DWebBrowserEvents2_PrivacyImpactedStateChange\n            # event found: DWebBrowserEvents2_NewWindow3\n            >>> res = o.Navigate2(\"http://www.python.org\")\n            Event DWebBrowserEvents2_PropertyChange(None, u'{265b75c1-4158-11d0-90f6-00c04fd497ea}')\n            Event DWebBrowserEvents2_BeforeNavigate2(None, <POINTER(IWebBrowser2) ...>, VARIANT(vt=0x400c, byref(u'http://www.python.org/')), VARIANT(vt=0x400c, byref(0)), VARIANT(vt=0x400c, byref(None)), VARIANT(vt=0x400c, byref(VARIANT(vt=0x400c, byref(None)))), VARIANT(vt=0x400c, byref(None)), VARIANT(vt=0x400b, byref(False)))\n            Event DWebBrowserEvents2_DownloadBegin(None)\n            Event DWebBrowserEvents2_PropertyChange(None, u'{D0FCA420-D3F5-11CF-B211-00AA004AE837}')\n            >>> res = PumpEvents(0.01)\n            Event DWebBrowserEvents2_CommandStateChange(None, 2, False)\n            Event DWebBrowserEvents2_CommandStateChange(None, 1, False)\n            >>> res = o.Quit()\n            >>> res = PumpEvents(0.01)\n            Event DWebBrowserEvents2_OnQuit(None)\n            >>>\n            '''\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28200
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "del def ID (ID ):\n    LIT \n"
    },
    {
        "code": "def IE_GetEvents():\n    \"\"\"\n        >>> from comtypes.client import CreateObject, GetEvents, PumpEvents\n        >>>\n        >>> o =  CreateObject(\"InternetExplorer.Application\")\n        >>> class EventHandler(object):\n        ...     def DWebBrowserEvents2_PropertyChange(self, this, what):\n        ...         print(\"PropertyChange: %s\" % what)\n        ...         return 0\n        ...\n        >>>\n        >>> con = GetEvents(o, EventHandler())\n        >>> res = o.Navigate2(\"http://www.python.org\")\n        PropertyChange: {265b75c1-4158-11d0-90f6-00c04fd497ea}\n        PropertyChange: {D0FCA420-D3F5-11CF-B211-00AA004AE837}\n        >>> res = o.Quit()\n        >>> res = PumpEvents(0.01)\n        >>>\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28201
        },
        "correct_code": "def ID ():\n    LIT \n",
        "wrong_code": "def ID except ):\n    LIT \n"
    },
    {
        "code": "\ndef Excel_Events(self):\n    '''\n        >>> from comtypes.client import CreateObject, ShowEvents, PumpEvents\n        >>>\n        >>> o = CreateObject(\"Excel.Application\")\n        >>> con = ShowEvents(o)\n        # event found: AppEvents_NewWorkbook\n        # event found: AppEvents_SheetSelectionChange\n        # event found: AppEvents_SheetBeforeDoubleClick\n        # event found: AppEvents_SheetBeforeRightClick\n        # event found: AppEvents_SheetActivate\n        # event found: AppEvents_SheetDeactivate\n        # event found: AppEvents_SheetCalculate\n        # event found: AppEvents_SheetChange\n        # event found: AppEvents_WorkbookOpen\n        # event found: AppEvents_WorkbookActivate\n        # event found: AppEvents_WorkbookDeactivate\n        # event found: AppEvents_WorkbookBeforeClose\n        # event found: AppEvents_WorkbookBeforeSave\n        # event found: AppEvents_WorkbookBeforePrint\n        # event found: AppEvents_WorkbookNewSheet\n        # event found: AppEvents_WorkbookAddinInstall\n        # event found: AppEvents_WorkbookAddinUninstall\n        # event found: AppEvents_WindowResize\n        # event found: AppEvents_WindowActivate\n        # event found: AppEvents_WindowDeactivate\n        # event found: AppEvents_SheetFollowHyperlink\n        # event found: AppEvents_SheetPivotTableUpdate\n        # event found: AppEvents_WorkbookPivotTableCloseConnection\n        # event found: AppEvents_WorkbookPivotTableOpenConnection\n        # event found: AppEvents_WorkbookSync\n        # event found: AppEvents_WorkbookBeforeXmlImport\n        # event found: AppEvents_WorkbookAfterXmlImport\n        # event found: AppEvents_WorkbookBeforeXmlExport\n        # event found: AppEvents_WorkbookAfterXmlExport\n        >>> wb = o.Workbooks.Add()\n        Event AppEvents_NewWorkbook(None, <POINTER(_Workbook) ...>)\n        Event AppEvents_WorkbookActivate(None, <POINTER(_Workbook) ...>)\n        Event AppEvents_WindowActivate(None, <POINTER(_Workbook) ...>, <POINTER(Window) ...>)\n        >>> PumpEvents(0.1)\n        >>> res = o.Quit(); PumpEvents(0.1)\n        Event AppEvents_WorkbookBeforeClose(None, <POINTER(_Workbook) ...>, VARIANT(vt=0x400b, byref(False)))\n        Event AppEvents_WindowDeactivate(None, <POINTER(_Workbook) ...>, <POINTER(Window) ...>)\n        Event AppEvents_WorkbookDeactivate(None, <POINTER(_Workbook) ...>)\n        >>>\n        '''\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28202
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n=="
    },
    {
        "code": "\ndef Excel_Events_2(self):\n    '''\n        >>> from comtypes.client import CreateObject, GetEvents, PumpEvents\n        >>>\n        >>> o = CreateObject(\"Excel.Application\")\n        >>> class Sink(object):\n        ...    def AppEvents_NewWorkbook(self, this, workbook):\n        ...        print(\"AppEvents_NewWorkbook %s\" % workbook)\n        ...\n        >>>\n        >>> con = GetEvents(o, Sink())\n        >>> wb = o.Workbooks.Add()\n        AppEvents_NewWorkbook <POINTER(_Workbook) ...>\n        >>>\n        >>> class Sink(object):\n        ...    def AppEvents_NewWorkbook(self, workbook):\n        ...        print(\"AppEvents_NewWorkbook(no this) %s\" % workbook)\n        ...\n        >>>\n        >>> con = GetEvents(o, Sink())\n        >>> wb = o.Workbooks.Add()\n        AppEvents_NewWorkbook(no this) <POINTER(_Workbook) ...>\n        >>>\n        >>> res = o.Quit()\n        >>>\n        '''\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28203
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID while ):\n    LIT \n"
    },
    {
        "code": "\ndef Word_Events(self):\n    '''\n        >>> from comtypes.client import CreateObject, ShowEvents, PumpEvents\n        >>>\n        >>> o = CreateObject(\"Word.Application\")\n        >>> con = ShowEvents(o)\n        # event found: ApplicationEvents4_Startup\n        # event found: ApplicationEvents4_Quit\n        # event found: ApplicationEvents4_DocumentChange\n        # event found: ApplicationEvents4_DocumentOpen\n        # event found: ApplicationEvents4_DocumentBeforeClose\n        # event found: ApplicationEvents4_DocumentBeforePrint\n        # event found: ApplicationEvents4_DocumentBeforeSave\n        # event found: ApplicationEvents4_NewDocument\n        # event found: ApplicationEvents4_WindowActivate\n        # event found: ApplicationEvents4_WindowDeactivate\n        # event found: ApplicationEvents4_WindowSelectionChange\n        # event found: ApplicationEvents4_WindowBeforeRightClick\n        # event found: ApplicationEvents4_WindowBeforeDoubleClick\n        # event found: ApplicationEvents4_EPostagePropertyDialog\n        # event found: ApplicationEvents4_EPostageInsert\n        # event found: ApplicationEvents4_MailMergeAfterMerge\n        # event found: ApplicationEvents4_MailMergeAfterRecordMerge\n        # event found: ApplicationEvents4_MailMergeBeforeMerge\n        # event found: ApplicationEvents4_MailMergeBeforeRecordMerge\n        # event found: ApplicationEvents4_MailMergeDataSourceLoad\n        # event found: ApplicationEvents4_MailMergeDataSourceValidate\n        # event found: ApplicationEvents4_MailMergeWizardSendToCustom\n        # event found: ApplicationEvents4_MailMergeWizardStateChange\n        # event found: ApplicationEvents4_WindowSize\n        # event found: ApplicationEvents4_XMLSelectionChange\n        # event found: ApplicationEvents4_XMLValidationError\n        # event found: ApplicationEvents4_DocumentSync\n        # event found: ApplicationEvents4_EPostageInsertEx\n        >>> PumpEvents(0.1)\n        >>> doc = o.Documents.Add()\n        Event ApplicationEvents4_NewDocument(None, <POINTER(_Document) ...>)\n        Event ApplicationEvents4_DocumentChange(None)\n        >>> res = o.Quit(); PumpEvents(0.1)\n        Event ApplicationEvents4_DocumentBeforeClose(None, <POINTER(_Document) ...>, VARIANT(vt=0x400b, byref(False)))\n        Event ApplicationEvents4_WindowDeactivate(None, <POINTER(_Document) ...>, <POINTER(Window) ...>)\n        Event ApplicationEvents4_DocumentChange(None)\n        Event ApplicationEvents4_Quit(None)\n        >>>\n        '''\n",
        "metadata": {
            "file": "py150_files/data/enthought/comtypes/comtypes/test/test_showevents.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28204
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\nID (ID ):\n    LIT \n"
    },
    {
        "code": "def __repr__(self):\n    return \"%s\" % self.__class__.__name__\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28205
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID .ID .ID \n",
        "wrong_code": "def ID (ID ):\n    return LIT %ID [ID .ID \n"
    },
    {
        "code": "\n# Mostly useful for testing\ndef __eq__(self, other):\n    return self.__class__ == other.__class__\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 28206
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    return ID .ID ==ID .ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,+ID ):\n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "def __init__(self, version):\n    self.version = version\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 28207
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID ,(ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"%s(%r)\" % (self.__class__.__name__, self.version)\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28208
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(*.ID .ID ,ID .ID )\n"
    },
    {
        "code": "\n# Mostly useful for testing\ndef __eq__(self, other):\n    return self.__class__ == other.__class__ and self.version == other.version\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 28209
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    return ID .ID ==ID .ID and ID .ID ==ID .ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    return ID .ID ==ID .ID and nonlocal ID .ID ==ID .ID \n"
    },
    {
        "code": "\ndef __hash__(self):\n    return hash(repr(self))\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/constraints.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28210
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ))\n",
        "wrong_code": "\ndef (ID ):\n    return ID (ID (ID ))\n"
    },
    {
        "code": "def test_valid_versions(self):\n    versions = [\"1.2.0\", \"1.2.3-1\", \"0:1.2.3-1\"]\n\n    for version in versions:\n        self.assertTrue(is_valid_debian_version(version))\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/tests/test_debian_version.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28211
        },
        "correct_code": "def ID (ID ):\n    ID =[LIT ,LIT ,LIT ]\n\n    for ID in ID :\n        ID .ID (ID (ID ))\n",
        "wrong_code": "def ID (ID ):\n    ID =[LIT ,LIT ,LIT ]\n\n    for ID in ID :while ID .ID (ID (ID ))\n"
    },
    {
        "code": "\ndef test_roundtrip(self):\n    versions = [\"1.2.0\", \"1.2.0-0\", \"0:1.2.0\"]\n\n    for version in versions:\n        self.assertEqual(str(V(version)), version)\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/tests/test_debian_version.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 28212
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[LIT ,LIT ,LIT ]\n\n    for ID in ID :\n        ID .ID (ID (ID (ID )),ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[LIT ,,LIT ]\n\n    for ID in ID :\n        ID .ID (ID (ID (ID )),ID )\n"
    },
    {
        "code": "def test_eq(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/tests/test_debian_version.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28213
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    pass \n!="
    },
    {
        "code": "\ndef test_lt(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/tests/test_debian_version.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28214
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef await (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_gt(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/depsolver/depsolver/tests/test_debian_version.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28215
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\n###########################################################################\n# 'object' interface.\n###########################################################################\n\ndef __str__(self):\n    \"\"\" Returns an informal string representation of the object. \"\"\"\n\n    return 'Assign %s at %d' % (', '.join(self.targets), self.lineno)\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/developer/code_browser/assign.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 28216
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return LIT %(LIT .ID (ID .ID ),ID .ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return LIT %(assert LIT .ID (ID .ID ),ID .ID )\n"
    },
    {
        "code": "\n###########################################################################\n# 'AssignFactory' interface.\n###########################################################################\n\ndef from_ast(self, namespace, node):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/developer/code_browser/assign.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28217
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\nor #COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n###########################################################################\n# 'object' interface.\n###########################################################################\n\ndef __init__(self, assign):\n    \"\"\" Creates a new visitor. \"\"\"\n\n    self.assign = assign\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/developer/code_browser/assign.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 28218
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID =ID \n\n    return \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n=    LIT \n\n    ID .ID =ID \n\n    return \n"
    },
    {
        "code": "\n###########################################################################\n# 'NodeVisitor' interface.\n###########################################################################\n\ndef visit_Assign(self, node):\n    for name in node.targets:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/developer/code_browser/assign.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 28219
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID =):\n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# Private interface.\n###########################################################################\n\ndef _create_plugin_from_ep(self, ep):\n\n    # Warn if the entry point is an old-style one where the LHS didn't have\n    # to be the same as the plugin Id.\n    if ep.name != plugin.id:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/egg_plugin_manager.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28220
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\n\n    if ID .ID !=ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\ndef     if ID .ID !=ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _service_offers_default(self):\n    from encore.events.api import BaseEventManager, get_event_manager\n\n    evt_mgr_service_offer = ServiceOffer(\n        protocol   = BaseEventManager,\n        factory    = get_event_manager,\n    )\n    return [evt_mgr_service_offer]\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/event_manager/plugin.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 28221
        },
        "correct_code": "\ndef ID (ID ):\n    from ID .ID .ID import ID ,ID \n\n    ID =ID (\n    ID =ID ,\n    ID =ID ,\n    )\n    return [ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    from ID .ID .ID import ID ,ID \n\n    ID =ID (\n    ID =ID ,\n    ID =ID ,\n    )ID \n    return [ID ]\n"
    },
    {
        "code": "\ndef __init__(self, client):\n    Thread.__init__(self)\n    self.client = client\n    self._finished = False\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28222
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID )\n    ID .ID =ID \n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    and .ID (ID )\n    ID .ID =ID \n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef stop(self):\n    self._finished = True\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28223
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ntry ID (ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef register(self):\n    if self._communication_thread is not None:\n        pass\n    self._communication_thread.start()\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 28224
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef unregister(self):\n    if self._communication_thread is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28225
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):import     if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef send_command(self, command, arguments=''):\n    if self._communication_thread is None:\n        pass\n    if self.registered:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28226
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID .ID is ID :\n        pass \n    if ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID .ID is ID :\n        pass \n    if ID .ID :as pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef handle_command(self, command, arguments):\n    \"\"\" This function should take a command string and an arguments string\n            and do something with them. It should return True if the command\n            given was understood; otherwise, False.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/plugins/remote_editor/communication/client.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 28227
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID nonlocal ):\n    LIT \n    raise ID ()\n"
    },
    {
        "code": "\n###########################################################################\n# 'IExtensionRegistry' interface.\n###########################################################################\n\ndef set_extensions(self, extension_point_id, extensions):\n    \"\"\" Set the extensions to an extension point. \"\"\"\n\n    raise SystemError('extension points cannot be set')\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 28228
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    raise ID (LIT )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    import \n    raise ID (LIT )\n"
    },
    {
        "code": "\n###########################################################################\n# 'ProviderExtensionRegistry' interface.\n###########################################################################\n\ndef add_provider(self, provider):\n\n    for extension_point_id, (refs, added, index) in events.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28229
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n    for ID ,(ID ,ID ,ID )in ID .ID ():\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):await \n    for ID ,(ID ,ID ,ID )in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef get_providers(self):\n    \"\"\" Return all of the providers in the registry. \"\"\"\n\n    return self._providers[:]\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28230
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID [:]\n",
        "wrong_code": "\ndef ID (ID else ):\n    LIT \n\n    return ID .ID [:]\n"
    },
    {
        "code": "\ndef remove_provider(self, provider):\n\n    for extension_point_id, (refs, removed, index) in events.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28231
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID ,(ID ,ID ,ID )in ID .ID ():\n        pass \n",
        "wrong_code": "as def ID (ID ,ID ):\n\n    for ID ,(ID ,ID ,ID )in ID .ID ():\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# Protected 'ProviderExtensionRegistry' interface.\n###########################################################################\n\ndef _add_provider(self, provider):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28232
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID )\n    pass \n"
    },
    {
        "code": "\ndef _add_provider_extension_points(self, provider):\n    \"\"\" Add a provider's extension points to the registry. \"\"\"\n\n    for extension_point in provider.get_extension_points():\n        self._extension_points[extension_point.id] = extension_point\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 78,
            "fix_type": "delete",
            "id": 28233
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    for ID in ID .ID ():\n        ID .ID [ID .ID ]=ID \n\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    for ID in ID .ID ():\n        ID .ID [ID .ID ]with =ID \n\n    return \n"
    },
    {
        "code": "\ndef _remove_provider(self, provider):\n\n    # And finally take it out of the list of providers.\n    self._providers.remove(provider)\n\n    return events\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28234
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID .ID (ID )\n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,del ):\n\n#COMMENT\n\n    ID .ID .ID (ID )\n\n    return ID \n"
    },
    {
        "code": "\ndef _remove_provider_extension_points(self, provider, events):\n    \"\"\" Remove a provider's extension points from the registry. \"\"\"\n\n    for extension_point in provider.get_extension_points():\n        # Remove the extension point.\n        del self._extension_points[extension_point.id]\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28235
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    for ID in ID .ID ():\n    #COMMENT\n\n        del ID .ID [ID .ID ]\n\n    return \n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    LIT \n\n    for ID in ID .ID ():\n    #COMMENT\n\n        del ID .ID [ID .ID ]\n\n    return \n"
    },
    {
        "code": "\n#### Methods ##############################################################\n\ndef _initialize_extensions(self, extension_point_id):\n    for provider in self._providers:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 28236
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\nwith \ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _translate_index(self, index, offset):\n\n    if isinstance(index, slice):\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/provider_extension_registry.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "else",
            "id": 28237
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    if ID (ID ,ID ):\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n\n    if ID (ID ,ID ):\n        pass \n\n    del :\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# 'IPlugin' interface.\n###########################################################################\n\ndef start(self):\n    \"\"\" Start the plugin. \"\"\"\n\n    self.started = True\n    self.stopped = False\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/eggs/acme.baz/acme/baz/baz_plugin.py",
            "fix_location": 72,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28238
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    ID .ID =LIT \n    ID .ID =LIT \n\n    return \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    ID .ID =LIT ID .ID =LIT \n\n    return \n"
    },
    {
        "code": "\ndef stop(self):\n    \"\"\" Stop the plugin. \"\"\"\n\n    self.started = False\n    self.stopped = True\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/eggs/acme.baz/acme/baz/baz_plugin.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28239
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID =LIT \n    ID .ID =LIT \n\n    return \n",
        "wrong_code": "else \ndef ID (ID ):\n    LIT \n\n    ID .ID =LIT \n    ID .ID =LIT \n\n    return \n"
    },
    {
        "code": "\n\ndef service_factory(**properties):\n    \"\"\" A factory for foos. \"\"\"\n\n    return HasTraits(**properties)\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28240
        },
        "correct_code": "\n\ndef ID (**ID ):\n    LIT \n\n    return ID (**ID )\n",
        "wrong_code": "\n\ndef ID (**ID )=\n    LIT \n\n    return ID (**ID )\n"
    },
    {
        "code": "\n###########################################################################\n# 'TestCase' interface.\n###########################################################################\n\ndef setUp(self):\n\n    # module 'foo' need to be cleared out when this test is run by nose,\n    # because other tests also import foo.\n    if PKG + '.foo' in sys.modules:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28241
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    if ID +LIT in ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\nexcept #COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    if ID +LIT in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    \"\"\" Called immediately after each test method has been called. \"\"\"\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 28242
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return \n",
        "wrong_code": "\ndef *ID (ID ):\n    LIT \n\n    return \n"
    },
    {
        "code": "\n###########################################################################\n# Tests.\n###########################################################################\n\ndef test_should_get_required_service(self):\n\n    class Foo(HasTraits):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 28243
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    class ID (ID continue ):\n        pass \n"
    },
    {
        "code": "\ndef test_imported_service_factory(self):\n\n    class IFoo(Interface):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28244
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID /ID ):\n        pass \n"
    },
    {
        "code": "\ndef foo_factory(**properties):\n    \"\"\" A factory for foos. \"\"\"\n\n    return Foo(**properties)\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28245
        },
        "correct_code": "\ndef ID (**ID ):\n    LIT \n\n    return ID (**ID )\n",
        "wrong_code": "\ndef ID (**ID ):\n    LIT \n\n    return ID continue **ID )\n"
    },
    {
        "code": "\n# Register a service factory by name.\ndef foo_factory(**properties):\n    \"\"\" A factory for foos. \"\"\"\n\n    from envisage.tests.foo import Foo\n\n    foo_factory.foo = Foo()\n\n    return foo_factory.foo\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28246
        },
        "correct_code": "\n#COMMENT\n\ndef ID (**ID ):\n    LIT \n\n    from ID .ID .ID import ID \n\n    ID .ID =ID ()\n\n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (**ID ):\n    LIT \n\n    from ID .ID .ID import ID \n\n    ID .ID =ID (\n\n    return ID .ID \n"
    },
    {
        "code": "\ndef test_lazy_function_service_factory(self):\n\n    # Register a service factory by name.\n    def foo_factory(**properties):\n        pass\n\n    # Get rid of the 'foo' module (used in other tests).\n    if foo in sys.modules:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 28247
        },
        "correct_code": "\ndef ID (ID ):\n\n#COMMENT\n\n    def ID (**ID ):\n        pass \n\n        #COMMENT\n\n    if ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n#COMMENT\n\n    def ID (**ID ):\n        pass \n\n        #COMMENT\n\n    if ID in ==ID .ID :\n        pass \n"
    },
    {
        "code": "\n# Register a service factory by name.\ndef foo_factory(self, **properties):\n    \"\"\" A factory for foos. \"\"\"\n\n    from envisage.tests.foo import Foo\n\n    self.foo = Foo()\n\n    return self.foo\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28248
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,**ID ):\n    LIT \n\n    from ID .ID .ID import ID \n\n    ID .ID =ID ()\n\n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,**ID ):    LIT \n\n    from ID .ID .ID import ID \n\n    ID .ID =ID ()\n\n    return ID .ID \n"
    },
    {
        "code": "\ndef test_get_services_with_strings(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28249
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass /"
    },
    {
        "code": "\ndef test_get_and_set_service_properties(self):\n\n    class IFoo(Interface):\n        pass\n\n    @provides(IFoo)\n    class Foo(HasTraits):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 28250
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    @ID (ID )\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID )with :\n        pass \n\n    @ID (ID )\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_unregister_service(self):\n\n    class IFoo(Interface):\n        pass\n\n    @provides(IFoo)\n    class Foo(HasTraits):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/tests/service_registry_test_case.py",
            "fix_location": 103,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28251
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    @ID (ID )\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    @ID (ID )\n    class ID (ID ):\n        pass \n    nonlocal "
    },
    {
        "code": "\ndef _my_task_extensions_default(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/ui/tasks/tasks_plugin.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28252
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass ="
    },
    {
        "code": "\n###########################################################################\n# Private interface.\n###########################################################################\n\ndef _create_preferences_dialog_service(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/envisage/ui/tasks/tasks_plugin.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 28253
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\nin def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _messages_default(self):\n    \"\"\" Trait initializer. \"\"\"\n\n    # Only do imports when you need to!\n    from messages import messages\n\n    return messages\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/examples/MOTD/acme/motd/software_quotes/software_quotes_plugin.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 28254
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    from ID import ID \n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    from ID ]import ID \n\n    return ID \n"
    },
    {
        "code": "\n###########################################################################\n# 'Rossler' interface.\n###########################################################################\n\ndef compute_step(self, point, time):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/examples/plugins/tasks/attractors/model/rossler.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28255
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef !=(ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\n@cached_property\ndef _get_points(self):\n    return odeint(self.compute_step, self.initial_point, self.times)\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/examples/plugins/tasks/attractors/model/rossler.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28256
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    return ID (.ID ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\n@cached_property\ndef _get_times(self):\n    return arange(self.time_start, self.time_stop, self.time_step)\n",
        "metadata": {
            "file": "py150_files/data/enthought/envisage/examples/plugins/tasks/attractors/model/rossler.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28257
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID None ID )\n"
    },
    {
        "code": "\n@mayavi2.standalone\ndef contour():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/auto/contour.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 28258
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    pass \n",
        "wrong_code": "\n@ID .ID \nfinally def ID ():\n    pass \n"
    },
    {
        "code": "\n# Uncomment the next two lines to save the dataset to a VTK XML file.\n#w = tvtk.XMLPolyDataWriter(input=mesh, file_name='polydata.vtp')\n#w.write()\n\n# Now view the data.\n@mayavi2.standalone\ndef view():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/auto/polydata.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 28259
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n@ID .ID \ndef ID ():\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n@ID .ID not \ndef ID ():\n    pass \n"
    },
    {
        "code": "def __init__(self, start_lineno, end_lineno, text):\n    # int : The first line number in the block. 1-indexed.\n    self.start_lineno = start_lineno\n    # int : The last line number. Inclusive!\n    self.end_lineno = end_lineno\n    # str : The text block including '#' character but not any leading spaces.\n    self.text = text\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 28260
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n    #COMMENT\n\n    ID .ID =ID \n    #COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n#COMMENT\n\n    ID def .ID =ID \n    #COMMENT\n\n    ID .ID =ID \n    #COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef add(self, string, start, end, line):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28261
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": ")def ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '%s(%r, %r, %r)' % (self.__class__.__name__, self.start_lineno,\n        self.end_lineno, self.text)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 28262
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,\n    ID .ID ,ID .ID )pass \n"
    },
    {
        "code": "def __init__(self, start_lineno, end_lineno):\n    self.start_lineno = start_lineno\n    self.end_lineno = end_lineno\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28263
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef add(self, string, start, end, line):\n    if string.strip():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 28264
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    if ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID elif ,ID ,ID ,ID ):\n    if ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '%s(%r, %r)' % (self.__class__.__name__, self.start_lineno,\n        self.end_lineno)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28265
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,\n    ID .ID )\n",
        "wrong_code": "\ndef ID raise (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,\n    ID .ID )\n"
    },
    {
        "code": "def __init__(self):\n    # Start with a dummy.\n    self.current_block = NonComment(0, 0)\n\n    # All of the blocks seen so far.\n    self.blocks = []\n\n    # The index mapping lines of code to their associated comment blocks.\n    self.index = {}\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 28266
        },
        "correct_code": "def ID (ID ):\n#COMMENT\n\n    ID .ID =ID (LIT ,LIT )\n\n    #COMMENT\n\n    ID .ID =[]\n\n    #COMMENT\n\n    ID .ID ={}\n",
        "wrong_code": "def ID (ID ):\n#COMMENT\n\n    ID .ID =ID (LIT ,LIT )\n    in \n    #COMMENT\n\n    ID .ID =[]\n\n    #COMMENT\n\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef new_noncomment(self, start_lineno, end_lineno):\n    \"\"\" We are transitioning from a noncomment to a comment.\n        \"\"\"\n    block = NonComment(start_lineno, end_lineno)\n    self.blocks.append(block)\n    self.current_block = block\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28267
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =ID (ID ,ID )\n    ID .ID .ID (ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):-    LIT \n    ID =ID (ID ,ID )\n    ID .ID .ID (ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef new_comment(self, string, start, end, line):\n    if prefix.strip():\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28268
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    if ID .ID ():\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    if .ID ():\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef search_for_comment(self, lineno, default=None):\n    if not self.index:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28269
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if not ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,,ID =ID ):\n    if not ID .ID :\n        pass \n"
    },
    {
        "code": "\n\ndef strip_comment_marker(text):\n    for line in text.splitlines():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 28270
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID .elif ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef get_class_traits(klass):\n\n    for node in assign_nodes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/docs/source/mayavi/sphinxext/sphinxext/comment_eater.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28271
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    for ID in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID assert ID ):\n\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef random_box():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/examples/tvtk/visual/randombox.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 28272
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    async \n"
    },
    {
        "code": "\ndef wirecube(s):\n    for pt in pts:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/examples/tvtk/visual/randombox.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28273
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):yield \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "def make_data(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/integrationtests/mayavi/test_vtk_xml_reader.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28274
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test(self):\n    self.main()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/integrationtests/mayavi/test_vtk_xml_reader.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 28275
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    def ID .ID ()\n"
    },
    {
        "code": "\ndef __getstate__(self):\n    \"\"\"Allows standard pickle to work via the state_pickler.\n        \"\"\"\n    return state_pickler.dumps(self)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 28276
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID del (ID )\n"
    },
    {
        "code": "\ndef __setstate__(self, str_state):\n    if self.running:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28277
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\n)def ID (ID ,ID ):\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\n######################################################################\n# `Base` interface\n######################################################################\ndef start(self):\n    \"\"\"Invoked when this object is added to the mayavi pipeline.\n        \"\"\"\n    self.running = True\n    self._load_saved_state()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 28278
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    LIT \n    ID .ID =LIT \n    ID .ID ()\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\nraise     LIT \n    ID .ID =LIT \n    ID .ID ()\n"
    },
    {
        "code": "\ndef stop(self):\n    \"\"\"Invoked when this object is removed from the mayavi\n        pipeline.\n        \"\"\"\n    self.running = False\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 28279
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =LIT or \n"
    },
    {
        "code": "\ndef add_child(self, child):\n    \"\"\"This method intelligently adds a child to this object in\n        the MayaVi pipeline.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28280
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID del ID ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef remove_child(self, child):\n    \"\"\"Remove specified child from our children.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28281
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef ID except (ID ,ID ):\n    LIT \n    raise ID ()\n"
    },
    {
        "code": "\ndef remove(self):\n    if self.parent is not None:\n        if e.current_object is self:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "not",
            "id": 28282
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        if ID .ID is ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is LIT ID :\n        if ID .ID is ID :\n            pass \n"
    },
    {
        "code": "\ndef render(self):\n    \"\"\"Invokes render on the scene, this in turn invokes Render on\n        the VTK pipeline.\n        \"\"\"\n    s = self.scene\n    if s is not None:\n        s.render()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 28283
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID \n    if ID is not ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    with ID =ID .ID \n    if ID is not ID :\n        ID .ID ()\n"
    },
    {
        "code": "\ndef dialog_view(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 28284
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nraise     pass \n"
    },
    {
        "code": "\ndef trait_view(self, name = None, view_element = None ):\n\n    # If a name is specified, then call the HasTraits trait_view method\n    # which will return (or assign) the *view_element* associated with\n    # *name*.\n    if name:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 28285
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ID =ID ):\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID :\n        pass \n"
    },
    {
        "code": "\n######################################################################\n# `TreeNodeObject` interface\n######################################################################\ndef tno_get_label(self, node):\n    \"\"\"Gets the label to display for a specified object.\n        \"\"\"\n    if self.name == '':\n        self.name = self.__class__.__name__\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 103,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28286
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID ==LIT :\n        ID .ID =ID .ID .ID \n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID ==LIT :\n        ID .ID =ID .ID ID \n    return ID .ID \n"
    },
    {
        "code": "\ndef tno_get_view(self, node):\n    \"\"\"Gets the View to use when editing an object.\n        \"\"\"\n    view = self.trait_view()\n    view.kind = 'subpanel'\n    return view\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28287
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .!=()\n    ID .ID =LIT \n    return ID \n"
    },
    {
        "code": "\ndef tno_confirm_delete(self, node):\n    \"\"\"Confirms that a specified object can be deleted or not.\n        \"\"\"\n    if preference_manager.root.confirm_delete:\n        return None\n    else:\n        return True\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28288
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID .ID :\n        return ID \n    else :\n        return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID .ID :\n        return ID finally else :\n        return LIT \n"
    },
    {
        "code": "\ndef tno_get_menu ( self, node ):\n    \"\"\" Returns the contextual pop-up menu.\n        \"\"\"\n    if self._menu is None:\n        return super(Base, self).tno_get_menu(node)\n    return self._menu\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 98,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28289
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID is ID :\n        return ID (ID ,ID ).ID (ID )\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID is ID :\n        return ID (ID ,ID ).ID (ID )\n    return if .ID \n"
    },
    {
        "code": "\ndef tno_get_icon(self, node, is_expanded):\n    return self.icon\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28290
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (def ID ,ID ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef tno_get_icon_path(self, node):\n    return self._icon_path\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 28291
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID continue ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef tno_delete_child(self, node, index):\n    if len(self.children_ui_list) > len(self.children):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28292
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID .ID )>ID (ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID .ID )>ID (ID ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef tno_append_child(self, node, child):\n    \"\"\" Appends a child to the object's children.\n        \"\"\"\n    self.children.append(child)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28293
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID .ID (ID )\n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n    LIT \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef tno_insert_child(self, node, index, child):\n    if len(self.children_ui_list) > len(self.children):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 83,
            "fix_type": "delete",
            "id": 28294
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID (ID .ID )>ID (ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID (ID .ID )>ID (ID .ID ):\n        pass \n        from else :\n        pass \n"
    },
    {
        "code": "\n######################################################################\n# Non-public interface\n######################################################################\ndef _get_running(self):\n    return self._is_running\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 28295
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID )::\n    return ID .ID \n"
    },
    {
        "code": "\ndef _set_running(self, new):\n    if self._is_running == new:\n        pass\n    else:\n        self._is_running = new\n        self.trait_property_changed('running', old, new)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 28296
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID :\n        pass \n    else :\n        ID .ID =ID \n        ID .ID (LIT ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID :\n        pass \n    else :\n    =ID .ID =ID \n        ID .ID (LIT ,ID ,ID )\n"
    },
    {
        "code": "\n@on_trait_change('children[]')\ndef _trigger_children_ui_list(self, old, new):\n    \"\"\" Trigger a children_ui_list change when scenes changed.\n        \"\"\"\n    self.trait_property_changed('children_ui_list', old, new)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 28297
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID (LIT ,ID ,ID )\n",
        "wrong_code": "\n@ID (LIT )\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .class ID (LIT ,ID ,ID )\n"
    },
    {
        "code": "\ndef _load_view_cached(self, name, view_element):\n    if self._module_view is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 28298
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID as ,ID ):\n    if ID .ID is not ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _load_view_non_cached(self, name, view_element):\n    try:\n        pass\n    except IOError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28299
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass else "
    },
    {
        "code": "\ndef _hideshow(self):\n    if self.visible:\n        self.visible = False\n    else:\n        self.visible = True\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28300
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        ID .ID =LIT \n    else :\n        ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID !ID :\n        ID .ID =LIT \n    else :\n        ID .ID =LIT \n"
    },
    {
        "code": "\ndef _load_saved_state(self):\n    if len(saved_state) > 0:\n        if hasattr(self, '__set_pure_state__'):\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 113,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28301
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID )>LIT :\n        if ID (ID ,LIT ):\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID )>LIT :\n        if ID (ID ,LIT ):\n            pass \n        else :\n            pass pass "
    },
    {
        "code": "\ndef __view_filename_default(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28302
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )from \n    pass \n"
    },
    {
        "code": "\n\ndef __module_view_default(self):\n    try:\n        pass\n    except:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 28303
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except :\n\n"
    },
    {
        "code": "\n\ndef __menu_default(self):\n    if self.menu_helper is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28304
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\n\ntry ID (ID ):\n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef __icon_path_default(self):\n    return resource_path()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28305
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ()\n    !"
    },
    {
        "code": "\ndef _extra_menu_items(self):\n    \"\"\"Override this to generate any new menu actions you want on\n        the right click menu.\"\"\"\n    return []\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/core/base.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28306
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return []\n",
        "wrong_code": "[\ndef ID (ID ):\n    LIT \n    return []\n"
    },
    {
        "code": "\ndef has_output_port(self):\n    \"\"\" The filter has an output port.\"\"\"\n    return True\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/cell_derivatives.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28307
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "from def ID (ID ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\ndef get_output_object(self):\n    \"\"\" Return the output port.\"\"\"\n    return self.filter.output_port\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/cell_derivatives.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28308
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return !=.ID .ID \n"
    },
    {
        "code": "\n######################################################################\n# `object` interface.\ndef __get_pure_state__(self):\n    d = super(SelectOutput, self).__get_pure_state__()\n    d['output_index'] = self.output_index\n    return d\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/select_output.py",
            "fix_location": 69,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 28309
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID [LIT ]=ID .ID \n    return ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID LIT ]=ID .ID \n    return ID \n"
    },
    {
        "code": "\ndef __set_pure_state__(self, state):\n    super(SelectOutput, self).__set_pure_state__(state)\n    # Force an update of the output index -- if not this doesn't\n    # change.\n    self._output_index_changed(state.output_index)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/select_output.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 28310
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (ID ,ID ).ID (ID )\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID (ID ,ID ).ID (ID )\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (ID .LIT ID )\n"
    },
    {
        "code": "\n######################################################################\n# `Filter` interface.\ndef update_pipeline(self):\n    if len(inputs) == 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/select_output.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28311
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    if ID (ID )==LIT :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID )\n    if ID (ID )==LIT :\n        pass \n"
    },
    {
        "code": "\ndef update_data(self):\n    # Propagate the event.\n    self.data_changed = True\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/filters/select_output.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28312
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID =LIT \n",
        "wrong_code": "\nID (ID ):\n#COMMENT\n\n    ID .ID =LIT \n"
    },
    {
        "code": "\n######################################################################\n# `Module` interface\n######################################################################\ndef setup_pipeline(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28313
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (finally ):\n    pass \n"
    },
    {
        "code": "\ndef update_pipeline(self):\n    if mod_mgr is None:\n        pass\n    if not input.is_a('vtkUnstructuredGrid'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 71,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28314
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if not ID .ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if not ID .ID (LIT )\n        pass \n"
    },
    {
        "code": "\ndef update_data(self):\n    \"\"\"Override this method so that it flushes the vtk pipeline if\n        that is necessary.\n\n        This method is invoked (automatically) when any of the inputs\n        sends a `data_changed` event.\n        \"\"\"\n    # Just set data_changed, the components should do the rest if\n    # they are connected.\n    self.data_changed = True\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 28315
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    ID ID .ID =LIT \n"
    },
    {
        "code": "\n######################################################################\n# Non-public methods.\n######################################################################\ndef _implicit_plane_changed(self, old, new):\n    if ex is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 28316
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\nassert \n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef _geom_filter_changed(self, old, new):\n    if old is not None:\n        pass\n    if ex is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 80,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28317
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID is not ID :\n        pass \n    if ID is not ID :else pass \n"
    },
    {
        "code": "\ndef _actor_changed(self, old, new):\n    new.scene = self.scene\n    new.inputs = [self]\n    self._change_components(old, new)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/modules/slice_unstructured_grid.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 28318
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID .ID \n    ID .ID =[ID ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID .ID \n    ID .ID =[ID \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef setup_reader(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28319
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef check(self, scene, bounds, error = 1.01e-02):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 28320
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,yield ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef test_dem_image_data_reader(self):\n    \"Test if the test fixture works\"\n    #Now test.\n\n    self.check(self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28321
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef (ID ):\n    LIT \n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_save_and_restore(self):\n    \"\"\"Test if saving a visualization and restoring it works.\"\"\"\n\n    self.check_saving(self.e, self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 28322
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID (ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID (ID .ID ,ID .ID ,ID .=ID )\n"
    },
    {
        "code": "\ndef test_deepcopied(self):\n    \"\"\"Test if the MayaVi2 visualization can be deep-copied.\"\"\"\n    ############################################################\n    # Test if the MayaVi2 visualization can be deep-copied.\n\n    self.check_deepcopying(self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 28323
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ]LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef setup_reader(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28324
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef :(ID ):\n    pass \n"
    },
    {
        "code": "\ndef check(self, scene, bounds, error = 1.01e-02):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 28325
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    pass \n    !"
    },
    {
        "code": "\ndef test_mha_image_data_reader(self):\n    \"Test if the test fixture works\"\n    #Now test.\n\n    self.check(self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28326
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\n==def ID (ID ):\n    LIT \n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_save_and_restore(self):\n    \"\"\"Test if saving a visualization and restoring it works.\"\"\"\n\n    self.check_saving(self.e, self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 28327
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID (ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID (ID .ID ,ID import .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_deepcopied(self):\n    \"\"\"Test if the MayaVi2 visualization can be deep-copied.\"\"\"\n    ############################################################\n    # Test if the MayaVi2 visualization can be deep-copied.\n\n    self.check_deepcopying(self.scene, self.bounds)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_image_data_reader.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28328
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    ID .ID (ID .ID ,ID .from )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 28329
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass global \n"
    },
    {
        "code": "\ndef tearDown(self):\n    \"\"\"For necessary clean up, automatically called by TestCase after the test methods have been invoked\"\"\"\n    self.e.stop()\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 28330
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID :.ID ()\n    return \n"
    },
    {
        "code": "\ndef check(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28331
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (class ID ):\n    pass \n"
    },
    {
        "code": "\n\n\ndef test_vtk_data_source(self):\n    \"Test if the test fixture works\"\n    #Now test.\n    self.check()\n\n    #from mayavi.tools.show import show\n    #show()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28332
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID .ID ()\n\n    #COMMENT\n\n    #COMMENT\n\n",
        "wrong_code": "\n\n\ndef ID (ID :\n    LIT \n    #COMMENT\n\n    ID .ID ()\n\n    #COMMENT\n\n    #COMMENT\n\n"
    },
    {
        "code": "\ndef test_save_and_restore(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 28333
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    :\n"
    },
    {
        "code": "\n\ndef test_deepcopied(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28334
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID continue :\n    pass \n"
    },
    {
        "code": "\ndef test_add_child(self):\n    \"\"\"Test if adding a source as a child works correctly.\"\"\"\n    src = self.e.scenes[0].children[0]\n    new_src = VTKDataSource(data=tvtk.PolyData())\n    src.add_child(new_src)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/mayavi/tests/test_vtk_data_source.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28335
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID [LIT ].ID [LIT ]\n    ID =ID (ID =ID .ID ())\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    =ID .ID .ID [LIT ].ID [LIT ]\n    ID =ID (ID =ID .ID ())\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, indent):\n    \"\"\"`indent` is a reference to the `Indenter` instance of the\n        WrapperGenerator.\n\n        \"\"\"\n    self.indent = indent\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 28336
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef and ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\n#################################################################\n# `SpecialGenerator` interface.\n#################################################################\n\ndef generate_code(self, node, out):\n    \"\"\"Write the code given the node in the class tree, `node`,\n        and output file-like object, `out`.\n        \"\"\"\n    self._write_special(node.name, out)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28337
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID (ID .ID ,ID ))"
    },
    {
        "code": "\n#################################################################\n# Non-public interface.\n#################################################################\n\ndef _write_special(self, name, out):\n    if hasattr(self, writer):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28338
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\ndef #COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef _write_InteractorEventRecorder(self, out):\n    # This class is a pain because it must always take highest\n    # priority, the default value is therefore set to a huge\n    # number so that it catches all events first.\n    code = '''\n        priority = traits.Trait(1.0, traits.Float, traits.Range(0.0, 1.0))\n        def _priority_changed(self, old_val, new_val):\n            self._do_change(self._vtk_obj.SetPriority,\n                            self.priority)\n        priority.help = \\\n            \"\"\"\n            Set/Get the priority at which events are processed. This is used when\n            multiple interactor observers are used simultaneously. The default value\n            is 0.0 (lowest priority.) Note that when multiple interactor observer\n            have the same priority, then the last observer added will process the\n            event first. (Note: once the set_interactor() method has been called,\n            changing the priority does not effect event processing. You will have\n            to set_interactor(_null), change priority, and then set_interactor(iren)\n            to have the priority take effect.)\n            \"\"\"\n        '''\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 28339
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\nin "
    },
    {
        "code": "\ndef _write_Matrix4x4(self, out):\n    code = \"\"\"\n        def __getstate__(self):\n            d = tvtk_base.TVTKBase.__getstate__(self)\n            obj = self._vtk_obj\n            e = [obj.GetElement(i, j) for i in range(4) for j in range(4)]\n            d['elements'] = e\n            return d\n\n        def __setstate__(self, dict):\n            e = dict.pop('elements')\n            tvtk_base.TVTKBase.__setstate__(self, dict)\n            self._in_set = 1\n            obj = self._vtk_obj\n            [obj.SetElement(i, j, e[4*i+j]) for i in range(4) for j in range(4)]\n            self._in_set = 0\n            self.update_traits()\n\n        def from_array(self, arr):\n            '''Set the value of the matrix using the passed\n            Numeric array or Python list.\n            '''\n            obj = self._vtk_obj\n            [obj.SetElement(i, j, arr[i,j]) for i in range(4) for j in range(4)]\n\n        def to_array(self):\n            '''Return the object as a numpy array.'''\n            obj = self._vtk_obj\n            e = [obj.GetElement(i, j) for i in range(4) for j in range(4)]\n            arr = array_handler.numpy.array(e, dtype=float)\n            arr.shape = (4,4)\n            return arr\n\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 28340
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID await .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef _write_Property(self, out):\n    # Color is made from the other specified colors.\n    code = \"\"\"\n        def __getstate__(self):\n            d = tvtk_base.TVTKBase.__getstate__(self)\n            if 'color' in d:\n                del d['color']\n            return d\n\n        def __setstate__(self, dict):\n            tvtk_base.TVTKBase.__setstate__(self, dict)\n            self.update_traits()\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28341
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    =LIT \n    ID .ID (ID .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef _write_Collection(self, out):\n    code = \"\"\"\n        def __len__(self):\n            return self._vtk_obj.GetNumberOfItems()\n\n        def __iter__(self):\n            self._vtk_obj.InitTraversal()\n            return self\n\n        def next(self):\n            try:\n                val = self._vtk_obj.GetNextItem()\n            except AttributeError:\n                val = self._vtk_obj.GetNextProp()\n            if val is None:\n                raise StopIteration\n            return wrap_vtk(val)\n\n        __next__ = next\n\n        def __getitem__(self, key):\n            obj = self._vtk_obj\n            if type(key) != type(1):\n                raise TypeError(\"Only integers are valid keys.\")\n            ni = obj.GetNumberOfItems()\n            if key < 0:\n                key =  ni + key\n            ret = obj.GetItemAsObject(key)\n            if ret is None:\n                raise IndexError(\"Index %s out of range.\"%key)\n            return wrap_vtk(ret)\n\n        def __setitem__(self, key, val):\n            obj = self._vtk_obj\n            if type(key) != type(1):\n                raise TypeError(\"Only integers are valid keys.\")\n            ni = obj.GetNumberOfItems()\n            if key < 0:\n                key =  ni + key\n            if key < 0 or key >= ni:\n                raise IndexError(\"Index out of range.\")\n            obj.ReplaceItem(key, deref_vtk(val))\n\n        def __delitem__(self, key):\n            obj = self._vtk_obj\n            if type(key) != type(1):\n                raise TypeError(\"Only integers are valid keys.\")\n            ni = obj.GetNumberOfItems()\n            if key < 0:\n                key =  ni + key\n            if key < 0 or key >= ni:\n                raise IndexError(\"Index %s out of range.\"%key)\n            obj.RemoveItem(key)\n\n        def __repr__(self):\n            return repr([repr(x) for x in self])\n\n        def append(self, val):\n            self._vtk_obj.AddItem(deref_vtk(val))\n\n        def extend(self, arr):\n            obj = self._vtk_obj\n            for i in arr:\n                obj.AddItem(deref_vtk(i))\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 28342
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID !=ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef _write_DataArray(self, out):\n    code = \"\"\"\n        def __len__(self):\n            return self._vtk_obj.GetNumberOfTuples()\n\n        def __iter__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfTuples()\n            nc = obj.GetNumberOfComponents()\n            if nc in [1,2,3,4,9]:\n                meth = getattr(obj, 'GetTuple%d'%nc)\n                for i in range(n):\n                    yield meth(i)\n            else:\n                for i in range(n):\n                    yield tuple([obj.GetComponent(i, x) for x in range(nc)])\n\n        def _check_key(self, key, n):\n            if type(key) not in [int, long]:\n                raise TypeError(\"Only integers are valid keys.\")\n            if key < 0:\n                key =  n + key\n            if key < 0 or key >= n:\n                raise IndexError(\"Index %s out of range.\"%key)\n            return key\n\n        def __getitem__(self, key):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfTuples()\n            key = self._check_key(key, n)\n            nc = obj.GetNumberOfComponents()\n            if nc in [1,2,3,4,9]:\n                return getattr(obj, 'GetTuple%d'%nc)(key)\n            else:\n                return tuple([obj.GetComponent(key, x) for x in range(nc)])\n\n        def __setitem__(self, key, val):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfTuples()\n            key = self._check_key(key, n)\n            nc = obj.GetNumberOfComponents()\n            if nc == 1:\n                obj.SetValue(key, val)\n            elif nc in [2,3,4,9]:\n                getattr(obj, 'SetTuple%d'%nc)(key, *val)\n            else:\n                assert len(val) == nc, \\\n                       'length of %s != %s.'%(val, nc)\n                for x in range(nc):\n                    obj.SetComponent(key, x, val[x])\n\n        def __repr__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfTuples()\n            if n <= 10:\n                return repr([x for x in self])\n            else:\n                first, last = self[0], self[-1]\n                return '[%s, ..., %s], length = %s'%(first, last, n)\n\n        def append(self, val):\n            obj = self._vtk_obj\n            nc = obj.GetNumberOfComponents()\n            if nc == 1:\n                obj.InsertNextTuple1(val)\n            elif nc in [2,3,4,9]:\n                meth = getattr(obj, 'InsertNextTuple%d'%nc)\n                meth(*val)\n            else:\n                n = obj.GetNumberOfTuples()\n                for x in range(nc):\n                    obj.InsertComponent(n, x, val[x])\n            self.update_traits()\n\n        def extend(self, arr):\n            obj = self._vtk_obj\n            nc = obj.GetNumberOfComponents()\n            if nc == 1:\n                for i in arr:\n                    obj.InsertNextTuple1(i)\n            elif nc in [2,3,4,9]:\n                meth = getattr(obj, 'InsertNextTuple%d'%nc)\n                for i in arr:\n                    meth(*i)\n            else:\n                n = obj.GetNumberOfTuples()\n                for i in range(len(arr)):\n                    for x in range(nc):\n                        obj.InsertComponent(n+i, x, arr[i][x])\n            self.update_traits()\n\n        def from_array(self, arr):\n            '''Set the value of the data array using the passed\n            Numeric array or Python list.  This is implemented\n            efficiently.\n            '''\n            array_handler.array2vtk(arr, self._vtk_obj)\n            self.update_traits()\n\n        def to_array(self):\n            '''Return the object as a Numeric array.'''\n            return array_handler.vtk2array(self._vtk_obj)\n\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28343
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .(ID .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef _write_Points(self, out):\n    code = \"\"\"\n        def __len__(self):\n            return self._vtk_obj.GetNumberOfPoints()\n\n        def __iter__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfPoints()\n            for i in range(n):\n                yield obj.GetPoint(i)\n\n        def _check_key(self, key, n):\n            ##############################################\n            # Allow int and long keys. Fixes GH Issue 173.\n            ##############################################\n            if not isinstance(key, (int, long)):\n                raise TypeError(\"Only int and long are valid keys.\")\n            if key < 0:\n                key =  n + key\n            if key < 0 or key >= n:\n                raise IndexError(\"Index %s out of range.\"%key)\n            return key\n\n        def __getitem__(self, key):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfPoints()\n            key = self._check_key(key, n)\n            return obj.GetPoint(key)\n\n        def __setitem__(self, key, val):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfPoints()\n            key = self._check_key(key, n)\n            obj.SetPoint(key, val)\n\n        def __repr__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfPoints()\n            if n <= 10:\n                return repr([x for x in self])\n            else:\n                meth = obj.GetPoint\n                return '[%s, ..., %s], length = %s'%(meth(0),\n                                                     meth(n-1), n)\n\n        def append(self, val):\n            self._vtk_obj.InsertNextPoint(val)\n            self.update_traits()\n\n        def extend(self, arr):\n            obj = self._vtk_obj\n            for i in arr:\n                obj.InsertNextPoint(i)\n            self.update_traits()\n\n        def from_array(self, arr):\n            '''Set the value of the data array using the passed\n            Numeric array or Python list.  This is implemented\n            efficiently.\n            '''\n            array_handler.array2vtkPoints(arr, self._vtk_obj)\n            self.update_traits()\n\n        def to_array(self):\n            '''Return the object as a Numeric array.'''\n            return array_handler.vtk2array(self._vtk_obj.GetData())\n\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28344
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID ID (ID ))\n"
    },
    {
        "code": "\ndef _write_IdList(self, out):\n    code = \"\"\"\n        def __len__(self):\n            return self._vtk_obj.GetNumberOfIds()\n\n        def __iter__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfIds()\n            for i in range(n):\n                yield obj.GetId(i)\n\n        def _check_key(self, key, n):\n            if type(key) != type(1):\n                raise TypeError(\"Only integers are valid keys.\")\n            if key < 0:\n                key =  n + key\n            if key < 0 or key >= n:\n                raise IndexError(\"Index %s out of range.\"%key)\n            return key\n\n        def __getitem__(self, key):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfIds()\n            key = self._check_key(key, n)\n            return obj.GetId(key)\n\n        def __setitem__(self, key, val):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfIds()\n            key = self._check_key(key, n)\n            obj.SetId(key, val)\n\n        def __repr__(self):\n            obj = self._vtk_obj\n            n = obj.GetNumberOfIds()\n            if n <= 10:\n                return repr([x for x in self])\n            else:\n                meth = obj.GetId\n                return '[%s, ..., %s], length = %s'%(meth(0),\n                                                     meth(n-1), n)\n\n        def append(self, val):\n            self._vtk_obj.InsertNextId(val)\n            self.update_traits()\n\n        def extend(self, arr):\n            obj = self._vtk_obj\n            for i in arr:\n                obj.InsertNextId(i)\n            self.update_traits()\n\n        def from_array(self, arr):\n            '''Set the value of the data array using the passed\n            Numeric array or Python list.  This is implemented\n            efficiently.\n            '''\n            array_handler.array2vtkIdList(arr, self._vtk_obj)\n            self.update_traits()\n\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 28345
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n    del "
    },
    {
        "code": "\ndef _write_CellArray(self, out):\n    code = \"\"\"\n        def from_array(self, arr):\n            '''Set the value of the data array using the passed\n            Numeric array or Python list.  This is implemented\n            efficiently.\n            '''\n            array_handler.array2vtkCellArray(arr, self._vtk_obj)\n            self.update_traits()\n\n        def to_array(self):\n            '''Return the object as a Numeric array.'''\n            return array_handler.vtk2array(self._vtk_obj.GetData())\n        \"\"\"\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28346
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =LIT \n    ID .ID (ID ..ID (ID ))\n"
    },
    {
        "code": "\ndef __init__(self):\n    self.indent = indenter.Indent()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28347
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\n!=ID (ID ):\n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\n#################################################################\n# `HelperGenerator` interface.\n#################################################################\n\ndef write_prelims(self, out):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 28348
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\nand #COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef add_class(self, name, out):\n    \"\"\"Add a tvtk class with name, `name` as a property to the\n        helper class output file-like object, `out`.\n        \"\"\"\n    code = \"\"\"\n        %(name)s = property(lambda self: get_class('%(name)s'))\n        \"\"\"%locals()\n    out.write(self.indent.format(code))\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/special_gen.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28349
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =LIT %ID ()\n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "or def ID (ID ,ID ,ID ):\n    LIT \n    ID =LIT %ID ()\n    ID .ID (ID .ID .ID (ID ))\n"
    },
    {
        "code": "def __init__(self, masterPanel, gradient_table, width, height ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28350
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef OnPaint(self, event):\n    \"\"\" Paint event handler for when the window is resized and\n        whatnot.\"\"\"\n    dc = wx.PaintDC(self)\n    self.update()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28351
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID ([,ID ):\n    LIT \n    ID =ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "def paint(self, deviceContext):\n    for k in range( len(relevant_control_points) - 1 ):\n        pass\n    for control_point in relevant_control_points:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "-",
            "id": 28352
        },
        "correct_code": "def ID (ID ,ID ):\n    for ID in ID (ID (ID )-LIT ):\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    for ID in ID (ID (ID )while LIT ):\n        pass \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, master, gradient_table, color_space, width, height):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28353
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef for (ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n######################################################################\n# wxPython event methods.\n######################################################################\ndef update(self, event = None):\n\n    for channel in self.channels:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 90,
            "fix_type": "delete",
            "id": 28354
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID =ID ):\n\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID =ID ):\n\n    for ID in ID .ID :\n        pass +\n"
    },
    {
        "code": "\ndef on_paint(self, event=None):\n    dc = wx.PaintDC(self)\n    self.update()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 28355
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID =ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    :ID =ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef on_left_button_down(self, event):\n    self.cur_drag = self.find_control_point( event.GetX(), event.GetY() )\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28356
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .ID (ID .ID (),ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    ID .ID =ID .ID (ID .ID (),ID .ID ())\n"
    },
    {
        "code": "\ndef on_left_button_up(self, event):\n    if self.cur_drag:\n        self.table_config_changed( final_update = True )\n        self.cur_drag = None\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28357
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        ID .ID (ID =LIT )\n        ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID elif ID :\n        ID .ID (ID =LIT )\n        ID .ID =ID \n"
    },
    {
        "code": "\ndef on_leave_window(self, event):\n    self.on_left_button_up(event)\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28358
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID )\nassert "
    },
    {
        "code": "\ndef on_right_button_down(self, event):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28359
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    pass \n"
    },
    {
        "code": "\ndef on_right_button_up(self, event):\n    if cur_control_point:\n        # found a marker at the click position. delete it and return,\n        # unless it is a fixed marker (at pos 0 or 1)..\n        if ( cur_control_point[1].fixed ):\n            pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28360
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID :\n    #COMMENT\n\n    #COMMENT\n\n        if (ID [LIT ].ID ):\n            pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID :\n    #COMMENT\n\n    #COMMENT\n\n        if (ID [LIT ].ID )\n            pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, master, vtk_table, on_change_color_table=None,\n             colors=None):\n    for color in self.colors:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28361
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ,\nID =ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "def ID (ID ,-,ID ,ID =ID ,\nID =ID ):\n    for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\n######################################################################\n# `wxGradientEditorWidget` interface.\n######################################################################\ndef set_status_text(self, msg):\n    t = self.text\n    t.SetLabel(msg)\n    t.Refresh()\n    t.Update()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28362
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID .ID (ID )\n    ID .ID ()\n    ID .ID ()\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID ID ,ID ):\n    ID =ID .ID \n    ID .ID (ID )\n    ID .ID ()\n    ID .ID ()\n"
    },
    {
        "code": "\n######################################################################\n# wxPython event methods.\n######################################################################\ndef on_gradient_menu(self, event):\n    if not hasattr(self, 'save_menuid'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 28363
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    if not ID (ID ,LIT ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    if not ID (ID LIT ):\n        pass \n"
    },
    {
        "code": "\ndef on_save(self, event):\n    if (dlg.ShowModal() == wx.ID_OK):\n        if file_name:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28364
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if (ID .ID ()==ID .ID ):\n        if ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if (ID .ID ()==ID ID ):\n        if ID :\n            pass \n"
    },
    {
        "code": "\ndef on_load(self, event):\n    if (dlg.ShowModal() == wx.ID_OK):\n        if file_name:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 90,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28365
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if (ID .ID ()==ID .ID ):\n        if ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if (ID .ID ()==ID .ID ):\n        if ID :\n            pass \n        *"
    },
    {
        "code": "def __init__(self, vtk_table, on_change_color_table = None, colors=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28366
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "def (ID ,ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef SetupMenuBar(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 28367
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nif     pass \n"
    },
    {
        "code": "\ndef OnQuit(self, event):\n    self.Close()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28368
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID for ID ()\n"
    },
    {
        "code": "\ndef OnHelp(self, event):\n    dlg.ShowModal()\n    dlg.Destroy()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 28369
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ()\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID /.ID ()\n    ID .ID ()\n"
    },
    {
        "code": "\ndef OnAbout(self, event):\n    dlg.Destroy()\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28370
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID )ID \n    ID .ID ()\n"
    },
    {
        "code": "# the actual gradient editor code.\ndef on_color_table_changed():\n    \"\"\"If we had a vtk window running, update it here\"\"\"\n    print(\"Update Render Window\")\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 28371
        },
        "correct_code": "#COMMENT\n\ndef ID ():\n    LIT \n    ID (LIT )\n",
        "wrong_code": "#COMMENT\n\ndef ID ():\n    LIT \n    ID (for )\n"
    },
    {
        "code": "\n\n##########################################################################\n# Test application.\n##########################################################################\ndef main():\n    # the actual gradient editor code.\n    def on_color_table_changed():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/mayavi/tvtk/util/wx_gradient_editor.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28372
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID ():\n#COMMENT\n\n    def ID ():\n        pass \n",
        "wrong_code": "\nif \n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID ():\n#COMMENT\n\n    def ID ():\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.temp = StringIO.StringIO()\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28373
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\ndef ID (:ID ):\n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\ndef tearDown(self):\n    self.temp.close()\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28374
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (-):\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef test_prepare_with_namedtuple(self):\n    # all calls after that do nothing\n    for x in range(10):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28375
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in ID (LIT ):\n        pass \n        assert "
    },
    {
        "code": "\ndef test_prepare_with_tuple(self):\n    # all calls do nothing\n    for x in range(10):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28376
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in ID (LIT ):def pass \n"
    },
    {
        "code": "\ndef test_finalize(self):\n    for x in range(10):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28377
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):elif \n    for ID in ID (LIT ):\n        pass \n"
    },
    {
        "code": "\ndef test_record_with_namedtuple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28378
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef is (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_record_with_tuple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28379
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):continue \n    pass \n"
    },
    {
        "code": "\ndef not_pikos(records):\n    return all('pikos' != record for record in records)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 28380
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT !=ID for ID in ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT !=ID for ID for in ID )\n"
    },
    {
        "code": "\ndef test_filter(self):\n\n    def not_pikos(records):\n        pass\n    for record in records:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 28381
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    def ID (ID ():\n        pass \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef test_dialect(self):\n    for record in records:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28382
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "try \ndef ID (ID ):\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef test_exception_when_no_prepare(self):\n\n    with self.assertRaises(RecorderError):\n        pass\n\n    with self.assertRaises(RecorderError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pikos/pikos/tests/test_csv_recorder.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28383
        },
        "correct_code": "\ndef ID (ID ):\n\n    with ID .ID (ID ):\n        pass \n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID )with :\n\n    with ID .ID (ID ):\n        pass \n\n    with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# Protected 'IApplication' interface.\n###########################################################################\n\ndef _create_contents(self, parent):\n    \"\"\" Create the editor. \"\"\"\n\n    self._shell = PythonShell(parent)\n\n    return self._shell.control\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/examples/python_shell.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 28384
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID =ID (ID )\n\n    return ID .ID .ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n\n    ID .+ID =ID (ID )\n\n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef confirm(parent, message, title=None, cancel=False, default=NO):\n    if title is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/confirmation_dialog.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28385
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID while ,ID ,ID =ID ,ID =LIT ,ID =ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\ndef _get_object(self):\n    return self.task\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28386
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    return ID ID \n"
    },
    {
        "code": "\ndef destroy(self):\n    # Disconnect listeners to task and dependent properties.\n    self.task = None\n    super(TaskAction, self).destroy()\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 28387
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID =ID \n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID =ID \n    ID (ID ,ID ).ID ()while \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\ndef _get_object(self):\n    if self.task:\n        return self.task.window\n    return None\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 28388
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    if ID .ID :\n        return ID .ID .ID \n    return ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\nclass def ID (ID ):\n    if ID .ID :\n        return ID .ID .ID \n    return ID \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\n@cached_property\ndef _get_central_pane(self):\n    if self.task:\n        return self.task.window.get_central_pane(self.task)\n    return None\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 28389
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID .ID :\n        return ID .ID .ID .ID (ID .ID )\n    return ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID ID :\n        return ID .ID .ID .ID (ID .ID )\n    return ID \n"
    },
    {
        "code": "\ndef _get_object(self):\n    return self.central_pane\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 28390
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return !=ID .ID \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\n@cached_property\ndef _get_dock_pane(self):\n    if self.task:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28391
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID .ID with \n        pass \n"
    },
    {
        "code": "\ndef _get_object(self):\n    return self.dock_pane\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28392
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (if ID ):\n    return ID .ID \n"
    },
    {
        "code": "\n###########################################################################\n# Protected interface.\n###########################################################################\n\n@cached_property\ndef _get_active_editor(self):\n    if self.central_pane is not None:\n        return self.central_pane.active_editor\n    return None\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 28393
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID .ID is not ID :\n        return ID .ID .ID \n    return ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n@ID \ndef ID (ID ):\n    if ID .ID is not *ID :\n        return ID .ID .ID \n    return ID \n"
    },
    {
        "code": "\ndef _get_object(self):\n    return self.active_editor\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/action/task_action.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 28394
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID )try :\n    return ID .ID \n"
    },
    {
        "code": "\ndef create_central_pane(self):\n    return TaskPane(id='tests.bogus_task.central_pane')\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28395
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID =LIT )\n",
        "wrong_code": "\ndef return (ID ):\n    return ID (ID =LIT )\n"
    },
    {
        "code": "\ndef _menu_bar_default(self):\n\n    return menu_bar\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28396
        },
        "correct_code": "\ndef ID (ID ):\n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ():\n\n    return ID \n"
    },
    {
        "code": "def find_doc_pane_toggle(item):\n    if item.id == 'tests.bogus_task.DockPaneToggleGroup':\n        dock_pane_toggle_group.append(item)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 28397
        },
        "correct_code": "def ID (ID ):\n    if ID .ID ==LIT :\n        ID .ID (ID )\n",
        "wrong_code": "def ID (ID ):\n    /if ID .ID ==LIT :\n        ID .ID (ID )\n"
    },
    {
        "code": "\n@unittest.skipIf(USING_WX, \"TaskWindowBackend is not implemented in WX\")\ndef setUp(self):\n    def find_doc_pane_toggle(item):\n        if item.id == 'tests.bogus_task.DockPaneToggleGroup':\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 28398
        },
        "correct_code": "\n@ID .ID (ID ,LIT )\ndef ID (ID ):\n    def ID (ID ):\n        if ID .ID ==LIT :\n            pass \n",
        "wrong_code": "\n@ID .ID (ID ,LIT )\ndef ID (ID ):\n    def ID (ID ):\n        ID .ID ==LIT :\n            pass \n"
    },
    {
        "code": "\ndef get_dock_pane_toggle_action_names(self):\n    names =  [\n        action_item.action.name\n        for action_item in self.dock_pane_toggle_group.items\n    ]\n\n    return names\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "for",
            "id": 28399
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[\n    ID .ID .ID \n    for ID in ID .ID .ID \n    ]\n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[\n    ID .ID .ID \n    (ID in ID .ID .ID \n    ]\n\n    return ID \n"
    },
    {
        "code": "\n#### Tests ################################################################\n\ndef test_group_content_at_startup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28400
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "as \n#COMMENT\n\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_react_to_dock_pane_added(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28401
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )raise \n    pass \n"
    },
    {
        "code": "\ndef test_react_to_dock_pane_removed(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/tasks/tests/test_dock_pane_toggle_group.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 28402
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef class ID (ID ):\n    pass \n"
    },
    {
        "code": "\n###########################################################################\n# 'StatusBarManager' interface.\n###########################################################################\n\ndef create_status_bar(self, parent):\n    \"\"\" Creates a status bar. \"\"\"\n\n    return self.status_bar\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/null/action/status_bar_manager.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 28403
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\nfinally #COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID \n"
    },
    {
        "code": "\n###########################################################################\n# Property handlers.\n###########################################################################\n\ndef _get_message(self):\n\n    if len(self.messages) > 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/null/action/status_bar_manager.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28404
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    if ID (ID .ID )>LIT finally \n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _set_message(self, value):\n\n    if len(self.messages) > 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/null/action/status_bar_manager.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 28405
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        async pass \n"
    },
    {
        "code": "\n###########################################################################\n# Trait event handlers.\n###########################################################################\n\ndef _messages_changed(self):\n    \"\"\" Sets the text displayed on the status bar. \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/null/action/status_bar_manager.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28406
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    return \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\nID (ID ):\n    LIT \n    return \n"
    },
    {
        "code": "\ndef _messages_items_changed(self):\n    \"\"\" Sets the text displayed on the status bar. \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/null/action/status_bar_manager.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 28407
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    not return \n"
    },
    {
        "code": "\n###########################################################################\n# 'MainWindowLayout' interface.\n###########################################################################\n\ndef get_layout(self, layout, include_sizes=True):\n    for name, q_dock_area in AREA_MAP.iteritems():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/qt4/tasks/main_window_layout.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 28408
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =LIT ):\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =LIT ):\n    for ID ,ID in ID .\n    ID ():\n        pass \n"
    },
    {
        "code": "\n    ###########################################################################\n    # 'MainWindowLayout' abstract interface.\n    ###########################################################################\n\ndef _get_dock_widget(self, pane):\n    \"\"\" Returns the QDockWidget associated with a PaneItem.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/qt4/tasks/main_window_layout.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28409
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef _get_pane(self, dock_widget):\n    \"\"\" Returns a PaneItem for a QDockWidget.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/qt4/tasks/main_window_layout.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28410
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT ,raise ID \n"
    },
    {
        "code": "\ndef _prepare_pane(self, dock_widget, include_sizes=True):\n    if include_sizes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/qt4/tasks/main_window_layout.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 28411
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\nimport     if ID :\n        pass \n"
    },
    {
        "code": "\n###########################################################################\n# 'ActionManagerItem' interface.\n###########################################################################\n\ndef add_to_menu(self, parent, menu, controller):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 28412
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef class ID (ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef add_to_toolbar(self, parent, tool_bar, image_cache, controller):\n    \"\"\" Adds the item to a tool bar. \"\"\"\n\n    raise ValueError(\"Cannot add a menu manager to a toolbar.\")\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 28413
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n\n    raise ID (LIT )nonlocal \n"
    },
    {
        "code": "\n###########################################################################\n# 'object' interface.\n###########################################################################\n\ndef __init__(self, manager, parent, controller):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 28414
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ,ID ):not \n    pass \n"
    },
    {
        "code": "\ndef is_empty(self):\n    \"\"\" Is the menu empty? \"\"\"\n\n    return self.GetMenuItemCount() == 0\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28415
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID ()==LIT \n",
        "wrong_code": "\n+ID (ID ):\n    LIT \n\n    return ID .ID ()==LIT \n"
    },
    {
        "code": "\ndef refresh(self):\n    for group in manager.groups:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 28416
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        from pass \n"
    },
    {
        "code": "\ndef show(self, x=None, y=None):\n\n    if x is None or y is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/action/menu_manager.py",
            "fix_location": 80,
            "fix_type": "insert",
            "fix_token": "else",
            "id": 28417
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n\n    if ID is ID or ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n\n    if ID is ID or ID is ID :\n        pass \n    :\n        pass \n"
    },
    {
        "code": "\ndef push_control(control, grid):\n    control.PushEventHandler(ComboboxFocusHandler(grid))\n    for child_control in control.GetChildren():\n        push_control(child_control, grid)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28418
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID (ID ))\n    for ID in ID .ID ():\n        ID (ID ,ID )\n",
        "wrong_code": "\n!def ID (ID ,ID ):\n    ID .ID (ID (ID ))\n    for ID in ID .ID ():\n        ID (ID ,ID )\n"
    },
    {
        "code": "\ndef __init__(self, trait_editor_factory, obj, name, description,\n             handler = None, context = None, style = 'simple',\n             width = -1.0, height = -1.0):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28419
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\nID =ID ,ID =ID ,ID =LIT ,\nID =-LIT ,ID =-LIT ):\n    pass \n",
        "wrong_code": "return def ID (ID ,ID ,ID ,ID ,ID ,\nID =ID ,ID =ID ,ID =LIT ,\nID =-LIT ,ID =-LIT ):\n    pass \n"
    },
    {
        "code": "\ndef Show(self, show, attr):\n    if self.IsCreated():\n        if wx_28:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28420
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID ():\n        if ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if .ID ():\n        if ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef PaintBackground(self, rect, attr):\n    \"\"\" Draws the part of the cell not occupied by the edit control.  The\n            base  class version just fills it with background colour from the\n            attribute.  In this class the edit control fills the whole cell so\n            don't do anything at all in order to reduce flicker.\n        \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 28421
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    return \n",
        "wrong_code": "\ndef ID !ID ,ID ,ID ):\n    LIT \n    return \n"
    },
    {
        "code": "\ndef BeginEdit(self, row, col, grid):\n    if isinstance(control, wx.TextCtrl):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28422
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID (ID ,ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,else ):\n    if ID (ID ,ID .ID ):\n        pass \n"
    },
    {
        "code": "\ndef Reset(self):\n    \"\"\" Reset the value in the control back to its starting value. \"\"\"\n\n    # fixme: should we be using the undo history here?\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 28423
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    nonlocal \n"
    },
    {
        "code": "\ndef StartingKey(self, evt):\n    \"\"\" If the editor is enabled by pressing keys on the grid, this will be\n            called to let the editor do something about that first key\n            if desired.\n        \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28424
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT return \n"
    },
    {
        "code": "\ndef StartingClick(self):\n    \"\"\" If the editor is enabled by clicking on the cell, this method\n            will be called to allow the editor to simulate the click on the\n            control if needed.\n        \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 28425
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return \n",
        "wrong_code": "\ndef ID (ID as ):\n    LIT \n    return \n"
    },
    {
        "code": "\ndef Destroy(self):\n    \"\"\" Final cleanup. \"\"\"\n    self._editor.dispose()\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 28426
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n    return \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    :ID .ID .ID ()\n    return \n"
    },
    {
        "code": "\ndef Clone(self):\n    \"\"\" Create a new object which is the copy of this one. \"\"\"\n    return TraitGridCellAdapter(self._factory, self._obj, self._name,\n                                self._description, style=self._style)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 28427
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID ,ID .ID ,ID .ID ,\n    ID .ID ,ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID ID .ID ,ID .ID ,\n    ID .ID ,ID =ID .ID )\n"
    },
    {
        "code": "\ndef dispose(self):\n    if self._editor is not None:\n        self._editor.dispose()\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/ui/wx/grid/trait_grid_cell_adapter.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28428
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        ID .ID .ID ()\n",
        "wrong_code": "\nassert ID (ID ):\n    if ID .ID is not ID :\n        ID .ID .ID ()\n"
    },
    {
        "code": "\n###########################################################################\n# 'Action' interface.\n###########################################################################\n\ndef destroy(self):\n    \"\"\" Destroy the action. \"\"\"\n\n    # This removes the active perspective listener.\n    self.window = None\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/action/user_perspective_action.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 28429
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    ID .ID =ID \n\n    return \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n]\n\n\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    ID .ID =ID \n\n    return \n"
    },
    {
        "code": "\n###########################################################################\n# Private interface.\n###########################################################################\n\ndef _is_user_perspective(self, perspective):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/action/user_perspective_action.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 28430
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (global ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n@on_trait_change('window.active_perspective')\ndef _refresh_enabled(self):\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/action/user_perspective_action.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 28431
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ):\n\n    return \n",
        "wrong_code": "\n@ID (LIT )\ndef ID not (ID ):\n\n    return \n"
    },
    {
        "code": "\n###########################################################################\n# 'IWorkbench' interface.\n###########################################################################\n\ndef create_window(self, **kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28432
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,**ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\nID (ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\n#### Convenience methods on the active window #############################\n\ndef edit(self, obj, kind=None, use_existing=True):\n    \"\"\" Edit an object in the active workbench window. \"\"\"\n\n    return self.active_window.edit(obj, kind, use_existing)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28433
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\n#COMMENT\n\n\n:ID (ID ,ID ,ID =ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef get_editor(self, obj, kind=None):\n    \"\"\" Return the editor that is editing an object.\n\n        Returns None if no such editor exists.\n\n        \"\"\"\n\n    if self.active_window is None:\n        return None\n\n    return self.active_window.get_editor(obj, kind)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 28434
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n\n    if ID .ID is ID :\n        return ID \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):elif \n    LIT \n\n    if ID .ID is ID :\n        return ID \n\n    return ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef get_editor_by_id(self, id):\n    \"\"\" Return the editor with the specified Id.\n\n        Returns None if no such editor exists.\n\n        \"\"\"\n\n    return self.active_window.get_editor_by_id(id)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28435
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID ..ID (ID )\n"
    },
    {
        "code": "\n#### Message dialogs ####\n\ndef confirm(self, message, title=None, cancel=False, default=NO):\n    \"\"\" Convenience method to show a confirmation dialog. \"\"\"\n\n    return self.active_window.confirm(message, title, cancel, default)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 88,
            "fix_type": "delete",
            "id": 28436
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,ID =ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,ID =ID ):\n    LIT \n\n    return ID .ID .ID (]ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef information(self, message, title='Information'):\n    \"\"\" Convenience method to show an information message dialog. \"\"\"\n\n    return self.active_window.information(message, title)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28437
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID await \n"
    },
    {
        "code": "\ndef warning(self, message, title='Warning'):\n    \"\"\" Convenience method to show a warning message dialog. \"\"\"\n\n    return self.active_window.warning(message, title)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28438
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,=LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef error(self, message, title='Error'):\n    \"\"\" Convenience method to show an error message dialog. \"\"\"\n\n    return self.active_window.error(message, title)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 28439
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    return ID .ID .ID (elif ID ,ID )\n"
    },
    {
        "code": "\n###########################################################################\n# 'Workbench' interface.\n###########################################################################\n\n#### Initializers #########################################################\n\ndef _state_location_default(self):\n\n    if not os.path.exists(state_location):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 105,
            "fix_type": "delete",
            "id": 28440
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    if not ID .ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n\ndef ID (ID ):\n\n    if not ID .ID .ID (ID ):\n        pass \n    async "
    },
    {
        "code": "\ndef _undo_manager_default(self):\n    \"\"\" Trait initializer. \"\"\"\n\n    # We make sure the undo package is entirely optional.\n    try:\n        from apptools.undo.api import UndoManager\n    except ImportError:\n        return None\n\n    return UndoManager()\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 92,
            "fix_type": "insert",
            "fix_token": "",
            "id": 28441
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    try :\n        from ID .ID .ID import ID \n    except ID :\n        return ID \n\n    return ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    #COMMENT\n\n    try :\n        from ID .ID .ID import ID \n        except ID :\n        return ID \n\n        return ID ()\n    "
    },
    {
        "code": "\ndef _user_perspective_manager_default(self):\n    \"\"\" Trait initializer. \"\"\"\n\n    return UserPerspectiveManager(state_location=self.state_location)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28442
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID (ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID :\n    LIT \n\n    return ID (ID =ID .ID )\n"
    },
    {
        "code": "\n###########################################################################\n# Protected 'Workbench' interface.\n###########################################################################\n\ndef _create_window(self, **kw):\n    \"\"\" Factory method that creates a new workbench window. \"\"\"\n\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 28443
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,**ID ):\n    LIT \n\n    raise ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID elif (ID ,**ID ):\n    LIT \n\n    raise ID \n"
    },
    {
        "code": "\ndef _restore_window_layout(self, window):\n    if os.path.exists(filename):\n        try:\n            pass\n\n        # If *anything* goes wrong then simply log the error and carry on\n        # with no memento!\n        except:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 156,
            "fix_type": "delete",
            "id": 28444
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID (ID ):\n        try :\n            pass \n\n            #COMMENT\n\n            #COMMENT\n\n        except :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID (ID ):\n        try :\n            pass \n\n            #COMMENT\n\n            #COMMENT\n\n        except :\n            pass \nelse "
    },
    {
        "code": "\ndef _save_window_layout(self, window):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28445
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n!="
    },
    {
        "code": "\n#### Trait change handlers ################################################\n\ndef _on_window_activated(self, window, trait_name, event):\n    \"\"\" Dynamic trait change handler. \"\"\"\n\n    logger.debug('window %s activated', window)\n\n    self.active_window = window\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28446
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID (LIT ,ID )\n\n    ID .ID =ID \n\n    return \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID (LIT ,ID )\n\n    ID .ID =ID \n\n    return \n"
    },
    {
        "code": "\ndef _on_window_opening(self, window, trait_name, event):\n    if window_event.veto:\n        event.veto = True\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 28447
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID .ID :\n        ID .ID =LIT \n\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ,!=ID ,ID ):\n    if ID .ID :\n        ID .ID =LIT \n\n    return \n"
    },
    {
        "code": "\ndef _on_window_opened(self, window, trait_name, event):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28448
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID )nonlocal \n    pass \n"
    },
    {
        "code": "\ndef _on_window_closed(self, window, trait_name, event):\n\n    # Was this the last window?\n    if len(self.windows) == 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/workbench/workbench.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28449
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n#COMMENT\n\n    if ID (ID .ID )==LIT :\n        pass \n",
        "wrong_code": "\ndef ID ID ,ID ,ID ,ID ):\n\n#COMMENT\n\n    if ID (ID .ID )==LIT :\n        pass \n"
    },
    {
        "code": "\n##########################################################################\n# 'Dialog' interface\n##########################################################################\n\ndef _create_control(self, parent):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28450
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID [:\n    pass \n"
    },
    {
        "code": "\ndef _create_contents(self, dialog):\n    if okbutton is not None:\n        pass\n    if cancelbutton is not None:\n        pass\n    if helpbutton is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 108,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28451
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is not ID :\n        pass \n    if ID is not ID :\n        pass \n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID is not ID :\n        pass \n    if ID is not ID :\n        pass \n    if ID is not :\n        pass \n"
    },
    {
        "code": "\n##########################################################################\n# 'XrcDialog' interface\n##########################################################################\n\ndef XRCID(self, name):\n    \"\"\"\n        Returns the numeric widget id for the given name.\n        \"\"\"\n    return wx.xrc.XRCID(name)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28452
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (,ID ):\n    LIT \n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef XRCCTRL(self, name):\n    \"\"\"\n        Returns the control with the given name.\n        \"\"\"\n    return self.control.FindWindowById(self.XRCID(name))\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28453
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (,ID ):\n    LIT \n    return ID .ID .ID (ID .ID (ID ))\n"
    },
    {
        "code": "\ndef set_validator(self, name, validator):\n    \"\"\"\n        Sets the validator on the named control.\n        \"\"\"\n    self.XRCCTRL(name).SetValidator(validator)\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 28454
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID (ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    [ID .ID (ID ).ID (ID )\n"
    },
    {
        "code": "\n##########################################################################\n# 'XrcDialog' protected interface\n##########################################################################\n\ndef _add_handlers(self):\n    \"\"\"\n        Override to add event handlers.\n        \"\"\"\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/pyface/pyface/xrc_dialog.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 28455
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    return \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT return \n"
    },
    {
        "code": "\ndef _get_is_file(self):\n    \"\"\" Returns True if the path exists and is a file. \"\"\"\n\n    return os.path.exists(self.path) and os.path.isfile(self.path)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 28456
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID .ID (ID .ID )and ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID .ID (ID .ID )and ID .ID .ID (ID .ID )class \n"
    },
    {
        "code": "\ndef _get_is_folder(self):\n    \"\"\" Returns True if the path exists and is a folder. \"\"\"\n\n    return os.path.exists(self.path) and os.path.isdir(self.path)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 79,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 28457
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID .ID (ID .ID )and ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    return ID .ID .ID (ID .ID )and ID .ID .ID (ID .ID \n"
    },
    {
        "code": "def foo(self):\n    \"\"\" The only method for the IFoo interface. \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 28458
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "ID (ID ):\n    LIT \n"
    },
    {
        "code": "\ndef foo(self):\n    \"\"\" An implementation of the single method in the interface.\"\"\"\n    return 'foo'\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 28459
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return LIT \n    +"
    },
    {
        "code": "\ndef get_input_stream(self):\n    \"\"\" Get an input stream. \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28460
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n("
    },
    {
        "code": "\ndef factory(obj):\n    \"\"\" A factory for File to IInputStream adapters. \"\"\"\n\n    if not obj.is_folder:\n        adapter = FileToIInputStreamAdapter(adaptee=obj)\n\n    else:\n        adapter = None\n\n    return adapter\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 28461
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    if not ID .ID :\n        ID =ID (ID =ID )\n\n    else :\n        ID =ID \n\n    return ID \n",
        "wrong_code": "\ndef ID return (ID ):\n    LIT \n\n    if not ID .ID :\n        ID =ID (ID =ID )\n\n    else :\n        ID =ID \n\n    return ID \n"
    },
    {
        "code": "\n###################################################################\n# 'IInputStream' interface.\n###################################################################\n\ndef get_input_stream(self):\n    \"\"\" Get an input stream. \"\"\"\n\n    return file(self.adaptee.path, 'r')\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28462
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return ID (ID .ID .ID ,LIT )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return ID (ID .ID del ID ,LIT )\n"
    },
    {
        "code": "\ndef get_input_stream(self):\n    \"\"\" Get an input stream. \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28463
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    del "
    },
    {
        "code": "\n###################################################################\n# 'IInputStream' interface.\n###################################################################\n\ndef get_input_stream(self):\n    \"\"\" Get an input stream. \"\"\"\n\n    return file(self.adaptee.path, 'r')\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 74,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 28464
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return ID (ID .ID .ID ,LIT )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    return ID (ID del ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef save(self, output_stream):\n    \"\"\" Save the object to an output stream. \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28465
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n,"
    },
    {
        "code": "\ndef save(self, output_stream):\n    \"\"\" Save the object to an output stream. \"\"\"\n\n    pickle.dump(self.adaptee, output_stream)\n    self.dirty = False\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 28466
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID (ID .ID ,ID )\n    ID .ID =LIT \n\n    return \n",
        "wrong_code": "\ndef ID (ID ,ID ):=\n    LIT \n\n    ID .ID (ID .ID ,ID )\n    ID .ID =LIT \n\n    return \n"
    },
    {
        "code": "\n#### Private interface ############################################\n\ndef _adaptee_changed(self, old, new):\n\n    if old is not None:\n        pass\n\n    if new is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 28467
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n\n    if ID is not ID :\n        pass \n\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n\n    if ID is not ID :\n        pass \n\n    if *ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef _set_dirty(self):\n    \"\"\" Sets the dirty flag to True. \"\"\"\n\n    self.dirty = True\n\n    return\n",
        "metadata": {
            "file": "py150_files/data/enthought/traits/traits/tests/test_protocols_usage.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 28468
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID =LIT \n\n    return \n",
        "wrong_code": "\ndef ID (None ID ):\n    LIT \n\n    ID .ID =LIT \n\n    return \n"
    },
    {
        "code": "\ndef _list1_default(self):\n    return [1, 4, 0, 10]\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/examples/demo/Standard_Editors/CSVListEditor_demo.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 28469
        },
        "correct_code": "\ndef ID (ID ):\n    return [LIT ,LIT ,LIT ,LIT ]\n",
        "wrong_code": "\nraise def ID (ID ):\n    return [LIT ,LIT ,LIT ,LIT ]\n"
    },
    {
        "code": "\ndef _get_list1str(self):\n    return str(self.list1)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/examples/demo/Standard_Editors/CSVListEditor_demo.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28470
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "del \ndef ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef _pop1_fired(self):\n    if len(self.list1) > 0:\n        x = self.list1.pop()\n        print(x)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/examples/demo/Standard_Editors/CSVListEditor_demo.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28471
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID .ID )>LIT :\n        ID =ID .ID .ID ()\n        ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID .ID )>LIT :\n        ID =ID .+.ID ()\n        ID (ID )\n"
    },
    {
        "code": "\ndef _sort1_fired(self):\n    self.list1.sort()\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/examples/demo/Standard_Editors/CSVListEditor_demo.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 28472
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "+\ndef ID (ID ):\n    ID .ID .ID ()\n"
    },
    {
        "code": "\n#---------------------------------------------------------------------------\n#  Initialize the object:\n#---------------------------------------------------------------------------\n\ndef __init__ ( self ):\n    wx.InitAllImageHandlers()\n    wx.App.__init__( self, 1, 'debug.log' )\n    self.MainLoop()\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/integrationtests/ui/test_ui4.py",
            "fix_location": 90,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28473
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (ID ,LIT ,LIT )\n    ID .ID ()\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (ID ,LIT ,LIT )return ID .ID ()\n"
    },
    {
        "code": "\n#---------------------------------------------------------------------------\n#  Handle application initialization:\n#---------------------------------------------------------------------------\n\ndef OnInit ( self ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/integrationtests/ui/test_ui4.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28474
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n==#COMMENT\n\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, *args, **overrides):\n    EditorFactory.__init__(self, *args)\n    self._overrides = overrides\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": "",
            "id": 28475
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID ,*ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID ,*ID )\n    ID .ID =ID \n    )"
    },
    {
        "code": "\ndef _customise_default(self, editor_kind, ui, object, name,\n                       description, parent):\n    for option in self._overrides:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 28476
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\nID ,ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\nID ,ID ):\n    for ID in ID .ID :\n        pass or \n"
    },
    {
        "code": "\ndef simple_editor(self, ui, object, name, description, parent):\n    return self._customise_default('simple_editor', ui, object,\n                                   name, description, parent)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28477
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,ID ,ID ,\n    ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,,ID ,\n    ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef custom_editor(self, ui, object, name, description, parent):\n    return self._customise_default('custom_editor', ui, object,\n                                   name, description, parent)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 28478
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,ID ,ID ,\n    ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (lambda LIT ,ID ,ID ,\n    ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef text_editor(self, ui, object, name, description, parent):\n    return self._customise_default('text_editor', ui, object,\n                                   name, description, parent)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 28479
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,ID ,ID ,\n    ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,,ID ,\n    ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef readonly_editor(self, ui, object, name, description, parent):\n    return self._customise_default('readonly_editor', ui, object,\n                                   name, description, parent)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/editors/default_override.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 28480
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID .ID (LIT ,ID ,ID ,\n    ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    return ID is .ID (LIT ,ID ,ID ,\n    ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef sizeHint(self, option, index):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/extra/checkbox_renderer.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 28481
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )None \n    pass \n"
    },
    {
        "code": "def _table_view_default(self):\n    return TableView(editor=self)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 28482
        },
        "correct_code": "def ID (ID ):\n    return ID (ID =ID )\n",
        "wrong_code": "from ID (ID ):\n    return ID (ID =ID )\n"
    },
    {
        "code": "def _model_default(self):\n    return SortFilterTableModel(editor=self)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 28483
        },
        "correct_code": "def ID (ID ):\n    return ID (ID =ID )\n",
        "wrong_code": "def ID (ID ):\n    =return ID (ID =ID )\n"
    },
    {
        "code": "def _source_model_default(self):\n    return TableModel(editor=self)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 28484
        },
        "correct_code": "def ID (ID ):\n    return ID (ID =ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID continue =ID )\n"
    },
    {
        "code": "\ndef restore_prefs ( self, prefs ):\n    \"\"\" Restores any saved user preference information associated with the\n            editor.\n        \"\"\"\n    header = self.table_view.horizontalHeader()\n    if header is not None and 'column_state' in prefs:\n        header.restoreState(prefs['column_state'])\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 28485
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID ()\n    if ID is not ID and LIT in ID :\n        ID .ID (ID [LIT ])\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID from =ID .ID .ID ()\n    if ID is not ID and LIT in ID :\n        ID .ID (ID [LIT ])\n"
    },
    {
        "code": "\ndef save_prefs ( self ):\n    if header is not None:\n        prefs['column_state'] = str(header.saveState())\n    return prefs\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28486
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is not ID :\n        ID [LIT ]=ID (ID .ID ())\n    return ID \n",
        "wrong_code": "import def ID (ID ):\n    if ID is not ID :\n        ID [LIT ]=ID (ID .ID ())\n    return ID \n"
    },
    {
        "code": "\n#---------------------------------------------------------------------------\n#  Requests that the underlying table widget to redraw itself:\n#---------------------------------------------------------------------------\n\ndef refresh_editor(self):\n    \"\"\"Requests that the underlying table widget to redraw itself.\"\"\"\n\n    self.table_view.viewport().update()\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 84,
            "fix_type": "delete",
            "id": 28487
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    ID .ID .ID ().ID ()\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n\n    ID .ID .ID ().ID ()\n    finally "
    },
    {
        "code": "\n#---------------------------------------------------------------------------\n#  Creates a new row object using the provided factory:\n#---------------------------------------------------------------------------\n\ndef create_new_row(self):\n    if '__table_editor__' in kw:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28488
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    if LIT in ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\ntry #COMMENT\n\n\ndef ID (ID ):\n    if LIT in ID :\n        pass \n"
    },
    {
        "code": "\n#---------------------------------------------------------------------------\n#  Perform actions without notifying the underlying table view or model:\n#---------------------------------------------------------------------------\n\ndef callx(self, func, *args, **kw):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 107,
            "fix_type": "delete",
            "id": 28489
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,*ID ,**ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ,*ID ,**ID ):\n    try :\n        pass \n    finally :\n        continue pass \n"
    },
    {
        "code": "\ndef setx(self, **keywords):\n    try:\n        for name, value in keywords.items():\n            pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 28490
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    try :\n        for ID ,ID in ID .ID ():\n            pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    try :\n        for ID ,ID in ID .ID ():\n            ]pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef _customize_filters(self, filter):\n    if ui.result:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 28491
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else \n        pass \n"
    },
    {
        "code": "\ndef _update_filtering(self):\n    if f is None:\n        pass\n    else:\n        if not callable(f):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28492
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    else :\n        if not ID (ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    else :\n        if not ID (/):\n            pass \n"
    },
    {
        "code": "\ndef _add_image(self, image_resource):\n    \"\"\" Adds a new image to the image map.\n        \"\"\"\n    image = image_resource.create_icon()\n\n    self.image_resources[image_resource] = image\n    self.images[image_resource.name] = image\n\n    return image\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 97,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 28493
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID ()\n\n    ID .ID [ID ]=ID \n    ID .ID [ID .ID ]=ID \n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID ()\n\n    ID .ID [ID ]=ID \n    ID .ID [ID .ID ]=ID \n    lambda return ID \n"
    },
    {
        "code": "\ndef _get_image(self, image):\n    if isinstance(image, basestring):\n        pass\n\n    if isinstance(image, ImageResource):\n        if result is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28494
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n\n    if ID (ID ,ID ):\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n\n    if ID (ID ,ID ,:\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "\n@cached_property\ndef _get_selected_indices(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28495
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (in ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef _set_selected_indices(self, indices):\n    for row, col in indices:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 28496
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID ,ID in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,if ID ):\n    for ID ,ID in ID :\n        pass \n"
    },
    {
        "code": "\n#-- Trait Change Handlers --------------------------------------------------\n\ndef _filter_changed(self, old_filter, new_filter):\n\n    if not self._no_notify:\n        if new_filter is customize_filter:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 28497
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n\n    if not ID .ID :\n        if ID is ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef .(ID ,ID ,ID ):\n\n    if not ID .ID :\n        if ID is ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef _update_columns(self):\n    for i, column in enumerate(self.columns):\n        if column.renderer:\n            pass\n    if self.auto_size:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 28498
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID (ID .ID ):\n        if ID .ID :\n            pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID ID ):\n    for ID ,ID in ID (ID .ID ):\n        if ID .ID :\n            pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _selected_changed(self, new):\n    \"\"\"Handle the selected row/column/cell being changed externally.\"\"\"\n    if not self._no_notify:\n        self.set_selection(self.selected, notify=False)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 28499
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID .ID :\n        ID .ID (ID .ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not !=ID .ID :\n        ID .ID (ID .ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef _update_filter_changed(self):\n    \"\"\" The filter has changed internally.\n        \"\"\"\n    self._filter_changed(self.filter, self.filter)\n",
        "metadata": {
            "file": "py150_files/data/enthought/traitsui/traitsui/qt4/table_editor.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 28500
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID ,ID .ID yield \n"
    }
]