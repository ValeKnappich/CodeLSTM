[
    {
        "code": "def setUp(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient/clearinghouse/permissionmgmt/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29501
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID ):await pass \n\n"
    },
    {
        "code": "def test_req_process(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient/clearinghouse/permissionmgmt/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29502
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (/):\n    pass \n\n"
    },
    {
        "code": "def __init__(self):\n    super(SiteLockDown, self).__init__(\"SITE_LOCKDOWN_EXCEPTIONS\")\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient/common/middleware/sitelockdown.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29503
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n\n",
        "wrong_code": "def ID (ID ):\n    ID (ID ID ).ID (LIT )\n\n"
    },
    {
        "code": "\ndef send_mail(subject, message, from_email, recipient_list):\n    \"\"\"\n    Wrapper for the send_mail method within django.core.mail\n    which uses a thread to decouple its execution from the\n    main program. This is specially useful if mail server\n    configuration is erroneus, server is very busy, etc; so\n    normal flow will not be affected.\n    \"\"\"\n    ServiceThread.start_method_new_thread(\n                                          django__send_mail,\n                                          None, \n                                          None, \n                                          subject, \n                                          message, \n                                          from_email, \n                                          recipient_list,\n                                         )\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient/common/utils/mail.py",
            "fix_location": 92,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29504
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n    ID .ID (\n    ID ,\n    ID ,\n    ID ,\n    ID ,\n    ID ,\n    ID ,\n    ID ,\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n    ID .ID (\n    ID ,\n    ID ,\n    ID ,\n    ID ,\n    ID \n    ID ,\n    ID ,\n    )\n"
    },
    {
        "code": "def clean_x_file(self):\n    if self.cleaned_data[\"%s_file\" % name].size > \\\n        settings.GCF_MAX_UPLOADED_PEM_FILE_SIZE:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient_geni/forms.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29505
        },
        "correct_code": "def ID (ID ):\n    if ID .ID [LIT %ID ].ID >ID .ID :\n        pass \n",
        "wrong_code": "def (ID ):\n    if ID .ID [LIT %ID ].ID >ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _clean_x_file_factory(name):\n    def clean_x_file(self):\n        if self.cleaned_data[\"%s_file\" % name].size > \\\n        settings.GCF_MAX_UPLOADED_PEM_FILE_SIZE:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/expedient_geni/forms.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29506
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        if ID .ID [LIT %ID ].ID >ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID )as \n        if ID .ID [LIT %ID ].ID >ID .ID :\n            pass \n"
    },
    {
        "code": "def __init__(self, urn, error = None):\n    if error:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29507
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):except if ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, klass, id, tag):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29508
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID )\n    pass \n\n"
    },
    {
        "code": "\ndef _dpid_to_urn(dpid):\n    \"\"\"\n    Change the dpid into a URN.\n    \"\"\"\n    return \"%s+switch:%s\" % (OPENFLOW_GAPI_RSC_URN_PREFIX, dpid)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29509
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT %(ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return LIT %(or ,ID )\n"
    },
    {
        "code": "\ndef _urn_to_dpid(urn):\n    \"\"\"\n    Change from a switch URN to a dpid.\n    \"\"\"\n    m = external_switch_re.search(urn)\n    \n    if not m:\n        raise BadURNError(urn)\n    \n    return m.group('dpid')\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29510
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID )\n\n    if not ID :\n        raise ID (ID )\n\n    return ID .ID (LIT )\n",
        "wrong_code": "except def ID (ID ):\n    LIT \n    ID =ID .ID (ID )\n\n    if not ID :\n        raise ID (ID )\n\n    return ID .ID (LIT )\n"
    },
    {
        "code": "\ndef _port_to_urn(dpid, port):\n    \"\"\"\n    Specify an interface as URN.\n    \"\"\"\n    \n    return \"%s+port:%s\" % (_dpid_to_urn(dpid), port)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29511
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return LIT %(ID (ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    and \n\n    return LIT %(ID (ID ),ID )\n"
    },
    {
        "code": "\ndef _urn_to_port(urn):\n    if not m:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29512
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\nID (ID ):\n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef _get_root_node(slice_urn, available):\n    \n    for aggregate in aggregates:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29513
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID :\n        pass \nnot "
    },
    {
        "code": "\ndef _add_aggregate_node(parent_elem, aggregate, slice_urn, available):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29514
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID def ID ):\n    pass \n"
    },
    {
        "code": "\ndef _add_switches_node(parent_elem, aggregate, slice_urn, available):\n\n    if available != None:\n        pass\n\n    for switch in switches:\n        pass\n        \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29515
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID !=ID :\n        pass \n\n    for ID in ID :\n        pass \n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID !=ID :\n        pass \n        from for ID in ID :\n        pass \n\n"
    },
    {
        "code": "\ndef _add_ports(switch_elem, switch, slice_urn):\n        \n    for iface in ifaces:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 29516
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n\n    for ID with in ID :\n        pass \n"
    },
    {
        "code": "\ndef _add_links_node(parent_elem, aggregate, slice_urn, available):\n\n    if slice_urn:\n        pass\n    \n    for s_dp, s_p, d_dp, d_p in links:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 29517
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n\n    for ID ,ID ,ID ,ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n\n    for ID ,ID ,pass ID ,ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef get_resources(slice_urn, geni_available):\n    '''\n    Gets a list of all the resources under all the aggregates as XML.\n    \n    The XML returned has a C{<rspec>} root node with no attributes.\n    \n    Under the rspec there is a list of C{<network>} elements with the following\n    attributes:\n    \n        - C{location}: location\n        - C{name}: name of the aggregate/network\n        - C{flowvisor_url}: currently not implemented\n    \n    Under each C{<network>} there are exactly two nodes: C{<links>} and\n    C{<nodes>}.\n    \n    C{<links>} has a list of C{<link>} nodes with the following attributes:\n    \n        - C{src_urn}: identifier for the src port\n        - C{dst_urn}: identifier for the dst port\n    \n    Currently no other attributes are defined through there may be more later.\n    \n    C{<switches>} has a list of C{<switch>} nodes with the following attributes:\n    \n        - C{urn}: urn prefix for a switch:datapathid\n    \n    Currently no other attributes are defined through there may be more later.\n    \n    For example::\n    \n        <rspec type=\"openflow\" version=\"2\">\n            <network name=\"Stanford\" location=\"Stanford, CA, USA\">\n                <switches>\n                    <switch urn=\"urn:publicid:IDN+openflow:stanford+switch:0\">\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:0 />\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:1 />\n                    </switch>\n                    <switch urn=\"urn:publicid:IDN+openflow:stanford+switch:1\">\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:0 />\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:1 />\n                    </switch>\n                    <switch urn=\"urn:publicid:IDN+openflow:stanford+switch:2\">\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:0 />\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:1 />\n                    </switch>\n                </switches>\n                <links>\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:0\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:0\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:0\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:0\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:1\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:0\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:0\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:0+port:1\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:1\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:1\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:2+port:1\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:1+port:1\n                    />\n                </links>\n            </network>\n            <network name=\"Princeton\" location=\"USA\">\n                <switches>\n                    <switch urn=\"urn:publicid:IDN+openflow:stanford+switch:3\">\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:3+port:0 />\n                    </switch>\n                    <switch urn=\"urn:publicid:IDN+openflow:stanford+switch:4\">\n                        <port urn=\"urn:publicid:IDN+openflow:stanford+switch:4+port:0 />\n                    </switch>\n                </switches>\n                <links>\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:3+port:0\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:4+port:0\n                    />\n                    <link\n                     src_urn=\"urn:publicid:IDN+openflow:stanford+switch:4+port:0\n                     dst_urn=\"urn:publicid:IDN+openflow:stanford+switch:3+port:0\n                    />\n                </links>\n            </network>\n        </rspec>\n    \n    specifies a triangular graph at the Stanford network and a single link\n    at the Princeton network\n    '''\n    \n    root = _get_root_node(slice_urn, geni_available)\n    return et.tostring(root)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 29518
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID =ID (ID ,ID )\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID else ):\n    LIT \n\n    ID =ID (ID ,ID )\n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef parse_slice(resv_rspec):\n    if version != CURRENT_RESV_VERSION:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29519
        },
        "correct_code": "\ndef ID (ID ):\n    if ID !=ID :\n        pass \n",
        "wrong_code": "\ndef ID def ID ):\n    if ID !=ID :\n        pass \n"
    },
    {
        "code": "\ndef _resv_parse_user(root):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29520
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nis "
    },
    {
        "code": "\ndef _resv_parse_slice(root):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29521
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n",
        "wrong_code": "\ndef (ID ):\n    pass \n\n"
    },
    {
        "code": "def _resv_parse_project(root):\n    proj_elem = root.find(PROJECT_TAG)\n    return (proj_elem.get(NAME), proj_elem.get(DESCRIPTION))\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/plugins/openflow/plugin/gapi/rspec.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29522
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID (ID )\n    return (ID .ID (ID ),ID .ID (ID ))\n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID (ID )\n    return (ID .ID (ID ),ID .ID (ID )))"
    },
    {
        "code": "def get_sfa_logger():\n    return logger\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/sfalogging.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 29523
        },
        "correct_code": "def ID ():\n    return ID \n",
        "wrong_code": "def ID ():\n[    return ID \n"
    },
    {
        "code": "def __init__(self, faultCode, faultString, extra = None):\n    if extra:\n        faultString += \": \" + str(extra)\n    xmlrpclib.Fault.__init__(self, faultCode, faultString)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 96,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29524
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    if ID :\n        ID +=LIT +ID (ID )\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    if ID :\n        ID +=LIT +ID (ID )\n    ID .ID .ID (ID ,ID ,ID \n"
    },
    {
        "code": "def __init__(self, method, interface = None, extra = None):\n    if interface:\n        faultString += \" for interface \" + interface\n    SfaFault.__init__(self, 100, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 29525
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        ID +=LIT +ID \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID break ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        ID +=LIT +ID \n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __init__(self, got, min, max = min, extra = None):\n    if min != max:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29526
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    if ID !=ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID =ID ,ID =ID )\n    if ID !=ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, extra = None, name = None):\n    if name is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29527
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID =ID with ,ID =ID ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, extra = None):\n    faultString = \"Failed to authenticate call\"\n    SfaFault.__init__(self, 103, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 29528
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID and ,ID )\n"
    },
    {
        "code": "def __init__(self, extra = None):\n    faultString = \"Database error\"\n    SfaFault.__init__(self, 106, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29529
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,break ,ID ,ID )\n"
    },
    {
        "code": "def __init__(self, extra = None):\n    faultString = \"Permission denied\"\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29530
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __init__(self, interface=None, extra = None):\n    faultString = \"Not implemented\"\n    if interface:\n        faultString += \" at interface \" + interface \n    SfaFault.__init__(self, 109, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 93,
            "fix_type": "delete",
            "id": 29531
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n    ID =LIT \n    if ID :\n        ID +=LIT +ID \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID =ID ,ID =ID ):\n    ID =LIT \n    if ID :\n        ID +=LIT +ID \n    ID .ID (ID ,:LIT ,ID ,ID )\n"
    },
    {
        "code": "def __init__(self, extra = None):\n    faultString = \"Internal API error\"\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29532
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID =ID ):.ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Malformed HRN: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29533
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):if ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29534
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID ID ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Tree Exception: %(value)s, \" % locals()\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29535
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID !=)\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 29536
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID break ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Non exsiting record %(value)s, \" % locals()\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29537
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %return ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 29538
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID finally (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Existing record: %(value)s, \" % locals()\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29539
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,[=ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29540
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID .ID )else "
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Non existing record: %(value)s, \" % locals()\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 29541
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID yield ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29542
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID )\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Non existing file: %(value)s, \" % locals()\n    SfaFault.__init__(self, 111, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29543
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID import ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29544
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (.ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Invalid RPC Params: %(value)s, \" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29545
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (elif ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29546
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):break return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Connection Key GID mismatch: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra) \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 29547
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID ].ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29548
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Missing Caller GID: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra) \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 29549
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT not ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29550
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID =ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Record not found: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29551
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 29552
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID del ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Unknown SFA Type: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 95,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29553
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n    ("
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 29554
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID class .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Missing authority: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29555
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =]):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 29556
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def and ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"PlanetLab record does not exist : %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 29557
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 29558
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID def ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Permission error: %(value)s\" % locals()\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29559
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID ==\n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29560
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Insufficient rights: %(value)s\" % locals()\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29561
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 29562
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID .ID ).\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Missing delegate bit: %(value)s\" % locals()\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29563
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =*\n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29564
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "not def ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Child rights not subset of parent: %(value)s\" % locals()\n    SfaFault.__init__(self, 103, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 29565
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    in ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 29566
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    or return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Cert missing parent: %(value)s\" % locals()\n    SfaFault.__init__(self, 103, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29567
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =\n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29568
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID .as )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Cert not signed by parent: %(value)s\" % locals()\n    SfaFault.__init__(self, 103, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29569
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29570
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID :\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Cert URN is not an extension of its parent: %(value)s\" % locals()\n    SfaFault.__init__(self, 103, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "%",
            "id": 29571
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29572
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n\n",
        "wrong_code": "raise def ID (ID ):\n    return ID (ID .ID )\n\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"GID invalid parent hrn: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 29573
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID while .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29574
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Sliver does not exist : %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29575
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "except def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29576
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID =:\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, hash = None, extra = None):\n    faultString = \"bad request hash: \" + str(hash)\n    xmlrpclib.Fault.__init__(self, 902, faultString)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 29577
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n    ID =LIT +ID (ID )\n    ID .ID .ID (ID ,LIT ,ID )\n",
        "wrong_code": "def ID (ID LIT ,ID =ID ,ID =ID ):\n    ID =LIT +ID (ID )\n    ID .ID .ID (ID ,LIT ,ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Trusted root directory does not exist: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra) \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 29578
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID break (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 29579
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID global (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Missing information: %(value)s\" % locals()\n    SfaFault.__init__(self, 102, faultString, extra) \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 29580
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID break ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29581
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (if ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Invalid RSpec: %(value)s\" % locals()\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29582
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,\n,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29583
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID ID .ID )\n"
    },
    {
        "code": "def __init__(self,  extra = None):\n    faultString = \"Account Disabled\"\n    SfaFault.__init__(self, 108, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29584
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID !=ID ,ID =ID ):\n    ID =LIT \n    ID .ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 29585
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID [.ID )\n"
    },
    {
        "code": "def __init__(self, value, extra = None):\n    self.value = value\n    faultString = \"Unable to verify credential: %(value)s, \" %locals()\n    SfaFault.__init__(self, 115, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 89,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29586
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID ()\n    ID .ID (ID ,LIT ,ID ,ID !=\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self.value)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29587
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID ID .ID )\n"
    },
    {
        "code": "def __init__(self, value, extra=None):\n    self.value = value\n    faultString = \"%s cert is expired\" % value\n    SfaFault.__init__(self, 102, faultString, extra)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/expedient/src/python/sfa/util/faults.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 29588
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID \n    ID .ID (ID ,LIT ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID =LIT %ID \n    ID .:ID (ID ,LIT ,ID ,ID )\n"
    },
    {
        "code": "\ndef _same(val):\n    return \"%s\" % val \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofam/src/src/foam/ethzlegacyoptinstuff/api_exp_to_rspecv3/expdatatogeniv3rspec.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 29589
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %ID !\n"
    },
    {
        "code": "def __init__ (self, plugin_dir):\n    self.plugin_root = plugin_dir\n    self.__plugins = {}\n\n    self._loadPlugins()\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofam/src/src/foam/plugin_manager.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 29590
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID ={}\n\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID ={}\n\n    ID .ID ()\n*"
    },
    {
        "code": "\ndef _loadPlugins (self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofam/src/src/foam/plugin_manager.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29591
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef getByInterface (self, interface):\n    for v in self.__plugins.itervalues():\n        if v.interfaces(\"foam.interface.rpc\"):\n            yield v\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofam/src/src/foam/plugin_manager.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29592
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID ():\n        if ID .ID (LIT ):\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID ..ID ():\n        if ID .ID (LIT ):\n            yield ID \n"
    },
    {
        "code": "\ndef call(self):\n    if hasattr(self.api.manager,'get_key_from_incoming_ip'):\n        pass\n    else:\n        return 0\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofam/src/src/foam/sfa/methods/get_key_from_incoming_ip.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29593
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID .ID .ID ,LIT ):\n        pass \n    else :\n        return LIT \n",
        "wrong_code": "\ndef except ID (ID ):\n    if ID (ID .ID .ID ,LIT ):\n        pass \n    else :\n        return LIT \n"
    },
    {
        "code": "\ndef index(request):\n    return HttpResponseRedirect(reverse('registration.views.login.login'))\n    # return render_to_response('welcome/index.html')\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/ofreg/registration/views/welcome.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 29594
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (LIT ))\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID (LIT ))\n    =#COMMENT\n\n"
    },
    {
        "code": "\n@csrf_exempt\n@require_objs_permissions_for_view(\n    [\"can_get_x2\", \"can_read_val\"],\n    get_user_from_req,\n    get_queryset(PermissionTestClass, \"obj_id\"),\n)\ndef test_view_x2(request, obj_id=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/common/permissions/tests/views.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29595
        },
        "correct_code": "\n@ID \n@ID (\n[LIT ,LIT ],\nID ,\nID (ID ,LIT ),\n)\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\n@ID \n@ID (\n[LIT ,LIT ],\nID if \nID (ID ,LIT ),\n)\ndef ID (ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\n@require_objs_permissions_for_view(\n    [\"can_add\"],\n    get_user_from_req,\n    get_queryset_from_class(PermissionTestClass),\n    [\"POST\"],\n)\ndef test_view_create(request):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/common/permissions/tests/views.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29596
        },
        "correct_code": "\n@ID (\n[LIT ],\nID ,\nID (ID ),\n[LIT ],\n)\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID (\n[LIT ],\nID ,\nID (ID ),\n[LIT ],\n)\ndef ID def ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_protected_url(request):\n    return HttpResponse(\"Worked\")\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/common/permissions/tests/views.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29597
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID +LIT )\n"
    },
    {
        "code": "\n@csrf_exempt\ndef add_perms_view(request, permission, user, target, redirect_to=None):\n    if request.method == \"POST\":\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/common/permissions/tests/views.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29598
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID .ID ==LIT :\n        pass \n    else lambda \n        pass \n"
    },
    {
        "code": "\n@csrf_exempt\ndef other_perms_view(request, permission, user, target, redirect_to=None):\n    if request.method == \"POST\":\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/common/permissions/tests/views.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 29599
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID .ID ==LIT :\n        pass \n    else :\n        break pass \n"
    },
    {
        "code": "def convert_dict_to_flowspace(list_of_dics, objectType):\n    for dic in list_of_dics:\n        for key in dic.keys():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/admin_manager/helper.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29600
        },
        "correct_code": "def ID (ID ,ID ):\n    for ID in ID :\n        for ID in ID .ID ():\n            pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    for ID in ID :for ID in ID .ID ():\n            pass \n"
    },
    {
        "code": "def validateEmail(email):\n    '''\n    Taken from: http://code.activestate.com/recipes/65215-e-mail-address-validation/\n    '''\n    if len(email) > 7:\n        if re.match(\"^.+\\\\@(\\\\[?)[a-zA-Z0-9\\\\-\\\\.]+\\\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\\\]?)$\", email) != None:\n            return 1\n    return 0\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/admin_manager/helper.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29601
        },
        "correct_code": "def ID (ID ):\n    LIT \n    if ID (ID )>LIT :\n        if ID .ID (LIT ,ID )!=ID :\n            return LIT \n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    LIT \n    if ID ID )>LIT :\n        if ID .ID (LIT ,ID )!=ID :\n            return LIT \n    return LIT \n"
    },
    {
        "code": "\n\ndef send_mail(to, subject, text):\n    if (len(atsign) == 0):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/admin_manager/helper.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29602
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    if (ID (ID )==LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    if (ID (ID )==LIT )nonlocal \n        pass \n"
    },
    {
        "code": "\ndef call(self, creds, xrn, cert=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/methods/CreateGid.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29603
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID )\n    pass \n"
    },
    {
        "code": "\n\n\n#        lease_elems = []       \n#        for lease in leases:\n#            lease_fields = ['lease_id', 'component_id', 'slice_id', 'start_time', 'duration']\n#            lease_elem = network_elem.add_instance('lease', lease, lease_fields)\n#            lease_elems.append(lease_elem)\n\n\n@staticmethod\ndef get_leases(xml, filter={}):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/rspecs/elements/versions/sfav1Lease.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 29604
        },
        "correct_code": "\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n\n@ID \ndef ID (ID ,ID ={}):\n    pass \n",
        "wrong_code": "\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n\n@ID \ndef ID (ID ,ID ={}):\n    pass \n    /"
    },
    {
        "code": "\n@staticmethod\ndef get_lease_objs(lease_elems):\n    for lease_elem in lease_elems:\n        for node_elem in node_elems:\n             pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/rspecs/elements/versions/sfav1Lease.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29605
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID in ID :\n        for ID in ID :\n             pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    for ID in ID lambda \n        for ID in ID :\n             pass \n"
    },
    {
        "code": "\ndef __init__(self, peer_cert = None, config = None ):\n    self.hierarchy = Hierarchy()\n    #if not config:\n    self.config = CONFIG#Config()\n    self.load_trusted_certs()\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 100,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29606
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    ID .ID =ID ()\n    #COMMENT\n\n    ID .ID =ID #COMMENT\n\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    ID .ID =ID ()\n    #COMMENT\n\n    ID .ID =ID #COMMENT\n\n    ID .ID (\n"
    },
    {
        "code": "\ndef load_trusted_certs(self):\n    self.trusted_cert_list = TrustedRoots(self.config.TRUSTED_ROOTS_DIR).get_list()\n    self.trusted_cert_file_list = TrustedRoots(self.config.TRUSTED_ROOTS_DIR).get_file_list()\n     \n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29607
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (ID .ID .ID ).ID ()\n    ID .ID =ID (ID .ID .ID ).ID ()\n\n\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID while ID .ID .ID ).ID ()\n    ID .ID =ID (ID .ID .ID ).ID ()\n\n\n"
    },
    {
        "code": "\ndef check_ticket(self, ticket):\n    if self.trusted_cert_list:\n        pass\n    else:\n       pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 29608
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else :\n       pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try if ID .ID :\n        pass \n    else :\n       pass \n"
    },
    {
        "code": "\ndef verifyPeerCert(self, cert, gid):\n    # make sure the client_gid matches client's certificate\n    if not cert.is_pubkey(gid.get_pubkey()):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29609
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if not ID .ID (ID .ID ()):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if not ID .ID (ID .ID ()):\n\n"
    },
    {
        "code": "\ndef verifyGidRequestHash(self, gid, hash, arglist):\n    key = gid.get_pubkey()\n    if not key.verify_string(str(arglist), hash):\n        raise BadRequestHash(hash)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29610
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID ()\n    if not ID .ID (ID (ID ),ID ):\n        raise ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID ()\n    if not ID .ID \n    ID (ID ),ID ):\n        raise ID (ID )\n"
    },
    {
        "code": "\ndef verifyCredRequestHash(self, cred, hash, arglist):\n    gid = cred.get_gid_caller()\n    self.verifyGidRequestHash(gid, hash, arglist)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29611
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ==ID ,ID ,ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef validateGid(self, gid):\n    if self.trusted_cert_list:\n        gid.verify_chain(self.trusted_cert_list)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 29612
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID :\n        ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef validateCred(self, cred):\n    if self.trusted_cert_list:\n        cred.verify(self.trusted_cert_file_list)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29613
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID is ID ):\n    if ID .ID :\n        ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef authenticateGid(self, gidStr, argList, requestHash=None):\n    # request_hash is optional\n    if requestHash:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29614
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID :\n        pass \n",
        "wrong_code": "import \ndef ID (ID ,ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef authenticateCred(self, credStr, argList, requestHash=None):\n    # request hash is optional\n    if requestHash:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29615
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n#COMMENT\n\n    if ID :\n\n"
    },
    {
        "code": "\ndef authenticateCert(self, certStr, requestHash):\n    cert = Certificate(string=certStr)\n    # xxx should be validateCred ??\n    self.validateCred(cert)   \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 29616
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID (ID =ID )\n    #COMMENT\n\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID while ):\n    ID =ID (ID =ID )\n    #COMMENT\n\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef gidNoop(self, gidStr, value, requestHash):\n    self.authenticateGid(gidStr, [gidStr, value], requestHash)\n    return value\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29617
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID (ID ,[ID ,ID ],ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID ID (ID ,[ID ,ID ],ID )\n    return ID \n"
    },
    {
        "code": "\ndef credNoop(self, credStr, value, requestHash):\n    self.authenticateCred(credStr, [credStr, value], requestHash)\n    return value\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29618
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID (ID ,[ID ,ID ],ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID (ID ,[ID ,ID ],ID )\n    return ID ."
    },
    {
        "code": "\ndef verify_cred_is_me(self, credential):\n    if caller_hrn != self.config.SFA_INTERFACE_HRN:\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29619
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID !=ID .ID .ID :\n        pass \n\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID !=ID .ID .ID :\n        global \n\n"
    },
    {
        "code": "def get_auth_info(self, auth_hrn):\n    \"\"\"\n        Given an authority name, return the information for that authority.\n        This is basically a stub that calls the hierarchy module.\n        \n        @param auth_hrn human readable name of authority  \n        \"\"\"\n\n    return self.hierarchy.get_auth_info(auth_hrn)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29620
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    def \n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef veriry_auth_belongs_to_me(self, name):\n    \"\"\"\n        Verify that an authority belongs to our hierarchy. \n        This is basically left up to the implementation of the hierarchy\n        module. If the specified name does not belong, ane exception is \n        thrown indicating the caller should contact someone else.\n\n        @param auth_name human readable name of authority\n        \"\"\"\n\n    # get auth info will throw an exception if the authority doesnt exist\n    self.get_auth_info(name)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 29621
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n\n    #COMMENT\n\n    ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT not \n\n    #COMMENT\n\n    ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef verify_object_belongs_to_me(self, name):\n    if not auth_name:\n        pass\n    if name == self.config.SFA_INTERFACE_HRN:\n        pass\n         \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29622
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n    if ID ==ID .ID .ID :\n        pass \n\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n    if ID ==ID .\n    .ID :\n        pass \n\n"
    },
    {
        "code": "def verify_auth_belongs_to_me(self, name):\n    # get auth info will throw an exception if the authority doesnt exist\n    self.get_auth_info(name) \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29623
        },
        "correct_code": "def ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n#COMMENT\n\n    ID .ID ID )\n"
    },
    {
        "code": "\n\ndef verify_object_permission(self, name):\n    if object_hrn == name:\n        pass\n    if name.startswith(object_hrn + \".\"):\n        pass\n        #if name.startswith(get_authority(name)):\n        #return\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29624
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID ==ID :\n        pass \n    if ID .ID (ID +LIT ):\n        pass \n        #COMMENT\n\n        #COMMENT\n\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID ==ID :\n        pass \n    if ID ID (ID +LIT ):\n        pass \n        #COMMENT\n\n        #COMMENT\n\n"
    },
    {
        "code": "\ndef get_authority(self, hrn):\n    return get_authority(hrn)\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/sfa/trust/auth.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29625
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef None ID (ID ,ID ):\n    return ID (ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29626
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "def test_get_switches(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 29627
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID ):\n    pass \n    global \n"
    },
    {
        "code": "def test_get_links(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29628
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "break ID (ID ):\n    pass \n\n"
    },
    {
        "code": "def test_change_password(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29629
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID ):\n    pass /\n"
    },
    {
        "code": "def test_topology_callback(self):\n    # TODO: write up test_topology_callback\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29630
        },
        "correct_code": "def ID (ID ):\n#COMMENT\n\n    pass \n",
        "wrong_code": "def global (ID ):\n#COMMENT\n\n    pass \n"
    },
    {
        "code": "def test_update_slice_and_optin(self):\n    pass\n            \n        \n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29631
        },
        "correct_code": "def ID (ID ):\n    pass \n\n\n",
        "wrong_code": "def ID (ID )continue :\n    pass \n\n\n"
    },
    {
        "code": "def test_delete_slice(self):\n    for i in range(num_slices):\n        pass\n    for i in ids:\n        for fv in DummyFV.objects.all():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/optin_manager/src/python/openflow/optin_manager/xmlrpc_server/tests.py",
            "fix_location": 96,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 29632
        },
        "correct_code": "def ID (ID ):\n    for ID in ID (ID ):\n        pass \n    for ID in ID :\n        for ID in ID .ID .ID ():\n            pass \n",
        "wrong_code": "def ID (ID ):\n    for ID in ID (ID ):\n        pass \n    for ID in ID :\n        for ID in ID .ID try ID ():\n            pass \n"
    },
    {
        "code": "@staticmethod\ndef getLogger():\n    #Simple wrapper. Ensures logging is always correctly configured (logging.basicConfig is executed)\n    return logging.getLogger()\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/vt_manager/src/python/agent/utils/Logger.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 29633
        },
        "correct_code": "@ID \ndef ID ():\n#COMMENT\n\n    return ID .ID ()\n",
        "wrong_code": "@ID \ndef ID ():\n#COMMENT\n\nreturn     return ID .ID ()\n"
    },
    {
        "code": "\n# Validation and so on\ndef clean(self):\n    if password and confirm_password and (password != confirm_password):\n        pass\n    if \"agentPasswordConfirm\" in d:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/fp7-ofelia/ocf/vt_manager/src/python/vt_manager/controller/dispatchers/forms/ServerForm.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29634
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    if ID and ID and (ID !=ID ):\n        pass \n    if LIT in ID :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID )\n    if ID and ID and (ID !=ID ):\n        pass \n    if LIT in ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fprimex/zdesk/api_gen/api_template.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29635
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID not (ID ):\n    pass \n"
    },
    {
        "code": "\ndef call(self, path, query=None, method='GET', data=None,\n         files=None, get_all_pages=False, complete_response=False,\n         **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/fprimex/zdesk/api_gen/api_template.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29636
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,ID =ID ,\nID =ID ,ID =LIT ,ID =LIT ,\n**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,=ID ,ID =LIT ,ID =ID ,\nID =ID ,ID =LIT ,ID =LIT ,\n**ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_cassandra_connection(cql_version=cqlsh.DEFAULT_CQLVER):\n    if cql_version is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29637
        },
        "correct_code": "\ndef ID (ID =ID .ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID =ID .ID ):\n    if ID is break :\n        pass \n"
    },
    {
        "code": "\ndef get_cassandra_cursor(cql_version=cqlsh.DEFAULT_CQLVER):\n    return get_cassandra_connection(cql_version=cql_version).cursor()\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29638
        },
        "correct_code": "\ndef ID (ID =ID .ID ):\n    return ID (ID =ID ).ID ()\n",
        "wrong_code": "\ndef /ID (ID =ID .ID ):\n    return ID (ID =ID ).ID ()\n"
    },
    {
        "code": "\ndef get_test_keyspace():\n    return TEST_KEYSPACES_CREATED[-1]\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29639
        },
        "correct_code": "\ndef ID ():\n    return ID [-LIT ]\n",
        "wrong_code": "\ndef ID ():-    return ID [-LIT ]\n"
    },
    {
        "code": "\ndef make_test_ks_name():\n    # abuse mktemp to get a quick random-ish name\n    return os.path.basename(tempfile.mktemp(prefix='CqlshTests_'))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29640
        },
        "correct_code": "\ndef ID ():\n#COMMENT\n\n    return ID .ID .ID (ID .ID (ID =LIT ))\n",
        "wrong_code": "\ndef ID ():\n#COMMENT\n\n    return ID ..ID (ID .ID (ID =LIT ))\n"
    },
    {
        "code": "\ndef create_test_keyspace(cursor):\n    cursor.execute('USE %s;' % qksname)\n    TEST_KEYSPACES_CREATED.append(ksname)\n    return ksname\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29641
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT %ID )\n    ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef def ID (ID ):\n    ID .ID (LIT %ID )\n    ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef split_cql_commands(source):\n    if in_batch:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29642
        },
        "correct_code": "\ndef ID (ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID :\n        pass \nclass "
    },
    {
        "code": "\ndef execute_cql_commands(cursor, source, logprefix='INIT: '):\n    for cql in split_cql_commands(source):\n        cqlshlog.debug(logprefix + cql)\n        cursor.execute(cql)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29643
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    for ID in ID (ID ):\n        ID .ID (ID +ID )\n        ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    for ID in for (ID ):\n        ID .ID (ID +ID )\n        ID .ID (ID )\n"
    },
    {
        "code": "\n@contextlib.contextmanager\ndef cassandra_connection(cql_version=cqlsh.DEFAULT_CQLVER):\n\n    conn = get_cassandra_connection(cql_version=cql_version)\n    try:\n        yield conn\n    finally:\n        conn.close()\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29644
        },
        "correct_code": "\n@ID .ID \ndef ID (ID =ID .ID ):\n\n    ID =ID (ID =ID )\n    try :\n        yield ID \n    finally :\n        ID .ID ()\n",
        "wrong_code": "\n@ID .ID \ndef ID (=ID .ID ):\n\n    ID =ID (ID =ID )\n    try :\n        yield ID \n    finally :\n        ID .ID ()\n"
    },
    {
        "code": "\n@contextlib.contextmanager\ndef cassandra_cursor(cql_version=None, ks=''):\n\n    if ks == '':\n        pass\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29645
        },
        "correct_code": "\n@ID .ID \ndef ID (ID =ID ,ID =LIT ):\n\n    if ID ==LIT :\n        pass \n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID =ID ,ID =LIT ):\n\n    if ID ==while :\n        pass \n    try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef cql_rule_set():\n    return cqlsh.cql3handling.CqlRuleSet\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29646
        },
        "correct_code": "\ndef ID ():\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID ()as \n    return ID .ID .ID \n"
    },
    {
        "code": "\ndef quote_name(name):\n    return cql_rule_set().maybe_escape_name(name)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29647
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ().ID (ID )\n",
        "wrong_code": "\ndef ID (ID )ID \n    return ID ().ID (ID )\n"
    },
    {
        "code": "\ndef testrun_cqlsh(keyspace=DEFAULTVAL, **kwargs):\n    # use a positive default sentinel so that keyspace=None can be used\n    # to override the default behavior\n    if keyspace is DEFAULTVAL:\n        keyspace = get_test_keyspace()\n    return run_cqlsh(keyspace=keyspace, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29648
        },
        "correct_code": "\ndef ID (ID =ID ,**ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID is ID :\n        ID =ID ()\n    return ID (ID =ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID =ID ,**ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID is ID :\n        ID =ID ()\n    return \n    (ID =ID ,**ID )\n"
    },
    {
        "code": "\ndef testcall_cqlsh(keyspace=None, **kwargs):\n    if keyspace is None:\n        keyspace = get_test_keyspace()\n    return call_cqlsh(keyspace=keyspace, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/cassandra/pylib/cqlshlib/test/cassconnect.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 29649
        },
        "correct_code": "\ndef ID (ID =ID ,**ID ):\n    if ID is ID :\n        ID =ID ()\n    return ID (ID =ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID =ID ,**ID ):\n    if ID is ID :\n        ID =ID ()\n    return ID (ID assert =ID ,**ID )\n"
    },
    {
        "code": "def setUp(self):\n    super(SysconfigTestCase, self).setUp()\n    self.makefile = None\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29650
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ):\n    ID (ID ,ID for .ID ()\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef tearDown(self):\n    if self.makefile is not None:\n        os.unlink(self.makefile)\n    self.cleanup_testfn()\n    super(SysconfigTestCase, self).tearDown()\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29651
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        ID .ID (ID .ID )\n    ID .ID ()\n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "\ndef ID (ID ):await \n    if ID .ID is not ID :\n        ID .ID (ID .ID )\n    ID .ID ()\n    ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "\ndef cleanup_testfn(self):\n    if os.path.isfile(path):\n        pass\n    elif os.path.isdir(path):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 29652
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID .ID (ID ):\n        pass \n    elif ID .ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID .ID (/ID ):\n        pass \n    elif ID .ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_get_python_lib(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29653
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nin ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_python_inc(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29654
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "in \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_parse_makefile_base(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 29655
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (in ID ):\n    try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef test_parse_makefile_literal_dollar(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29656
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\nand     try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\n\ndef test_sysconfig_module(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 29657
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef /ID (ID ):\n    pass \n"
    },
    {
        "code": "\n@unittest.skipIf(sysconfig.get_config_var('CUSTOMIZED_OSX_COMPILER'),'compiler flags customized')\ndef test_sysconfig_compiler_vars(self):\n    if sysconfig.get_config_var('CUSTOMIZED_OSX_COMPILER'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 29658
        },
        "correct_code": "\n@ID .ID (ID .ID (LIT ),LIT )\ndef ID (ID ):\n    if ID .ID (LIT ):\n        pass \n",
        "wrong_code": "\n@ID .ID (ID .ID (LIT ),LIT )\ndef ID async (ID ):\n    if ID .ID (LIT ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_suite():\n    suite = unittest.TestSuite()\n    suite.addTest(unittest.makeSuite(SysconfigTestCase))\n    return suite\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/distutils/tests/test_sysconfig.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 29659
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID ()\n    ID .ID (ID .ID (ID ))\n    return ID \n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID .ID ()\n    ID .ID (ID .ID (ID ))\n    return ID \n]"
    },
    {
        "code": "def __init__(self, text):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/akheron/cpython/Lib/idlelib/IdleHistory.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29660
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,not ID ):\n    pass \n"
    },
    {
        "code": "\ndef history_next(self, event):\n    \"Fetch later statement; start with ealiest if cyclic.\"\n    self.fetch(reverse=False)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/akheron/cpython/Lib/idlelib/IdleHistory.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29661
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID =LIT )\n    return LIT \n",
        "wrong_code": "\nfrom ID (ID ,ID ):\n    LIT \n    ID .ID (ID =LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef history_prev(self, event):\n    \"Fetch earlier statement; start with most recent.\"\n    self.fetch(reverse=True)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/akheron/cpython/Lib/idlelib/IdleHistory.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 29662
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID =LIT )\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID =LIT )\n    return with LIT \n"
    },
    {
        "code": "\ndef store(self, source):\n    if len(source) > 2:\n        # avoid duplicates\n        try:\n            pass\n        except ValueError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/akheron/cpython/Lib/idlelib/IdleHistory.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 29663
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )>LIT :\n    #COMMENT\n\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID )>LIT :\n    ,#COMMENT\n\n        try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "\ndef test_class(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29664
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_colormap(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29665
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_container(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29666
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (from ):\n    pass \n"
    },
    {
        "code": "\ndef test_visual(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29667
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass and "
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Toplevel(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29668
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "-\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_menu(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29669
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "await \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_screen(self):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 29670
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n    as pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef test_use(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29671
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nexcept "
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Frame(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 29672
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,pass ID )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.LabelFrame(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29673
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (.ID ,**ID )\n"
    },
    {
        "code": "\ndef test_labelanchor(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29674
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_labelwidget(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29675
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_highlightthickness(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'highlightthickness',\n                          0, 1.3, 2.6, 6, -2, '10p')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 29676
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID import .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Label(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29677
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\nraise ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Button(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 29678
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .if ID ,**ID )\n"
    },
    {
        "code": "\ndef test_default(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'default', 'active', 'disabled', 'normal')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29679
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID ID ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Checkbutton(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29680
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID **ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\n\ndef test_offvalue(self):\n    widget = self.create()\n    self.checkParams(widget, 'offvalue', 1, 2.3, '', 'any string')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 29681
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,class LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_onvalue(self):\n    widget = self.create()\n    self.checkParams(widget, 'onvalue', 1, 2.3, '', 'any string')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29682
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Radiobutton(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29683
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID )continue \n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_value(self):\n    widget = self.create()\n    self.checkParams(widget, 'value', 1, 2.3, '', 'any string')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 29684
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID continue ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Menubutton(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29685
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef (ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_direction(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'direction',\n            'above', 'below', 'flush', 'left', 'right')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 29686
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_height(self):\n    widget = self.create()\n    self.checkIntegerParam(widget, 'height', 100, -100, 0, conv=str)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 29687
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,-LIT ,LIT ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .=ID (ID ,LIT ,LIT ,-LIT ,LIT ,ID =ID )\n"
    },
    {
        "code": "\ndef test_menu(self):\n    self.checkParam(widget, 'menu', menu, eq=widget_eq)\n    menu.destroy()\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29688
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,ID ,ID =ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,ID ,ID =ID ID \n    ID .ID ()\n"
    },
    {
        "code": "\ndef test_padx(self):\n    self.checkParam(widget, 'padx', -2, expected=0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29689
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT if \n"
    },
    {
        "code": "\ndef test_pady(self):\n    self.checkParam(widget, 'pady', -2, expected=0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29690
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (await ,LIT ,-LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_width(self):\n    widget = self.create()\n    self.checkIntegerParam(widget, 'width', 402, -402, 0, conv=str)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 29691
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,-LIT ,LIT ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,-LIT ,LIT ,ID =ID )\n/"
    },
    {
        "code": "\ndef create(self, default='b', values=('a', 'b', 'c'), **kwargs):\n    return tkinter.OptionMenu(self.root, None, default, *values, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 29692
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =(LIT ,LIT ,LIT ),**ID ):\n    return ID .ID (ID .ID ,ID ,ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ]LIT ,ID =(LIT ,LIT ,LIT ),**ID ):\n    return ID .ID (ID .ID ,ID ,ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Entry(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29693
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID and **ID )\n"
    },
    {
        "code": "\ndef test_disabledbackground(self):\n    widget = self.create()\n    self.checkColorParam(widget, 'disabledbackground')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29694
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_insertborderwidth(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 29695
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass as \n"
    },
    {
        "code": "\ndef test_insertwidth(self):\n    if pixels_round(0.9) <= 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "",
            "id": 29696
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (LIT )<=LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (LIT )<=LIT :\n        pass \n        else :\n        pass \n    "
    },
    {
        "code": "\ndef test_invalidcommand(self):\n    widget = self.create()\n    self.checkCommandParam(widget, 'invalidcommand')\n    self.checkCommandParam(widget, 'invcmd')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29697
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ():ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_readonlybackground(self):\n    widget = self.create()\n    self.checkColorParam(widget, 'readonlybackground')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29698
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .(ID ,LIT )\n"
    },
    {
        "code": "\ndef test_show(self):\n    self.checkParam(widget, 'show', '')\n    self.checkParam(widget, 'show', ' ')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29699
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,LIT )\n    ID .ID (ID ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,LIT global \n    ID .ID (ID ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_state(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'state',\n                        'disabled', 'normal', 'readonly')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29700
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,with )\n"
    },
    {
        "code": "\ndef test_validate(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'validate',\n            'all', 'key', 'focus', 'focusin', 'focusout', 'none')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 94,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29701
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,LIT ,LIT )\n    nonlocal "
    },
    {
        "code": "\ndef test_validatecommand(self):\n    widget = self.create()\n    self.checkCommandParam(widget, 'validatecommand')\n    self.checkCommandParam(widget, 'vcmd')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29702
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef class ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Spinbox(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29703
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID assert :\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_buttonbackground(self):\n    widget = self.create()\n    self.checkColorParam(widget, 'buttonbackground')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29704
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT \n"
    },
    {
        "code": "\ndef test_buttoncursor(self):\n    widget = self.create()\n    self.checkCursorParam(widget, 'buttoncursor')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 29705
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_buttondownrelief(self):\n    widget = self.create()\n    self.checkReliefParam(widget, 'buttondownrelief')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29706
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (.):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_buttonuprelief(self):\n    widget = self.create()\n    self.checkReliefParam(widget, 'buttonuprelief')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29707
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_format(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29708
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):while     pass \n"
    },
    {
        "code": "\ndef test_from(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29709
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (class ):\n    pass \n"
    },
    {
        "code": "\ndef test_increment(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'increment', -1, 1, 10.2, 12.8, 0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29710
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,-LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID LIT ,-LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_to(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 29711
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass continue \n"
    },
    {
        "code": "\ndef test_values(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29712
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_wrap(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'wrap')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29713
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_bbox(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29714
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):+\n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Text(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 29715
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID try )\n"
    },
    {
        "code": "\ndef test_autoseparators(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'autoseparators')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29716
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_blockcursor(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'blockcursor')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29717
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_endline(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 29718
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID (LIT ,LIT )else \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_height(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29719
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n)    pass \n"
    },
    {
        "code": "\ndef test_maxundo(self):\n    widget = self.create()\n    self.checkIntegerParam(widget, 'maxundo', 0, 5, -1)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29720
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT )\n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_inactiveselectbackground(self):\n    widget = self.create()\n    self.checkColorParam(widget, 'inactiveselectbackground')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 29721
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ):\n"
    },
    {
        "code": "\n@requires_tcl(8, 6)\ndef test_insertunfocussed(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'insertunfocussed',\n                        'hollow', 'none', 'solid')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 29722
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT )\n",
        "wrong_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID =.ID (ID ,LIT ,\n    LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_selectborderwidth(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29723
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    else pass \n"
    },
    {
        "code": "\ndef test_spacing1(self):\n    self.checkParam(widget, 'spacing1', -5, expected=0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29724
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID =):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_spacing2(self):\n    self.checkParam(widget, 'spacing2', -1, expected=0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29725
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ]):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_spacing3(self):\n    self.checkParam(widget, 'spacing3', -10, expected=0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29726
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID (ID ,LIT ,-LIT ,ID =LIT )\n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_startline(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 29727
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID (LIT ,LIT )\ndef ID (as ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_state(self):\n    if tcl_version < (8, 5):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 29728
        },
        "correct_code": "\ndef ID (ID ):\n    if ID <(LIT ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID <(LIT ,LIT ):\n        pass \n    ,else :\n        pass \n"
    },
    {
        "code": "\ndef test_tabs(self):\n    if get_tk_patchlevel() < (8, 5, 11):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29729
        },
        "correct_code": "\ndef ID (ID ):\n    if ID ()<(LIT ,LIT ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID ()<(LIT ,LIT ,LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_tabstyle(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'tabstyle', 'tabular', 'wordprocessor')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29730
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\n@ID (LIT ,LIT /\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_undo(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'undo')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29731
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT \n"
    },
    {
        "code": "\ndef test_width(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29732
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_wrap(self):\n    if tcl_version < (8, 5):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29733
        },
        "correct_code": "\ndef ID (ID ):\n    if ID <(LIT ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID <(LIT ,LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef test_bbox(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29734
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "*\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Canvas(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29735
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**is ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_closeenough(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'closeenough', 24, 2.4, 3.6, -3,\n                         conv=float)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29736
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef test_confine(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'confine')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 29737
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (class )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_scrollregion(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29738
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_state(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'state', 'disabled', 'normal',\n            errmsg='bad state value \"{}\": must be normal or disabled')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29739
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT =\n    ID =LIT )\n"
    },
    {
        "code": "\ndef test_xscrollincrement(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'xscrollincrement',\n                          40, 0, 41.2, 43.6, -40, '0.5i')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29740
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID import :\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_yscrollincrement(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'yscrollincrement',\n                          10, 0, 11.2, 13.6, -10, '0.1i')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29741
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    lambda ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Listbox(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 29742
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (continue ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_activestyle(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'activestyle',\n                        'dotbox', 'none', 'underline')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29743
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT assert \n    LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_listvariable(self):\n    widget = self.create()\n    var = tkinter.DoubleVar(self.root)\n    self.checkVariableParam(widget, 'listvariable', var)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29744
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID =ID .ID (ID .ID )\n    ID .ID (ID ,LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    =ID .ID (ID .ID )\n    ID .ID (ID ,LIT ,ID )\n"
    },
    {
        "code": "\ndef test_selectmode(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29745
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_state(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'state', 'disabled', 'normal')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29746
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()del ID .ID (ID ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef check_itemconfigure(self, name, value):\n    with self.assertRaisesRegexp(TclError, 'unknown color name \"spam\"'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29747
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    with ID .ID (ID ,LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,=):\n    with ID .ID (ID ,LIT ):\n        pass \n"
    },
    {
        "code": "\ndef test_itemconfigure_background(self):\n    self.check_itemconfigure('background', '#ff0000')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29748
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT def LIT )\n"
    },
    {
        "code": "\ndef test_itemconfigure_bg(self):\n    self.check_itemconfigure('bg', '#ff0000')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29749
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ,(ID ):\n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_itemconfigure_fg(self):\n    self.check_itemconfigure('fg', '#110022')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 29750
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n    in "
    },
    {
        "code": "\ndef test_itemconfigure_foreground(self):\n    self.check_itemconfigure('foreground', '#110022')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29751
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .(LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_itemconfigure_selectbackground(self):\n    self.check_itemconfigure('selectbackground', '#110022')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 29752
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n    and "
    },
    {
        "code": "\ndef test_itemconfigure_selectforeground(self):\n    self.check_itemconfigure('selectforeground', '#654321')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29753
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\nID (ID ):\n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_box(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29754
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_curselection(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29755
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_get(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29756
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )lambda \n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Scale(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29757
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .\n    ,**ID )\n"
    },
    {
        "code": "\ndef test_bigincrement(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'bigincrement', 12.4, 23.6, -5)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29758
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID LIT ,LIT ,LIT ,-LIT )\n"
    },
    {
        "code": "\ndef test_digits(self):\n    widget = self.create()\n    self.checkIntegerParam(widget, 'digits', 5, 0)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29759
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (await \n    ID .ID (ID ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_from(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'from', 100, 14.9, 15.1, conv=round)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29760
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,ID =ID )\n"
    },
    {
        "code": "\ndef test_label(self):\n    widget = self.create()\n    self.checkParam(widget, 'label', 'any string')\n    self.checkParam(widget, 'label', '')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29761
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT )\n    ID .ID (ID ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()return ID .ID (ID ,LIT ,LIT )\n    ID .ID (ID ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_length(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'length', 130, 131.2, 135.6, '5i')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29762
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):LIT \n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_resolution(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'resolution', 4.2, 0, 6.7, -2)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 29763
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .yield ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT )\n"
    },
    {
        "code": "\ndef test_showvalue(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'showvalue')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 29764
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_sliderlength(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'sliderlength',\n                          10, 11.2, 15.6, -3, '3m')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29765
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef global ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_sliderrelief(self):\n    widget = self.create()\n    self.checkReliefParam(widget, 'sliderrelief')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29766
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_tickinterval(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29767
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try pass \n"
    },
    {
        "code": "\ndef test_to(self):\n    widget = self.create()\n    self.checkFloatParam(widget, 'to', 300, 14.9, 15.1, -10,\n                         conv=round)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29768
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT from LIT ,-LIT ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Scrollbar(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29769
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n    import "
    },
    {
        "code": "\ndef test_activerelief(self):\n    widget = self.create()\n    self.checkReliefParam(widget, 'activerelief')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 29770
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID break .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_elementborderwidth(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'elementborderwidth', 4.3, 5.6, -2, '1m')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 29771
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .raise ID (ID ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_orient(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'orient', 'vertical', 'horizontal',\n            errmsg='bad orientation \"{}\": must be vertical or horizontal')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29772
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,\n    ID =LIT )\ntry "
    },
    {
        "code": "\ndef test_activate(self):\n    for e in ('arrow1', 'slider', 'arrow2'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29773
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in (LIT ,LIT ,LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in (LIT ,LIT ,LIT )!=\n        pass \n"
    },
    {
        "code": "\ndef test_set(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29774
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef not ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.PanedWindow(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29775
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**)\n"
    },
    {
        "code": "\ndef test_handlepad(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'handlepad', 5, 6.4, 7.6, -3, '1m')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29776
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_handlesize(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'handlesize', 8, 9.4, 10.6, -3, '2m',\n                          conv=noconv)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 29777
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,\n    ID =ID else )\n"
    },
    {
        "code": "\ndef test_height(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'height', 100, 101.2, 102.6, -100, 0, '1i',\n                          conv=noconv)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29778
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,LIT ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef test_opaqueresize(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'opaqueresize')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29779
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .(ID ,LIT )\n"
    },
    {
        "code": "\ndef test_sashcursor(self):\n    widget = self.create()\n    self.checkCursorParam(widget, 'sashcursor')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 29780
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_sashpad(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'sashpad', 8, 1.3, 2.6, -2, '2m')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 29781
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (while )\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_sashrelief(self):\n    widget = self.create()\n    self.checkReliefParam(widget, 'sashrelief')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29782
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID global ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_sashwidth(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'sashwidth', 10, 11.1, 15.6, -3, '1m',\n                          conv=noconv)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29783
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID finally (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef test_showhandle(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'showhandle')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29784
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_width(self):\n    widget = self.create()\n    self.checkPixelsParam(widget, 'width', 402, 403.4, 404.6, -402, 0, '5i',\n                          conv=noconv)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29785
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,LIT ,\n    ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,LIT ,-LIT ,LIT ,LIT ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef create2(self):\n    return p, b, c\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29786
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ,ID ,ID \n",
        "wrong_code": "\ndef ID (ID elif ):\n    return ID ,ID ,ID \n"
    },
    {
        "code": "\ndef test_paneconfigure(self):\n    for k, v in d.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29787
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    /for ID ,ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef check_paneconfigure_bad(self, p, b, name, msg):\n    with self.assertRaisesRegexp(TclError, msg):\n        p.paneconfigure(b, **{name: 'badValue'})\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29788
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    with ID .ID (ID ,ID ):\n        ID .ID (ID ,**{ID :LIT })\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    with .ID (ID ,ID ):\n        ID .ID (ID ,**{ID :LIT })\n"
    },
    {
        "code": "\ndef test_paneconfigure_after(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29789
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_paneconfigure_before(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29790
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef async ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_paneconfigure_height(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29791
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_paneconfigure_hide(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 29792
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID (LIT ,LIT )]\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_paneconfigure_minsize(self):\n    self.check_paneconfigure_bad(p, b, 'minsize',\n                                 'bad screen distance \"badValue\"')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29793
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT ,\n    LIT )\n",
        "wrong_code": "in \ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT ,\n    LIT )\n"
    },
    {
        "code": "\ndef test_paneconfigure_padx(self):\n    self.check_paneconfigure_bad(p, b, 'padx',\n                                 'bad screen distance \"badValue\"')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 29794
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT ,\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT ,pass \n    LIT )\n"
    },
    {
        "code": "\ndef test_paneconfigure_pady(self):\n    self.check_paneconfigure_bad(p, b, 'pady',\n                                 'bad screen distance \"badValue\"')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29795
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID ,LIT ,\n    LIT )\n",
        "wrong_code": "\ncontinue ID (ID ):\n    ID .ID (ID ,ID ,LIT ,\n    LIT )\n"
    },
    {
        "code": "\ndef test_paneconfigure_sticky(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29796
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n@requires_tcl(8, 5)\ndef test_paneconfigure_stretch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 29797
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@def ID (LIT ,LIT )\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_paneconfigure_width(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29798
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID not (ID ):\n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Menu(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29799
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\ndef ID (finally ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_postcommand(self):\n    widget = self.create()\n    self.checkCommandParam(widget, 'postcommand')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29800
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_tearoff(self):\n    widget = self.create()\n    self.checkBooleanParam(widget, 'tearoff')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 29801
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID from ID .ID ()\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_tearoffcommand(self):\n    widget = self.create()\n    self.checkCommandParam(widget, 'tearoffcommand')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 29802
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,else LIT )\n"
    },
    {
        "code": "\ndef test_title(self):\n    widget = self.create()\n    self.checkParam(widget, 'title', 'any string')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29803
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    =ID .ID ()\n    ID .ID (ID ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_type(self):\n    widget = self.create()\n    self.checkEnumParam(widget, 'type',\n            'normal', 'tearoff', 'menubar')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 29804
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,\n    LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (or ID ,LIT ,\n    LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_entryconfigure(self):\n    with self.assertRaisesRegexp(TclError, 'bad menu entry index \"foo\"'):\n        pass\n    for k, v in d.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29805
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ,LIT ):\n        pass \n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID LIT ):\n        pass \n    for ID ,ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef test_entryconfigure_label(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29806
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nwith     pass \n"
    },
    {
        "code": "\ndef test_entryconfigure_variable(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29807
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):del \n    pass \n"
    },
    {
        "code": "\ndef create(self, **kwargs):\n    return tkinter.Message(self.root, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29808
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n",
        "wrong_code": "\nglobal ID (ID ,**ID ):\n    return ID .ID (ID .ID ,**ID )\n"
    },
    {
        "code": "\ndef test_aspect(self):\n    widget = self.create()\n    self.checkIntegerParam(widget, 'aspect', 250, 0, -300)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/lib-tk/test/test_tkinter/test_widgets.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29809
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT )\n",
        "wrong_code": "\ndef ID (ID del :\n    ID =ID .ID ()\n    ID .ID (ID ,LIT ,LIT ,LIT ,-LIT )\n"
    },
    {
        "code": "\ndef __init__(self, source_dir, target_dir, add_launchers=True,\n             dry_run=False, fileop=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 29810
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,\nID =LIT ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,\nID =LIT ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef _get_alternate_executable(self, executable, options):\n    if options.get('gui', False) and os.name == 'nt':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29811
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID (LIT ,LIT )and ID .ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID (LIT ,LIT )and raise .ID ==LIT :\n        pass \n"
    },
    {
        "code": "\ndef _get_script_text(self, entry):\n    return self.script_template % dict(module=entry.prefix,\n                                       func=entry.suffix)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 29812
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID %ID (ID =ID .ID ,\n    ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID del %ID (ID =ID .ID ,\n    ID =ID .ID )\n"
    },
    {
        "code": "\ndef get_manifest(self, exename):\n    base = os.path.basename(exename)\n    return self.manifest % base\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29813
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID )\n    return ID .ID %ID \n",
        "wrong_code": "\nnonlocal ID (ID ,ID ):\n    ID =ID .ID .ID (ID )\n    return ID .ID %ID \n"
    },
    {
        "code": "\n@property\ndef dry_run(self):\n    return self._fileop.dry_run\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29814
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID ID ):\n    return ID .ID .ID \n"
    },
    {
        "code": "\n@dry_run.setter\ndef dry_run(self, value):\n    self._fileop.dry_run = value\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 29815
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    ID .ID .ID =ID \n",
        "wrong_code": "\n@ID .ID not \ndef ID (ID ,ID ):\n    ID .ID .ID =ID \n"
    },
    {
        "code": "# Executable launcher support.\n# Launchers are from https://bitbucket.org/vinay.sajip/simple_launcher/\n\ndef _get_launcher(self, kind):\n    if struct.calcsize('P') == 8:   # 64-bit\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 29816
        },
        "correct_code": "#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    if ID .ID (LIT )==LIT :#COMMENT\n\n        pass \n    else :\n        pass \n",
        "wrong_code": "#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    if ID .ID (LIT )lambda ==LIT :#COMMENT\n\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n    # Public API follows\n\ndef make(self, specification, options=None):\n    if entry is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29817
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID =!):\n    if ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef make_multiple(self, specifications, options=None):\n    \"\"\"\n        Take a list of specifications and make scripts from them,\n        :param specifications: A list of specifications.\n        :return: A list of all absolute pathnames written to,\n        \"\"\"\n    filenames = []\n    for specification in specifications:\n        filenames.extend(self.make(specification, options))\n    return filenames\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/site-packages/pip/_vendor/distlib/scripts.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29818
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    ID =[]\n    for ID in ID :\n        ID .ID (ID .ID (ID ,ID ))\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    LIT \n    ID =[]\n    for ID in ID :\n        ID .nonlocal (ID .ID (ID ,ID ))\n    return ID \n"
    },
    {
        "code": "\ndef assertEqual(self, obj1, obj2):\n    if obj1 != obj2:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29819
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=:\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    # The tests assume that line wrapping occurs at 80 columns, but this\n    # behaviour can be overridden by setting the COLUMNS environment\n    # variable.  To ensure that this assumption is true, unset COLUMNS.\n    env = test_support.EnvironmentVarGuard()\n    env.unset(\"COLUMNS\")\n    self.addCleanup(env.__exit__)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29820
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID ()\n    ID .ID (LIT )\n    ID .ID (ID .ID )\n",
        "wrong_code": "\nID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID ()\n    ID .ID (LIT )\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.temp_dir = tempfile.mkdtemp()\n    self.old_dir = os.getcwd()\n    os.chdir(self.temp_dir)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 29821
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID ()\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ID .ID ()\n    ID .ID =ID .ID ()\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef tearDown(self):\n    for root, dirs, files in os.walk(self.temp_dir, topdown=False):\n        for name in files:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29822
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID ,ID in ID .ID (ID .ID ,ID =LIT ):\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID ID ):\n    for ID ,ID ,ID in ID .ID (ID .ID ,ID =LIT ):\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    self.args = args\n    self.kwargs = kwargs\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29823
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID =ID ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    self.__dict__.update(kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29824
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID .ID .elif (ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29825
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (try ):\n    pass \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return vars(self) == vars(other)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 29826
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID )==ID (ID )\n",
        "wrong_code": "\ndef ID (except ID ,ID ):\n    return ID (ID )==ID (ID )\n"
    },
    {
        "code": "\ndef __ne__(self, other):\n    return not (self == other)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 29827
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return not (ID ==ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    is not (ID ==ID )\n"
    },
    {
        "code": "\ndef __init__(self, message, stdout=None, stderr=None, error_code=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29828
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\nlambda ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef parse_args(self, *args, **kwargs):\n    parse_args = super(ErrorRaisingArgumentParser, self).parse_args\n    return stderr_to_parser_error(parse_args, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29829
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID (ID ,ID ).ID \n    return ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =!=(ID ,ID ).ID \n    return ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef exit(self, *args, **kwargs):\n    exit = super(ErrorRaisingArgumentParser, self).exit\n    return stderr_to_parser_error(exit, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29830
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID (ID ,ID ).ID \n    return ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*await ID ,**ID ):\n    ID =ID (ID ,ID ).ID \n    return ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef error(self, *args, **kwargs):\n    error = super(ErrorRaisingArgumentParser, self).error\n    return stderr_to_parser_error(error, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29831
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID (ID ,ID ).ID \n    return ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID (ID ,ID ).ID \n    return ID (ID ,*ID ,**ID ):"
    },
    {
        "code": "\n# ---------------------------------------\n# functions for adding optional arguments\n# ---------------------------------------\ndef no_groups(parser, argument_signatures):\n    \"\"\"Add all arguments directly to the parser\"\"\"\n    for sig in argument_signatures:\n        parser.add_argument(*sig.args, **sig.kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 112,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29832
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    for ID in ID :\n        ID .ID (*ID .ID ,**ID .ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    for ID in ID :\n        ID .ID (*ID .ID ,**ID .ID )raise "
    },
    {
        "code": "\ndef one_group(parser, argument_signatures):\n    \"\"\"Add all arguments under a single group in the parser\"\"\"\n    group = parser.add_argument_group('foo')\n    for sig in argument_signatures:\n        group.add_argument(*sig.args, **sig.kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 93,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29833
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (LIT )\n    for ID in ID :\n        ID .ID (*ID .ID ,**ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (LIT )\n    for ID in ID :\n        ID .ID (*ID .ID nonlocal **ID .ID )\n"
    },
    {
        "code": "\ndef many_groups(parser, argument_signatures):\n    for i, sig in enumerate(argument_signatures):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29834
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ID in ID (ID ):\n        pass \n"
    },
    {
        "code": "\n        # --------------------------\n        # functions for parsing args\n        # --------------------------\ndef listargs(parser, args):\n    \"\"\"Parse the args by passing in a list\"\"\"\n    return parser.parse_args(args)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 80,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29835
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID \n"
    },
    {
        "code": "\ndef sysargs(parser, args):\n    try:\n        pass\n    finally:\n        sys.argv = old_sys_argv\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 29836
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    finally :\n        ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    finally :\n        ID .ID =ID lambda \n"
    },
    {
        "code": "\ndef wrapper(self, test_func=test_func):\n    test_func(self)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29837
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID (ID )\n",
        "wrong_code": "\ndef async ID (ID ,ID =ID ):\n    ID (ID )\n"
    },
    {
        "code": "\ndef _get_parser(self, tester):\n    return parser\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 29838
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID \nexcept "
    },
    {
        "code": "\ndef test_failures(self, tester):\n    for args_str in tester.failures:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 29839
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        +pass \n"
    },
    {
        "code": "\ndef test_successes(self, tester):\n    for args, expected_ns in tester.successes:\n        if isinstance(args, str):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 29840
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID :\n        if ID (ID ,ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID :\n        if ID (ID ,ID yield ):\n            pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    for path, text in file_texts:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "for",
            "id": 29841
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    None ID ,ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    for path, text in file_texts:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 29842
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID ID :\n        pass \n"
    },
    {
        "code": "\ndef convert_arg_line_to_args(self, arg_line):\n    for arg in arg_line.split():\n        if not arg.strip():\n            continue\n        yield arg\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 118,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29843
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if not ID .ID ():\n            continue \n        yield ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if not ID .ID ():\n            continue \n        yield ID \n        in "
    },
    {
        "code": "\ndef test_r(self):\n    type = argparse.FileType('r')\n    self.assertEqual(\"FileType('r')\", repr(type))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29844
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (LIT ,ID (ID ))\n",
        "wrong_code": "=def ID (ID ):\n    ID =ID .ID (LIT )\n    ID .ID (LIT ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_wb_1(self):\n    type = argparse.FileType('wb', 1)\n    self.assertEqual(\"FileType('wb', 1)\", repr(type))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29845
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .ID (LIT ,ID (ID ))\n",
        "wrong_code": "\n[ID (ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .ID (LIT ,ID (ID ))\n"
    },
    {
        "code": "\ndef __init__(self, name):\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29846
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =\n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    if other in self.seen:\n        pass\n    else:\n        pass\n    if not isinstance(text, str):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 29847
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID .ID :\n        pass \n    else :\n        pass \n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID in ID ).ID :\n        pass \n    else :\n        pass \n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    for file_name in ['foo', 'bar']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 29848
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID [LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "def setUp(self):\n    file.close()\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 29849
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID )from :\n    ID .ID ()\n"
    },
    {
        "code": "\ndef setUp(self):\n    for file_name in ['foo', 'bar']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 29850
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, name):\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 29851
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID )del :\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    if other not in self.seen:\n        if 'b' in other.mode:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29852
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID not in ID .ID :\n        if LIT in ID .ID :\n            pass \n",
        "wrong_code": "in \ndef ID (ID ,ID ):\n    if ID not in ID .ID :\n        if LIT in ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    super(TestFileTypeW, self).setUp()\n    self.create_readonly_file('readonly')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 29853
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID (LIT )\n    ="
    },
    {
        "code": "\ndef __init__(self, value):\n    self.value = value\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29854
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    .ID =ID \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return (type(self), self.value) == (type(other), other.value)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29855
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return (ID (ID ),ID .ID )==(ID (ID ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return (ID ID ),ID .ID )==(ID (ID ),ID .ID )\n"
    },
    {
        "code": "\ndef __init__(self, value):\n    self.value = value\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29856
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID \nID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return (type(self), self.value) == (type(other), other.value)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 29857
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return (ID (ID ),ID .ID )==(ID (ID ),ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return (ID (ID ),ID .ID )==(ID (ID (),ID .ID )\n"
    },
    {
        "code": "\ndef get_my_type(string):\n    return 'my_type{%s}' % string\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29858
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID \n",
        "wrong_code": "\nID (ID ):\n    return LIT %ID \n"
    },
    {
        "code": "\ndef test(self):\n\n    def get_my_type(string):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 29859
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (as ID ):\n\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __call__(self, parser, namespace, values, option_string=None):\n    setattr(namespace, self.dest, 'foo[%s]' % values)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 29860
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    ID (ID ,ID .ID ,LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    ID (ID ,ID .ID ,import LIT %ID )\n"
    },
    {
        "code": "\ndef test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29861
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef assertArgumentParserError(self, *args, **kwargs):\n    self.assertRaises(ArgumentParserError, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29862
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    .ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    super(TestAddSubparsers, self).setUp()\n    self.parser = self._get_parser()\n    self.command_help_parser = self._get_parser(subparser_help=True)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29863
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (,ID ).ID ()\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID (ID =LIT )\n"
    },
    {
        "code": "\ndef test_parse_args_failures(self):\n    # check some failure cases:\n    for args_str in ['', 'a', 'a a', '0.5 a', '0.5 1',\n                     '0.5 1 -y', '0.5 2 -w']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 90,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29864
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in [LIT ,LIT ,LIT ,LIT ,LIT ,\n    LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in [LIT ,LIT ,LIT ,LIT ,LIT ,\n    LIT ,LIT ]:\n        as \n"
    },
    {
        "code": "\ndef test_parse_args(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29865
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (raise ):\n    pass \n"
    },
    {
        "code": "\ndef test_parse_known_args(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29866
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_dest(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29867
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "continue def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_help(self):\n    self.assertEqual(self.parser.format_usage(),\n                     'usage: PROG [-h] [--foo] bar {1,2,3} ...\\n')\n    self.assertEqual(self.parser.format_help(), textwrap.dedent('''\\\n            usage: PROG [-h] [--foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo       foo help\n            '''))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 29868
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (),\n    LIT )\n    ID .ID (ID .ID .ID (),ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (),\n    LIT )\n    ID .ID (ID .ID .ID (),ID raise .ID (LIT ))\n"
    },
    {
        "code": "\ndef test_help_extra_prefix_chars(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29869
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "pass def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_help_alternate_prefix_chars(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 29870
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )del \n    pass \n"
    },
    {
        "code": "\ndef test_parser_command_help(self):\n    self.assertEqual(self.command_help_parser.format_usage(),\n                     'usage: PROG [-h] [--foo] bar {1,2,3} ...\\n')\n    self.assertEqual(self.command_help_parser.format_help(),\n                     textwrap.dedent('''\\\n            usage: PROG [-h] [--foo] bar {1,2,3} ...\n\n            main description\n\n            positional arguments:\n              bar         bar help\n              {1,2,3}     command help\n                1         1 help\n                2         2 help\n                3         3 help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              --foo       foo help\n            '''))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 29871
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (),\n    LIT )\n    ID .ID (ID .ID .ID (),\n    ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (),\n    LIT )\n    ID .ID (ID .ID .LIT ID (),\n    ID .ID (LIT ))\n"
    },
    {
        "code": "\ndef test_subparser_title_help(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29872
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _test_subparser_help(self, args_str, expected_help):\n    try:\n        pass\n    except ArgumentParserError:\n        if err.stdout != expected_help:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29873
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID .ID !=ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID else ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID .ID !=ID :\n            pass \n"
    },
    {
        "code": "\ndef test_subparser1_help(self):\n    self._test_subparser_help('5.0 1 -h', textwrap.dedent('''\\\n            usage: PROG bar 1 [-h] [-w W] {a,b,c}\n\n            1 description\n\n            positional arguments:\n              {a,b,c}     x help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -w W        w help\n            '''))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29874
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID finally LIT ))\n"
    },
    {
        "code": "\ndef test_subparser2_help(self):\n    self._test_subparser_help('5.0 2 -h', textwrap.dedent('''\\\n            usage: PROG bar 2 [-h] [-y {1,2,3}] [z [z ...]]\n\n            2 description\n\n            positional arguments:\n              z           z help\n\n            optional arguments:\n              -h, --help  show this help message and exit\n              -y {1,2,3}  y help\n            '''))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 29875
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID (LIT ))\n    if "
    },
    {
        "code": "\ndef test_nongroup_first(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29876
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID -ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_group_first(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29877
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (!=):\n    pass \n"
    },
    {
        "code": "\ndef test_interleaved_groups(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29878
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nfor     pass \n"
    },
    {
        "code": "\ndef assertArgumentParserError(self, *args, **kwargs):\n    self.assertRaises(ArgumentParserError, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29879
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef def (ID ,*ID ,**ID ):\n    ID .ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29880
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    /\n"
    },
    {
        "code": "\ndef test_single_parent(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29881
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_single_parent_mutex(self):\n    self._test_mutex_ab(self.ab_mutex_parent.parse_args)\n    parser = ErrorRaisingArgumentParser(parents=[self.ab_mutex_parent])\n    self._test_mutex_ab(parser.parse_args)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 75,
            "fix_type": "delete",
            "id": 29882
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID )\n    ID =ID (ID =[ID .ID ])\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID )\n    ID =ID (ID =[ID .ID ])\n    ID .yield ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_single_granparent_mutex(self):\n    parser = ErrorRaisingArgumentParser(parents=[parser])\n    self._test_mutex_ab(parser.parse_args)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29883
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID =[ID ])\n    ID .ID (ID .ID )\n",
        "wrong_code": "\nID (ID ):\n    ID =ID (ID =[ID ])\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef _test_mutex_ab(self, parse_args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29884
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_parents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 29885
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )if :\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_parents_mutex(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 29886
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID !):\n    pass \n"
    },
    {
        "code": "\ndef test_conflicting_parents(self):\n    self.assertRaises(\n        argparse.ArgumentError,\n        argparse.ArgumentParser,\n        parents=[self.w_parent, self.wxyz_parent])\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 29887
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID ,\n    ID .ID ,\n    ID =[ID .ID ,ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID ,\n    ID .ID ,\n    ID =[ID .ID ,ID .ID ])in \n"
    },
    {
        "code": "\ndef test_conflicting_parents_mutex(self):\n    self.assertRaises(\n        argparse.ArgumentError,\n        argparse.ArgumentParser,\n        parents=[self.abcd_parent, self.ab_mutex_parent])\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 78,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 29888
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID ,\n    ID .ID ,\n    ID =[ID .ID ,ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID ,\n    ID .ID ,\n    ID =[ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_same_argument_name_parents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 29889
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_subparser_parents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 29890
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (LIT ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_subparser_parents_mutex(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29891
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    async \n"
    },
    {
        "code": "\ndef test_parent_help(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 29892
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )while :\n    pass \n"
    },
    {
        "code": "\ndef test_groups_parents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 29893
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef import ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_invalid_add_argument_group(self):\n    parser = ErrorRaisingArgumentParser()\n    raises = self.assertRaises\n    raises(TypeError, parser.add_mutually_exclusive_group, title='foo')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29894
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID =ID .ID \n    ID (ID ,ID .ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):(    ID =ID ()\n    ID =ID .ID \n    ID (ID ,ID .ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_invalid_add_argument(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 29895
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )None :\n    pass \n"
    },
    {
        "code": "\ndef test_help(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29896
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_failures_when_not_required(self):\n    for args_string in self.failures:\n        self.assertRaises(error, parse_args, args_string.split())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 29897
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        ID .ID (ID ,ID ,ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in :ID .ID :\n        ID .ID (ID ,ID ,ID .ID ())\n"
    },
    {
        "code": "\ndef test_failures_when_required(self):\n    for args_string in self.failures + ['']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 29898
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID +[LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):    for ID in ID .ID +[LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef test_successes_when_not_required(self):\n    for args_string, expected_ns in successes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29899
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID ID ):\n    for ID ,ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef test_successes_when_required(self):\n    for args_string, expected_ns in self.successes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 29900
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID :/\n        pass \n"
    },
    {
        "code": "\ndef test_usage_when_not_required(self):\n    format_usage = self.get_parser(required=False).format_usage\n    expected_usage = self.usage_when_not_required\n    self.assertEqual(format_usage(), textwrap.dedent(expected_usage))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 29901
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID =LIT ).ID \n    ID =ID .ID \n    ID .ID (ID (),ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (ID =LIT ).ID \n    ID =ID .ID \n    ID ]ID (ID (),ID .ID (ID ))\n"
    },
    {
        "code": "\ndef test_usage_when_required(self):\n    format_usage = self.get_parser(required=True).format_usage\n    expected_usage = self.usage_when_required\n    self.assertEqual(format_usage(), textwrap.dedent(expected_usage))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 29902
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID =LIT ).ID \n    ID =ID .ID \n    ID .ID (ID (),ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .as ID (ID =LIT ).ID \n    ID =ID .ID \n    ID .ID (ID (),ID .ID (ID ))\n"
    },
    {
        "code": "\ndef test_help_when_not_required(self):\n    help = self.usage_when_not_required + self.help\n    self.assertEqual(format_help(), textwrap.dedent(help))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 29903
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID +ID .ID \n    ID .ID (ID (),ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID +ID .ID \n    ID .ID (ID (),ID .ID (ID ))async \n"
    },
    {
        "code": "\ndef test_help_when_required(self):\n    help = self.usage_when_required + self.help\n    self.assertEqual(format_help(), textwrap.dedent(help))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 29904
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID +ID .ID \n    ID .ID (ID (),ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID +ID .ID \n    ID .ID (ID (),ID .ID (ID ]))\n"
    },
    {
        "code": "\ndef get_parser(self, required=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 29905
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\nif def ID (ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_parser(self, required=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29906
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    pass with "
    },
    {
        "code": "\ndef get_parser(self, required):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29907
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    )\n"
    },
    {
        "code": "\ndef get_parser(self, required):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29908
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": ",\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_parser(self, required):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29909
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):LIT     pass \n"
    },
    {
        "code": "\ndef get_parser(self, required):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29910
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "except def ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_parser(self, required=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29911
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (or ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_parser(self, required):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29912
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    pass \n"
    },
    {
        "code": "\ndef get_parser(self, required=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 29913
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\nelif     pass \n"
    },
    {
        "code": "\ndef test_set_defaults_no_args(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29914
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_set_defaults_with_args(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29915
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID in (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_set_defaults_subparsers(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 29916
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nassert     pass \n"
    },
    {
        "code": "\ndef test_set_defaults_parents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29917
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (/):\n    pass \n"
    },
    {
        "code": "\ndef test_set_defaults_on_parent_and_subparser(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29918
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "]\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_set_defaults_same_as_add_argument(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 29919
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nnonlocal def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_set_defaults_same_as_add_argument_group(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29920
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_default(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29921
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_empty(self):\n    self.assertEqual('' not in ns, True)\n    self.assertEqual('x' in ns, False)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 29922
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT not in ID ,LIT )\n    ID .ID (LIT in ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT not async in ID ,LIT )\n    ID .ID (LIT in ID ,LIT )\n"
    },
    {
        "code": "\ndef test_non_empty(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29923
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_wrapper(self, test_func=test_func):\n    test_func(self)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29924
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =):\n    ID (ID )\n"
    },
    {
        "code": "\ndef _test(self, tester, parser_text):\n    if expected_text != parser_text:\n        for char1, char2 in zip(expected_text, parser_text):\n            if char1 != char2:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 29925
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=ID :\n        for ID ,ID in ID (ID ,ID ):\n            if ID !=ID :\n                pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID !=ID :\n        for ID import ,ID in ID (ID ,ID ):\n            if ID !=ID :\n                pass \n"
    },
    {
        "code": "\ndef test_format(self, tester):\n    parser = self._get_parser(tester)\n    format = getattr(parser, 'format_%s' % self.func_suffix)\n    self._test(tester, format())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 29926
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID )\n    ID =ID (ID ,LIT %ID .ID )\n    ID .ID (ID ,ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID .ID (ID )\n    ID =ID (ID ,LIT %ID .ID )\n    ID .ID (ID ,ID ())\n"
    },
    {
        "code": "\ndef test_print(self, tester):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29927
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    finally :\n        pass \nwhile "
    },
    {
        "code": "\ndef test_print_file(self, tester):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 29928
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,from ID ):\n    pass \n"
    },
    {
        "code": "def setUp(self):\n    env = test_support.EnvironmentVarGuard()\n    env.set(\"COLUMNS\", '15')\n    self.addCleanup(env.__exit__)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29929
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID ()\n    ID .ID (LIT ,LIT )\n    ID .ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID ()\n    ID .ID (LIT ,LIT )\n    ID .ID ID .ID )\n"
    },
    {
        "code": "\ndef assertTypeError(self, *args, **kwargs):\n    parser = argparse.ArgumentParser()\n    self.assertRaises(TypeError, parser.add_argument,\n                      *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 29930
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID ,\n    *ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID .ID ()\n    ID .assert ID (ID ,ID .ID ,\n    *ID ,**ID )\n"
    },
    {
        "code": "\ndef assertValueError(self, *args, **kwargs):\n    parser = argparse.ArgumentParser()\n    self.assertRaises(ValueError, parser.add_argument,\n                      *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 74,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29931
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID ,\n    *ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID =ID .ID ()\n    ID .ID (ID ,ID .ID ,\n    *,**ID )\n"
    },
    {
        "code": "\ndef test_invalid_keyword_arguments(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29932
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID yield ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_missing_destination(self):\n    self.assertTypeError()\n    for action in ['append', 'store']:\n        self.assertTypeError(action=action)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29933
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    for ID in [LIT ,LIT ]:\n        ID .ID (ID =ID )\n",
        "wrong_code": "\ndef lambda (ID ):\n    ID .ID ()\n    for ID in [LIT ,LIT ]:\n        ID .ID (ID =ID )\n"
    },
    {
        "code": "\ndef test_invalid_option_strings(self):\n    self.assertValueError('--')\n    self.assertValueError('---')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29934
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (=)\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_invalid_type(self):\n    self.assertValueError('--foo', type='int')\n    self.assertValueError('--foo', type=(int, float))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 29935
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID =LIT )\n    ID .ID (LIT ,ID =(ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ,(LIT ,ID =LIT )\n    ID .ID (LIT ,ID =(ID ,ID ))\n"
    },
    {
        "code": "\ndef test_invalid_action(self):\n    try:\n        pass\n    except ValueError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 29936
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    await "
    },
    {
        "code": "\ndef test_multiple_dest(self):\n    try:\n        pass\n    except ValueError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "except",
            "id": 29937
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    /ID :\n        pass \n"
    },
    {
        "code": "\ndef test_no_argument_no_const_actions(self):\n    # options with zero arguments\n    for action in ['store_true', 'store_false', 'count']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29938
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    for ID in [LIT ,LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\nNone ID (ID ):\n#COMMENT\n\n    for ID in [LIT ,LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef test_more_than_one_argument_actions(self):\n    for action in ['store', 'append']:\n\n        # const is disallowed with non-optional arguments\n        for nargs in [1, '*', '+']:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 111,
            "fix_type": "delete",
            "id": 29939
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n\n    #COMMENT\n\n        for ID in [LIT ,LIT ,LIT ]:\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n\n    #COMMENT\n\n        for ID in [LIT ,LIT ,LIT ]:\n            pass \nasync "
    },
    {
        "code": "\ndef test_required_const_actions(self):\n    for action in ['store_const', 'append_const']:\n\n        # nargs is always disallowed\n        self.assertTypeError('-x', nargs='+', action=action)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 29940
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n\n    #COMMENT\n\n        ID .ID (LIT ,ID =LIT ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in [LIT ,LIT ]:\n\n    #COMMENT\n\n        ID .ID (LIT elif ID =LIT ,ID =ID )\n"
    },
    {
        "code": "\ndef test_parsers_action_missing_params(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29941
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "elif def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_required_positional(self):\n    self.assertTypeError('foo', required=True)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29942
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID =LIT )\n",
        "wrong_code": "for def ID (ID ):\n    ID .ID (LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef __call__(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 29943
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID *,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_dest(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29944
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID )ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_misc(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29945
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_bad_type(self):\n    self.assertRaises(ValueError, argparse.ArgumentParser,\n                      conflict_handler='foo')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29946
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID .ID ,\n    ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,.ID ,\n    ID =LIT )\n"
    },
    {
        "code": "\ndef test_conflict_error(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29947
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID -:\n    pass \n"
    },
    {
        "code": "\ndef test_resolve_error(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29948
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID def (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _get_error(self, func, *args, **kwargs):\n    try:\n        pass\n    except ArgumentParserError:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 94,
            "fix_type": "delete",
            "id": 29949
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ,**ID ):\n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ,**ID ):\n    try :\n        pass \n    except ID :\n        pass \n    else :global \n        pass \n"
    },
    {
        "code": "\ndef assertPrintHelpExit(self, parser, args_str):\n    self.assertEqual(\n        parser.format_help(),\n        self._get_error(parser.parse_args, args_str.split()).stdout)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 29950
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (\n    ID .ID (),\n    ID .ID (ID .ID ,ID .ID ()).ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (\n    ID .ID (),\n    ID .ID (ID .,ID .ID ()).ID )\n"
    },
    {
        "code": "\ndef assertPrintVersionExit(self, parser, args_str):\n    self.assertEqual(\n        parser.format_version(),\n        self._get_error(parser.parse_args, args_str.split()).stderr)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "",
            "id": 29951
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (\n    ID .ID (),\n    ID .ID (ID .ID ,ID .ID ()).ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (\n    ID .ID (),\n    ID .ID (ID .ID ,ID .ID ()).ID )\nas "
    },
    {
        "code": "\ndef assertArgumentParserError(self, parser, *args):\n    self.assertRaises(ArgumentParserError, parser.parse_args, args)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 29952
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID (ID ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID (ID ID .ID ,ID )\n"
    },
    {
        "code": "\ndef test_version(self):\n    self.assertPrintVersionExit(parser, '--version')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29953
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT \n"
    },
    {
        "code": "\ndef test_version_format(self):\n    msg = self._get_error(parser.parse_args, ['-v']).stderr\n    self.assertEqual('PPP 3.5\\n', msg)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 29954
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID .ID ,[LIT ]).ID \n    ID .ID (LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .)ID (ID .ID ,[LIT ]).ID \n    ID .ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef test_version_no_help(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29955
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef raise (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_version_action(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29956
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):with     pass \n"
    },
    {
        "code": "\ndef test_no_help(self):\n    self.assertArgumentParserError(parser, '--version')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 29957
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_alternate_help_version(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 29958
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass return \n"
    },
    {
        "code": "\ndef test_help_version_extra_arguments(self):\n    for prefix in valid_prefixes:\n        for suffix in valid_suffixes:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 29959
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID :\n        for ID None ID :\n            pass \n"
    },
    {
        "code": "\ndef assertStringEqual(self, obj, result_string):\n    for func in [str, repr]:\n        self.assertEqual(func(obj), result_string)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29960
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in [ID ,ID ]:\n        ID .ID (ID (ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ,:,ID ):\n    for ID in [ID ,ID ]:\n        ID .ID (ID (ID ),ID )\n"
    },
    {
        "code": "\ndef test_optional(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29961
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    as \n"
    },
    {
        "code": "\ndef test_argument(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29962
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "pass def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_namespace(self):\n    ns = argparse.Namespace(foo=42, bar='spam')\n    string = \"Namespace(bar='spam', foo=42)\"\n    self.assertStringEqual(ns, string)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29963
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID =LIT ,ID =LIT )\n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID ID ):\n    ID =ID .ID (ID =LIT ,ID =LIT )\n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_constructor(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29964
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    None pass \n"
    },
    {
        "code": "\ndef test_equality(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 29965
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    def "
    },
    {
        "code": "\ndef test_equality_returns_notimplemeted(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29966
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID while :\n    pass \n"
    },
    {
        "code": "\ndef test_argparse_module_encoding(self):\n    self._test_module_encoding(argparse.__file__)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29967
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_test_argparse_module_encoding(self):\n    self._test_module_encoding(__file__)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29968
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "and \ndef ID (ID ):\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_argument_error(self):\n    msg = \"my error here\"\n    error = argparse.ArgumentError(None, msg)\n    self.assertEqual(str(error), msg)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29969
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =ID .ID (ID ,ID )\n    ID .ID (ID (ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =*\n    ID =ID .ID (ID ,ID )\n    ID .ID (ID (ID ),ID )\n"
    },
    {
        "code": "\ndef spam(string):\n    raise argparse.ArgumentTypeError('spam!')\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29970
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):with \n    raise ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_argument_type_error(self):\n\n    def spam(string):\n        pass\n    try:\n        pass\n    except ArgumentParserError:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29971
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n    try :\n        pass \n    except ID :[pass \n    else :\n        pass \n"
    },
    {
        "code": "def spam(string_to_convert):\n    self.assertEqual(string_to_convert, 'spam!')\n    return 'foo_converted'\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 29972
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \nor "
    },
    {
        "code": "\ndef test_type_function_call_only_once(self):\n    def spam(string_to_convert):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 29973
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        nonlocal \n"
    },
    {
        "code": "def spam(int_to_convert):\n    self.assertEqual(int_to_convert, 0)\n    return 'foo_converted'\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 29974
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID nonlocal ,LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef test_type_function_call_with_non_string_default(self):\n    def spam(int_to_convert):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29975
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID !:\n        pass \n"
    },
    {
        "code": "def spam(int_to_convert):\n    return 'foo_converted'\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 29976
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "==def ID (ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef test_type_function_call_with_string_default(self):\n    def spam(int_to_convert):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 29977
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "with def ID (ID ):\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def extend(str_to_convert):\n    return str_to_convert + '*'\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29978
        },
        "correct_code": "def ID (ID ):\n    return ID +LIT \n",
        "wrong_code": "def ID (-ID ):\n    return ID +LIT \n"
    },
    {
        "code": "\ndef test_no_double_type_conversion_of_default(self):\n    def extend(str_to_convert):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 29979
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef while (ID ):\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_issue_15906(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29980
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID /ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_arguments_tuple(self):\n    parser = argparse.ArgumentParser()\n    parser.parse_args(())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 29981
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (())\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ..ID ()\n    ID .ID (())\n"
    },
    {
        "code": "\ndef test_arguments_list(self):\n    parser = argparse.ArgumentParser()\n    parser.parse_args([])\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 29982
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID ([])\n",
        "wrong_code": "\n!ID (ID ):\n    ID =ID .ID ()\n    ID .ID ([])\n"
    },
    {
        "code": "\ndef test_arguments_tuple_positional(self):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('x')\n    parser.parse_args(('x',))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 29983
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (LIT )\n    ID .ID ((LIT ,))\n",
        "wrong_code": "\nID (ID ):\n    ID =ID .ID ()\n    ID .ID (LIT )\n    ID .ID ((LIT ,))\n"
    },
    {
        "code": "\ndef test_arguments_list_positional(self):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('x')\n    parser.parse_args(['x'])\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29984
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (LIT )\n    ID .ID ([LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    ID .ID (LIT )\n    ID .ID ([LIT ])\n"
    },
    {
        "code": "\ndef test_optionals(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 29985
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_mixed(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 29986
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID import (ID ):\n    pass \n"
    },
    {
        "code": "\ndef do_test_no_exception(self, nargs, metavar):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--foo\", nargs=nargs, metavar=metavar)\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29987
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID ()\n    ID .ID (LIT ,ID =ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (\n    ID .ID (LIT ,ID =ID ,ID =ID )\n"
    },
    {
        "code": "\n# Unit tests for different values of metavar when nargs=None\n\ndef test_nargs_None_metavar_string(self):\n    self.do_test_no_exception(nargs=None, metavar=\"1\")\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 29988
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =LIT )\n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    break ID .ID (ID =ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_nargs_None_metavar_length0(self):\n    self.do_test_exception(nargs=None, metavar=tuple())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 29989
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =ID ())\n",
        "wrong_code": "\ndef ID (ID try :\n    ID .ID (ID =ID ,ID =ID ())\n"
    },
    {
        "code": "\ndef test_nargs_None_metavar_length1(self):\n    self.do_test_no_exception(nargs=None, metavar=(\"1\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 29990
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =(LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =LIT ))\n"
    },
    {
        "code": "\ndef test_nargs_None_metavar_length2(self):\n    self.do_test_exception(nargs=None, metavar=(\"1\", \"2\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 29991
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =(,LIT ))\n"
    },
    {
        "code": "\ndef test_nargs_None_metavar_length3(self):\n    self.do_test_exception(nargs=None, metavar=(\"1\", \"2\", \"3\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 29992
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =ID ,ID =(LIT ,LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):class \n    ID .ID (ID =ID ,ID =(LIT ,LIT ,LIT ))\n"
    },
    {
        "code": "\n# Unit tests for different values of metavar when nargs=?\n\ndef test_nargs_optional_metavar_string(self):\n    self.do_test_no_exception(nargs=\"?\", metavar=\"1\")\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 29993
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID is =LIT )\n"
    },
    {
        "code": "\ndef test_nargs_optional_metavar_length0(self):\n    self.do_test_exception(nargs=\"?\", metavar=tuple())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29994
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =elif ,ID =ID ())\n"
    },
    {
        "code": "\ndef test_nargs_optional_metavar_length1(self):\n    self.do_test_no_exception(nargs=\"?\", metavar=(\"1\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 29995
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =(LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =,(LIT ))\n"
    },
    {
        "code": "\ndef test_nargs_optional_metavar_length2(self):\n    self.do_test_exception(nargs=\"?\", metavar=(\"1\", \"2\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 29996
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =(LIT ,elif ))\n"
    },
    {
        "code": "\ndef test_nargs_optional_metavar_length3(self):\n    self.do_test_exception(nargs=\"?\", metavar=(\"1\", \"2\", \"3\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 29997
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =(LIT ,LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    global ID .ID (ID =LIT ,ID =(LIT ,LIT ,LIT ))\n"
    },
    {
        "code": "\n# Unit tests for different values of metavar when nargs=*\n\ndef test_nargs_zeroormore_metavar_string(self):\n    self.do_test_no_exception(nargs=\"*\", metavar=\"1\")\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 29998
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =)\n"
    },
    {
        "code": "\ndef test_nargs_zeroormore_metavar_length0(self):\n    self.do_test_exception(nargs=\"*\", metavar=tuple())\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 29999
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =ID ()\n"
    },
    {
        "code": "\ndef test_nargs_zeroormore_metavar_length1(self):\n    self.do_test_no_exception(nargs=\"*\", metavar=(\"1\"))\n",
        "metadata": {
            "file": "py150_files/data/francelabs/datafari/windows/python/Lib/test/test_argparse.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 30000
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =(LIT ))\n",
        "wrong_code": "\ndef ID (try ID ):\n    ID .ID (ID =LIT ,ID =(LIT ))\n"
    }
]