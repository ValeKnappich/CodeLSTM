[
    {
        "code": "\n#-------------------------------------------------------------------------------\ndef mm_set_matrix_size(matrix_size):\n    channel.write(matrix_size)\n        \n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/benchmark/matrix-mult-memory/cthread_mm.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11001
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    ID .ID (ID )\n\n",
        "wrong_code": "\n#COMMENT\n\ndef (ID ):\n    ID .ID (ID )\n\n"
    },
    {
        "code": "#-------------------------------------------------------------------------------\ndef mm_comp_column(matrix_size, rest_read_size):\n\n    while rest_read_size > 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/benchmark/matrix-mult-memory/cthread_mm.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 11002
        },
        "correct_code": "#COMMENT\n\ndef ID (ID ,ID ):\n\n    while ID >LIT :\n        pass \n",
        "wrong_code": "#COMMENT\n\ndef ID (ID ,ID ):\n\n    while ID >LIT :/\n        pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------------\ndef mm_computation(matrix_size):\n    for i in range(matrix_size):\n        pass\n\n    for i in range(matrix_size):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/benchmark/matrix-mult-memory/cthread_mm.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11003
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    for ID in ID (ID ):\n        pass \n\n    for ID in ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID ID ):\n    for ID in ID (ID ):\n        pass \n\n    for ID in ID (ID ):\n        pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------------\ndef mm_main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/benchmark/matrix-mult-memory/cthread_mm.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 11004
        },
        "correct_code": "\n#COMMENT\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n#COMMENT\n\ncontinue def ID ():\n    pass \n"
    },
    {
        "code": "\ndef sequential_write():\n    if dma_size == 0 or data_size == 0: return 0\n\n    while write_size > 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/microbench/sequential_write/cthread_sequential_write.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 11005
        },
        "correct_code": "\ndef ID ():\n    if ID ==LIT or ID ==LIT :return LIT \n\n    while ID >LIT :\n        pass \n",
        "wrong_code": "\ndef ID ():\n    if ID ==LIT or ID ==LIT :raise return LIT \n\n    while ID >LIT :\n        pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------------\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/PyCoRAM/examples/microbench/sequential_write/cthread_sequential_write.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 11006
        },
        "correct_code": "\n#COMMENT\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID ():\n\n"
    },
    {
        "code": "\ndef showVersion():\n    print(INFO)\n    print(VERSION)\n    print(USAGE)\n    sys.exit()\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/examples/example_lexer.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 11007
        },
        "correct_code": "\ndef ID ():\n    ID (ID )\n    ID (ID )\n    ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID ():\n    ID (ID )\n    ID (ID )\n    ID (ID )\n    ID .ID ()\n    not "
    },
    {
        "code": "\ndef replaceIdentifiers(node, ids):\n    v = IdentifierReplace(ids)\n    return v.visit(node)\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/pyverilog/utils/identifierreplace.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11008
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID )\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ID ):\n    ID =ID (ID )\n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef children_items(node):\n    for c in children:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/pyverilog/utils/identifierreplace.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 11009
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\nasync     for ID in ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, ids):\n    self.ids = ids\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/pyverilog/utils/identifierreplace.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11010
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID )[\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef visit(self, node):\n    if ret is None: return node\n    return ret\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/pyverilog/utils/identifierreplace.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11011
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is ID :return ID \n    return ID \n",
        "wrong_code": "\ntry ID (ID ,ID ):\n    if ID is ID :return ID \n    return ID \n"
    },
    {
        "code": "\ndef visit_Identifier(self, node):\n    if node.name in self.ids:\n        return vast.Identifier(self.ids[node.name])\n    return node\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/pyverilog/utils/identifierreplace.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11012
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID in ID .ID :\n        return ID .ID (ID .ID [ID .ID ])\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .in ID .ID :\n        return ID .ID (ID .ID [ID .ID ])\n    return ID \n"
    },
    {
        "code": "\ndef test():\n    for tk in sorted(c_analyzer.resolved_terms.keys(), key=lambda x:str(x)):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/Pyverilog/tests/dataflow_test/test_dat_function.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 11013
        },
        "correct_code": "\ndef ID ():\n    for ID in ID (ID .ID .ID (),ID =lambda ID :ID (ID )):\n        pass \n",
        "wrong_code": "\ndef ID ():\n    for ID in ID (ID .ID .ID (),ID for =lambda ID :ID (ID )):\n        pass \n"
    },
    {
        "code": "\ndef mkMain():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/examples/dataflow_madd_acc/dataflow_madd_acc.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11014
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ()class \n    pass \n"
    },
    {
        "code": "\n\ndef receive(name, data, valid, ready, waitnum=10):\n    for i in range(waitnum):\n        pass\n        \n\n    \n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/examples/dataflow_madd_acc/dataflow_madd_acc.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11015
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID ,ID =LIT ):\n    for ID in ID (ID ):\n        pass \n\n\n\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ,ID ,\n=LIT ):\n    for ID in ID (ID ):\n        pass \n\n\n\n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/examples/sort/test_sort.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 11016
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ()del :\n    pass \n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/core/generate_/variable/test_generate_variable.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11017
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\nID ():\n    pass \n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/dataflow_/add/test_dataflow_add.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11018
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass \nfrom "
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/dataflow_/graph_add/test_dataflow_graph_add.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11019
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass \nlambda "
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/dataflow_/mux/test_dataflow_mux.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11020
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "*\ndef ID ():\n    pass \n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/fsm_/goto_from/test_fsm_goto_from.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11021
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():/    pass \n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/pipeline_/multi_output/test_pipeline_multi_output.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11022
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "assert \ndef ID ():\n    pass \n"
    },
    {
        "code": "\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/extension/seq_/delayed/test_seq_delayed.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11023
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID (def :\n    pass \n"
    },
    {
        "code": "\ndef mkLed():\n    filename = os.path.dirname(os.path.abspath(__file__)) + '/led.v'\n    stubs = from_verilog.read_verilog_stubmodule(filename)\n    m = stubs['blinkled']\n    return m\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/verilog/read_verilog_/stub_module/read_verilog_stub_module.py",
            "fix_location": 74,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11024
        },
        "correct_code": "\ndef ID ():\n    ID =ID .ID .ID (ID .ID .ID (ID ))+LIT \n    ID =ID .ID (ID )\n    ID =ID [LIT ]\n    return ID \n",
        "wrong_code": "\ndef ID ():\n    ID =ID .ID .ID (ID .ID .ID (ID ))+LIT \n    ID =ID .ID (ID \n    ID =ID [LIT ]\n    return ID \n"
    },
    {
        "code": "\ndef mkTop():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyHDI/veriloggen/tests/verilog/read_verilog_/stub_module/read_verilog_stub_module.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11025
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "in def ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef plot_bar(values, n):\n    if not gtotal:\n        if n == 0:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/bench/plot-bar.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 11026
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID :\n        if ID ==LIT :\n            pass \n",
        "wrong_code": "\n\ndef with ID (ID ,ID ):\n    if not ID :\n        if ID ==LIT :\n            pass \n"
    },
    {
        "code": "\ndef run(self):\n\n    for ext in self.extensions:\n        if (hasattr(ext, 'include_dirs') and\n                numpy_incl not in ext.include_dirs):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 11027
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID .ID :\n        if (ID (ID ,LIT )and \n        ID not in ID .ID ):\n            pass \n",
        "wrong_code": "\ndef ID (continue ID ):\n\n    for ID in ID .ID :\n        if (ID (ID ,LIT )and \n        ID not in ID .ID ):\n            pass \n"
    },
    {
        "code": "\n\n# Some functions for showing errors and warnings.\ndef _print_admonition(kind, head, body):\n    for line in tw.wrap(body):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 11028
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID (ID ):\n        not pass \n"
    },
    {
        "code": "\n\ndef exit_with_error(head, body=''):\n    _print_admonition('error', head, body)\n    sys.exit(1)\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11029
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    ID (LIT ,ID ,ID )\n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ):\n    ID (LIT ,ID ID )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef print_warning(head, body=''):\n    _print_admonition('warning', head, body)\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 11030
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    ID (LIT ,ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ==,ID =LIT ):\n    ID (LIT ,ID ,ID )\n"
    },
    {
        "code": "\n\ndef add_from_path(envname, dirs):\n    try:\n        dirs.extend(os.environ[envname].split(os.pathsep))\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11031
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    try :\n        ID .ID (ID .ID [ID ].ID (ID .ID ))\n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef /(ID ,ID ):\n    try :\n        ID .ID (ID .ID [ID ].ID (ID .ID ))\n    except ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, name, tag, header_name, library_name,\n             target_function=None):\n    self.target_function = target_function\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11032
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,\nID =ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (,ID ,ID ,ID ,ID ,\nID =ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef find_header_path(self, locations=default_header_dirs):\n    return _find_file_path(self.header_name, locations, suffixes=['.h'])\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 11033
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID (ID .ID ,ID ,ID =[LIT ])\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return ID (ID .ID ,if ID ,ID =[LIT ])\n"
    },
    {
        "code": "\ndef find_library_path(self, locations=default_library_dirs):\n    return _find_file_path(\n        self.library_name, locations,\n        self._library_prefixes, self._library_suffixes)\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11034
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return ID (\n    ID .ID ,ID ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return ID (\n    ID .ID ,ID ,\n    ID .ID ,ID .ID )None "
    },
    {
        "code": "\ndef _pkg_config(self, flags):\n    try:\n        pass\n\n    # subprocess.CalledProcessError is only available in Python >= 2.7\n    # except (OSError, subprocess.CalledProcessError):\n    except Exception:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 88,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11035
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n\n        #COMMENT\n\n        #COMMENT\n\n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n\n        #COMMENT\n\n        #COMMENT\n\n        ID except ID :\n        pass \n        else :\n        pass \n    "
    },
    {
        "code": "\ndef find_runtime_path(self, locations=default_runtime_dirs):\n    # An explicit path can not be provided for runtime libraries.\n    # (The argument is accepted for compatibility with previous methods.)\n    return _find_file_path(\n        self.runtime_name, default_runtime_dirs,\n        self._runtime_prefixes, self._runtime_suffixes)\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 11036
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID (\n    ID .ID ,ID ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n#COMMENT\n\n    else ID (\n    ID .ID ,ID ,\n    ID .ID ,ID .ID )\n"
    },
    {
        "code": "\n\ndef get_cython_extfiles(extnames):\n\n    for extname in extnames:\n\n        if not exists(extcfile) or newer(extpfile, extcfile):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 11037
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    for ID in ID :\n\n        if not ID (ID )or ID (ID ,ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n    for ID ID :\n\n        if not ID (ID )or ID (ID ,ID ):\n            pass \n"
    },
    {
        "code": "\n\n# Having the Python version included in the package name makes managing a\n# system with multiple versions of Python much easier.\n\ndef find_name(base='tables'):\n    if '--name-with-python-version' in sys.argv:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/setup.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11038
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID =LIT ):\n    if LIT in ID .ID :\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID =LIT ):\n    if LIT in ID .ID :\n        pass \ndef "
    },
    {
        "code": "\ndef test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11039
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID not ID ):\n    pass \n"
    },
    {
        "code": "\ndef test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 11040
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (try ID ):\n    pass \n"
    },
    {
        "code": "\ndef test(self):\n\n    for row in tbl.iterrows():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 11041
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (global ID ):\n\n    for ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "\ndef test(self):\n    # Reopen in 'a'ppend mode\n    try:\n        pass\n    except IOError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11042
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID :\n#COMMENT\n\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11043
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID not ID ):\n    pass \n"
    },
    {
        "code": "\ndef test(self):\n    self.assertEqual(repr(arr.filters), filters)\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 11044
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID (ID .ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID as (ID (ID .ID ),ID )\n"
    },
    {
        "code": "\ndef test_unicode(self):\n    array = self.h5file.get_node(six.text_type('/'), six.text_type('a'))\n    self.assertEqual(array.shape, (3, 1))\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11045
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID .ID (LIT ),ID .ID (LIT ))\n    ID .ID (ID .ID ,(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):)    ID =ID .ID .ID (ID .ID (LIT ),ID .ID (LIT ))\n    ID .ID (ID .ID ,(LIT ,LIT ))\n"
    },
    {
        "code": "\n# in Python 3 this will be the same as the test above\ndef test_string(self):\n    array = self.h5file.get_node('/', 'a')\n    self.assertEqual(array.shape, (3, 1))\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 11046
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    ID =ID .ID .ID (LIT ,LIT )\n    ID .ID (ID .ID ,(LIT ,LIT ))\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID assert ):\n    ID =ID .ID .ID (LIT ,LIT )\n    ID .ID (ID .ID ,(LIT ,LIT ))\n"
    },
    {
        "code": "\ndef test_numpy_str(self):\n    array = self.h5file.get_node(numpy.str_('/'), numpy.str_('a'))\n    self.assertEqual(array.shape, (3, 1))\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11047
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (ID .ID (LIT ),ID .ID (LIT ))\n    ID .ID (ID .ID ,(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ..ID (ID .ID (LIT ),ID .ID (LIT ))\n    ID .ID (ID .ID ,(LIT ,LIT ))\n"
    },
    {
        "code": "\ndef test_node_var(self):\n    array = self.h5file.get_node('/ANN/my_arr')\n    self.assertEqual(array.shape, (1, 3))\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11048
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,(LIT ,LIT !=)\n"
    },
    {
        "code": "\ndef test_ref_utf_str(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11049
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "if \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_var(self):\n    array = self.h5file.get_node('/var')\n    self.assertEqual(array.shape, (3, 1))\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 11050
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,(and LIT ,LIT ))\n"
    },
    {
        "code": "\ndef test_ref_str(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11051
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (with ):\n    pass \n"
    },
    {
        "code": "\ndef test_double_ref(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11052
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass is "
    },
    {
        "code": "\n\ndef suite():\n\n    for i in range(niter):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PyTables/PyTables/tables/tests/test_hdf5compat.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 11053
        },
        "correct_code": "\n\ndef ID ():\n\n    for ID in ID (ID ):\n        pass \n",
        "wrong_code": "\n\nfor def ID ():\n\n    for ID in ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, cache=False, *args, **kwargs):\n    logging.Handler.__init__(self, *args, **kwargs)\n    self.cache = cache\n    self.cached_stream = None\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/pylons/log.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11054
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,*ID ,**ID ):\n    ID .ID .ID (ID ,*ID ,**ID )\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,*ID ,**ID ):\n    ID .ID .(ID ,*ID ,**ID )\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get_wsgierrors(self):\n    if not self.cache:\n        pass\n    elif not self.cached_stream:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/pylons/log.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11055
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n    elif not ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not .ID :\n        pass \n    elif not ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef simple_app(environ, start_response):\n    start_response('200 OK', [('Content-type', 'text/plain')])\n    return ['Hello world!']\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 11056
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (LIT ,[(LIT ,LIT )])\n    return [LIT ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID (LIT ,[(LIT ,LIT )])\n    return [LIT .]\n"
    },
    {
        "code": "\ndef simple_exception_app(environ, start_response):\n    if environ['PATH_INFO'].startswith('/error/document'):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 11057
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ].ID (LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [LIT ].ID (LIT ):\n        pass \n    else :\n    is pass \n"
    },
    {
        "code": "\ndef test_plain_wrap():\n    from pylons.middleware import StatusCodeRedirect\n    app = TestApp(StatusCodeRedirect(simple_app))\n    res = app.get('/')\n    assert res.status_int == 200\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11058
        },
        "correct_code": "\ndef ID ():\n    from ID .ID import ID \n    ID =ID (ID (ID ))\n    ID =ID .ID (LIT )\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID ():    from ID .ID import ID \n    ID =ID (ID (ID ))\n    ID =ID .ID (LIT )\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_status_intercept():\n    from pylons.middleware import StatusCodeRedirect\n    app = TestApp(StatusCodeRedirect(simple_exception_app))\n    res = app.get('/', status=404)\n    assert 'Made it to the error' in res\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11059
        },
        "correct_code": "\ndef ID ():\n    from ID .ID import ID \n    ID =ID (ID (ID ))\n    ID =ID .ID (LIT ,ID =LIT )\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID ):\n    from ID .ID import ID \n    ID =ID (ID (ID ))\n    ID =ID .ID (LIT ,ID =LIT )\n    assert LIT in ID \n"
    },
    {
        "code": "\ndef test_original_path():\n    if getattr(res, 'environ', None) is not None: # webob<1.2\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "is",
            "id": 11060
        },
        "correct_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )is not ID :#COMMENT\n\n        pass \n",
        "wrong_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )import not ID :#COMMENT\n\n        pass \n"
    },
    {
        "code": "\ndef test_retains_response():\n    if getattr(res, 'environ', None) is not None: # webob<1.2\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11061
        },
        "correct_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )is not ID :#COMMENT\n\n        pass \n",
        "wrong_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )is not :#COMMENT\n\n        pass \n"
    },
    {
        "code": "\ndef test_retains_request():\n    if getattr(res, 'environ', None) is not None: # webob<1.2\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_units/test_middleware.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 11062
        },
        "correct_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )is not ID :#COMMENT\n\n        pass \n\n",
        "wrong_code": "\ndef ID ():\n    if ID (ID ,LIT ,ID )is not ID :except \n\n        pass \n\n"
    },
    {
        "code": "\ndef make_map(config):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pylons/tests/test_webapps/filestotest/rest_routing.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 11063
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    -"
    },
    {
        "code": "def _qencode(s):\n    enc = quopri.encodestring(s, quotetabs=True)\n    # Must encode spaces, which quopri.encodestring() doesn't do\n    return enc.replace(b' ', b'=20')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/pyramid_mailer/pyramid_mailer/_compat.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 11064
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID (ID ,ID =LIT )\n    #COMMENT\n\n    return ID .ID (LIT ,LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID (ID ,ID =LIT )\n    #COMMENT\n\n    return ID .==ID (LIT ,LIT )\n"
    },
    {
        "code": "\n@subscriber(BeforeRender)\ndef add_base_template(event):\n    base = get_renderer('templates/base.pt').implementation()\n    event.update({'base': base})\n",
        "metadata": {
            "file": "py150_files/data/Pylons/shootout/shootout/subscribers.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11065
        },
        "correct_code": "\n@ID (ID )\ndef ID (ID ):\n    ID =ID (LIT ).ID ()\n    ID .ID ({LIT :ID })\n",
        "wrong_code": "\n@ID (ID )\ndef ID (ID ):\n    ID =ID (LIT ).ID ()\n    ID .ID ({LIT :})\n"
    },
    {
        "code": "def __init__(self, oid):\n    self.oid = oid\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11066
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return 'Indexing error: cannot find resource for oid %s' % self.oid\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11067
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID )!=\n    return LIT %ID .ID \n"
    },
    {
        "code": "def __init__(self, action):\n    self.action = action\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11068
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11069
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nif "
    },
    {
        "code": "\ndef __hash__(self):\n    return hash((self.oid, self.index_oid))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11070
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ((ID .ID ,ID .ID ))\n",
        "wrong_code": "\nID (ID ):\n    return ID ((ID .ID ,ID .ID ))\n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    # Note that we don't take our class or position into account because\n    # we want to compare equal to any other action that has the same\n    # oid for the same index.\n    return (self.oid, self.index_oid) == (other.oid, other.index_oid)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 96,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11071
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    return (ID .ID ,ID .ID )==(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    return (ID .ID ,ID .ID )==(ID .ID ,ID .ID )="
    },
    {
        "code": "\ndef __lt__(self, other):\n    return self_cmp < other_cmp\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11072
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID <ID \n",
        "wrong_code": "\ndef ID (ID ,ID nonlocal :\n    return ID <ID \n"
    },
    {
        "code": "\ndef find_resource(self):\n    if objectmap is None:\n        pass\n    if resource is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 83,
            "fix_type": "delete",
            "id": 11073
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if ID is ID :\n        pass \n    if "
    },
    {
        "code": "\ndef __init__(self, index, mode, oid, index_oid=None):\n    if index_oid is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 11074
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n    finally pass \n"
    },
    {
        "code": "\ndef execute(self):\n    try:\n        pass\n    except ObjectMapNotFound:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 11075
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n    as pass \n"
    },
    {
        "code": "\ndef anti(self):\n    return UnindexAction(self.index, self.mode, self.oid, self.index_oid)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11076
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID in ID .ID ,ID .ID ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __init__(self, index, mode, oid, index_oid=None):\n    if index_oid is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11077
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (],ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef execute(self):\n    try:\n        pass\n    except ObjectMapNotFound:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "try",
            "id": 11078
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    ]:\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef anti(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11079
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef yield ID (ID ):\n    return ID \n"
    },
    {
        "code": "\ndef __init__(self, index, mode, oid, index_oid=None):\n    if index_oid is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11080
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef execute(self):\n    self.index.unindex_doc(self.oid)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11081
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID )-\n    ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef anti(self):\n    return IndexAction(self.index, self.mode, self.oid, self.index_oid)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11082
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID ,await .ID )\n"
    },
    {
        "code": "\ndef __init__(self):\n    self.gen = 0\n    self.actions = []\n    self.pactive = False\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11083
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID .ID =[]\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID .ID =[]\n    ID .ID =LIT \n/"
    },
    {
        "code": "\ndef bumpgen(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 11084
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )if :\n    pass \n"
    },
    {
        "code": "\ndef extend(self, actions):\n    self.actions.extend(actions)\n    self.bumpgen()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 11085
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID await ):\n    ID .ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.actions)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 11086
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID .ID )\nfor "
    },
    {
        "code": "\ndef popall(self):\n    if not self.actions:\n        return None\n    actions = self.actions[:]\n    self.actions = []\n    self.bumpgen()\n    return actions\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11087
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        return ID \n    ID =ID .ID [:]\n    ID .ID =[]\n    ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID \nID ):\n    if not ID .ID :\n        return ID \n    ID =ID .ID [:]\n    ID .ID =[]\n    ID .ID ()\n    return ID \n"
    },
    {
        "code": "def retry(self, *arg, **kw):\n    for _ in range(tries):\n        try:\n            pass\n        except ConflictError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 11088
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    for ID in ID (ID ):\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "def ID (ID ,*ID ,**ID ):\n    for ID elif in ID (ID ):\n        try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, context):\n    self.context = context\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11089
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .await =ID \n"
    },
    {
        "code": "\ndef get_root(self):\n    jar = self.context._p_jar\n    if jar is None:\n        return None\n    zodb_root = jar.root()\n    return zodb_root\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11090
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID \n    if ID is ID :\n        return ID \n    ID =ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .try \n    if ID is ID :\n        return ID \n    ID =ID .ID ()\n    return ID \n"
    },
    {
        "code": "\ndef get_queue(self):\n    if zodb_root is None:\n        pass\n    if queue is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 11091
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    except if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef active(self):\n    queue = self.get_queue()\n    if queue is None:\n        return False\n    return queue.pactive\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11092
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    if ID is ID :\n        return LIT \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()if ID is ID :\n        return LIT \n    return ID .ID \n"
    },
    {
        "code": "\ndef sync(self):\n    jar = self.context._p_jar\n    if jar is not None:\n        jar.sync()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11093
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID \n    if ID is not ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ID \n    if ID is not ID :\n        ID .ID ()\n"
    },
    {
        "code": "\n@commit(5, 'engaging actions processor')\ndef engage(self):\n    queue = self.get_queue()\n    if queue is None:\n        raise RuntimeError('Context has no jar')\n    queue.pactive = True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11094
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    if ID is ID :\n        raise ID (LIT )\n    ID .ID =LIT \n",
        "wrong_code": "\n@ID (LIT LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    if ID is ID :\n        raise ID (LIT )\n    ID .ID =LIT \n"
    },
    {
        "code": "\n@commit(1, 'disengaging actions processor')\ndef disengage(self):\n    queue = self.get_queue()\n    if queue is None:\n        raise RuntimeError('Context has no jar')\n    queue.pactive = False\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 11095
        },
        "correct_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =ID .ID ()\n    if ID is ID :\n        raise ID (LIT )\n    ID .ID =LIT \n",
        "wrong_code": "\n@ID (LIT ,LIT )\ndef ID (ID ):\n    ID =for ID .ID ()\n    if ID is ID :\n        raise ID (LIT )\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef add(self, actions):\n    queue = self.get_queue()\n    if queue is None:\n        raise RuntimeError('Queue processor not engaged')\n    queue.extend(actions)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 11096
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ()\n    if ID is ID :\n        raise ID (LIT )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ()\n    if ID is ID :/\n        raise ID (LIT )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, tm):\n    self.tm = tm\n    self.actions = tm.actions[:]\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 11097
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID .ID [:]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ID \n    ID .ID =ID .ID [:]\n"
    },
    {
        "code": "\ndef rollback(self):\n    self.tm.actions = self.actions\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11098
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID +ID ):\n    ID .ID .ID =ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, index):\n    self.index = index\n    self.oid = index.__oid__\n    self.registered = False\n    self.actions = []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11099
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID .ID \n    ID .ID =LIT \n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ID ):\n    ID .ID =ID \n    ID .ID =ID .ID \n    ID .ID =LIT \n    ID .ID =[]\n"
    },
    {
        "code": "\ndef register(self):\n    if not self.registered:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11100
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID :\n    if not ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef savepoint(self):\n    return IndexActionSavepoint(self)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11101
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef (ID ):\n    return ID (ID )\n"
    },
    {
        "code": "\ndef tpc_begin(self, t):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 11102
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n-"
    },
    {
        "code": "\ndef tpc_finish(self, t):\n    if self.index is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11103
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :*pass \n"
    },
    {
        "code": "\ndef sortKey(self):\n    return 'IndexActionTM: %s' % self.oid\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 11104
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ,LIT %ID .ID \n"
    },
    {
        "code": "\ndef add(self, action):\n    self.actions.append(action)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11105
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "assert \ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef flush(self, all=True):\n    if self.actions:\n        self._process(actions, all=all)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11106
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    if ID .ID :\n        ID .ID (ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    if ID .ID :\n        ID .ID ID ,ID =ID )\n"
    },
    {
        "code": "\ndef execute_actions_immediately(self, actions):\n    for action in actions:\n        self.logger.debug('executing action %r' % (action,))\n        action.execute()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11107
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID :\n        ID .ID .ID (LIT %(ID ,))\n        ID .ID ()\n",
        "wrong_code": "as \ndef ID (ID ,ID ):\n    for ID in ID :\n        ID .ID .ID (LIT %(ID ,))\n        ID .ID ()\n"
    },
    {
        "code": "\ndef action_intersection(s1, s2):\n    for k1, action1 in ds1.items():\n        if action2 is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11108
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID ():\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):ID     for ID ,ID in ID .ID ():\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "def doconflict(a1, a2):\n    raise ConflictError\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 11109
        },
        "correct_code": "def ID (ID ,ID ):\n    raise ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    =raise ID \n"
    },
    {
        "code": "def dosecond(a1, a2):\n    return a2\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 11110
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "def ID (ID ,ID )else :\n    return ID \n"
    },
    {
        "code": "def dofirst(a1, a2):\n    return a1\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 11111
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "def ID (or ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef donothing(oid, index_oid, action1, action2):\n    del result[(oid, index_oid)]\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11112
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    del ID [(ID ,ID )]\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,yield ):\n    del ID [(ID ,ID )]\n"
    },
    {
        "code": "\ndef doadd(oid, index_oid, action1, action2):\n    result[(oid, index_oid)] = action1\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11113
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID [(ID ,ID )]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,async ,ID ):\n    ID [(ID ,ID )]=ID \n"
    },
    {
        "code": "\ndef dochange(oid, index_oid, action1, action2):\n    result[(oid, index_oid)] = ReindexAction(\n        action2.index, action2.mode, oid,\n        )\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 11114
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID [(ID ,ID )]=ID (\n    ID .ID ,ID .ID ,ID ,\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID [(ID ,ID !=)]=ID (\n    ID .ID ,ID .ID ,ID ,\n    )\n"
    },
    {
        "code": "\ndef dodefault(oid, index_oid, action1, action2):\n    result[(oid, index_oid)] = action2\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11115
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID [(ID ,ID )]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID !:\n    ID [(ID ,ID )]=ID \n"
    },
    {
        "code": "\ndef optimize_states(old_state, committed_state, new_state):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/catalog/deferred.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11116
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID in ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "def _callFUT(self, registry):\n    from . import set_yaml\n    return set_yaml(registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 11117
        },
        "correct_code": "def ID (ID ,ID ):\n    from .import ID \n    return ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    from .import ID \n    return ID (ID )\n    not "
    },
    {
        "code": "\ndef test_loader_and_dumper_set(self):\n    self.assertEqual(registry['yaml_loader'].__name__, 'SLoader')\n    self.assertEqual(registry['yaml_dumper'].__name__, 'SDumper')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 11118
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID [LIT ].ID ,LIT )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\nclass def ID (ID ):\n    ID .ID (ID [LIT ].ID ,LIT )\n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "\ndef test_iface_representer(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11119
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef lambda ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_iface_constructor(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11120
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )nonlocal \n    pass \n"
    },
    {
        "code": "\ndef test_blob_representer(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11121
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n="
    },
    {
        "code": "def _callFUT(self, registry):\n    from . import get_dumpers\n    return get_dumpers(registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 11122
        },
        "correct_code": "def ID (ID ,ID ):\n    from .import ID \n    return ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    from .import ID \n    return ID (!=ID )\n"
    },
    {
        "code": "def f(n, reg):\n    self.assertEqual(n, 1)\n    self.assertEqual(reg, registry)\n    return 'dumpers'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 11123
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,ID from )\n    return LIT \n"
    },
    {
        "code": "\ndef test_ordered_is_not_None(self):\n    def f(n, reg):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11124
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "*def ID (ID ):\n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def f(n, reg):\n    self.assertEqual(n, 1)\n    self.assertEqual(reg, registry)\n    return 'dumpers'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 11125
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "def ID !(ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,ID )\n    return LIT \n"
    },
    {
        "code": "\ndef test_ordered_is_None(self):\n    def f(n, reg):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11126
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID assert :\n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def setUp(self):\n    self.config = testing.setUp()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11127
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "def ID for ID ):\n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\ndef tearDown(self):\n    testing.tearDown()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11128
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (try \n"
    },
    {
        "code": "\ndef _makeOne(self):\n    from . import _DumpAndLoad\n    return _DumpAndLoad()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11129
        },
        "correct_code": "\ndef ID (ID ):\n    from .import ID \n    return ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    from .while import ID \n    return ID ()\n"
    },
    {
        "code": "\ndef test__make_dump_context(self):\n    inst = self._makeOne()\n    c = inst._make_dump_context('dir', 'reg', 'dumpers', True, False)\n    self.assertEqual(c.__class__.__name__, '_ResourceDumpContext')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11130
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID =ID .ID (LIT ,LIT ,LIT ,LIT ,LIT )\n    ID .ID (ID .ID .ID ,LIT )\n",
        "wrong_code": "\ndef (ID ):\n    ID =ID .ID ()\n    ID =ID .ID (LIT ,LIT ,LIT ,LIT ,LIT )\n    ID .ID (ID .ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_dump_no_subresources(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11131
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_dump_with_subresources_resource_is_not_folder(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11132
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef in (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_dump_with_subresources_resource_is_folder(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11133
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID LIT :\n    pass \n"
    },
    {
        "code": "def callback(rsrc):\n    self.assertEqual(rsrc, resource)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11134
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (import ,ID )\n"
    },
    {
        "code": "\ndef test_dump_callbacks(self):\n    def callback(rsrc):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11135
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef nonlocal ID (ID ):\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_load_no_subresources(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11136
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID try :\n    pass \n"
    },
    {
        "code": "\ndef test_load_with_subresources(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 11137
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while \n"
    },
    {
        "code": "def cb(rsrc):\n    self.assertEqual(rsrc, resource)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11138
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID not ID ,ID )\n"
    },
    {
        "code": "\ndef test_load_loader_callbacks(self):\n    def cb(rsrc):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11139
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ,(ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self):\n    from . import _FileOperations\n    return _FileOperations()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 11140
        },
        "correct_code": "def ID (ID ):\n    from .import ID \n    return ID ()\n",
        "wrong_code": "def ID (ID ):\n    from .continue import ID \n    return ID ()\n"
    },
    {
        "code": "\ndef test__makedirs(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11141
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :!pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef test__exists(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11142
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nas "
    },
    {
        "code": "def makedirs(dn):\n    self.assertEqual(os.path.normpath(dn), os.path.normpath(prefix))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 11143
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID .ID .ID (ID ),ID .ID .ID (ID ))\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID .ID assert .ID (ID ),ID .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef test__get_fullpath_makedirs_true(self):\n    def makedirs(dn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11144
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    as "
    },
    {
        "code": "\ndef test__get_fullpath_makedirs_false(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11145
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nand "
    },
    {
        "code": "def _get_fullpath(fn, makedirs):\n    self.assertEqual(fn, 'a')\n    self.assertEqual(makedirs, True)\n    return fn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11146
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ):=ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return ID \n"
    },
    {
        "code": "def _open(path, mode):\n    self.assertEqual(path, 'a')\n    self.assertEqual(mode, 'w')\n    return 'fp'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11147
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID ID ,LIT )\n    ID .ID (ID ,LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef test_openfile_w(self):\n    def _get_fullpath(fn, makedirs):\n        pass\n    def _open(path, mode):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 11148
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,)ID ):\n        pass \n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _get_fullpath(fn, makedirs=False):\n    self.assertEqual(fn, 'a')\n    self.assertEqual(makedirs, False)\n    return fn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11149
        },
        "correct_code": "def ID (ID ,ID =LIT ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ,ID =LIT ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID LIT )\n    return ID \n"
    },
    {
        "code": "def _open(path, mode):\n    self.assertEqual(path, 'a')\n    self.assertEqual(mode, 'r')\n    return 'fp'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 11150
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT not )\n    return LIT \n"
    },
    {
        "code": "\ndef test_openfile_r(self):\n    def _get_fullpath(fn, makedirs=False):\n        pass\n    def _open(path, mode):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 64,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11151
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID =LIT ):\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID =LIT ):\n        pass \n    def (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _get_fullpath(fn, makedirs=False):\n    self.assertEqual(fn, 'a')\n    self.assertEqual(makedirs, False)\n    return fn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11152
        },
        "correct_code": "def ID (ID ,ID =LIT ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ,ID =LIT ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    return ID import "
    },
    {
        "code": "def _exists(path):\n    self.assertEqual(path, 'a')\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11153
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID LIT ID (ID ,LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef test_exists(self):\n    def _get_fullpath(fn, makedirs=False):\n        pass\n    def _exists(path):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11154
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID =LIT ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID =LIT :\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self):\n    from . import _YAMLOperations\n    return _YAMLOperations()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 11155
        },
        "correct_code": "def ID (ID ):\n    from .import ID \n    return ID ()\n",
        "wrong_code": "def ID (ID ):\n    from .import ID \n    return ID ()\nnot "
    },
    {
        "code": "@contextlib.contextmanager\ndef openfile(fn, mode):\n    self.assertEqual(fn, 'fn')\n    self.assertEqual(mode, 'rb')\n    yield stream\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11156
        },
        "correct_code": "@ID .ID \ndef ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    yield ID \n",
        "wrong_code": "@ID .ID \ndef in (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    yield ID \n"
    },
    {
        "code": "\ndef test_load_yaml(self):\n    @contextlib.contextmanager\n    def openfile(fn, mode):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11157
        },
        "correct_code": "\ndef ID (ID ):\n    @ID .ID \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    @ID .elif \n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "@contextlib.contextmanager\ndef openfile(fn, mode):\n    self.assertEqual(fn, 'fn')\n    self.assertEqual(mode, 'wb')\n    yield stream\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11158
        },
        "correct_code": "@ID .ID \ndef ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n    yield ID \n",
        "wrong_code": "@ID .ID \ndef ID (ID ,ID ):\n    ID .ID ID ,LIT )\n    ID .ID (ID ,LIT )\n    yield ID \n"
    },
    {
        "code": "\ndef test_dump_yaml(self):\n    @contextlib.contextmanager\n    def openfile(fn, mode):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 11159
        },
        "correct_code": "\ndef ID (ID ):\n    @ID .ID \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    @ID .ID \n    def ID (ID ,ID lambda ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self):\n    from . import _ResourceContext\n    return _ResourceContext()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11160
        },
        "correct_code": "def ID (ID ):\n    from .import ID \n    return ID ()\n",
        "wrong_code": "def ID (ID ):\n    from .import \n    return ID ()\n"
    },
    {
        "code": "\ndef test_resolve_dotted_name(self):\n    import substanced.dump.tests\n    inst = self._makeOne()\n    result = inst.resolve_dotted_name('substanced.dump.tests')\n    self.assertEqual(result, substanced.dump.tests)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 11161
        },
        "correct_code": "\ndef ID (ID ):\n    import ID .ID .ID \n    ID =ID .ID ()\n    ID =ID .ID (LIT )\n    ID .ID (ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    import ID .as ID .ID \n    ID =ID .ID ()\n    ID =ID .ID (LIT )\n    ID .ID (ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef test_get_dotted_name(self):\n    import substanced.dump.tests\n    inst = self._makeOne()\n    result = inst.get_dotted_name(substanced.dump.tests)\n    self.assertEqual(result, 'substanced.dump.tests')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 111,
            "fix_type": "delete",
            "id": 11162
        },
        "correct_code": "\ndef ID (ID ):\n    import ID .ID .ID \n    ID =ID .ID ()\n    ID =ID .ID (ID .ID .ID )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    import ID .ID .ID \n    ID =ID .ID ()\n    ID =ID .ID (ID .ID .ID )\n    ID .ID (ID ,LIT )\n    if "
    },
    {
        "code": "def _makeOne(self, directory, registry, dumpers, verbose, dry_run):\n    from . import _ResourceDumpContext\n    return _ResourceDumpContext(\n        directory, registry, dumpers, verbose, dry_run\n        )\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11163
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    from .import ID \n    return ID (\n    ID ,ID ,ID ,ID ,ID \n    )\n",
        "wrong_code": "def ID :ID ,ID ,ID ,ID ,ID ,ID ):\n    from .import ID \n    return ID (\n    ID ,ID ,ID ,ID ,ID \n    )\n"
    },
    {
        "code": "def get_content_type(rsrc, reg):\n    self.assertEqual(rsrc, resource)\n    self.assertEqual(reg, registry)\n    return 'ct'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11164
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "try def ID (ID ,ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID ,ID )\n    return LIT \n"
    },
    {
        "code": "def get_oid(resource):\n    return 'oid'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 11165
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    nonlocal return LIT \n"
    },
    {
        "code": "def dump_yaml(data, filename):\n    self.assertEqual(data['oid'], 'oid')\n    return 'dumped'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11166
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID [LIT ],LIT )\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ).\n    ID .ID (ID [LIT ],LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef test_dump_resource(self):\n    def get_content_type(rsrc, reg):\n        pass\n    def get_oid(resource):\n        pass\n    def dump_yaml(data, filename):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 95,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11167
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (import ,ID ):\n        pass \n"
    },
    {
        "code": "def dump_resource(rsrc):\n    self.assertEqual(rsrc, resource)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11168
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "def ID (ID raise :\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def dump_resource(rsrc):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 11169
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID )del :\n        pass \n"
    },
    {
        "code": "\ndef test_add_callback(self):\n    self.assertEqual(registry['dumper_callbacks'], [True])\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11170
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID [LIT ],[LIT ])\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID (ID [LIT ],[LIT ])\n"
    },
    {
        "code": "def setUp(self):\n    self.config = testing.setUp()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11171
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =ID ID ()\n"
    },
    {
        "code": "\ndef tearDown(self):\n    testing.tearDown()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 11172
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\nin     ID .ID ()\n"
    },
    {
        "code": "\ndef _makeOne(self, directory, registry, dumpers, verbose, dry_run):\n    from . import _ResourceLoadContext\n    return _ResourceLoadContext(\n        directory, registry, dumpers, verbose, dry_run\n        )\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 88,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11173
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    from .import ID \n    return ID (\n    ID ,ID ,ID ,ID ,ID \n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    from .import ID \n    return ID (\n    ID ,ID ,ID ,,ID \n    )\n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, RESOURCE_FILENAME)\n    return data\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11174
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,ID )(return ID \n"
    },
    {
        "code": "\ndef test_load_resource(self):\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11175
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ]):\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, RESOURCE_FILENAME)\n    return data\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11176
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID async "
    },
    {
        "code": "def __init__(self):\n    self._errors = []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11177
        },
        "correct_code": "def ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "def ID (ID ):\n    ID .=[]\n"
    },
    {
        "code": "def error(self, *args, **kw):\n    self._errors.append((args, kw))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11178
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    ID .ID .ID ((ID ,ID ))\n",
        "wrong_code": "def ID (ID ,*ID ,**ID ):\n    ID .ID .ID ((ID ,ID )\n"
    },
    {
        "code": "def load_resource():\n    return 'name', resource\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11179
        },
        "correct_code": "def ID ():\n    return LIT ,ID \n",
        "wrong_code": "def ID ():\n    return LIT ,[\n"
    },
    {
        "code": "\ndef test_load(self):\n    def load_resource():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11180
        },
        "correct_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def except ():\n        pass \n"
    },
    {
        "code": "\ndef test_add_callback(self):\n    self.assertEqual(registry['loader_callbacks'], [True])\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 11181
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID [LIT ],[LIT ])\n",
        "wrong_code": "\ndef ID (ID )+:\n    ID .ID (ID [LIT ],[LIT ])\n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import ACLDumper\n    return ACLDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 11182
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    and ID (ID ,ID )\n"
    },
    {
        "code": "def represent_scalar(one, two):\n    self.assertEqual(one, u('!all_permissions'))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11183
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID (LIT ))\n",
        "wrong_code": "def ID (ID ID ):\n    ID .ID (ID ,ID (LIT ))\n"
    },
    {
        "code": "\ndef test_init_adds_yaml_stuff(self):\n    def represent_scalar(one, two):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 11184
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n\n"
    },
    {
        "code": "\ndef test_dump_no_acl(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11185
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID raise :\n    pass \n"
    },
    {
        "code": "\ndef test_dump_with_acl(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11186
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )class \n    pass \n"
    },
    {
        "code": "\ndef test_load(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11187
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass /"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import WorkflowDumper\n    return WorkflowDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11188
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID -ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "def dump_yaml(v, fn):\n    self.assertEqual(v, True)\n    self.assertEqual(fn, 'name.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11189
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .(ID ,LIT )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def dump_yaml(v, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 11190
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n    !=pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11191
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \n",
        "wrong_code": "ID (ID ):\n    ID .ID (ID ,LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef test_load(self):\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11192
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "try \ndef ID (ID ):\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import ReferencesDumper\n    return ReferencesDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11193
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from import ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def dump_yaml(references, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11194
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID with ID ,ID ):\n        pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return {'reftype': {'sources': [1], 'targets': [2]}}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "}",
            "id": 11195
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :{LIT :[LIT ],LIT :[LIT ]}}\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :{LIT :[LIT ],LIT :[LIT ]raise }\n"
    },
    {
        "code": "def add_callback(f):\n    callbacks.append(f)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11196
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID )class :\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_load(self):\n    def load_yaml(fn):\n        pass\n    def add_callback(f):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11197
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def (ID ):\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import SDIPropertiesDumper\n    return SDIPropertiesDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11198
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "not def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "def _p_activate():\n    pass # this will not be covered if not run\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11199
        },
        "correct_code": "def ID ():\n    pass #COMMENT\n\n",
        "wrong_code": "def ID ()*\n    pass #COMMENT\n\n"
    },
    {
        "code": "def dump_yaml(v, fn):\n    self.assertEqual(v, {'__sdi_hidden__':True})\n    self.assertEqual(fn, 'name.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11200
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,{LIT :LIT })\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,{LIT :LIT })\n    ID .ID ID ,LIT )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def _p_activate():\n        pass\n    def dump_yaml(v, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11201
        },
        "correct_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef (ID ):\n    def ID ():\n        pass \n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _p_activate():\n    pass # this will not be covered if not run\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11202
        },
        "correct_code": "def ID ():\n    pass #COMMENT\n\n",
        "wrong_code": "def ID not ):\n    pass #COMMENT\n\n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return {'a':1}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11203
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :LIT }\n",
        "wrong_code": "def ID (ID ):\n    ID .(ID ,LIT )\n    return {LIT :LIT }\n"
    },
    {
        "code": "\ndef test_load(self):\n    def _p_activate():\n        pass\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 75,
            "fix_type": "delete",
            "id": 11204
        },
        "correct_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ):\n        pass try \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import DirectlyProvidedInterfacesDumper\n    return DirectlyProvidedInterfacesDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11205
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID \n"
    },
    {
        "code": "def get_dotted_name(i):\n    return 'substanced.dump.IDummy'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11206
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "def (ID ):\n    return LIT \n"
    },
    {
        "code": "def dump_yaml(v, fn):\n    self.assertEqual(v, ['substanced.dump.IDummy'])\n    self.assertEqual(fn, 'name.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 11207
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,[LIT ])\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,[LIT ])\n    ID .ID (ID LIT LIT )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def get_dotted_name(i):\n        pass\n    def dump_yaml(v, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11208
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def resolve_dotted_name(n):\n    return IDummy\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11209
        },
        "correct_code": "def ID (ID ):\n    return ID \n",
        "wrong_code": "def (ID ):\n    return ID \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return ['substanced.dump.IDummy']\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 11210
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return [LIT ]\n",
        "wrong_code": "def ID ,(ID ):\n    ID .ID (ID ,LIT )\n    return [LIT ]\n"
    },
    {
        "code": "\ndef test_load(self):\n    def resolve_dotted_name(n):\n        pass\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 11211
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n        ==def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import FolderOrderDumper\n    return FolderOrderDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "import",
            "id": 11212
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from .break ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "def is_ordered():\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11213
        },
        "correct_code": "def ID ():\n    return LIT \n",
        "wrong_code": "ID ():\n    return LIT \n"
    },
    {
        "code": "def dump_yaml(v, fn):\n    self.assertEqual(v, ['a'])\n    self.assertEqual(fn, 'name.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11214
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,[LIT ])\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,[in LIT ])\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def is_ordered():\n        pass\n    def dump_yaml(v, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 74,
            "fix_type": "delete",
            "id": 11215
        },
        "correct_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ,ID ):\n        .pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return ['a']\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11216
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return [LIT ]\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )return [LIT ]\n"
    },
    {
        "code": "def add_callback(f):\n    callbacks.append(f)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 11217
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (if ID )\n"
    },
    {
        "code": "\ndef test_load(self):\n    def load_yaml(fn):\n        pass\n    def add_callback(f):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11218
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID ID ):\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import PropertySheetDumper\n    return PropertySheetDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 11219
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,pass ID )\n"
    },
    {
        "code": "def represent_scalar(one, two):\n    self.assertEqual(one, u('!colander_null'))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11220
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID (LIT ))\n",
        "wrong_code": "def ID (:,ID ):\n    ID .ID (ID ,ID (LIT ))\n"
    },
    {
        "code": "\ndef test_init_adds_yaml_stuff(self):\n    def represent_scalar(one, two):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 11221
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \nfor "
    },
    {
        "code": "def sheetfactory(rsrc, req):\n    self.assertEqual(rsrc, resource)\n    self.assertEqual(req.__class__.__name__, 'Request')\n    return sheet\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11222
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID .ID .ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ,is ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID .ID .ID ,LIT )\n    return ID \n"
    },
    {
        "code": "\ndef test__get_sheets(self):\n    def sheetfactory(rsrc, req):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11223
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ID ):\n        pass \n"
    },
    {
        "code": "def _get_sheets(ctx):\n    self.assertEqual(ctx, context)\n    return [('sheet', sheet)]\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 11224
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return [(LIT ,ID )]\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    else return [(LIT ,ID )]\n"
    },
    {
        "code": "def dump_yaml(cstruct, fn):\n    self.assertEqual(cstruct, {'a':1})\n    self.assertEqual(fn, 'propsheets/sheet/properties.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 11225
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,{LIT :LIT })\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID finally ):\n    ID .ID (ID ,{LIT :LIT })\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def _get_sheets(ctx):\n        pass\n    def dump_yaml(cstruct, fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 11226
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID except ,ID ):\n        pass \n"
    },
    {
        "code": "def add_callback(cb):\n    context.cb = cb\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11227
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID return :\n    ID .ID =ID \n"
    },
    {
        "code": "def _get_sheets(ctx):\n    self.assertEqual(ctx, context)\n    return [('', sheet)]\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 11228
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return [(LIT ,ID )]\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,continue ID )\n    return [(LIT ,ID )]\n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'propsheets/__unnamed__/properties.yaml')\n    return {'a':1}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 11229
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :LIT }\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT if :LIT }\n"
    },
    {
        "code": "\ndef test_load(self):\n    def add_callback(cb):\n        pass\n    def _get_sheets(ctx):\n        pass\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 95,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11230
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID )\n        pass \n"
    },
    {
        "code": "def _makeOne(self, name, registry):\n    from . import AdhocAttrDumper\n    return AdhocAttrDumper(name, registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11231
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID yield ID ,ID ,ID ):\n    from .import ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "def dump_yaml(v, fn):\n    self.assertEqual(v, {'a':1})\n    self.assertEqual(fn, 'name.yaml')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 11232
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,{LIT :LIT })\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID (ID ,{:LIT })\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "def dump():\n    return {'a':1}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 11233
        },
        "correct_code": "def ID ():\n    return {LIT :LIT }\n",
        "wrong_code": "def ID elif ():\n    return {LIT :LIT }\n"
    },
    {
        "code": "\ndef test_dump(self):\n    def dump_yaml(v, fn):\n        pass\n    def dump():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 11234
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n    def ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    lambda def ID (ID ,ID ):\n        pass \n    def ID ():\n        pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return {'a':1}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 11235
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :LIT }\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {is :LIT }\n"
    },
    {
        "code": "def load(values):\n    self.assertEqual(values, {'a':1})\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 11236
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :LIT })\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,{yield LIT :LIT })\n"
    },
    {
        "code": "\ndef test_load(self):\n    def load_yaml(fn):\n        pass\n    def load(values):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 11237
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):lambda \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def load_yaml(fn):\n    self.assertEqual(fn, 'name.yaml')\n    return {'a':1}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 11238
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return {LIT :LIT }\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID await LIT )\n    return {LIT :LIT }\n"
    },
    {
        "code": "\ndef test_load_without_underunder_load(self):\n    def load_yaml(fn):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 11239
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\nlambda     def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _callFUT(\n    self, config, dumper_name, dumper_factory, before=None, after=None\n    ):\n    return add_dumper(\n        config, dumper_name, dumper_factory, before=before, after=after\n        )\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 102,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11240
        },
        "correct_code": "def ID (\nID ,ID ,ID ,ID ,ID =ID ,ID =ID \n):\n    return ID (\n    ID ,ID ,ID ,ID =ID ,ID =ID \n    )\n",
        "wrong_code": "def ID (\nID ,ID ,ID ,ID ,ID =ID ,ID =ID \n):\n    return ID (\n    ID ,ID ,ID ,ID =ID ,ID =ID \n    )\n    finally "
    },
    {
        "code": "\ndef test_it(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11241
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID :ID ):\n    pass \n"
    },
    {
        "code": "def action(self, discriminator, callable=None):\n    self.discriminator = discriminator\n    self.callable = callable\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11242
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .import =ID \n"
    },
    {
        "code": "def __init__(self, result):\n    self.result = result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11243
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get_schema(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11244
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID try ID ):\n    return ID \n"
    },
    {
        "code": "\ndef set_schema(self, schema):\n    self._schema = schema\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11245
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef pass ID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __contains__(self, val):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11246
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID elif :\n    return LIT \n"
    },
    {
        "code": "\ndef __delitem__(self, val):\n    self.deleted = val\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11247
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    :"
    },
    {
        "code": "\ndef bind(self, request=None, context=None, loading=None):\n    self.request = request\n    self.context = context\n    self.loading = loading\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 82,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 11248
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID ID \n"
    },
    {
        "code": "\ndef get(self):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11249
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID \n    def "
    },
    {
        "code": "\ndef set(self, appstruct):\n    self.appstruct = appstruct\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11250
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef serialize(self, appstruct):\n    return appstruct\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11251
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\nID (ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef deserialize(self, cstruct):\n    return cstruct\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11252
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\nID (ID ,ID ):\n    return ID \n"
    },
    {
        "code": "def __init__(self, sourceids, targetids):\n    self._sourceids = sourceids\n    self._targetids = targetids\n    self.connected = []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 11253
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =[]\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =[]\n."
    },
    {
        "code": "\ndef has_references(self, resource):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 11254
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    def return LIT \n"
    },
    {
        "code": "\ndef get_reftypes(self):\n    return ['reftype']\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11255
        },
        "correct_code": "\ndef ID (ID ):\n    return [LIT ]\n",
        "wrong_code": "=def ID (ID ):\n    return [LIT ]\n"
    },
    {
        "code": "\ndef sourceids(self, resource, reftype):\n    return self._sourceids\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11256
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,nonlocal ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef targetids(self, resource, reftype):\n    return self._targetids\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11257
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .\n"
    },
    {
        "code": "\ndef connect(self, oid, target, reftype):\n    self.connected.append((oid, target, reftype))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11258
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ,ID ))\n",
        "wrong_code": "\ndef ID (,ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ,ID ))\n"
    },
    {
        "code": "def __init__(self):\n    self.constructors = []\n    self.representers = []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 11259
        },
        "correct_code": "def ID (ID ):\n    ID .ID =[]\n    ID .ID =[]\n",
        "wrong_code": "def ID (ID in ):\n    ID .ID =[]\n    ID .ID =[]\n"
    },
    {
        "code": "def add_constructor(self, spec, ctor):\n    self.constructors.append((spec, ctor))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 11260
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ))\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID .async ID ((ID ,ID ))\n"
    },
    {
        "code": "def add_representer(self, thing, repr):\n    self.representers.append((thing, repr))\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11261
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ))\n",
        "wrong_code": "def try (ID ,ID ,ID ):\n    ID .ID .ID ((ID ,ID ))\n"
    },
    {
        "code": "def __init__(self, result, raises=None):\n    self.result = result\n    self.raises = raises\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 11262
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID =while ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef create(self, content_type, **kw):\n    self.content_type = content_type\n    self.oid = kw['__oid']\n    if self.raises:\n        raise self.raises\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11263
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID [LIT ]\n    if ID .ID :\n        raise ID .ID \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    ID .=ID \n    ID .ID =ID [LIT ]\n    if ID .ID :\n        raise ID .ID \n    return ID .ID \n"
    },
    {
        "code": "\ndef metadata(self, resource, what, default=None):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11264
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID \nID ,ID ,ID ,ID =ID ):\n    return ID .ID \n"
    },
    {
        "code": "def load(self, name, resource, registry=None):\n    self.name = name\n    self.resource = resource\n    self.registry = registry\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 11265
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID ]=ID \n    ID .ID =ID \n"
    },
    {
        "code": "def dump(self, context):\n    self.context = context\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11266
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "in def ID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, result=None):\n    self.result = result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11267
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (,ID =ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef dump(self, resource):\n    self.dumped = resource\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11268
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef load(self, parent):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11269
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\nin ID (ID ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef dump_yaml(self, obj, fn):\n    self.dumped = obj\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11270
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n    lambda "
    },
    {
        "code": "\ndef load_yaml(self, fn):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11271
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return (.ID \n"
    },
    {
        "code": "\ndef exists(self, fn):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 11272
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\nLIT def ID (ID ,ID ):\n    return LIT \n"
    },
    {
        "code": "def __init__(self, result):\n    self.result = result\n    dict.__init__(self)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11273
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID (ID )\n",
        "wrong_code": "(def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef queryUtility(self, iface, default=None):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 11274
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,-ID =ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef registerUtility(self, ordered, iface):\n    self.ordered = ordered\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11275
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =return ID \n"
    },
    {
        "code": "def join(self, directory, other):\n    return other\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 11276
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    +return ID \n"
    },
    {
        "code": "\ndef exists(self, dir):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 11277
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):raise \n    return LIT \n"
    },
    {
        "code": "\ndef abspath(self, path):\n    return path\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11278
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef normpath(self, path):\n    return path\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 11279
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID )try :\n    return ID \n"
    },
    {
        "code": "\ndef isdir(self, dir):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 11280
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n!    return LIT \n"
    },
    {
        "code": "def __init__(self, results):\n    self.results = results\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11281
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ID =ID \n"
    },
    {
        "code": "\ndef __call__(self, dir):\n    if self.results:\n        return self.results.pop(0)\n    return []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/dump/tests.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 11282
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        return ID .ID .ID (LIT )\n    return []\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        return ID .ID .for ID (LIT )\n    return []\n"
    },
    {
        "code": "def _callFUT(self, context, name, remove_extension=True):\n    from substanced.folder.util import slugify_in_context\n    return slugify_in_context(context, name,\n                              remove_extension=remove_extension)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/folder/tests/test_util.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11283
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =LIT ):\n    from ID .ID .ID import ID \n    return ID (ID ,ID ,\n    ID =ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID =LIT ):\n    from ID .ID except ID import ID \n    return ID (ID ,ID ,\n    ID =ID )\n"
    },
    {
        "code": "\ndef test_replace_nonword_characters(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/folder/tests/test_util.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11284
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_uniquness_without_extension(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/folder/tests/test_util.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 11285
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass None \n"
    },
    {
        "code": "\ndef test_uniquness_with_extension(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/folder/tests/test_util.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11286
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (pass ):\n    pass \n"
    },
    {
        "code": "def _makeOne(self, context, request):\n    from .. import PropertySheet\n    return PropertySheet(context, request)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 11287
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from ..import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from ..)import ID \n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_get(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 11288
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (try ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_set(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11289
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nawait "
    },
    {
        "code": "\ndef test_set_schema_missing_value(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11290
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )nonlocal \n    pass \n"
    },
    {
        "code": "\ndef test_set_nochange(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11291
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )]\n    pass \n"
    },
    {
        "code": "\ndef test_set_with_omit_iter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11292
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_set_with_omit_noniter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11293
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_after_set_changed_True(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 11294
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID async (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_after_set_changed_False(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11295
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n",
        "wrong_code": "\ndef ID (ID )\n    pass \n\n"
    },
    {
        "code": "def setUp(self):\n    self.config = testing.setUp()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 11296
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =ID .ID .()\n"
    },
    {
        "code": "\ndef tearDown(self):\n    testing.tearDown()\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11297
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n"
    },
    {
        "code": "\ndef _callFUT(self, resource, request):\n    from .. import is_propertied\n    return is_propertied(resource, request)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11298
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    from ..import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    from ..import ID \n    return ID (ID ID )\n"
    },
    {
        "code": "\ndef test_some(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11299
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    assert "
    },
    {
        "code": "\n@mock.patch('substanced.property.get_domain')\ndef test_None(self, mock_domain):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 11300
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID pass (ID ,ID ):\n    pass \n"
    },
    {
        "code": "def _makeOne(self, val, config):\n    from .. import _PropertiedPredicate\n    return _PropertiedPredicate(val, config)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 11301
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from ..import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from ..import ID \n    return ID (ID ,ID class )\n"
    },
    {
        "code": "\ndef test_phash(self):\n    config = Dummy()\n    config.registry = Dummy()\n    inst = self._makeOne(True, config)\n    self.assertEqual(inst.phash(), 'propertied = True')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 77,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11302
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID =ID ()\n    ID =ID .ID (LIT ,ID )\n    ID .ID (ID .ID (),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID =ID ()\n    ID =ID .ID (LIT ,ID )\n    .ID (ID .ID (),LIT )\n"
    },
    {
        "code": "def is_propertied(context, request):\n    self.assertEqual(context, None)\n    self.assertEqual(request.registry, config.registry)\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 11303
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID .ID ,ID .ID )\n    return LIT \n",
        "wrong_code": "def ID return (ID ,ID ):\n    ID .ID (ID ,ID )\n    ID .ID (ID .ID ,ID .ID )\n    return LIT \n"
    },
    {
        "code": "\ndef test__call__(self):\n    def is_propertied(context, request):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11304
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ,ID :\n        pass \n"
    },
    {
        "code": "def regUt(self, *args, **kw):\n    registry.domainargs = (args, kw)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11305
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    ID .ID =(ID ,ID )\n",
        "wrong_code": "def (ID ,*ID ,**ID ):\n    ID .ID =(ID ,ID )\n"
    },
    {
        "code": "def _makeRegistry(self, domain):\n    def regUt(self, *args, **kw):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 11306
        },
        "correct_code": "def ID (ID ,ID ):\n    def ID (ID ,*ID ,**ID ):\n        pass \n",
        "wrong_code": "def ID (ID ,ID for ):\n    def ID (ID ,*ID ,**ID ):\n        pass \n"
    },
    {
        "code": "\ndef _callFUT(self, registry):\n    from substanced.property import get_domain\n    return get_domain(registry)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11307
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    from ID .ID import ID \n    return ID (ID )\n",
        "wrong_code": "LIT def ID (ID ,ID ):\n    from ID .ID import ID \n    return ID (ID )\n"
    },
    {
        "code": "\ndef test_domain_is_None(self):\n    result = self._callFUT(reg)\n    self.assertEqual(result.__class__.__name__, 'PredicateDomain')\n    self.assertTrue(reg.domainargs)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 11308
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID )\n    ID .ID (ID .ID .ID ,LIT )\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID finally (ID )\n    ID .ID (ID .ID .ID ,LIT )\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_domain_is_not_None(self):\n    domain = object()\n    reg = self._makeRegistry(domain)\n    result = self._callFUT(reg)\n    self.assertEqual(result, domain)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11309
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID =ID .ID (ID )\n    ID =ID .ID (ID )\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID :\n    ID =ID ()\n    ID =ID .ID (ID )\n    ID =ID .ID (ID )\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "def _callFUT(self, config, name, propsheet, iface=None, **predicates):\n    from substanced.property import add_propertysheet\n    return add_propertysheet(config, name, propsheet, iface, **predicates)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 11310
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ,**ID ):\n    from ID .ID import ID \n    return ID (ID ,ID ,ID ,ID ,**ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ,**ID ):\n    from ID .ID import assert ID \n    return ID (ID ,ID ,ID ,ID ,**ID )\n"
    },
    {
        "code": "\n@mock.patch('substanced.property.get_domain')\ndef test_iface_is_None(self, mock_get_domain):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11311
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@.ID (LIT )\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n@mock.patch('substanced.property.get_domain')\ndef test_iface_is_not_None(self, mock_get_domain):\n    class IFoo(Interface): pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11312
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    class ID (ID ):pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    class ID (ID :pass \n"
    },
    {
        "code": "def _callFUT(self, config, name, factory, before=None, after=None):\n    return add_propertysheet_predicate(\n        config, name, factory, before=before, after=after\n        )\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 78,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11313
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ,ID =ID ):\n    return ID (\n    ID ,ID ,ID ,ID =ID ,ID =ID \n    )\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ,ID =ID ):\n    return ID (\n    ID ,ID ,ID ,ID =,ID =ID \n    )\n"
    },
    {
        "code": "\n@mock.patch('substanced.property.get_domain')\ndef test_it(self, mock_get_domain):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11314
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    pass import "
    },
    {
        "code": "def maybe_dotted(self, val):\n    return val\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11315
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID \n",
        "wrong_code": ",ID (ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef introspectable(self, *arg, **kw):\n    self.intrargs = (arg, kw)\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11316
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID =(ID ,ID )\n    return {}\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    del .ID =(ID ,ID )\n    return {}\n"
    },
    {
        "code": "\ndef action(self, action_discrim, action_callable, **action_kw):\n    self.action_discrim = action_discrim\n    self.action_callable = action_callable\n    self.action_kw = action_kw\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 11317
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,-**ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef object_description(self, ob):\n    return str(ob)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11318
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (+)\n"
    },
    {
        "code": "def __init__(self):\n    self.subscribed = []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11319
        },
        "correct_code": "def ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "def ID +ID ):\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef subscribers(self, *args):\n    self.subscribed.append(args)\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 11320
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID .ID (ID )\n\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    ID .ID .ID (ID )while \n\n"
    },
    {
        "code": "def __init__(self, result=None):\n    self.result = result\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 11321
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID .ID =ID \n\n",
        "wrong_code": "def ID (ID return ID =ID ):\n    ID .ID =ID \n\n"
    },
    {
        "code": "def metadata(self, *arg, **kw):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11322
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    return ID .ID \n",
        "wrong_code": "def ID (raise ,*ID ,**ID ):\n    return ID .ID \n"
    },
    {
        "code": "def __init__(self, name):\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/property/tests/test_init.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 11323
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID try ID \n"
    },
    {
        "code": "def _makeOne(self, context, request):\n    from ..undo import UndoViews\n    return UndoViews(context, request)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11324
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    from ..ID import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    from ..ID import ID \n    return ID (,ID )\n"
    },
    {
        "code": "\ndef test_undo_recent_no_referrer(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11325
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n",
        "wrong_code": "\nLIT ID (ID ):\n    pass \n\n"
    },
    {
        "code": "def test_undo_recent_with_referrer(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 11326
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def if ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_undo_recent_no_undo_info(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11327
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n",
        "wrong_code": "\ndef yield (ID ):\n    pass \n\n"
    },
    {
        "code": "def test_undo_recent_with_undo_info_no_match(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11328
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "None ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_undo_recent_with_undo_info_match(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 11329
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass import \n"
    },
    {
        "code": "\ndef test_undo_recent_with_undo_info_POSError(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11330
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nlambda "
    },
    {
        "code": "def get_connection(req):\n    self.assertEqual(req, request)\n    return conn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 11331
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):\nwith     ID .ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef test__get_db(self):\n    def get_connection(req):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11332
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (class ):\n        pass \n"
    },
    {
        "code": "def _get_db():\n    return db\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 11333
        },
        "correct_code": "def ID ():\n    return ID \n",
        "wrong_code": "def ID ():\nwith     return ID \n"
    },
    {
        "code": "def find_objectmap(ctx):\n    self.assertEqual(ctx, context)\n    return objectmap\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11334
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):ID .ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef test__undoable_transactions(self):\n    def _get_db():\n        pass\n    def find_objectmap(ctx):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11335
        },
        "correct_code": "\ndef ID (ID ):\n    def ID ():\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    ==ID ():\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def get_connection(req):\n    self.assertEqual(req, request)\n    return conn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11336
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .(ID ,ID )\n    return ID \n"
    },
    {
        "code": "def authenticated_userid(req):\n    self.assertEqual(req, request)\n    return 1\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11337
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID .(ID ,ID )\n    return LIT \n"
    },
    {
        "code": "def getall(n):\n    self.assertEqual(n, 'transaction')\n    return info\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11338
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return raise \n"
    },
    {
        "code": "\ndef test_undo_multiple(self):\n    def get_connection(req):\n        pass\n    def authenticated_userid(req):\n        pass\n    def getall(n):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11339
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID -ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def get_connection(req):\n    self.assertEqual(req, request)\n    return conn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 11340
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID !=.ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "def authenticated_userid(req):\n    self.assertEqual(req, request)\n    return 1\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11341
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID ID ID (ID ,ID )\n    return LIT \n"
    },
    {
        "code": "def getall(n):\n    self.assertEqual(n, 'transaction')\n    return info\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 11342
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    [return ID \n"
    },
    {
        "code": "\ndef test_undo_multiple_with_text_in_POST(self):\n    def get_connection(req):\n        pass\n    def authenticated_userid(req):\n        pass\n    def getall(n):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11343
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID :\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def get_connection(req):\n    self.assertEqual(req, request)\n    return conn\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11344
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n",
        "wrong_code": "with def ID (ID ):\n    ID .ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "def authenticated_userid(req):\n    self.assertEqual(req, request)\n    return 1\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11345
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,ID )\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    ID .ID except (ID ,ID )\n    return LIT \n"
    },
    {
        "code": "def getall(n):\n    self.assertEqual(n, 'transaction')\n    return info\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11346
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,LIT )\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT )break \n    return ID \n"
    },
    {
        "code": "\ndef test_undo_multiple_with_exception(self):\n    def get_connection(req):\n        pass\n    def authenticated_userid(req):\n        pass\n    def getall(n):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 11347
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID (ID ):\n        pass \n    def ID (ID ):\n        not pass \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "def _undoable_transactions(first, last):\n    return []\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11348
        },
        "correct_code": "def ID (ID ,ID ):\n    return []\n",
        "wrong_code": "def ID class ID ,ID ):\n    return []\n"
    },
    {
        "code": "\ndef test_undo_no_transactions(self):\n    def _undoable_transactions(first, last):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 11349
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ID continue (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _undoable_transactions(first, last):\n    return [None] * 10\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11350
        },
        "correct_code": "def ID (ID ,ID ):\n    return [ID ]*LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    return [ID ]*LIT ("
    },
    {
        "code": "\ndef test_undo_some_transactions_first(self):\n    def _undoable_transactions(first, last):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11351
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    def ==(ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _undoable_transactions(first, last):\n    return [None] * 10\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11352
        },
        "correct_code": "def ID (ID ,ID ):\n    return [ID ]*LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    return [ID ]*.LIT \n"
    },
    {
        "code": "\ndef test_undo_some_transactions_notfirst(self):\n    def _undoable_transactions(first, last):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11353
        },
        "correct_code": "\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID try ):\n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def _callFUT(self, v):\n    from ..undo import encode64\n    return encode64(v)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 11354
        },
        "correct_code": "def ID (ID ,ID ):\n    from ..ID import ID \n    return ID (ID )\n",
        "wrong_code": "/ID (ID ,ID ):\n    from ..ID import ID \n    return ID (ID )\n"
    },
    {
        "code": "\ndef test_it_len_lt_58(self):\n    import binascii\n    result = self._callFUT(b'a')\n    self.assertEqual(result, binascii.b2a_base64(b'a'))\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11355
        },
        "correct_code": "\ndef ID (ID ):\n    import ID \n    ID =ID .ID (LIT )\n    ID .ID (ID ,ID .ID (LIT ))\n\n",
        "wrong_code": "\ndef ID (ID ):\n    import ID \n    ID =ID .ID (LIT )\n    ID .ID (ID ,ID continue ID (LIT ))\n\n"
    },
    {
        "code": "def test_it_len_gt_58(self):\n    import binascii\n    result = self._callFUT(b'a'*80)\n    self.assertEqual(result, binascii.b2a_base64(b'a'*80)[:-1])\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 11356
        },
        "correct_code": "def ID (ID ):\n    import ID \n    ID =ID .ID (LIT *LIT )\n    ID .ID (ID ,ID .ID (LIT *LIT )[:-LIT ])\n",
        "wrong_code": "def ID (ID ):\n    import ID \n    ID =ID .ID (LIT break *LIT )\n    ID .ID (ID ,ID .ID (LIT *LIT )[:-LIT ])\n"
    },
    {
        "code": "def _callFUT(self, v):\n    from ..undo import decode64\n    return decode64(v)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 11357
        },
        "correct_code": "def ID (ID ,ID ):\n    from ..ID import ID \n    return ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    from ..ID import ID \n    not return ID (ID )\n"
    },
    {
        "code": "\ndef test_it_len_lt_58(self):\n    import binascii\n    send = binascii.b2a_base64(b'a')\n    result = self._callFUT(send)\n    self.assertEqual(result, b'a')\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11358
        },
        "correct_code": "\ndef ID (ID ):\n    import ID \n    ID =ID .ID (LIT )\n    ID =ID .ID (ID )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    import del \n    ID =ID .ID (LIT )\n    ID =ID .ID (ID )\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "def __init__(self, supports_undo, undo_info, undo_exc=None):\n    self.supports_undo = supports_undo\n    self.undo_info = undo_info\n    self.undone = []\n    self.undo_exc = undo_exc\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 11359
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    ID .ID ID \n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef undoLog(self, first, last):\n    self.first = first\n    self.last = last\n    return self.undo_info\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11360
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .=ID \n    ID .ID =ID \n    return ID .ID \n"
    },
    {
        "code": "\ndef undo(self, id):\n    if self.undo_exc:\n        raise self.undo_exc\n    self.undone.append(id)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 11361
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        raise ID .ID \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        raise ID .ID \n    ID .ID .ID (ID continue )\n"
    },
    {
        "code": "\ndef undoMultiple(self, tids):\n    if self.undo_exc:\n        raise self.undo_exc\n    self.tids = tids\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11362
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        raise ID .ID \n    ID .ID =ID \n\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        raise ID .ID \n    ID .=ID \n\n"
    },
    {
        "code": "def __init__(self, supports_undo=True, undo_info=(), undo_exc=None):\n    self._db = DummyDB(supports_undo, undo_info, undo_exc)\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11363
        },
        "correct_code": "def ID (ID ,ID =LIT ,ID =(),ID =ID ):\n    ID .ID =ID (ID ,ID ,ID )\n",
        "wrong_code": "class def ID (ID ,ID =LIT ,ID =(),ID =ID ):\n    ID .ID =ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef db(self):\n    return self._db\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11364
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):yield     return ID .ID \n"
    },
    {
        "code": "def mgmt_path(self, *arg, **kw):\n    return '/mgmt_path'\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 11365
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    return LIT \n",
        "wrong_code": "def ID (*ID ,*ID ,**ID ):\n    return LIT \n"
    },
    {
        "code": "def flash(self, msg, queue='info'):\n    self.flashed = msg\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 11366
        },
        "correct_code": "def ID (ID ,ID ,ID =LIT ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID =LIT from ):\n    ID .ID =ID \n"
    },
    {
        "code": "def commit(self):\n    self.committed = True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 11367
        },
        "correct_code": "def ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "def ID [(ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef abort(self):\n    self.aborted = True\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11368
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID from ID =LIT \n"
    },
    {
        "code": "\ndef note(self, msg):\n    self._note = msg\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 11369
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\nNone def ID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11370
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef setUser(self, user):\n    self.user = user\n    \n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11371
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n\n",
        "wrong_code": "\ndef ID (ID ,ID :\n    ID .ID =ID \n\n"
    },
    {
        "code": "def __init__(self, result):\n    self.result = result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11372
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,[):\n    ID .ID =ID \n"
    },
    {
        "code": "def object_for(self, other):\n    return self.result\n",
        "metadata": {
            "file": "py150_files/data/Pylons/substanced/substanced/sdi/views/tests/test_undo.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11373
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "def ==(ID ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\n@decorator(function=True)\ndef onefunction(request): # pragma: no cover\n    twofunction(request)\n    return request\n",
        "metadata": {
            "file": "py150_files/data/Pylons/venusian/venusian/tests/fixtures/import_and_scan/one.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 11374
        },
        "correct_code": "\n@ID (ID =LIT )\ndef ID (ID ):#COMMENT\n\n    ID (ID )\n    return ID \n",
        "wrong_code": "\n@ID (ID =LIT )\ndef ID (ID ):#COMMENT\n\n    ID (def ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef parsedate_tz(data):\n    if not res:\n        pass\n    if res[9] is None:\n        res[9] = 0\n    return tuple(res)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 108,
            "fix_type": "delete",
            "id": 11375
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID :\n        pass \n    if ID [LIT ]is ID :\n        ID [LIT ]=LIT \n    return ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    if not ID :\n        pass \n    if ID [LIT ]is ID :\n        ID [LIT ]=LIT \n    return ID (while ID )\n"
    },
    {
        "code": "\n\ndef parsedate(data):\n    \"\"\"Convert a time string to a time tuple.\"\"\"\n    t = parsedate_tz(data)\n    if isinstance(t, tuple):\n        return t[:9]\n    else:\n        return t\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 88,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11376
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID )\n    if ID (ID ,ID ):\n        return ID [:LIT ]\n    else :\n        return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID )\n    if ID (ID ,ID ):\n        return ID [:LIT ]]else :\n        return ID \n"
    },
    {
        "code": "\n\ndef mktime_tz(data):\n    if data[9] is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 11377
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID [LIT ]is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n==\ndef ID (ID ):\n    if ID [LIT ]is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef quote(str):\n    \"\"\"Prepare string to be used in a quoted string.\n\n    Turns backslash and double quote characters into quoted pairs.  These\n    are the only characters that need to be quoted inside a quoted string.\n    Does not add the surrounding double quotes.\n    \"\"\"\n    return str.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11378
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT ,LIT ).ID (LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT ,LIT ).(LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self, field):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11379
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef getaddrlist(self):\n    while self.pos < len(self.field):\n        if ad:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 11380
        },
        "correct_code": "\ndef ID (ID ):\n    while ID .ID <ID (ID .ID ):\n        if ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while ID .ID <ID (ID .ID )LIT :\n        if ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef getquote(self):\n    \"\"\"Get a quote-delimited fragment from self's field.\"\"\"\n    return self.getdelimited('\"', '\"\\r', False)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 11381
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID -.ID (LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef getcomment(self):\n    \"\"\"Get a parenthesis-delimited fragment from self's field.\"\"\"\n    return self.getdelimited('(', ')\\r', True)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 11382
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID (LIT ,LIT ,LIT break )\n"
    },
    {
        "code": "\ndef getdomainliteral(self):\n    \"\"\"Parse an RFC 2822 domain-literal.\"\"\"\n    return '[%s]' % self.getdelimited('[', ']\\r', False)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11383
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT %ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef .ID (ID ):\n    LIT \n    return LIT %ID .ID (LIT ,LIT ,LIT )\n"
    },
    {
        "code": "def __init__(self, field):\n    AddrlistClass.__init__(self, field)\n    if field:\n        self.addresslist = self.getaddrlist()\n    else:\n        self.addresslist = []\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11384
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,ID )\n    if ID :\n        ID .ID =ID .ID ()\n    else :\n        ID .ID =[]\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID ID ,ID )\n    if ID :\n        ID .ID =ID .ID ()\n    else :\n        ID .ID =[]\n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.addresslist)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11385
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "with \ndef ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef __add__(self, other):\n    for x in other.addresslist:\n        if not x in self.addresslist:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 11386
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        if not ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .None ID :\n        if not ID in ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef __iadd__(self, other):\n    # Set union, in-place\n    for x in other.addresslist:\n        if not x in self.addresslist:\n            self.addresslist.append(x)\n    return self\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "for",
            "id": 11387
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    for ID in ID .ID :\n        if not ID in ID .ID :\n            ID .ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID in ID .ID :\n        if not ID in ID .ID :\n            ID .ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef __sub__(self, other):\n    for x in self.addresslist:\n        if not x in other.addresslist:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11388
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        if not ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID ID :\n        if not ID in ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef __isub__(self, other):\n    # Set difference, in-place\n    for x in other.addresslist:\n        if x in self.addresslist:\n            self.addresslist.remove(x)\n    return self\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11389
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    for ID in ID .ID :\n        if ID in ID .ID :\n            ID .ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    for ID in ID .else :\n        if ID in ID .ID :\n            ID .ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef __getitem__(self, index):\n    # Make indexing, slices, and 'in' work\n    return self.addresslist[index]\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/email/_parseaddr.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11390
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    return ID .ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID (:\n#COMMENT\n\n    return ID .ID [ID ]\n"
    },
    {
        "code": "\ndef _close_conn(self):\n    fp = self.fp\n    self.fp = None\n    fp.close()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 11391
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID \n    ID .ID =ID \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID \n    ID .ID =ID \n    ID .ID ()\n    ="
    },
    {
        "code": "\ndef close(self):\n    super().close() # set \"closed\" flag\n    if self.fp:\n        self._close_conn()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 11392
        },
        "correct_code": "\ndef ID (ID ):\n    ID ().ID ()#COMMENT\n\n    if ID .ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ().ID ()as \n\n    if ID .ID :\n        ID .ID ()\n"
    },
    {
        "code": "\n    # These implementations are for the benefit of io.BufferedReader.\n\n    # XXX This class should probably be revised to act more like\n    # the \"raw stream\" that BufferedReader expects.\n\ndef flush(self):\n    super().flush()\n    if self.fp:\n        self.fp.flush()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 105,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11393
        },
        "correct_code": "\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID ().ID ()\n    if ID .ID :\n        ID .ID .ID ()\n",
        "wrong_code": "\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID ().ID ()\n    if ID .ID :\n        ID .ID .ID ()\n    ="
    },
    {
        "code": "\ndef readable(self):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11394
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef pass ID (ID ):\n    return LIT \n"
    },
    {
        "code": "\n# End of \"raw stream\" methods\n\ndef isclosed(self):\n    \"\"\"True if the connection is closed.\"\"\"\n    # NOTE: it is possible that we will not ever call self.close(). This\n    #       case occurs when will_close is TRUE, length is None, and we\n    #       read up to the last byte, but NOT past it.\n    #\n    # IMPLIES: if will_close is FALSE, then self.close() will ALWAYS be\n    #          called, meaning self.isclosed() is meaningful.\n    return self.fp is None\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 11395
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    return ID .ID is ID \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    nonlocal #COMMENT\n\n    #COMMENT\n\n    return ID .ID is ID \n"
    },
    {
        "code": "\ndef _read_next_chunk_size(self):\n    if len(line) > _MAXLINE:\n        pass\n    if i >= 0:\n        pass\n    try:\n        pass\n    except ValueError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 90,
            "fix_type": "insert",
            "fix_token": "",
            "id": 11396
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID )>ID :\n        pass \n    if ID >=LIT :\n        pass \n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID )>ID :\n        pass \n    if ID >=LIT :\n        pass \n        try :\n        pass \n        except ID :\n        pass \n    "
    },
    {
        "code": "\ndef _readall_chunked(self):\n    while True:\n        if chunk_left is None:\n            try:\n                if chunk_left == 0:\n                    pass\n            except ValueError:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 147,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11397
        },
        "correct_code": "\ndef ID (ID ):\n    while LIT :\n        if ID is ID :\n            try :\n                if ID ==LIT :\n                    pass \n            except ID :\n                pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while LIT :\n        if ID is ID :\n            try :\n                if ID ==LIT :\n                    pass \n                    as except ID :\n                pass \n    "
    },
    {
        "code": "\ndef _safe_read(self, amt):\n    while amt > 0:\n        if not chunk:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11398
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while ID >LIT :\n        if not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):raise     while ID >LIT :\n        if not ID :\n            pass \n"
    },
    {
        "code": "\ndef fileno(self):\n    return self.fp.fileno()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11399
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID try ID .ID ()\n"
    },
    {
        "code": "\ndef getheaders(self):\n    \"\"\"Return list of (header, value) tuples.\"\"\"\n    if self.headers is None:\n        raise ResponseNotReady()\n    return list(self.headers.items())\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11400
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID is ID :\n        raise ID ()\n    return ID (ID .ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):    LIT \n    if ID .ID is ID :\n        raise ID ()\n    return ID (ID .ID .ID ())\n"
    },
    {
        "code": "\n# We override IOBase.__iter__ so that it doesn't check for closed-ness\n\ndef __iter__(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 11401
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\n#COMMENT\n\n\ndef -ID (ID ):\n    return ID \n"
    },
    {
        "code": "\n# For compatibility with old-style urllib responses.\n\ndef info(self):\n    return self.headers\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11402
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "except \n#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef geturl(self):\n    return self.url\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 11403
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID )/:\n    return ID .ID \n"
    },
    {
        "code": "\ndef getcode(self):\n    return self.status\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11404
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return global .ID \n"
    },
    {
        "code": "\ndef __init__(self, host, port=None, strict=_strict_sentinel,\n             timeout=socket._GLOBAL_DEFAULT_TIMEOUT, source_address=None):\n    if strict is not _strict_sentinel:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 77,
            "fix_type": "delete",
            "id": 11405
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,\nID =ID .ID ,ID =ID ):\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,\nID =ID .ID ,ID =ID ):\n    if ID is not ID :if \n        pass \n"
    },
    {
        "code": "\ndef set_tunnel(self, host, port=None, headers=None):\n    if headers:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 80,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 11406
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n    else :\n        or \n"
    },
    {
        "code": "\ndef set_debuglevel(self, level):\n    self.debuglevel = level\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 11407
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID import (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef connect(self):\n    if self._tunnel_host:\n        self._tunnel()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11408
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID \n        ID .ID ()\n"
    },
    {
        "code": "\ndef close(self):\n    if self.sock:\n        pass\n    if self.__response:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11409
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    if ID ID :\n        pass \n"
    },
    {
        "code": "\ndef _output(self, s):\n    \"\"\"Add a line of output to the current request buffer.\n\n        Assumes that the line does *not* end with \\\\r\\\\n.\n        \"\"\"\n    self._buffer.append(s)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 11410
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .continue ID .ID (ID )\n"
    },
    {
        "code": "\ndef _send_output(self, message_body=None):\n    # If msg and message_body are sent in a single send() call,\n    # it will avoid performance problems caused by the interaction\n    # between delayed ack and the Nagle algorithm.\n    if isinstance(message_body, bytes):\n        pass\n    if message_body is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 124,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11411
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID ):\n        pass \n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID ):\n        pass \n    if ID is not ID :\n        pass \n!"
    },
    {
        "code": "\ndef endheaders(self, message_body=None):\n    if self.__state == _CS_REQ_STARTED:\n        self.__state = _CS_REQ_SENT\n    else:\n        raise CannotSendHeader()\n    self._send_output(message_body)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 93,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11412
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID .ID ==ID :\n        ID .ID =ID \n    else :\n        raise ID ()\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID .ID ==ID :\n        ID .ID =ID \n    else :\n        raise ID (\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef request(self, method, url, body=None, headers={}):\n    \"\"\"Send a complete request to the server.\"\"\"\n    self._send_request(method, url, body, headers)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11413
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID ={}):\n    LIT \n    ID .ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID ={}):\n    LIT \n    .ID (ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef connect(self):\n\n    if self._tunnel_host:\n        pass\n    try:\n        if self._check_hostname:\n            pass\n    except Exception:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 11414
        },
        "correct_code": "\ndef ID (ID ):\n\n    if ID .ID :\n        pass \n    try :\n        if ID .ID :\n            pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    if ID .ID :\n        pass \n    try :\n    in if ID .ID :\n            pass \n    except ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, version):\n    self.args = version,\n    self.version = version\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 11415
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID ,\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\nexcept     ID .ID =ID ,\n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, partial, expected=None):\n    self.args = partial,\n    self.partial = partial\n    self.expected = expected\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 11416
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID ,\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID )(:\n    ID .ID =ID ,\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __repr__(self):\n    if self.expected is not None:\n        pass\n    else:\n        pass\n    return 'IncompleteRead(%i bytes read%s)' % (len(self.partial), e)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 95,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 11417
        },
        "correct_code": "def ID (ID ):\n    if ID .ID is not ID :\n        pass \n    else :\n        pass \n    return LIT %(ID (ID .ID ),ID )\n",
        "wrong_code": "def ID (ID ):\n    if ID .ID is not ID :\n        pass \n    else :\n        pass \n    return LIT %ID (ID .ID ),ID )\n"
    },
    {
        "code": "def __str__(self):\n    return repr(self)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 11418
        },
        "correct_code": "def ID (ID ):\n    return ID (ID )\n",
        "wrong_code": "def ID (ID .):\n    return ID (ID )\n"
    },
    {
        "code": "def __init__(self, line):\n    if not line:\n        line = repr(line)\n    self.args = line,\n    self.line = line\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 11419
        },
        "correct_code": "def ID (ID ,ID ):\n    if not ID :\n        ID =ID (ID )\n    ID .ID =ID ,\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    if not ID :\n        ID =ID (yield ID )\n    ID .ID =ID ,\n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, line_type):\n    HTTPException.__init__(self, \"got more than %d bytes when reading %s\"\n                                 % (_MAXLINE, line_type))\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/backports/http/client.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11420
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID (ID ,LIT \n    %(ID ,ID ))\n",
        "wrong_code": "def assert (ID ,ID ):\n    ID .ID (ID ,LIT \n    %(ID ,ID ))\n"
    },
    {
        "code": "def __instancecheck__(cls, instance):\n    if cls == newint:\n        pass\n    else:\n        return issubclass(instance.__class__, cls)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 11421
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID ==ID :\n        pass \n    else :\n        return ID (ID .ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    if def ID ==ID :\n        pass \n    else :\n        return ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    \"\"\"\n        Without the L suffix\n        \"\"\"\n    value = super(newint, self).__repr__()\n    assert value[-1] == 'L'\n    return value[:-1]\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 11422
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (ID ,ID ).ID ()\n    assert ID [-LIT ]==LIT \n    return ID [:-LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT from \n    ID =ID (ID ,ID ).ID ()\n    assert ID [-LIT ]==LIT \n    return ID [:-LIT ]\n"
    },
    {
        "code": "\ndef __add__(self, other):\n    value = super(newint, self).__add__(other)\n    if value is NotImplemented:\n        return long(self) + other\n    return newint(value)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11423
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is ID :\n        return ID (ID )+ID \n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is :\n        return ID (ID )+ID \n    return ID (ID )\n"
    },
    {
        "code": "\ndef __radd__(self, other):\n    value = super(newint, self).__radd__(other)\n    if value is NotImplemented:\n        return other + long(self)\n    return newint(value)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11424
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is ID :\n        return ID +ID (ID )\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,)).ID (ID )\n    if ID is ID :\n        return ID +ID (ID )\n    return ID (ID )\n"
    },
    {
        "code": "\ndef __sub__(self, other):\n    value = super(newint, self).__sub__(other)\n    if value is NotImplemented:\n        return long(self) - other\n    return newint(value)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11425
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is ID :\n        return ID (ID )-ID \n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is :\n        return ID (ID )-ID \n    return ID (ID )\n"
    },
    {
        "code": "\ndef __mul__(self, other):\n    if isint(value):\n        pass\n    elif value is NotImplemented:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 11426
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ):\n        pass \n    elif ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):    if ID (ID ):\n        pass \n    elif ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef __rmul__(self, other):\n    if isint(value):\n        pass\n    elif value is NotImplemented:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "is",
            "id": 11427
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ):\n        pass \n    elif ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ):\n        pass \n    elif ID ID :\n        pass \n"
    },
    {
        "code": "\ndef __div__(self, other):\n    if isinstance(other, (int, long)):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 11428
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,(ID ,ID )):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID pass ,(ID ,ID )):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __rdiv__(self, other):\n    if isinstance(other, (int, long)):\n        return newint(value)\n    else:\n        return value\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11429
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,(ID ,ID )):\n        return ID (ID )\n    else :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,(class ID ,ID )):\n        return ID (ID )\n    else :\n        return ID \n"
    },
    {
        "code": "\ndef __idiv__(self, other):\n    if isinstance(other, (int, long)):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 89,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11430
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,(ID ,ID )):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,(ID ,ID )):\n        pass \n    else :\n        pass \n    !"
    },
    {
        "code": "\ndef __truediv__(self, other):\n    value = super(newint, self).__truediv__(other)\n    if value is NotImplemented:\n        value = long(self) / other\n    return value\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 86,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11431
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is ID :\n        ID =ID (ID )/ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID ).ID (ID )\n    if ID is ID :\n        ID =ID (ID /ID \n    return ID \n"
    },
    {
        "code": "\ndef __rtruediv__(self, other):\n    return super(newint, self).__rtruediv__(other)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11432
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID yield ID ,ID ).ID (ID )\n"
    },
    {
        "code": "\ndef __itruediv__(self, other):\n    # long has no __itruediv__ method\n    mylong = long(self)\n    mylong /= other\n    return mylong\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11433
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =ID (ID )\n    ID /=ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =ID (ID )\n    /=ID \n    return ID \n"
    },
    {
        "code": "\ndef __floordiv__(self, other):\n    return newint(super(newint, self).__floordiv__(other))\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11434
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID (ID ,ID ).ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID (ID ,ID ).ID (ID finally )\n"
    },
    {
        "code": "\ndef __rfloordiv__(self, other):\n    return newint(super(newint, self).__rfloordiv__(other))\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11435
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID (ID ,ID ).ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ID ):\n    return ID (ID (ID ,ID ).ID (ID ))\n"
    },
    {
        "code": "\ndef __ifloordiv__(self, other):\n    # long has no __ifloordiv__ method\n    mylong = long(self)\n    mylong //= other\n    return newint(mylong)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11436
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =ID (ID )\n    ID //=ID \n    return ID (ID )\n",
        "wrong_code": "\ndef ID (,ID ):\n#COMMENT\n\n    ID =ID (ID )\n    ID //=ID \n    return ID (ID )\n"
    },
    {
        "code": "\ndef __divmod__(self, other):\n    if value is NotImplemented:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 11437
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n        not "
    },
    {
        "code": "\ndef __rdivmod__(self, other):\n    if value is NotImplemented:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 11438
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID is ID \n        pass \n"
    },
    {
        "code": "\ndef __lshift__(self, other):\n    if not isint(other):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11439
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n        or "
    },
    {
        "code": "\ndef __rshift__(self, other):\n    if not isint(other):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11440
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n",
        "wrong_code": "except def ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __and__(self, other):\n    if not isint(other):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 11441
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not yield ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __or__(self, other):\n    if not isint(other):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 11442
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (import ID ,ID ):\n    if not ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __xor__(self, other):\n    if not isint(other):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 11443
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not \n    ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef __neg__(self):\n    return newint(super(newint, self).__neg__())\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 11444
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID (ID ,elif ID ).ID ())\n"
    },
    {
        "code": "\ndef __pos__(self):\n    return newint(super(newint, self).__pos__())\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 11445
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID continue ).ID ())\n"
    },
    {
        "code": "\ndef __abs__(self):\n    return newint(super(newint, self).__abs__())\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11446
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID )None ID ())\n"
    },
    {
        "code": "\ndef __invert__(self):\n    return newint(super(newint, self).__invert__())\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11447
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ,ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ::\n    return ID (ID (ID ,ID ).ID ())\n"
    },
    {
        "code": "\ndef __int__(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 11448
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID async (ID ):\n    return ID \n"
    },
    {
        "code": "\ndef __nonzero__(self):\n    return self.__bool__()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11449
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):while     return ID .ID ()\n"
    },
    {
        "code": "\ndef __bool__(self):\n    \"\"\"\n        So subclasses can override this, Py3-style\n        \"\"\"\n    return super(newint, self).__nonzero__()\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 11450
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID ).ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT global \n    return ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "\ndef __native__(self):\n    return long(self)\n",
        "metadata": {
            "file": "py150_files/data/OpenCobolIDE/OpenCobolIDE/open_cobol_ide/extlibs/future/types/newint.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11451
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID )!=\n    return ID (ID )\n"
    },
    {
        "code": "\ndef transform(self, node, results):\n    name = results[\"name\"]\n    touch_import_top(u'past.builtins', name.value, node)\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/src/libfuturize/fixes/fix_execfile.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11452
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID [LIT ]\n    ID (LIT ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID [LIT ]\n    ID (LIT ,ID .ID ,ID )\ndef "
    },
    {
        "code": "\ndef all_patterns(name):\n\n    # i_ denotes an import-like node\n    # u_ denotes a node that appears to be a usage of the name\n    if u'.' in name:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/src/libpasteurize/fixes/fix_imports.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11453
        },
        "correct_code": "\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    if LIT in ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    if LIT in ID :\n        pass \n        -else :\n        pass \n    "
    },
    {
        "code": "\ndef transform(self, node, results):\n    touch_import_top(u'future', u'standard_library', node)\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/src/libpasteurize/fixes/fix_imports.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 11454
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID (LIT ,LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ,ID (LIT ,LIT ,ID )\n"
    },
    {
        "code": "def __init__(self, code, tempdir):\n    self.code = code\n    self.tempdir = tempdir\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/tests/test_future/test_requests.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11455
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .=ID \n"
    },
    {
        "code": "\ndef __exit__(self, exc_type, exc_val, exc_tb):\n    if exc_type is None:\n        try:\n            pass\n        except OSError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/tests/test_future/test_requests.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 11456
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID is ID :\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,def ID ):\n    if ID is ID :\n        try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "def test_remove_hooks_then_requests(self):\n    with write_module(code, self.tempdir):\n        try:\n            pass\n        except ImportError:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/tests/test_future/test_requests.py",
            "fix_location": 110,
            "fix_type": "delete",
            "id": 11457
        },
        "correct_code": "def ID (ID ):\n    with ID (ID ,ID .ID ):\n        try :\n            pass \n        except ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "def ID (ID ):\n    with ID (ID ,ID .ID ):\n        try :\n            pass \n        except ID :\n            pass def \n        else :\n            pass \n"
    },
    {
        "code": "\n\ndef test_requests_cm(self):\n    with write_module(code, self.tempdir):\n        try:\n            pass\n        except ImportError:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/PythonCharmers/python-future/tests/test_future/test_requests.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11458
        },
        "correct_code": "\n\ndef ID (ID ):\n    with ID (ID ,ID .ID ):\n        try :\n            pass \n        except ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    with ID (ID ,ID .ID ):\n        try :\n            pass \n            *except ID :\n            pass \n            else :\n            pass \n    "
    },
    {
        "code": "def __init__(self, node, class_names):\n    self._class_names = class_names\n    self.visit(node)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 11459
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID while ):\n    ID .ID =ID \n    ID .ID (ID )\n"
    },
    {
        "code": "def __init__(self):\n    self._names = []\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 11460
        },
        "correct_code": "def ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =[\n"
    },
    {
        "code": "def visit_Name(self, node):\n    self._names.append( node )\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11461
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID .ID (==)\n"
    },
    {
        "code": "\ndef collect_names(node):\n    a = CollectNames()\n    a.visit( node )\n    return a._names\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11462
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID (ID )\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    break .ID (ID )\n    return ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, requirejs=False, insert_runtime=False):\n    self._class_props = dict()\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11463
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    ID .ID =ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,def =LIT ):\n    ID .ID =ID ()\n"
    },
    {
        "code": "\ndef visit_Import(self, node):\n    for alias in node.names:\n        return 'require \"%s\"' %alias.name\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 11464
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        return LIT %ID ID \n"
    },
    {
        "code": "\ndef _visit_subscript_ellipsis(self, node):\n    name = self.visit(node.value)\n    return '%s.__wrapped__' %name\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 11465
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID .ID )\n    return LIT %ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID .ID )\n    return async LIT %ID \n"
    },
    {
        "code": "\ndef visit_And(self, node):\n    return ' and '\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11466
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID while ,ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef visit_Or(self, node):\n    return ' or '\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11467
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID )==\n    return LIT \n"
    },
    {
        "code": "\ndef visit_Not(self, node):\n    return ' not '\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11468
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID )!=\n    return LIT \n"
    },
    {
        "code": "\ndef visit_IsNot(self, node):\n    return '~='\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 11469
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):try \n    return LIT \n"
    },
    {
        "code": "\ndef visit_NotEq(self, node):\n    return '~='\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 11470
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return LIT \n=="
    },
    {
        "code": "\ndef visit_Is(self, node):\n    return '=='\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 11471
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef async ID (ID ,ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef visit_Subscript(self, node):\n    if isinstance(node.slice, ast.Ellipsis):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11472
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID .ID ,ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID if ID .ID ,ID .ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _visit_call_helper_JSObject(self, node):\n    if node.keywords:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 11473
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID break .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _visit_call_helper_JSArray(self, node):\n    if node.args:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 11474
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID except ):\n    if ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _inline_code_helper(self, s):\n    return s\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 11475
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID *ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef visit_While(self, node):\n    for line in list( map(self.visit, node.body) ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11476
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID (ID .ID ,ID .ID )):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for in ID (ID (ID .ID ,ID .ID )):\n        pass \n"
    },
    {
        "code": "\n\n\ndef visit_Pass(self, node):\n    return '--pass--'\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 11477
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\n\n\ndef (ID ,ID ):\n    return LIT \n"
    },
    {
        "code": "\n\ndef visit_List(self, node):\n    ## note, arrays in lua start at index 1, not zero!\n    return '{%s}' % ', '.join(map(self.visit, node.elts))\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 11478
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    return LIT %LIT .ID (ID (ID .ID ,ID .ID ))\n",
        "wrong_code": "\n\nID (ID ,ID ):\n#COMMENT\n\n    return LIT %LIT .ID (ID (ID .ID ,ID .ID ))\n"
    },
    {
        "code": "\ndef visit_Dict(self, node):\n    for i in range( len(node.keys) ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 11479
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID (ID .ID )):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID (ID .ID )=:\n        pass \n"
    },
    {
        "code": "\ndef visit_ClassDef(self, node):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11480
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    raise ID \nlambda "
    },
    {
        "code": "\ndef visit_Expr(self, node):\n    return self.visit(node.value)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11481
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .,(ID .ID )\n"
    },
    {
        "code": "\n\ndef visit_Print(self, node):\n    args = [self.visit(e) for e in node.values]\n    return 'print(%s)' % ', '.join(args)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 11482
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =[ID .ID (ID )for ID in ID .ID ]\n    return LIT %LIT .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID =[ID .ID (ID )for ID in ID .ID ]\n    return LIT %LIT .if ID (ID )\n"
    },
    {
        "code": "\n\ndef visit_Return(self, node):\n    if isinstance(node.value, ast.Tuple):\n        pass\n    if node.value:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 93,
            "fix_type": "modify",
            "fix_token": "",
            "id": 11483
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID (ID .ID ,ID .ID ):\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID (ID .ID ,ID .ID ):\n        pass \n    if ID .ID :\n        pass \n)"
    },
    {
        "code": "\ndef visit_Assign(self, node):\n    if isinstance(target, ast.Tuple):\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 11484
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID .ID ):\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID .ID ):\n    def pass \n\n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef _visit_call_helper_instanceof(self, node):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 11485
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    raise ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID )def \n    raise ID \n"
    },
    {
        "code": "\ndef visit_Raise(self, node):\n    return 'error(%s)' % self.visit(node.type)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 11486
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT %ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ID ):\n    return LIT %ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef visit_TryExcept(self, node):\n    for n in node.body:\n        pass\n    for n in node.handlers:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 11487
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        pass \n    is for ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef visit_ExceptHandler(self, node):\n    if node.type:\n        pass\n    for n in node.body:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 94,
            "fix_type": "delete",
            "id": 11488
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    for ID in ID .ID :\n        pass \n        ,"
    },
    {
        "code": "\ndef main(script):\n    tree = ast.parse(script)\n    return LuaGenerator().visit(tree)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/pythonjs/pythonjs_to_lua.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 11489
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID )\n    return ID ().ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (ID )\n    return ID (.ID (ID )\n"
    },
    {
        "code": "def f(a, b, c):\n    return a+b+c\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/calling/args.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 11490
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    return ID +ID +ID \n",
        "wrong_code": "def ID (ID return ,ID ,ID ):\n    return ID +ID +ID \n"
    },
    {
        "code": "\ndef main():\n    TestError( f(1,2,3) == 6)\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/calling/args.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 11491
        },
        "correct_code": "\ndef ID ():\n    ID (ID (LIT ,LIT ,LIT )==LIT )\n",
        "wrong_code": "\ndef ID ():\n    ID (ID (LIT ,LIT [LIT )==LIT )\n"
    },
    {
        "code": "\ndef main():\n    a = {'foo':'bar'}\n    keys = a.keys()\n    TestError( 'foo' in keys )\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/dict/keys.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 11492
        },
        "correct_code": "\ndef ID ():\n    ID ={LIT :LIT }\n    ID =ID .ID ()\n    ID (LIT in ID )\n",
        "wrong_code": "\ndef ID ():\n    ID ={LIT :LIT }\n    ID =ID .ID ()\n    ID (LIT ID )\n"
    },
    {
        "code": "@javascript\ndef dummy(): return \"\"\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/lang/javascript_mode.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 11493
        },
        "correct_code": "@ID \ndef ID ():return LIT \n",
        "wrong_code": "else @ID \ndef ID ():return LIT \n"
    },
    {
        "code": "def main():\n    if PYTHON == 'PYTHONJS':\n        @javascript\n        def dummy(): return \"\"\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/lang/javascript_mode.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 11494
        },
        "correct_code": "def ID ():\n    if ID ==LIT :\n        @ID \n        def ID ():return LIT \n",
        "wrong_code": "def ID ():\n    if ID ==LIT :\n        @raise \n        def ID ():return LIT \n"
    },
    {
        "code": "\ndef fib(n):\n    a, b = 0, 1\n    for x in range(n):\n        yield a\n        a,b = b, a+b\n    yield 'world'\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/loop/yield.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 11495
        },
        "correct_code": "\ndef ID (ID ):\n    ID ,ID =LIT ,LIT \n    for ID in ID (ID ):\n        yield ID \n        ID ,ID =ID ,ID +ID \n    yield LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID ,ID =LIT ,LIT \n    for ID in ID (ID ):\n        yield ID \n        ID !,ID =ID ,ID +ID \n    yield LIT \n"
    },
    {
        "code": "\ndef main():\n    for n in fib(20):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/loop/yield.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 11496
        },
        "correct_code": "\ndef ID ():\n    for ID in ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID ():\n    for ID in ID (LIT ):.pass \n"
    },
    {
        "code": "\n@webworker( 'myworker.js' )\ndef mythread(a,b):\n    i = 0\n    while i < 10:\n        a.append('o')\n        i += 1\n        #sleep(0.1)\n    \n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/threads/shared_list_sleep.py",
            "fix_location": 74,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 11497
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ,ID ):\n    ID =LIT \n    while ID <LIT :\n        ID .ID (LIT )\n        ID +=LIT \n        #COMMENT\n\n\n",
        "wrong_code": "\n@ID (LIT )\ndef ID (ID ,ID ):\n    ID =LIT \n    while ID <LIT :\n        ID as ID (LIT )\n        ID +=LIT \n        #COMMENT\n\n\n"
    },
    {
        "code": "def main():\n    while i < 10:\n        pass\n\n    while len(shared1) <= 20:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/PythonJS/PythonJS/regtests/threads/shared_list_sleep.py",
            "fix_location": 90,
            "fix_type": "delete",
            "id": 11498
        },
        "correct_code": "def ID ():\n    while ID <LIT :\n        pass \n\n    while ID (ID )<=LIT :\n        pass \n",
        "wrong_code": "def ID ():\n    while ID <LIT :\n        pass \n\n    while ID (ID )<=LIT :\n        pass \n    finally "
    },
    {
        "code": "\ndef __init__(self, name):        \n    self.name = name\n    \n",
        "metadata": {
            "file": "py150_files/data/PythonProgramming/Beginning-Game-Development-with-Python-and-Pygame/Appendix B/ants_game.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 11499
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ID \n\n"
    },
    {
        "code": "def do_actions(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/PythonProgramming/Beginning-Game-Development-with-Python-and-Pygame/Appendix B/ants_game.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 11500
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID )-:\n    pass \n\n"
    }
]