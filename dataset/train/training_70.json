[
    {
        "code": "\ndef __init__(self, expr):\n    self.expr = expr\n    self.children = []\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 35001
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =[]from \n"
    },
    {
        "code": "\ndef __and__(self, other):\n    return And(self, other)\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35002
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (return ID ,ID ):\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef __or__(self, other):\n    return Or(self, other)\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 35003
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (pass ID ,ID )\n"
    },
    {
        "code": "\ndef __invert__(self):\n    return Not(self)\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35004
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID \n"
    },
    {
        "code": "\ndef freeze(self):\n    \"Returns a hashable representation of the query expression.\"\n    return (self.op, tuple(c.freeze() for c in self.children))\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35005
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return (ID .ID ,ID (ID .ID ()for ID in ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return (ID .ID ,:(ID .ID ()for ID in ID .ID ))\n"
    },
    {
        "code": "def freeze(self):\n    return (\"tag\", [self.expr])\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 35006
        },
        "correct_code": "def ID (ID ):\n    return (LIT ,[ID .ID ])\n",
        "wrong_code": "def ID (ID ):\n    return (LIT ,[ID .ID ])\n=="
    },
    {
        "code": "\ndef __init__(self, *exprs):\n    self.children = [Query.coerce(e) for e in exprs]\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35007
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID =[ID .ID (ID )for ID in ID ]\n",
        "wrong_code": "\ndef ID (return ID ,*ID ):\n    ID .ID =[ID .ID (ID )for ID in ID ]\n"
    },
    {
        "code": "\ndef __init__(self, *exprs):\n    self.children = [Query.coerce(e) for e in exprs]\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 35008
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID =[ID .ID (ID )for ID in ID ]\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    elif ID .ID =[ID .ID (ID )for ID in ID ]\n"
    },
    {
        "code": "\ndef __init__(self, expr):\n    self.expr = Query.coerce(expr)\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 35009
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID for ID (ID )\n"
    },
    {
        "code": "\ndef freeze(self):\n    return (\"not\", tuple([self.expr.freeze()]))\n",
        "metadata": {
            "file": "py150_files/data/jdp/taxon/taxon/query.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 35010
        },
        "correct_code": "\ndef ID (ID ):\n    return (LIT ,ID ([ID .ID .ID ()]))\n",
        "wrong_code": "\ndef ID (ID ):\n    return (LIT ,yield ID ([ID .ID .ID ()]))\n"
    },
    {
        "code": "def get_storage_path(instance, filename):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35011
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ):\nID     pass \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    default_kwargs = {'max_length': 255, 'blank': True}\n    default_kwargs.update(kwargs)\n    super(TagField, self).__init__(**default_kwargs)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 35012
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID ={LIT :LIT ,LIT :LIT }\n    ID .ID (ID )\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID ={LIT :LIT ,LIT :LIT }\n    ID .ID (/ID )\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef get_internal_type(self):\n    return 'CharField'\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35013
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (else ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.title\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35014
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID -):\n    return ID .ID \n"
    },
    {
        "code": "\ndef get_absolute_url(self):\n    return reverse('photologue:pl-gallery', args=[self.slug])\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35015
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT ,ID =[ID .ID ])\n",
        "wrong_code": "\ndef (ID ):\n    return ID (LIT ,ID =[ID .ID ])\n"
    },
    {
        "code": "\ndef latest(self, limit=LATEST_LIMIT, public=True):\n    if not limit:\n        pass\n    if public:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 98,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35016
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =LIT ):\n    if not ID :\n        pass \n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =LIT ):\n    if not ID :\n        pass \n    if ID :\n        pass \n    else :and pass \n"
    },
    {
        "code": "\ndef photo_count(self, public=True):\n    if public:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35017
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ID =LIT ):\n    if ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef public(self):\n    \"\"\"Return a queryset of all the public photos in this gallery.\"\"\"\n    return self.photos.is_public().filter(sites__id=settings.SITE_ID)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35018
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID ().ID (ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID and ).ID (ID =ID .ID )\n"
    },
    {
        "code": "\ndef orphaned_photos(self):\n    \"\"\"\n        Return all photos that belong to this gallery but don't share the\n        gallery's site.\n        \"\"\"\n    return self.photos.filter(is_public=True)\\\n                          .exclude(sites__id__in=self.sites.all())\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 80,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35019
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID =LIT ).ID (ID =ID .ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID =LIT ).ID (ID =ID .ID .ID ())\nwith "
    },
    {
        "code": "\ndef admin_thumbnail(self):\n    if func is None:\n        pass\n    else:\n        if hasattr(self, 'get_absolute_url'):\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 101,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35020
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    else :\n        if ID (ID ,LIT ):\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is ID :\n        pass \n    else :\n        if ID (ID ,LIT ):\n            pass else :\n            pass \n"
    },
    {
        "code": "\ndef cache_path(self):\n    return os.path.join(os.path.dirname(self.image.name), \"cache\")\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 35021
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID (ID .ID .ID (ID .ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID .ID (ID .ID LIT .ID (ID .ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef cache_url(self):\n    return '/'.join([os.path.dirname(self.image.url), \"cache\"])\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 35022
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID ([ID .ID .ID (ID .ID .ID ),LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT .ID ([ID import .ID .ID (ID .ID .ID ),LIT ])\n"
    },
    {
        "code": "\ndef image_filename(self):\n    return os.path.basename(force_text(self.image.name))\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35023
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID (ID (ID .ID .ID ))\n",
        "wrong_code": "\ndef ID (ID )del :\n    return ID .ID .ID (ID (ID .ID .ID ))\n"
    },
    {
        "code": "\ndef _get_filename_for_size(self, size):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35024
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (],ID ):\n    pass \n"
    },
    {
        "code": "\ndef _get_SIZE_photosize(self, size):\n    return PhotoSizeCache().sizes.get(size)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35025
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID ().ID .ID (ID )\n",
        "wrong_code": "\ndef (ID ,ID ):\n    return ID ().ID .ID (ID )\n"
    },
    {
        "code": "\ndef _get_SIZE_size(self, size):\n    if not self.size_exists(photosize):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35026
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID await ,ID ):\n    if not ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef _get_SIZE_url(self, size):\n    if not self.size_exists(photosize):\n        pass\n    if photosize.increment_count:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 35027
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        and pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _get_SIZE_filename(self, size):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35028
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ):\n    pass \n"
    },
    {
        "code": "\ndef increment_count(self):\n    self.view_count += 1\n    models.Model.save(self)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35029
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID +=LIT \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID -):\n    ID .ID +=LIT \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef __getattr__(self, name):\n    if not size_method_map:\n        pass\n    if di is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 35030
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n    if ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n    if ID is not ID :\n        pass \n    *else :\n        pass \n"
    },
    {
        "code": "\ndef size_exists(self, photosize):\n    if func is not None:\n        if self.image.storage.exists(func()):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35031
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is not ID :\n        if ID .ID .ID .ID (ID ()):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if !is not ID :\n        if ID .ID .ID .ID (ID ()):\n            pass \n"
    },
    {
        "code": "\ndef remove_size(self, photosize, remove_dirs=True):\n    if not self.size_exists(photosize):\n        pass\n    if self.image.storage.exists(filename):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 35032
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if not ID .ID (ID ):\n        pass \n    if ID .ID .ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID yield (ID ,ID ,ID =LIT ):\n    if not ID .ID (ID ):\n        pass \n    if ID .ID .ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef clear_cache(self):\n    cache = PhotoSizeCache()\n    for photosize in cache.sizes.values():\n        self.remove_size(photosize, False)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35033
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    for ID in ID .ID .ID ():\n        ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()for ID in ID .ID .ID ():\n        ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef pre_cache(self):\n    cache = PhotoSizeCache()\n    for photosize in cache.sizes.values():\n        if photosize.pre_cache:\n            self.create_size(photosize)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 111,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35034
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    for ID in ID .ID .ID ():\n        if ID .ID :\n            ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    for ID in ID .ID .ID ():\n        if ID .ID :\n            ID .ID (ID )\n        for "
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    super(ImageModel, self).__init__(*args, **kwargs)\n    self._old_image = self.image\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35035
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID (ID ,*ID =**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID .ID =ID .ID \n"
    },
    {
        "code": "\ndef delete(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35036
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.title\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 35037
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID \nfinally "
    },
    {
        "code": "\ndef save(self, *args, **kwargs):\n    if self.slug is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35038
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID .ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )\n    if ID .ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef get_absolute_url(self):\n    return reverse('photologue:pl-photo', args=[self.slug])\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35039
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT ,ID =[ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT ,=[ID .ID ])\n"
    },
    {
        "code": "\ndef public_galleries(self):\n    \"\"\"Return the public galleries to which this photo belongs.\"\"\"\n    return self.galleries.filter(is_public=True)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35040
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ).ID .ID (ID =LIT )\n"
    },
    {
        "code": "\ndef sample_dir(self):\n    return os.path.join(PHOTOLOGUE_DIR, 'samples')\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 35041
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID .assert ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef sample_url(self):\n    return settings.MEDIA_URL + '/'.join([PHOTOLOGUE_DIR, 'samples', '%s %s.jpg' % (self.name.lower(), 'sample')])\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35042
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID +LIT .ID ([ID ,LIT ,LIT %(ID .ID .ID (),LIT )])\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID +and .ID ([ID ,LIT ,LIT %(ID .ID .ID (),LIT )])\n"
    },
    {
        "code": "\ndef sample_filename(self):\n    return os.path.join(self.sample_dir(), '%s %s.jpg' % (self.name.lower(), 'sample'))\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35043
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID (ID .ID (),LIT %(ID .ID .ID (),LIT ))\n",
        "wrong_code": "\nawait ID (ID ):\n    return ID .ID .ID (ID .ID (),LIT %(ID .ID .ID (),LIT ))\n"
    },
    {
        "code": "\ndef create_sample(self):\n    try:\n        pass\n    except IOError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 35044
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        not pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef admin_sample(self):\n    return u'<img src=\"%s\">' % self.sample_url()\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 35045
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %ID .ID ()def \n"
    },
    {
        "code": "\ndef pre_process(self, im):\n    return im\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35046
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef post_process(self, im):\n    return im\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35047
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID \n    !="
    },
    {
        "code": "\ndef process(self, im):\n    im = self.pre_process(im)\n    im = self.post_process(im)\n    return im\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35048
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID )\n    ID =ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .)(ID )\n    ID =ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35049
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .\n"
    },
    {
        "code": "\ndef delete(self):\n    try:\n        default_storage.delete(self.sample_filename())\n    except:\n        pass\n    models.Model.delete(self)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35050
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        ID .ID (ID .ID ())\n    except :\n        pass \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        ID .ID (ID .ID (class )\n    except :\n        pass \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef post_process(self, im):\n    if self.reflection_size != 0.0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35051
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID !=LIT :\n        pass \n",
        "wrong_code": ")\ndef ID (ID ,ID ):\n    if ID .ID !=LIT :\n        pass \n"
    },
    {
        "code": "\ndef delete(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35052
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef post_process(self, im):\n    return apply_watermark(im, mark, self.style, self.opacity)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35053
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "with def ID (ID ,ID ):\n    return ID (ID ,ID ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35054
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ID \n"
    },
    {
        "code": "\ndef clear_cache(self):\n    for cls in ImageModel.__subclasses__():\n        for obj in cls.objects.all():\n            if self.pre_cache:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 35055
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID ():\n        for ID in ID .ID .ID ():\n            if ID .ID :\n                pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for del ID in ID .ID ():\n        for ID in ID .ID .ID ():\n            if ID .ID :\n                pass \n"
    },
    {
        "code": "\ndef clean(self):\n    if self.crop is True:\n        if self.width == 0 or self.height == 0:\n            raise ValidationError(\n                _(\"Can only crop photos if both width and height dimensions are set.\"))\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35056
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is LIT :\n        if ID .ID ==LIT or ID .ID ==LIT :\n            raise ID (\n            ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is LIT :\n        if ID .ID ==LIT or ID .ID ==LIT :except raise ID (\n            ID (LIT ))\n"
    },
    {
        "code": "\ndef save(self, *args, **kwargs):\n    super(PhotoSize, self).save(*args, **kwargs)\n    PhotoSizeCache().reset()\n    self.clear_cache()\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35057
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID ().ID ()\n    ID .ID ()\n",
        "wrong_code": "\ndef (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID ().ID ()\n    ID .ID ()\n"
    },
    {
        "code": "\ndef delete(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35058
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass *"
    },
    {
        "code": "\ndef _get_size(self):\n    return (self.width, self.height)\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35059
        },
        "correct_code": "\ndef ID (ID ):\n    return (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return (ID .ID ID .ID )\n"
    },
    {
        "code": "\ndef _set_size(self, value):\n    self.width, self.height = value\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35060
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ,ID .ID =ID \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    ID .ID ,ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self):\n    if not len(self.sizes):\n        for size in sizes:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35061
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID (ID .ID ):\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not ID (ID .ID :\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef reset(self):\n    global size_method_map\n    size_method_map = {}\n    self.sizes = {}\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35062
        },
        "correct_code": "\ndef ID (ID ):\n    global ID \n    ID ={}\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    global ID +ID ={}\n    ID .ID ={}\n"
    },
    {
        "code": "\n\ndef init_size_method_map():\n    for size in PhotoSizeCache().sizes.keys():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jdriscoll/django-photologue/photologue/models.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35063
        },
        "correct_code": "\n\ndef ID ():\n    for ID in ID ().ID .ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    for ID in ID (.ID .ID ():\n        pass \n"
    },
    {
        "code": "def send_event(self, event):\n    self.received_event = event\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/handler/test/test_relay.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35064
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def as (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "def test_interface(self):\n    self.assertTrue(IHandler.implementedBy(EventRelay))\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/handler/test/test_relay.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35065
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID .ID (ID ))\n",
        "wrong_code": "def ID (ID assert :\n    ID .ID (ID .ID (ID ))\n"
    },
    {
        "code": "\ndef test_name(self):\n    self.assertEqual(EventRelay.name, \"event-relay\")\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/handler/test/test_relay.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35066
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):elif     ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_send_event(self):\n    relay = EventRelay(factory)\n    relay(DUMMY_EVENT)\n    for broadcaster in factory.broadcasters:\n        self.assertEqual(broadcaster.received_event, DUMMY_EVENT)\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/handler/test/test_relay.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35067
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID )\n    ID (ID )\n    for ID in ID .ID :\n        ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID )\n    ID (ID )\n    for ID in ID .ID :\n        ID .ID (ID .ID ,))\n"
    },
    {
        "code": "def __init__(self, root):\n    self.root = root\n    self.databases = defaultdict(Lock)\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/utility/event_db.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 35068
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID (ID )\n",
        "wrong_code": "def ID (!ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID (ID )\n"
    },
    {
        "code": "\n@staticmethod\ndef _get_event_details(event):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jdswinbank/Comet/comet/utility/event_db.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35069
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \nglobal ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, db_num=0, host=None, port=None):\n\n    # define host, and port, if provided\n    if host:\n        pass\n    if port:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 35070
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ,ID =ID ):\n\n#COMMENT\n\n    if ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ,ID =ID )==:\n\n#COMMENT\n\n    if ID :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef start_redis(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 35071
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ("
    },
    {
        "code": "\ndef shutdown(self):\n    '''@shutdown\n\n        This method shuts down an established redis instance.\n\n        '''\n\n    if self.server and type(self.server) == redis.client.StrictRedis:\n        self.server.shutdown()\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 82,
            "fix_type": "delete",
            "id": 35072
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    if ID .ID and ID (ID .ID )==ID .ID .ID :\n        ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    if ID .ID and ID (ID .ID )==ID .ID .ID :\n        ID .continue ID .ID ()\n"
    },
    {
        "code": "\ndef bgsave(self):\n    '''@bgsave\n\n        This saves the current redis data to disk, in the background\n        (asynchronously).\n\n        Note: the corresponding dump file can be found in the 'redis.conf'\n              file, associated with 'dbfilename'. By default, it is called\n              'dump.rdb'.\n\n        '''\n\n    self.server.bgsave()\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35073
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    from \n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef set(self, key, value):\n    '''@set\n\n        This method caches the provided key-value into a redis set data\n        structure.\n\n        Note: by default, redis keys are created without an associated time to\n              live.  Therefore, the key will live until it is explicitly\n              removed.\n\n        '''\n\n    self.server.set(key, value)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35074
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef setex(self, key, value, time):\n    '''@setex\n\n        This method is responsible for setting the provided key-value into a\n        redis set data structure, with an expire time (in seconds).\n\n        '''\n\n    self.server.set(key, value, time)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35075
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n    None ID .ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef expire(self, key, time):\n    '''@expire\n\n        This sets an expire time (in seconds), for an existing redis object.\n\n        '''\n\n    self.server.expire(key, time)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35076
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef persist(self, name):\n    '''@persist\n\n        This removes an expire time (in seconds), for an existing redis object.\n\n        '''\n\n    self.server.persist(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35077
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    LIT \n\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef rename(self, src, dst):\n    '''@rename\n\n        This method renames an existing redis object.\n\n        '''\n\n    self.server.rename(src, dst)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 49,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35078
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (,ID )\n"
    },
    {
        "code": "\ndef type(self, name):\n    '''@type\n\n        This method returns the type of the provided redis object.\n\n        '''\n\n    return self.server.type(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35079
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,pass ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef get(self, key):\n    '''@get\n\n        This method returns the redis value, using the provided key.\n\n        '''\n\n    return self.server.get(key)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35080
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID \n"
    },
    {
        "code": "\ndef delete(self, key):\n    '''@delete\n\n        This method deletes the desired redis structure, using the provided\n        key.\n\n        '''\n\n    self.server.delete(key)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35081
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID :\n    LIT \n\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef lset(self, name, index, value):\n    '''@lset\n\n        This method assigns an index for the provided value, within the\n        respective list.\n\n        '''\n\n    self.server.lset(name, index, value)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35082
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ((ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef lindex(self, name, index):\n    '''@lindex\n\n        This method returns the element at index in the list stored at key.\n\n        '''\n\n    return self.server.lindex(name, index)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 35083
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .+ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef lrem(self, name, count, value):\n    '''@lrem\n\n        This method removes the first count occurrences of elements equal to\n        value within the redist list.\n\n        '''\n\n    self.server.lrem(name, count, value)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35084
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID continue :\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef lpush(self, name, *values):\n    '''@lpush\n\n        This method pushes the provided values onto the beginning of a redis\n        list.\n\n        '''\n\n    self.server.lpush(name, *values)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35085
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .-.ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef rpush(self, name, *values):\n    '''@rpush\n\n        This method pushes the provided values onto the ending of a redis\n        list.\n\n        '''\n\n    self.server.rpush(name, *values)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35086
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef lpop(self, name):\n    '''@lpop\n\n        This method removes, and returns the first item of the specified redis\n        list.\n\n        '''\n\n    return self.server.lpop(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35087
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID ID (ID )\n"
    },
    {
        "code": "\ndef rpop(self, name):\n    '''@rpop\n\n        This method removes, and returns the last item of the specified redis\n        list\n\n        '''\n\n    return self.server.rpop(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 35088
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT *\n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef ltrim(self, name, start, end):\n    '''@ltrim\n\n        This method trims the redis list, removing all elements not within the\n        slice bounds.\n\n        '''\n\n    self.server.ltrim(name, start, end)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35089
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ID ,ID )\n"
    },
    {
        "code": "\ndef lrange(self, name, start, end):\n    '''@lrange\n\n        This method returns a slice of the redis list between the slice\n        bounds.\n\n        '''\n\n    return self.server.lrange(name, start, end)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 35090
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID ,ID ))\n"
    },
    {
        "code": "\ndef llen(self, name):\n    '''@llen\n\n        This method returns the length of the redis list.\n\n        '''\n\n    return self.server.llen(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 35091
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID as (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef hdel(self, name, *keys):\n    '''@hdel\n\n        This method deletes a value from the redis hash.\n\n        '''\n\n    self.server.hdel(name, *keys)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 35092
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,[*ID )\n"
    },
    {
        "code": "\ndef hexists(self, name, key):\n    '''@hexists\n\n        This method returns a boolean if a key exists within the specified\n        redis hash.\n\n        '''\n\n    return self.server.hexists(name, key)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35093
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID with ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef hget(self, name, key):\n    '''@hget\n\n        This method returns a value from the specified redis hash.\n\n        '''\n\n    return self.server.hget(name, key)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 35094
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )-\n"
    },
    {
        "code": "\ndef hset(self, name, key, value):\n    '''@hset\n\n        This method sets a value into a redis hash.\n\n        '''\n\n    self.server.hset(name, key, value)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35095
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID *ID ,ID ):\n    LIT \n\n    ID .ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef hvals(self, name):\n    '''@hvals\n\n        This method returns the list of values within the specified redis\n        hash.\n\n        '''\n\n    return self.server.hvals(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35096
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID :\n    LIT \n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef hlen(self, name):\n    '''@hlen\n\n        This method returns the number of elements within the specified redis\n        hash.\n\n        '''\n\n    return self.server.hlen(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35097
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )def "
    },
    {
        "code": "\ndef hkeys(self, name):\n    '''@hkeys\n\n        This method returns the list of keys within the specified redis hash.\n\n        '''\n\n    return self.server.hkeys(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35098
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,except ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef sadd(self, name, *values):\n    '''@sadd\n\n        This method adds values to the specified redis set.\n\n        '''\n\n    self.server.sadd(name, *values)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35099
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\nID (ID ,ID ,*ID ):\n    LIT \n\n    ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef scard(self, name):\n    '''@scard\n\n        This method returns the number of elements with the specified redis\n        set.\n\n        '''\n    return self.server.scard(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35100
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID ID ,ID ):\n    LIT \n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef sinter(self, keys, *args):\n    '''@sinter\n\n        This method returns the intersection between redis sets, specified\n        by the multiple supplied keys.\n\n        '''\n\n    return self.server.sinter(keys, *args)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35101
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    -\n\n    return ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef sismember(self, name, value):\n    '''@sismember\n\n        This method returns a boolean if the specified value exists within the\n        specified redis set.\n\n        '''\n\n    return self.server.sismember(name, value)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35102
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    and \n\n    return ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef smembers(self, name):\n    '''@smembers\n\n        This method returns all members of the specified redis set.\n\n        '''\n\n    return self.server.smembers(name)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 35103
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    return ID .if ID .ID (ID )\n"
    },
    {
        "code": "\ndef srem(self, name, *values):\n    '''@srem\n\n        This method removes values from the specified redis set.\n\n        '''\n\n    return self.server.srem(name, *values)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35104
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    return ID .ID .ID (,*ID )\n"
    },
    {
        "code": "\ndef sunion(self, keys, *args):\n    '''@sunion\n\n        This method returns the union between redis sets, specified\n        by the multiple supplied keys.\n\n        '''\n\n    return self.server.sunion(keys, *args)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35105
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID )continue \n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef sunionstore(self, key, *args):\n    '''@sunionstore\n\n        This method stores the union between redis sets, specified\n        by the multiple supplied keys (*args), into a redis set\n        designated by 'key'.\n\n        '''\n\n    return self.server.sunionstore(key, *args)\n",
        "metadata": {
            "file": "py150_files/data/jeff1evesque/machine-learning/brain/cache/redis_query.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 35106
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID )None :\n    LIT \n\n    return ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef ex_validator():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffh/sniffer/sniffer/tests/test_api.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35107
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ()\n    pass \n"
    },
    {
        "code": "\ndef test_decorator_adds_runnable_name_to_wrapped_func(self):\n\n    def ex_validator():\n        pass\n\n    validator = select_runnable('tagged')(file_validator(ex_validator))\n\n    self.assertEqual(validator.runnable, 'tagged')\n",
        "metadata": {
            "file": "py150_files/data/jeffh/sniffer/sniffer/tests/test_api.py",
            "fix_location": 91,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35108
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID ():\n        pass \n\n    ID =ID (LIT )(ID (ID ))\n\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n\n    def ID ():\n        pass \n\n    ID =ID (LIT )(ID (ID ))\n\n    ID .ID (ID .,LIT )\n"
    },
    {
        "code": "\ndef setup_method(self, _):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35109
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID pass ID ):\n    pass \n"
    },
    {
        "code": "\ndef teardown_method(self, _):\n    \"\"\"Remove the database file copied during setup.\"\"\"\n    os.unlink(self.DB_LOCATION)\n    #pylint: disable=attribute-defined-outside-init\n    self.app = None\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 35110
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID .ID )\n    #COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID continue ID )\n    #COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef post_response(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35111
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID for :\n    pass \n"
    },
    {
        "code": "\n@staticmethod\ndef is_html_response(response):\n    \"\"\"Return True if *response* is an HTML response\"\"\"\n    assert 'text/html' in str(response.headers['Content-type'])\n    return '<!DOCTYPE html>' in response.get_data(as_text=True)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 35112
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    assert LIT in ID (ID .ID [LIT ])\n    return LIT in ID .ID (ID =LIT )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    assert LIT in ID (ID .ID [])\n    return LIT in ID .ID (ID =LIT )\n"
    },
    {
        "code": "def test_get(self):\n    \"\"\"Test simple HTTP GET\"\"\"\n    response = self.get_response('/artists', 200)\n    assert len(json.loads(response.get_data(as_text=True))[u'resources']) == 275\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 96,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 35113
        },
        "correct_code": "def ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID (ID .ID (ID .ID (ID =LIT ))[LIT ])==LIT \n",
        "wrong_code": "def ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID (ID .ID (ID .ID (ID =LIT ))[LIT )==LIT \n"
    },
    {
        "code": "\ndef test_get_with_limit(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 35114
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT pass \n"
    },
    {
        "code": "\ndef test_get_with_filter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35115
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )with \n    pass \n"
    },
    {
        "code": "\ndef test_get_with_like_filter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35116
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID continue :\n    pass \n"
    },
    {
        "code": "\ndef test_get_with_sort(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 35117
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):elif \n    pass \n"
    },
    {
        "code": "\ndef test_get_attribute(self):\n    \"\"\"Test simple HTTP GET\"\"\"\n    response = self.get_response('/artists/1/Name', 200)\n    assert json.loads(response.get_data(as_text=True))[u'Name'] == 'AC/DC'\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35118
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID .ID (ID .ID (ID =LIT ))[LIT ]==LIT \n",
        "wrong_code": "\ndef ID (for ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID .ID (ID .ID (ID =LIT ))[LIT ]==LIT \n"
    },
    {
        "code": "\ndef test_get_meta(self):\n    \"\"\"Test simple HTTP GET\"\"\"\n    response = self.get_response('/', 200)\n    assert 'meta' in json.loads(response.get_data(as_text=True))['artists']\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35119
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert LIT in ID .ID (ID .ID (ID =LIT ))[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert LIT in ID .ID (ID .ID (=LIT ))[LIT ]\n"
    },
    {
        "code": "\ndef test_get_root(self):\n    \"\"\"Test simple HTTP GET\"\"\"\n    response = self.get_response('/artists/meta', 200)\n    assert 'Name' in json.loads(response.get_data(as_text=True))['Artist']\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35120
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert LIT in ID .ID (ID .ID (ID =LIT ))[LIT ]\n",
        "wrong_code": "/\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert LIT in ID .ID (ID .ID (ID =LIT ))[LIT ]\n"
    },
    {
        "code": "\n\ndef test_get_object_attribute(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 35121
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \n    class "
    },
    {
        "code": "\ndef test_get_link_header_for_resource(self):\n    assert self.get_response('/Album/1', 200).data is not None\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35122
        },
        "correct_code": "\ndef ID (ID ):\n    assert ID .ID (LIT ,LIT ).ID is not ID \n",
        "wrong_code": "\ndef ID (ID ):\n    assert ID .ID (LIT ,LIT .ID is not ID \n"
    },
    {
        "code": "\ndef test_get_etag_header(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35123
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_etag_no_match(self):\n    cached_response = self.get_response('/tracks/1', 412, headers={'If-Match': 'foo'}, has_data=False)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 35124
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT ,LIT ,ID ={LIT :LIT },ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID global =ID .ID (LIT ,LIT ,ID ={LIT :LIT },ID =LIT )\n"
    },
    {
        "code": "\ndef test_post(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35125
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID None :\n    pass \n"
    },
    {
        "code": "\ndef test_posted_location(self):\n    \"\"\"Make sure 'Location' header returned in response actually points to\n        new resource created during POST.\"\"\"\n    post_response = self.post_response()\n    location = post_response.headers['Location']\n    self.get_response(location, 200)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35126
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID =ID .ID [LIT ]\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT lambda ID =ID .ID ()\n    ID =ID .ID [LIT ]\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_posted_uri(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35127
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_patch_new_resource(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35128
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (pass ):\n    pass \n"
    },
    {
        "code": "\n\n\ndef test_patch_existing_resource(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 35129
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n\ndef ID (ID ):\n    pass \n+"
    },
    {
        "code": "\ndef test_delete_resource(self):\n    \"\"\"Test DELETEing a resource.\"\"\"\n    response = self.app.delete('/artists/239')\n    assert response.status_code == 204\n    response = self.get_response('/artists/239', 404, False)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 35130
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n    ID =ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):is \n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n    ID =ID .ID (LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_delete_resource_violating_constraint(self):\n    \"\"\"Test DELETEing a resource which violates a foreign key\n        constraint (i.e. the record is still referred to in another table).\"\"\"\n    response = self.app.delete('/artists/275')\n    assert response.status_code == 422\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 35131
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .except ID .ID (LIT )\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_delete_non_existant_resource(self):\n    \"\"\"Test DELETEing a resource that doesn't exist.\"\"\"\n    response = self.app.delete('/artists/404')\n    assert response.status_code == 404\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35132
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID ID .ID (LIT )\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_put_resource(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 35133
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    *"
    },
    {
        "code": "\ndef test_put_unknown_resource(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35134
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID global :\n    pass \n"
    },
    {
        "code": "\ndef test_put_invalid_foreign_key(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35135
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID lambda :\n    pass \n"
    },
    {
        "code": "\ndef test_user_defined_endpoint(self):\n    \"\"\"Make sure user-defined endpoint exists.\"\"\"\n    response = self.get_response('/styles', 200)\n    assert len(json.loads(response.get_data(as_text=True))[u'resources']) == 25\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35136
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID (ID .ID (ID .ID (ID =LIT ))[LIT ])==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    or =ID .ID (LIT ,LIT )\n    assert ID (ID .ID (ID .ID (ID =LIT ))[LIT ])==LIT \n"
    },
    {
        "code": "\ndef test_user_validation_reject(self):\n    \"\"\"Test user-defined validation which on request which should be\n        rejected.\"\"\"\n    self.get_response('/styles/1', 403, False)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 35137
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\nraise     LIT \n    ID .ID (LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_user_validation_accept(self):\n    \"\"\"Test user-defined validation which on request which should be\n        accepted.\"\"\"\n    self.get_response('/styles/2', 200)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35138
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_put_fail_validation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 35139
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass assert \n"
    },
    {
        "code": "\ndef test_responds_with_top_level_json_name_if_present(self):\n    \"\"\"Test top level json element is the one defined on the Model\n        rather than the string 'resources'\"\"\"\n    response = self.get_response('/albums', 200)\n    assert len(json.loads(response.get_data(as_text=True))[u'Albums']) == 347\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 35140
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID (ID .ID (ID .ID (ID =LIT ))[LIT ])==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT )\n    assert ID :(ID .ID (ID .ID (ID =LIT ))[LIT ])==LIT \n"
    },
    {
        "code": "\ndef test_delete_not_supported(self):\n    \"\"\"Test DELETEing a resource for an endpoint that doesn't support it.\"\"\"\n    response = self.app.delete('/playlists/1')\n    assert response.status_code == 403\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35141
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (break ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_unsupported_patch_resource(self):\n    response = self.app.patch('/styles/26',\n            content_type='application/json',\n            data=json.dumps({u'Name': u'Hip-Hop'}))\n    assert response.status_code == 403\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 72,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 35142
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID =ID .ID ({LIT :LIT }))\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID =ID .ID ({:LIT }))\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_unsupported_get_resource(self):\n    \"\"\"Test GETing a resource for an endpoint that doesn't support it.\"\"\"\n    self.get_response('/playlists', 403, False)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 35143
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT !=,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_unsupported_collection_method(self):\n    response = self.app.post('/styles',\n            content_type='application/json',\n            data=json.dumps({u'Name': u'Jeff Knupp'}))\n    assert response.status_code == 403\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35144
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID =ID .ID ({LIT :LIT }))\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ID (LIT ,\n    ID =LIT ,\n    ID =ID .ID ({LIT :LIT }))\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_pagination(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35145
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nfor ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_html(self):\n    \"\"\"Test getting HTML version of a resource rather than JSON.\"\"\"\n    response = self.get_response('/artists/1',\n            200,\n            headers={'Accept': 'text/html'})\n    assert self.is_html_response(response)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35146
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_get_html_attribute(self):\n    \"\"\"Test getting HTML version of a resource rather than JSON.\"\"\"\n    response = self.get_response('/artists/1/Name',\n            200,\n            headers={'Accept': 'text/html'})\n    assert self.is_html_response(response)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 91,
            "fix_type": "delete",
            "id": 35147
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })\n    assert ID LIT .ID (ID )\n"
    },
    {
        "code": "\ndef test_get_html_non_existant_resource(self):\n    \"\"\"Test getting HTML version of a resource rather than JSON.\"\"\"\n    response = self.get_response('/artists/99999',\n            404,\n            headers={'Accept': 'text/html'})\n    assert self.is_html_response(response)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 35148
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,\n    LIT ,\n    ID ={LIT :LIT })assert \n    assert ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_get_meta_html(self):\n    \"\"\"Test simple HTTP GET\"\"\"\n    response = self.get_response('/', 200, headers={'Accept': 'text/html'})\n    assert 'meta' in response.get_data(as_text=True)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35149
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT ,LIT ,ID ={LIT :LIT })\n    assert LIT in ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    except ID =ID .ID (LIT ,LIT ,ID ={LIT :LIT })\n    assert LIT in ID .ID (ID =LIT )\n"
    },
    {
        "code": "\n\ndef test_get_html_collection(self):\n    assert 'Aerosmith' in response.get_data(as_text=True)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35150
        },
        "correct_code": "\n\ndef ID (ID ):\n    assert LIT in ID .ID (ID =LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    assert class in ID .ID (ID =LIT )\n"
    },
    {
        "code": "\ndef test_get_json(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35151
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "return def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_unknown_url(self):\n    \"\"\"Test sending a GET request to a URL that would match the\n        URL patterns of the API but is not a valid endpoint (e.g. 'foo/bar').\"\"\"\n    self.get_response('/foo/bar', 404)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35152
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (,):\n    LIT \n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_delete_resource_html(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35153
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )-:\n    pass \n"
    },
    {
        "code": "\ndef test_patch_new_resource_html(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35154
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )while :\n    pass \n"
    },
    {
        "code": "\ndef test_post_html_response(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35155
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nfor "
    },
    {
        "code": "\ndef test_post_html_with_charset(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 35156
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef or ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_post_no_json_data(self):\n    \"\"\"Test POSTing a resource with no JSON data.\"\"\"\n    response = self.app.post('/artists',\n            content_type='application/json',\n            data=dict())\n    assert response.status_code == 400\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 35157
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID =ID ())\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID =finally ID ())\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_post_no_html_form_data(self):\n    \"\"\"Test POSTing a resource with no form data.\"\"\"\n    response = self.app.post('/artists',\n            data=dict())\n    assert response.status_code == 400\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 35158
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID =ID ())\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID =ID ())\n    assert ID .[ID ==LIT \n"
    },
    {
        "code": "\ndef test_post_unsupported_content_type(self):\n    \"\"\"Test POSTing with an unsupported Content-type.\"\"\"\n    response = self.app.post('/artists',\n            content_type='foobar',\n            data={'Foo': 'bar'})\n    assert response.status_code == 415\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 35159
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID =LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT [,\n    ID =LIT ,\n    ID ={LIT :LIT })\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_post_unsupported_accept_type(self):\n    \"\"\"Test POSTing with an unsupported Accept content-type.\"\"\"\n    response = self.app.post('/artists',\n            headers={'Accept': 'foo'},\n            data={'Foo': 'bar'})\n    assert response.status_code == 415\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 35160
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID ={LIT :LIT },\n    ID ={LIT :LIT })\n    assert ID .ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT ,\n    ID ={LIT :LIT },\n    ID ={LIT :})\n    assert ID .ID ==LIT \n"
    },
    {
        "code": "\ndef test_put_unknown_resource_form_data(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35161
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (continue ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_admin_index(self):\n    \"\"\"Ensure the main admin page is served correctly.\"\"\"\n    self.get_response('/admin/', 200)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35162
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    else ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_admin_collection_view(self):\n    \"\"\"Ensure user-defined ``__str__`` implementations are being picked up\n        by the admin.\"\"\"\n\n    response = self.get_response('/admin/trackview/', 200)\n    # If related tables are being loaded correctly, Tracks will have a\n    # Mediatype column, at least one of which has the value 'MPEG audio\n    # file'.\n    assert 'MPEG audio file' in str(response.get_data(as_text=True))\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35163
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID =ID .ID (LIT ,LIT )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    assert LIT in ID (ID .ID (ID =LIT ))\n",
        "wrong_code": "\ndef (ID ):\n    LIT \n\n    ID =ID .ID (LIT ,LIT )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    assert LIT in ID (ID .ID (ID =LIT ))\n"
    },
    {
        "code": "\ndef test_admin_default_str_repr(self):\n\n    response = self.get_response('/admin/trackview/?page=3/', 200)\n    # If related tables are being loaded correctly, Tracks will have a\n    # Genre column, but should display the GenreId and not the name ('Jazz'\n    # is the genre for many results on the third page\n    assert 'Jazz' not in str(response.get_data(as_text=True))\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35164
        },
        "correct_code": "\ndef ID (ID ):\n\n    ID =ID .ID (LIT ,LIT )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    assert LIT not in ID (ID .ID (ID =LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n\n    ID =ID ID (LIT ,LIT )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    assert LIT not in ID (ID .ID (ID =LIT ))\n"
    },
    {
        "code": "\n#pylint: disable=invalid-name\ndef test_admin_default_str_repr_different_table_class_name(self):\n    \"\"\"Ensure default ``__str__`` representation for classes where the\n        classname differs from the table name show up with the classname (not the\n        table name).\"\"\"\n\n    response = self.get_response('/admin/styleview/', 200)\n    assert 'Genre' not in str(response.get_data(as_text=True))\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35165
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    LIT \n\n    ID =ID .ID (LIT ,LIT )\n    assert LIT not in ID (ID .ID (ID =LIT ))\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ):\n    LIT \n\n    ID =ID .ID (LIT ,LIT )\n    assert =not in ID (ID .ID (ID =LIT ))\n"
    },
    {
        "code": "\ndef setup_method(self, args):\n    super(TestExistingModel, self).setup_method(args)\n    app.config['SANDMAN_SHOW_PKS'] = True\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 35166
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (ID ,ID ).ID (ID )\n    ID .ID [LIT ]=LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID (ID ,ID ).ID (ID )\n    ID .ID [LIT ]=LIT \nif "
    },
    {
        "code": "\ndef test_get_resource_for_existing_model(self):\n    \"\"\"Can we get a resource for an existing model?\"\"\"\n    self.get_response('/somemodels/1', 200)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 35167
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\nfrom "
    },
    {
        "code": "\ndef test_get_meta_for_existing_class(self):\n    \"\"\"Can we get the meta information for an existing model.\"\"\"\n    self.get_response('/somemodels/meta', 200)\n",
        "metadata": {
            "file": "py150_files/data/jeffknupp/sandman/tests/test_sandman.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35168
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):    LIT \n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self, deferred):\n    self._deferred = deferred\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35169
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,else ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, fget, name=None, doc=None):\n    self.name = name or fget.__name__\n    self.fget = fget\n    self.__doc__ = doc or fget.__doc__\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 102,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35170
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    ID .ID =ID or ID .ID \n    ID .ID =ID \n    ID .ID =ID or ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    ID .ID =ID or ID .ID \n    ID .ID =ID \n    ID .ID =ID or ID .ID None "
    },
    {
        "code": "\ndef __get__(self, instance, cls):\n    if instance is None:\n        pass\n    if self.name in instance.__dict__:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 35171
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass \n    if ID .ID in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass \n    if ID .-ID in ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __set__(self, instance, value):\n    instance.__dict__[self.name] = value\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35172
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID .ID ]=ID \n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    ID .ID [ID .ID ]=ID \n"
    },
    {
        "code": "\ndef __delete__(self, instance):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35173
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID )and :\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, fget, name=None, doc=None):\n    self.name = name or fget.__name__\n    self.fget = fget\n    self.__doc__ = doc or fget.__doc__\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 107,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35174
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    ID .ID =ID or ID .ID \n    ID .ID =ID \n    ID .ID =ID or ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    ID .ID =ID or ID .ID \n    ID .ID =ID \n    ID .ID =ID or ID .ID \n    /"
    },
    {
        "code": "\ndef __get__(self, instance, cls):\n    if instance is None:\n        pass\n    if self.name in instance.__dict__:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35175
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass \n    if ID .ID in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\nas ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass \n    if ID .ID in ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __set__(self, instance, value):\n    instance.__dict__[self.name] = value\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35176
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID .ID ]=ID \n",
        "wrong_code": "\ndef ID (ID await ID ,ID ):\n    ID .ID [ID .ID ]=ID \n"
    },
    {
        "code": "\ndef __delete__(self, instance):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 35177
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    import except ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, fn):\n    self.name = fn.__name__\n    self.cloner = classmethod(fn)\n    self.__doc__ = fn.__doc__\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35178
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .ID \n    ID .ID =ID (ID )\n    ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID (ID ID ):\n    ID .ID =ID .ID \n    ID .ID =ID (ID )\n    ID .ID =ID .ID \n"
    },
    {
        "code": "\ndef __set__(self, instance, value):\n    instance.__dict__[self.name] = value\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35179
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID .ID ]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,for ):\n    ID .ID [ID .ID ]=ID \n"
    },
    {
        "code": "\ndef __delete__(self, instance):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "except",
            "id": 35180
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    nonlocal ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, target):\n    self.target = target\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35181
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =\n"
    },
    {
        "code": "\ndef __getitem__(self, item):\n    try:\n        if isinstance(item, unicode):\n            pass\n    except (AttributeError, UnicodeError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 116,
            "fix_type": "delete",
            "id": 35182
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        if ID (ID ,ID ):\n            pass \n    except (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        if ID (ID ,ID ):\n            pass \n    except (ID ,ID ):\n        pass \n        is "
    },
    {
        "code": "\ndef __contains__(self, item):\n    if isinstance(item, unicode):\n        try:\n            pass\n        except UnicodeError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 110,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35183
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID ):\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,ID ):\n        try :\n            pass \n        except ID :\n            pass \nor "
    },
    {
        "code": "\ndef __iter__(self):\n    return iter(dir(self.target))\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 35184
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    for return ID (ID (ID .ID ))\n"
    },
    {
        "code": "\ndef __getattr__(self, attr):\n    try:\n        return self[attr]\n    except KeyError:\n        raise AttributeError(attr)\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 35185
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        return ID [ID ]\n    except ID :\n        raise ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        return class ID [ID ]\n    except ID :\n        raise ID (ID )\n"
    },
    {
        "code": "\n\ndef re_ucompile(pattern, flags=0):\n    \"\"\"Compile a regex with re.UNICODE on by default.\"\"\"\n    return re.compile(pattern, flags | re.UNICODE)\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35186
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID .ID (ID ,ID |ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT *:\n    LIT \n    return ID .ID (ID ,ID |ID .ID )\n"
    },
    {
        "code": "\n\ndef luhn10(number):\n    while number:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 35187
        },
        "correct_code": "\n\ndef ID (ID ):\n    while ID :\n        pass \n",
        "wrong_code": "\n\ndef import ID (ID ):\n    while ID :\n        pass \n"
    },
    {
        "code": "\ndef __and__(self, other):\n    if other is True or other is self:\n        return self\n    elif other is False:\n        return False\n    return NotImplemented\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 121,
            "fix_type": "delete",
            "id": 35188
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is LIT or ID is ID :\n        return ID \n    elif ID is LIT :\n        return LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID is LIT or ID is ID :\n        return ID \n    elif ID is LIT :\n        return LIT \n    return )ID \n"
    },
    {
        "code": "\ndef __or__(self, other):\n    if other is False or other is self:\n        return self\n    elif other is True:\n        return True\n    return NotImplemented\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35189
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is LIT or ID is ID :\n        return ID \n    elif ID is LIT :\n        return LIT \n    return ID \n",
        "wrong_code": "\nelif ID (ID ,ID ):\n    if ID is LIT or ID is ID :\n        return ID \n    elif ID is LIT :\n        return LIT \n    return ID \n"
    },
    {
        "code": "\ndef __nonzero__(self):\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35190
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID )\n:\n    raise ID ()\n"
    },
    {
        "code": "\ndef __str__(self):\n    return 'Maybe'\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35191
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT \n    import "
    },
    {
        "code": "\n\ndef named_int_factory(name, value, doc=''):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 35192
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\nassert \ndef ID (ID ,ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, name):\n    \"\"\"Construct a new named symbol.\"\"\"\n    assert isinstance(name, str)\n    self.__name__ = self.name = name\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 75,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35193
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    assert ID (ID ,ID )\n    ID .ID =ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    assert ID (ID ,ID )\n    ID .ID =ID .ID =ID raise "
    },
    {
        "code": "\ndef __reduce__(self):\n    return symbol, (self.name,)\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35194
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ,(ID .ID ,)\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ,(ID .ID !)\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 35195
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    await return ID .ID \n"
    },
    {
        "code": "\ndef __new__(cls, name):\n    try:\n        if sym is None:\n            pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jek/flatland/flatland/util/base.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35196
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        if ID is ID :\n            pass \n    finally :\n        pass \n",
        "wrong_code": "=def ID (ID ,ID ):\n    try :\n        if ID is ID :\n            pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef check_input(args, stdin, **kwargs):\n\n    if child.returncode != 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/installation/process.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 35197
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n\n    if ID .ID !=LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n\n    if ID .ID !=LIT :\n        pass \n        else "
    },
    {
        "code": "def __init__(self, impl):\n    self._impl = impl\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 35198
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (,ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\n@property\ndef effective_user(self):\n    return self._impl.getEffectiveUser(self)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 35199
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n-    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\n@property\ndef actual_user(self):\n    return self._impl.actual_user\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35200
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID .ID ID \n"
    },
    {
        "code": "\n@property\ndef database(self):\n    return self._impl.database\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 35201
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    break ID .ID .ID \n"
    },
    {
        "code": "\ndef getDatabaseCursor(self):\n    \"\"\"Return a read-only database cursor object\n\n           This cursor object can only be used to execute SELECT queries.\"\"\"\n    return self._impl.database.readonly_cursor()\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35202
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID ..ID .ID ()\n"
    },
    {
        "code": "\ndef getUpdatingDatabaseCursor(self, *tables):\n    \"\"\"Return a database cursor for updating\n\n           The return value is a \"context manager\", which returns the actual\n           cursor object when entered and either commits or rolls back the\n           current transaction when exited.  The actual cursor object can only\n           be used to update the tables specified as arguments, using INSERT,\n           UPDATE or DELETE queries.\n\n           The cursor object can also be used to execute SELECT queries (against\n           any tables.)\"\"\"\n    return self._impl.database.updating_cursor(*tables)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35203
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    LIT \n    return ID .ID .ID .ID (*ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    LIT \n    return ID .ID .ID .ID (*ID )\n    global "
    },
    {
        "code": "\ndef setActualUser(self, user):\n    assert isinstance(user, api.user.User)\n    assert self._impl.actual_user is None\n    self._impl.actual_user = user\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 35204
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    assert ID (ID ,ID .ID .ID )\n    assert ID .ID .ID is ID \n    ID .ID .ID =ID \n",
        "wrong_code": "\ndef =ID (ID ,ID ):\n    assert ID (ID ,ID .ID .ID )\n    assert ID .ID .ID is ID \n    ID .ID .ID =ID \n"
    },
    {
        "code": "\ndef startSession():\n    import api.impl\n    return api.impl.critic.startSession()\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/critic.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 35205
        },
        "correct_code": "\ndef ID ():\n    import ID .ID \n    return ID .ID .ID .ID ()\n",
        "wrong_code": "\ndef ID ():\n    import ID .ID def \n    return ID .ID .ID .ID ()\n"
    },
    {
        "code": "\ndef __init__(self, values):\n    \"\"\"Constructor\"\"\"\n    super(InvalidUserIds, self).__init__(\"Invalid user ids: %r\" % values)\n    self.values = values\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35206
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (LIT %ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (LIT %ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, value):\n    \"\"\"Constructor\"\"\"\n    super(InvalidUserId, self).__init__([value])\n    self.message = \"Invalid user id: %r\" % value\n    self.value = value\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35207
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID ([ID ])\n    ID .ID =LIT %ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID ([ID ])\n    ID .ID =LIT %+\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, values):\n    \"\"\"Constructor\"\"\"\n    super(InvalidUserNames, self).__init__(\n        \"Invalid user names: %r\" % values)\n    self.values = values\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35208
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (\n    LIT %ID )\n    ID .ID =ID \n",
        "wrong_code": ",\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (\n    LIT %ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, value):\n    \"\"\"Constructor\"\"\"\n    super(InvalidUserName, self).__init__([value])\n    self.message = \"Invalid user name: %r\" % value\n    self.value = value\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 35209
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID ([ID ])\n    ID .ID =LIT %ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID ([ID ])\n    ID .ID global =LIT %ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, role):\n    \"\"\"Constructor\"\"\"\n    super(InvalidRole, self).__init__(\"Invalid role: %r\" % role)\n    self.role = role\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35210
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (LIT %ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID )ID (LIT %ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __int__(self):\n    return self.id\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35211
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):yield     return ID .ID \n"
    },
    {
        "code": "def __hash__(self):\n    return hash(int(self))\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 35212
        },
        "correct_code": "def ID (ID ):\n    return ID (ID (ID ))\n",
        "wrong_code": "def finally ID (ID ):\n    return ID (ID (ID ))\n"
    },
    {
        "code": "def __eq__(self, other):\n    return int(self) == int(other)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35213
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID (ID )==ID (ID )\n",
        "wrong_code": "def ID (ID is ID ):\n    return ID (ID )==ID (ID )\n"
    },
    {
        "code": "\n@property\ndef id(self):\n    \"\"\"The user's unique id\"\"\"\n    return self._impl.id\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35214
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT return ID .ID .ID \n"
    },
    {
        "code": "\n@property\ndef name(self):\n    \"\"\"The user's unique username\"\"\"\n    return self._impl.name\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35215
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID ..ID \n"
    },
    {
        "code": "\n@property\ndef fullname(self):\n    \"\"\"The user's full name\"\"\"\n    return self._impl.fullname\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35216
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \nID (ID ):\n    LIT \n    return ID .ID .ID \n"
    },
    {
        "code": "\n@property\ndef status(self):\n    \"\"\"The user's status\n\n           For regular users, the value is one of the strings in the\n           User.STATUS_VALUES set.\n\n           For the anonymous user, the value is \"anonymous\".\n           For the Critic system user, the value is \"system\".\"\"\"\n    return self._impl.status\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35217
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT return ID .ID .ID \n"
    },
    {
        "code": "\n@property\ndef is_anonymous(self):\n    \"\"\"True if this object represents an anonymous user\"\"\"\n    return self.id is None\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35218
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID is ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT return ID .ID is ID \n"
    },
    {
        "code": "\n@property\ndef email(self):\n    \"\"\"The user's selected primary email address\n\n           If the user has no primary email address or if the selected primary\n           email address is unverified, this attribute's value is None.\"\"\"\n    return self._impl.email\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35219
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID )(:\n    LIT \n    return ID .ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, address, selected, verified):\n    self.address = address\n    self.selected = selected\n    self.verified = verified\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 35220
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID class ID \n"
    },
    {
        "code": "\n@property\ndef primary_emails(self):\n    \"\"\"The user's primary email addresses\n\n           The value is a list of PrimaryEmail objects.\"\"\"\n    return self._impl.getPrimaryEmails(self.critic)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35221
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\n@property\ndef git_emails(self):\n    \"\"\"The user's \"git\" email addresses\n\n           The value is a set of strings.\n\n           These addresses are used to identify the user as author or committer\n           of Git commits by matching the email address in the commit's meta\n           data.\"\"\"\n    return self._impl.getGitEmails(self.critic)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 35222
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    *return ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\n@property\ndef repository_filters(self):\n    \"\"\"The user's repository filters\n\n           The value is a dictionary mapping api.repository.Repository objects\n           to lists of api.filters.RepositoryFilter objects.\"\"\"\n    return self._impl.getRepositoryFilters(self.critic)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35223
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID ID )\n"
    },
    {
        "code": "\n@property\ndef internal(self):\n    \"\"\"The corresponding internal dbutils.User object\n\n           Should only be used when interfacing with legacy code.\"\"\"\n    return self._impl.getInternal(self.critic)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35224
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n",
        "wrong_code": "\n@ID \npass ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef hasRole(self, role):\n    \"\"\"Return True if the user has the named role\n\n           If the argument is not a valid role name, an InvalidRole exception is\n           raised.\"\"\"\n    return self._impl.hasRole(self.critic, role)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 35225
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID .ID ,ID [)\n"
    },
    {
        "code": "\ndef getPreference(self, item, repository=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35226
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef fetch(critic, user_id=None, name=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 35227
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef fetchMany(critic, user_ids=None, names=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35228
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef fetchAll(critic, status=None):\n    if status is not None:\n        if isinstance(status, basestring):\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 101,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35229
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is not ID :\n        if ID (ID ,ID ):\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID is not ID :\n        if ID (ID ,ID ):\n            pass \n        else finally \n            pass \n"
    },
    {
        "code": "\ndef anonymous(critic):\n    \"\"\"Fetch a User object representing an anonymous user\"\"\"\n    import api.impl\n    assert isinstance(critic, api.critic.Critic)\n    return api.impl.user.anonymous(critic)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/api/user.py",
            "fix_location": 93,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35230
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    import ID .ID \n    assert ID (ID ,ID .ID .ID )\n    return ID .ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    import ID .ID \n    assert ID (ID ,ID .ID .ID )\n    return ID .ID ID .ID (ID )\n"
    },
    {
        "code": "\ndef loadChangeset(db, repository, changeset_id, filtered_file_ids=None, load_chunks=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/changeset/load.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35231
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID ID ,ID ,ID ,ID =ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef getCommit(commit_id):\n    return commit_ids.get(commit_id) or gitutils.Commit.fromId(db, repository, commit_id)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/changeset/load.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 35232
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID )or ID .ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (ID )or ID .ID .ID (ID ,ID as ,ID )\n"
    },
    {
        "code": "def __init__(self, db=None, request=None, repository=None, review=None, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35233
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ,**ID ):\n    pass \n",
        "wrong_code": "def ID (ID /ID =ID ,ID =ID ,ID =ID ,ID =ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, fragment):\n    \"\"\"\n        LinkType(regexp) -> link type object\n\n        Create a link type object and add it to the global list of\n        link type objects.  The 'fragment' argument should be a string\n        containing a regexp fragment without captures suitable to\n        insert into the complete regexp\n\n          (?:^|\\b)(wordA|wordB|...)(?:\\b|$)\n\n        which is then used to split text into \"words\" which are\n        individually turned into links or left as-is.\n        \"\"\"\n\n    self.fragment = fragment\n    self.fragment_regexp = re.compile(\"%s$\" % fragment)\n\n    ALL_LINKTYPES.append(self)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35234
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID =ID \n    ID .ID =ID .ID (LIT %ID )\n\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID .ID =ID !ID .ID =ID .ID (LIT %ID )\n\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef match(self, word):\n    return bool(self.fragment_regexp.match(word))\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35235
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID ID (ID ))\n"
    },
    {
        "code": "\ndef linkify(self, word):\n    \"\"\"\n        linkify(word) -> None or a string.\n\n        If the whole word matches what this link type handles,\n        constructs a URL to which this word should be made a link,\n        otherwise returns None.  Implementations should expect to be\n        called with words that don't match what they handle.\n\n        Sub-classes must override this method.\n        \"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 35236
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID continue ):\n    LIT \n    pass \n"
    },
    {
        "code": "\ndef __init__(self, fragment, regexp=None):\n    if isinstance(regexp, basestring):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35237
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID del :\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef linkify(self, word, context):\n    if self.regexp:\n        return self.regexp.match(word).group(1)\n    else:\n        return word\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35238
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        return ID .ID .ID (ID ).ID (LIT )\n    else :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        return ID ID .ID (ID ).ID (LIT )\n    else :\n        return ID \n"
    },
    {
        "code": "\ndef __init__(self):\n    super(HTTP, self).__init__(\"https?://\\\\S+[^\\\\s.,:;!?)]\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35239
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n    not "
    },
    {
        "code": "\ndef __init__(self):\n    super(URL, self).__init__(\"<URL:[^>]+>\", \"<URL:([^>]+)>$\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35240
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT ,LIT )\n",
        "wrong_code": "\nis ID (ID ):\n    ID (ID ,ID ).ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self):\n    super(SHA1, self).__init__(\"[0-9A-Fa-f]{8,40}\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35241
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n",
        "wrong_code": "as \ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef __init__(self):\n    super(Diff, self).__init__(\"[0-9A-Fa-f]{8,40}\\\\.\\\\.[0-9A-Fa-f]{8,40}\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35242
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID not :\n    ID (ID ,ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef __init__(self):\n    super(Review, self).__init__(\"r/\\\\d+\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 35243
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID LIT (LIT )\n"
    },
    {
        "code": "\ndef linkify(self, word, context):\n    return \"/\" + word\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/linkify.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 35244
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return LIT +ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n[    return LIT +ID \n"
    },
    {
        "code": "def __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35245
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def !=(ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    Operation.__init__(self, { \"filter_id\": int })\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "{",
            "id": 35246
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :ID })\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,LIT :ID })\n"
    },
    {
        "code": "\ndef process(self, db, user, filter_id):\n    if row:\n        if user.id != row[0]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 35247
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID :\n        if ID .ID !=ID [LIT ]:\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID (:\n        if ID .ID !=ID [LIT ]:\n            pass \n"
    },
    {
        "code": "def __init__(self):\n    Operation.__init__(self, { \"repository_id\": Optional(int),\n                               \"filter_id\": Optional(int) })\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35248
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :ID (ID ),\n    LIT :ID (ID )})\n",
        "wrong_code": "def ID while ID ):\n    ID .ID (ID ,{LIT :ID (ID ),\n    LIT :ID (ID )})\n"
    },
    {
        "code": "def __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35249
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "LIT ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    Operation.__init__(self, { \"repository_name\": str,\n                               \"path\": str,\n                               \"user_id\": Optional(int) })\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 35250
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :ID ,\n    LIT :ID ,\n    LIT :ID (ID )})\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :ID ,\n    LIT :ID ,\n    is LIT :ID (ID )})\n"
    },
    {
        "code": "\ndef process(self, db, user, repository_name, path, user_id=None):\n    if user_id is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35251
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID -\n        pass \n"
    },
    {
        "code": "def __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35252
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    Operation.__init__(self, { \"filter_id\": int })\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35253
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :ID })\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (ID ,{LIT :})\n"
    },
    {
        "code": "\ndef process(self, db, user, filter_id):\n    if not review_id:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/operation/manipulatefilters.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35254
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID global ,ID ,ID ,ID ):\n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef renderHeaderItems(target):\n    if readonly and actual_user and actual_user.hasRole(db, \"administrator\"):\n        target.a(\"button\", href=\"/home?user=%s&readonly=no\" % user.name).text(\"Edit\")\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35255
        },
        "correct_code": "\ndef ID (ID ):\n    if ID and ID and ID .ID (ID ,LIT ):\n        ID .ID (LIT ,ID =LIT %ID .ID ).ID (LIT )\n",
        "wrong_code": "\ndef (ID ):\n    if ID and ID and ID .ID (ID ,LIT ):\n        ID .ID (LIT ,ID =LIT %ID .ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef row(heading, value, help=None, extra_class=None):\n    if extra_class:\n        pass\n    else:\n        pass\n    if callable(value): pass\n    else: pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35256
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n    if ID (ID ):pass \n    else :pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,in ID =ID ,ID =ID ):\n    if ID :\n        pass \n    else :\n        pass \n    if ID (ID ):pass \n    else :pass \n"
    },
    {
        "code": "\ndef renderFullname(target):\n    if readonly: pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35257
        },
        "correct_code": "\ndef ID (ID ):\n    if ID :pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):    if ID :pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef renderGitEmails(target):\n    if readonly: pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35258
        },
        "correct_code": "\ndef ID (ID ):\n    if ID :pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if :pass \n    else :\n        pass \n"
    },
    {
        "code": "def renderExternalAccount(target):\n    url = provider.getAccountURL(account)\n    target.a(\"external\", href=url).text(account)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35259
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID (ID )\n    ID .ID (LIT ,ID =ID ).ID (ID )\n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID (ID )\n    ID .ID (LIT ,=ID ).ID (ID )\n"
    },
    {
        "code": "\ndef rowSortKey(row):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/page/home.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35260
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef generateSubjectLine(db, user, review, item):\n\n    if not subject_format.strip():\n        pass\n\n    try:\n        pass\n    except Exception as exception:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35261
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if not ID .ID ():\n        pass \n\n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )ID ):\n\n    if not ID .ID ():\n        pass \n\n    try :\n        pass \n    except ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef getReviewMessageId(db, to_user, review, files):\n    for (message_id,) in cursor:\n        pass\n    else:\n        if filename:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 35262
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    for (ID ,)in ID :\n        pass \n    else :\n        if ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    for (ID ,)in ID :\n        pass \n    else :None \n        if ID :\n            pass \n"
    },
    {
        "code": "\ndef formatComment(comment):\n    return \"%s at %s:\\n%s\\n\" % (comment.user.fullname, comment.when, textutils.reflow(comment.comment, line_length, indent=2))\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 80,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35263
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,ID .ID (ID .ID ,ID ,ID =LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID .ID ,ID .ID (ID .ID ,ID ,ID =LIT async )\n"
    },
    {
        "code": "\ndef checkEmailEnabled(db, to_user):\n    if to_user.email_verified is False:\n        # Email address needs verification before use.\n        raise MailDisabled\n    if not to_user.getPreference(db, \"email.activated\"):\n        # User has requested that no emails be sent.\n        raise MailDisabled\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35264
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is LIT :\n    #COMMENT\n\n        raise ID \n    if not ID .ID (ID ,LIT ):\n    #COMMENT\n\n        raise ID \n",
        "wrong_code": "\ndef ID async ID ,ID ):\n    if ID .ID is LIT :\n    #COMMENT\n\n        raise ID \n    if not ID .ID (ID ,LIT ):\n    #COMMENT\n\n        raise ID \n"
    },
    {
        "code": "\ndef isRelevantComment(chain):\n    if chain.file_id is None or chain.file_id in relevant_files: return True\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 35265
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is ID or ID .ID in ID :return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is .ID is ID or ID .ID in ID :return LIT \n"
    },
    {
        "code": "\ndef fetchNewCommentChains():\n    for (chain_id,) in cursor.fetchall():\n        if chain_id != batch_chain_id:\n            if not relevant_only or isRelevantComment(chain):\n                pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 118,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35266
        },
        "correct_code": "\ndef ID ():\n    for (ID ,)in ID .ID ():\n        if ID !=ID :\n            if not ID or ID (ID ):\n                pass \n",
        "wrong_code": "\ndef ID ():\n    for (ID ,)in ID .ID ():\n        if ID !=ID :\n            if not ID or ID (ID ):\n                pass \nnot "
    },
    {
        "code": "\ndef localGenerateMessageId():\n    return generateMessageId(len(files) + 1)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35267
        },
        "correct_code": "\ndef ID ():\n    return ID (ID (ID )+LIT )\n",
        "wrong_code": "\ndef ID ():\n    return ID (ID (ID +LIT )\n"
    },
    {
        "code": "\ndef localGetReviewMessageId():\n    if review_message_id[0] is None:\n        review_message_id[0] = getReviewMessageId(db, to_user, review, files)\n    return review_message_id[0]\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35268
        },
        "correct_code": "\ndef ID ():\n    if ID [LIT ]is ID :\n        ID [LIT ]=ID (ID ,ID ,ID ,ID )\n    return ID [LIT ]\n",
        "wrong_code": "\ndef ():\n    if ID [LIT ]is ID :\n        ID [LIT ]=ID (ID ,ID ,ID ,ID )\n    return ID [LIT ]\n"
    },
    {
        "code": "\ndef renderPaths(items):\n    return \"  \\n\".join(diff.File.eliminateCommonPrefixes(sorted(map(lambda item: item[1], items)), text=True)) + \"\\n\"\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35269
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (ID .ID .ID (ID (ID (lambda ID :ID [LIT ],ID )),ID =LIT ))+LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT .,(ID .ID .ID (ID (ID (lambda ID :ID [LIT ],ID )),ID =LIT ))+LIT \n"
    },
    {
        "code": "\ndef sendExtensionOutput(db, user_id, batch_id, output):\n\n    # First check if we can/should send emails to the user at all.\n    try:\n        pass\n    except MailDisabled:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/src/reviewing/mail.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35270
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n#COMMENT\n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,class ):\n\n#COMMENT\n\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, criteria):\n    super(MissingMail, self).__init__(\n        \"No mail matching %r received\" % criteria)\n    self.criteria = criteria\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35271
        },
        "correct_code": "def ID (ID ,ID ):\n    ID (ID ,ID ).ID (\n    LIT %ID )\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID (ID ,ID ID .ID (\n    LIT %ID )\n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, name, address):\n    self.name = name\n    self.address = address\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 35272
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID +.ID =ID \n"
    },
    {
        "code": "def __init__(self, return_path):\n    self.return_path = return_path\n    self.recipient = None\n    self.headers = {}\n    self.lines = []\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 35273
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID ={}\n    ID .ID =[]\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID del {}\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef header(self, name, default=None):\n    if name.lower() in self.headers:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35274
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID .ID ()in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ID =ID ):\n    if ID .ID ()in ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef all_headers(self):\n    for header_name in sorted(self.headers.keys()):\n        for header in self.headers[header_name]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35275
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID .ID ()):\n        for ID in ID .ID [ID ]:\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID (.ID .ID ()):\n        for ID in ID .ID [ID ]:\n            pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"%s\\n\\n%s\" % (\"\\n\".join((\"%s: %s\" % header)\n                                   for header in self.all_headers()),\n                         \"\\n\".join(self.lines))\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 91,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35276
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(LIT .ID ((LIT %ID )\n    for ID in ID .ID ()),\n    LIT .ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(LIT .ID ((LIT %ID )\n    for ID in ID .ID ()),\n    LIT .ID (.ID ))\n"
    },
    {
        "code": "def __init__(self, line):\n    super(ParseError, self).__init__(\"line=%r\" % line)\n    self.line = line\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35277
        },
        "correct_code": "def ID (ID ,ID ):\n    ID (ID ,ID ).ID (LIT %ID )\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID )\n    ID (ID ,ID ).ID (LIT %ID )\n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, mailbox, client, debug_mails):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 35278
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID while ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef sendline(self, string):\n    self.client.sendall(\"%s\\r\\n\" % string)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35279
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (LIT %ID )\nfrom "
    },
    {
        "code": "\ndef recvline(self):\n    while \"\\r\\n\" not in self.buffered:\n        if not data:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 35280
        },
        "correct_code": "\ndef ID (ID ):\n    while LIT not in ID .ID :\n        if not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while LIT not in ID class .ID :\n        if not ID :\n            pass \n"
    },
    {
        "code": "\ndef expectline(self, pattern):\n    if not match:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35281
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "nonlocal \ndef ID (ID ,ID ):\n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef close(self):\n    try:\n        self.client.close()\n    except socket.error:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 35282
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        ID .ID .ID ()\n    except ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        ID .ID .ID ()\n    except ID .ID :\n        pass \n        ."
    },
    {
        "code": "def __init__(self, mailbox, debug_mails):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35283
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef run(self):\n    while not self.stopped:\n        try:\n            pass\n        except socket.timeout:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 35284
        },
        "correct_code": "\ndef ID (ID ):\n    while not ID .ID :\n        try :\n            pass \n        except ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while not ID .ID :\n        try :\n            pass yield \n        except ID .ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef stop(self):\n    self.stopped = True\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35285
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "def __init__(self, instance, credentials=None, debug_mails=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35286
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ,ID =[LIT ):\n    pass \n"
    },
    {
        "code": "\ndef add(self, mail):\n    with self.condition:\n        self.queued.append(mail)\n        self.condition.notify()\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 83,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35287
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    with ID .ID :\n        ID .ID .ID (ID )\n        ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    with ID .ID :\n        ID .ID .ID (ID )\n        ID .ID .ID ()raise "
    },
    {
        "code": "\ndef find_mail():\n    with self.condition:\n        for mail in self.queued:\n            if is_accepted(mail):\n                self.queued.remove(mail)\n                return mail\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35288
        },
        "correct_code": "\ndef ID ():\n    with ID .ID :\n        for ID in ID .ID :\n            if ID (ID ):\n                ID .ID .ID (ID )\n                return ID \n",
        "wrong_code": "def def ID ():\n    with ID .ID :\n        for ID in ID .ID :\n            if ID (ID ):\n                ID .ID .ID (ID )\n                return ID \n"
    },
    {
        "code": "\ndef reset(self):\n    with self.condition:\n        self.queued = []\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35289
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID :\n        ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID :\n        ID .ID =[]\n    /"
    },
    {
        "code": "\ndef pop_error(self):\n    with self.condition:\n        return self.errors.pop(0)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35290
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID :\n        return ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID for \n        return ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef stop(self):\n    self.listener.stop()\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35291
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .()\n"
    },
    {
        "code": "\ndef check_empty(self):\n    try:\n        while True:\n            pass\n    except MissingMail:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": "except",
            "id": 35292
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        while LIT :\n            pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        while LIT :\n            pass \n    ID :\n        pass \n"
    },
    {
        "code": "\n@property\ndef port(self):\n    return self.listener.socket.getsockname()[1]\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 35293
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID .ID ()[LIT ]\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID del .ID ()[LIT ]\n"
    },
    {
        "code": "\ndef __enter__(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35294
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\nID (ID ):\n    return ID \n"
    },
    {
        "code": "\ndef __exit__(self, *args):\n    self.stop()\n    return False\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 35295
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID ()\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    ID .ID ()\n    return or LIT \n"
    },
    {
        "code": "def __init__(self, value):\n    self.regexp = re.compile(value)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35296
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID )\n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "def __call__(self, mail):\n    return self.regexp.match(mail.header(\"Subject\")) is not None\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 35297
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID .ID (ID .ID (LIT ))is not ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID .ID .ID (ID .ID (LIT ))is not with ID \n"
    },
    {
        "code": "def __repr__(self):\n    return \"subject=%r\" % self.regexp.pattern\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35298
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID .ID .ID \n",
        "wrong_code": "def ID in ID ):\n    return LIT %ID .ID .ID \n"
    },
    {
        "code": "def __init__(self, address):\n    self.address = address\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35299
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):[\n    ID .ID =ID \n"
    },
    {
        "code": "def __call__(self, mail):\n    return mail.recipient == self.address\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35300
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID ==ID .ID \n",
        "wrong_code": "def ID (ID ,]ID ):\n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "def __repr__(self):\n    return \"recipient=<%s>\" % self.address\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/mailbox.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 35301
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "def ID (ID ):\n    return LIT %ID +.ID \n"
    },
    {
        "code": "\ndef check_helloworld(document):\n    testing.expect.check(\"Hello world!\\n\", document)\n",
        "metadata": {
            "file": "py150_files/data/jensl/critic/testing/tests/001-main/004-extensions/002-tests/005-install-SystemExtension.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35302
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT ,ID )\n",
        "wrong_code": "not def ID (ID ):\n    ID .ID .ID (LIT ,ID )\n"
    },
    {
        "code": "\n\ndef gradient(p0, p1):\n    if dx == 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35303
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\n\nexcept ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, pixel_data, name, scale=None, gridcolour=None):\n    if scale:\n        pass\n    if gridcolour:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 64,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35304
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ):\n    if ID :\n        pass if ID :\n        pass \n"
    },
    {
        "code": "\ndef scale_pt(self, pt, offset=(0, 0)):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35305
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =(LIT ,LIT )):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =(LIT ,LIT )==:\n    pass \n"
    },
    {
        "code": "\ndef export_pixels(self, outdir):\n    for pt in product(range(self.pixel_data.size_x),\n                      range(self.pixel_data.size_y)):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35306
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID (ID .ID .ID ),\n    ID (ID .ID .ID )):\n        pass \n",
        "wrong_code": "\ndef ID (import ID ,ID ):\n    for ID in ID (ID (ID .ID .ID ),\n    ID (ID .ID .ID )):\n        pass \n"
    },
    {
        "code": "\ndef export_grid(self, outdir, node_graph=True):\n    if node_graph:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 35307
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT )yield :\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef export_shapes(self, outdir, node_graph=True):\n    if node_graph:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35308
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n[    if ID :\n        pass \n"
    },
    {
        "code": "\ndef export_smooth(self, outdir, node_graph=True):\n    if node_graph:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 35309
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n\n"
    },
    {
        "code": "\ndef draw_shapes(self, drawing, element='smooth_splines'):\n    for shape in self.pixel_data.shapes:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35310
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    for ID in ID .ID .ID :\n        pass \n",
        "wrong_code": "(def ID (ID ,ID ,ID =LIT ):\n    for ID in ID .ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef draw_nodes(self, drawing):\n    for edge in self.pixel_data.pixel_graph.edges_iter():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35311
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID .ID -):\n        pass \n"
    },
    {
        "code": "\ndef edge_colour(self, node):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35312
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )]\n    pass \n"
    },
    {
        "code": "\ndef mkfn(self, outdir, drawing_type):\n    return os.path.join(\n        outdir, \"%s_%s.%s\" % (drawing_type, self.name, self.FILE_EXT))\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35313
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID .ID (\n    ID ,LIT %(ID ,ID .ID ,ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID .ID (\n    ID ,LIT %(ID ,.ID ,ID .ID ))\n"
    },
    {
        "code": "\ndef make_drawing(self, drawing_type, filename):\n    raise NotImplementedError(\"This Writer cannot make a drawing.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35314
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef (ID ,ID ,ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef save_drawing(self, filename):\n    raise NotImplementedError(\"This Writer cannot save a drawing.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35315
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,for ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef draw_pixel(self, drawing, pt, colour):\n    raise NotImplementedError(\"This Writer cannot draw a pixel.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35316
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID )\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef draw_rect(self, drawing, p0, size, colour, fill):\n    raise NotImplementedError(\"This Writer cannot draw a rect.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35317
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):LIT     raise ID (LIT )\n"
    },
    {
        "code": "\ndef draw_line(self, drawing, p0, p1, colour):\n    raise NotImplementedError(\"This Writer cannot draw a line.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 35318
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n,    raise ID (LIT )\n"
    },
    {
        "code": "\ndef draw_path_shape(self, drawing, paths, colour, fill):\n    raise NotImplementedError(\"This Writer cannot draw a path shape.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35319
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID nonlocal ID ,ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef draw_spline_shape(self, drawing, paths, colour, fill):\n    raise NotImplementedError(\"This Writer cannot draw a spline shape.\")\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35320
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID (class ID ,ID ,ID ,ID ,ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\n\ndef get_writer(data, basename, filetype):\n    # Circular imports, but they're safe because they're in this function.\n    if filetype == 'png':\n        pass\n\n    if filetype == 'svg':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35321
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if ID ==LIT :\n        pass \n\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if ID ==LIT \n        pass \n\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\n\ndef read_pixels(filename, filetype=None):\n    if filetype is None:\n        pass\n\n    if filetype == 'png':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jerith/depixel/depixel/io_data.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35322
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID global ID =ID ):\n    if ID is ID :\n        pass \n\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\ndef expand_tabs(file0):\n    open(file0,'wb').write(str_pep_contents)\n    return None\n",
        "metadata": {
            "file": "py150_files/data/jesolem/PCV/expand_tabs.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35323
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,LIT ).ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,LIT ..ID (ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef populate_period(apps, schema_editor):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jessamynsmith/eggtimer-server/periods/migrations/0005_auto_20150222_1302.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35324
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID ([,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, base_dir, logger):\n    self.pre_release_dir = join(base_dir, \"pre-releases\")\n    self._make_base_dirs()\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35325
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID (ID ,LIT )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID (ID ,LIT )\n    ID .ID )\n"
    },
    {
        "code": "\ndef exists(self, name):\n    return exists(self.compute_path(name))\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 35326
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    [return ID (ID .ID (ID ))\n"
    },
    {
        "code": "\ndef remove(self, name):\n    try:\n        pass\n    except OSError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35327
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):del \n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef compute_path(self, name):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35328
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \nimport "
    },
    {
        "code": "\ndef __iter__(self):\n    for dirpath, _, filenames in walk(self.base_dir):\n        for filename in filenames:\n            yield join(dirpath, filename)\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 35329
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID ,ID in ID (ID .ID ):\n        for ID in ID :\n            yield ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID ,ID in ID (ID .ID ):\n        for ID in ID None :\n            yield ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _make_base_dirs(self):\n    \"\"\"\n        Ensure that base dirs exists.\n        \"\"\"\n    for dir_ in [self.release_dir, self.pre_release_dir]:\n        if not isdir(dir_):\n            makedirs(dir_)\n",
        "metadata": {
            "file": "py150_files/data/jessemyers/cheddar/cheddar/index/storage.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "for",
            "id": 35330
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in [ID .ID ,ID .ID ]:\n        if not ID (ID ):\n            ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    )ID in [ID .ID ,ID .ID ]:\n        if not ID (ID ):\n            ID (ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<PrefixNode for %r>\" % self.name\n",
        "metadata": {
            "file": "py150_files/data/jezdez-archive/django-staticfiles/staticfiles/templatetags/static.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35331
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef (ID ):\n    return LIT %ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, varname=None, name=None):\n    if name is None:\n        raise template.TemplateSyntaxError(\n            \"Prefix nodes must be given a name to return.\")\n    self.varname = varname\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/jezdez-archive/django-staticfiles/staticfiles/templatetags/static.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 35332
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    if ID is ID :\n        raise ID .ID (\n        LIT )\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID )with :\n    if ID is ID :\n        raise ID .ID (\n        LIT )\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\n@classmethod\ndef handle_simple(cls, name):\n    try:\n        pass\n    except ImportError:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jezdez-archive/django-staticfiles/staticfiles/templatetags/static.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": "",
            "id": 35333
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):\n    try :\n        pass \n        except ID :\n        pass \n        else :\n        pass \n    "
    },
    {
        "code": "\n\n@register.tag\ndef get_static_prefix(parser, token):\n    \"\"\"\n    Populates a template variable with the static prefix,\n    ``settings.STATIC_URL``.\n\n    Usage::\n\n        {% get_static_prefix [as varname] %}\n\n    Examples::\n\n        {% get_static_prefix %}\n        {% get_static_prefix as static_prefix %}\n\n    \"\"\"\n    return PrefixNode.handle_token(parser, token, \"STATIC_URL\")\n",
        "metadata": {
            "file": "py150_files/data/jezdez-archive/django-staticfiles/staticfiles/templatetags/static.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 35334
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID ,LIT )\n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID ,LIT async )\n"
    },
    {
        "code": "\n\n@register.tag\ndef get_media_prefix(parser, token):\n    \"\"\"\n    Populates a template variable with the static prefix,\n    ``settings.MEDIA_URL``.\n\n    Usage::\n\n        {% get_media_prefix [as varname] %}\n\n    Examples::\n\n        {% get_media_prefix %}\n        {% get_media_prefix as media_prefix %}\n\n    \"\"\"\n    return PrefixNode.handle_token(parser, token, \"MEDIA_URL\")\n",
        "metadata": {
            "file": "py150_files/data/jezdez-archive/django-staticfiles/staticfiles/templatetags/static.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35335
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID ,LIT )\n",
        "wrong_code": "\n\n@ID .\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID ,LIT )\n"
    },
    {
        "code": "\n\ndef get_version(*args, **kwargs):\n    from .utils import get_version\n    return get_version(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/jgelens/gevent-websocket/geventwebsocket/__init__.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35336
        },
        "correct_code": "\n\ndef ID (*ID ,**ID ):\n    from .ID import ID \n    return ID (*ID ,**ID )\n",
        "wrong_code": "\n\ndef ID (*ID ,**ID ):\n    from .ID import ID \n    return ID *ID ,**ID )\n"
    },
    {
        "code": "\ndef handle_noargs(self, **options):\n    print('command task')\n",
        "metadata": {
            "file": "py150_files/data/jgorset/django-kronos/kronos/tests/project/app/management/commands/task_with_args.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 35337
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (LIT )\n",
        "wrong_code": "\ndef +ID (ID ,**ID ):\n    ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_facepy_error():\n    try:\n        pass\n    except FacepyError as exception:\n        if hasattr(exception, 'message'):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jgorset/facepy/tests/test_exceptions.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35338
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        pass \n    except ID as ID :\n        if ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\n\ndef ID ():\n    try lambda \n        pass \n    except ID as ID :\n        if ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "\n\ndef test_facebook_error():\n    try:\n        pass\n    except FacebookError as exception:\n        for name, value in TEST_ERROR_OBJ['error'].items():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jgorset/facepy/tests/test_exceptions.py",
            "fix_location": 116,
            "fix_type": "delete",
            "id": 35339
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        pass \n    except ID as ID :\n        for ID ,ID in ID [LIT ].ID ():\n            pass \n",
        "wrong_code": "\n\ndef ID ():\n    try :\n        pass \n    except ID as ID :\n        for ID ,ID in ID [LIT ].ID ():\n            pass \nor "
    },
    {
        "code": "\n\ndef test_facebookerror_can_be_pickled():\n    try:\n        raise GraphAPI.FacebookError(**TEST_ERROR_OBJ['error'])\n    except FacepyError as exception:\n        pickle.dumps(exception)\n",
        "metadata": {
            "file": "py150_files/data/jgorset/facepy/tests/test_exceptions.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35340
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        raise ID .ID (**ID [LIT ])\n    except ID as ID :\n        ID .ID (ID )\n",
        "wrong_code": "try \ndef ID ():\n    try :\n        raise ID .ID (**ID [LIT ])\n    except ID as ID :\n        ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef test_oautherror_can_be_pickled():\n    try:\n        raise GraphAPI.OAuthError(**TEST_ERROR_OBJ['error'])\n    except FacepyError as exception:\n        pickle.dumps(exception)\n",
        "metadata": {
            "file": "py150_files/data/jgorset/facepy/tests/test_exceptions.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 35341
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        raise ID .ID (**ID [LIT ])\n    except ID as ID :\n        ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID ():\n    try :\n        raise ID .ID (**ID [LIT ])\n    +except ID as ID :\n        ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef test_httperror_can_be_pickled():\n    try:\n        raise GraphAPI.HTTPError(TEST_ERROR_OBJ['error']['message'])\n    except FacepyError as exception:\n        pickle.dumps(exception)\n",
        "metadata": {
            "file": "py150_files/data/jgorset/facepy/tests/test_exceptions.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35342
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        raise ID .ID (ID [LIT ][LIT ])\n    except ID as ID :\n        ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID ():\n    try :\n        raise ID .ID (ID [return ][LIT ])\n    except ID as ID :\n        ID .ID (ID )\n"
    },
    {
        "code": "\n@facebook_authorization_required\ndef home(request):\n    return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/jgorset/fandjango/tests/project/app/views.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 35343
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID ()\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID ()\nwith "
    },
    {
        "code": "\n@facebook_authorization_required(permissions=[\"checkins\"])\ndef places(request):\n    return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/jgorset/fandjango/tests/project/app/views.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 35344
        },
        "correct_code": "\n@ID (ID =[LIT ])\ndef ID (ID ):\n    return ID ()\n",
        "wrong_code": "\n@ID (ID =[LIT ])\ndef ID (ID ):\n    return ID (while )\n"
    },
    {
        "code": "\n@facebook_authorization_required(redirect_uri=\"http://example.org\")\ndef redirect(request):\n  return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/jgorset/fandjango/tests/project/app/views.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 35345
        },
        "correct_code": "\n@ID (ID =LIT )\ndef ID (ID ):\n  return ID ()\n",
        "wrong_code": "\n@ID (ID LIT )\ndef ID (ID ):\n  return ID ()\n"
    },
    {
        "code": "\ndef fixFormatting(s, spaceToken):\n    \n    for i in string.punctuation:\n        if(i != '-' and i != spaceToken):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jiaweihli/manga_downloader/src/util.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 35346
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID .ID :\n        if (ID !=LIT and ID !=ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID .ID :\n        if (ID !=LIT and ID !=ID ):\n        class pass \n"
    },
    {
        "code": "\ndef isImageLibAvailable():\n    try:\n        from ConvertPackage.ConvertFile import convertFile\n        return True\n    except ImportError:\n        return False\n",
        "metadata": {
            "file": "py150_files/data/jiaweihli/manga_downloader/src/util.py",
            "fix_location": 117,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35347
        },
        "correct_code": "\ndef ID ():\n    try :\n        from ID .ID import ID \n        return LIT \n    except ID :\n        return LIT \n",
        "wrong_code": "\ndef ID ():\n    try :\n        from ID .ID import ID \n        return LIT \n    except ID :\n        return LIT \n        global "
    },
    {
        "code": "\ndef zeroFillStr(inputString, numOfZeros):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jiaweihli/manga_downloader/src/util.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35348
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )global :\n    pass \n"
    },
    {
        "code": "#\t\treturn ''.join([node.data for node in nodelist if node.nodeType == node.TEXT_NODE])\t\t\t\n\ndef setText(dom, node, text):\n    for currNode in node.childNodes:\n        if currNode.nodeType == currNode.TEXT_NODE:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jiaweihli/manga_downloader/src/util.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35349
        },
        "correct_code": "#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID :\n        if ID .ID ==ID .ID :\n            pass \n",
        "wrong_code": "with #COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID :\n        if ID .ID ==ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef updateNode(dom, node, tagName, text):\n    if (len(node.getElementsByTagName(tagName)) > 0):\n        pass\n    else:\n        pass\n        \n    \n",
        "metadata": {
            "file": "py150_files/data/jiaweihli/manga_downloader/src/util.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 35350
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if (ID (ID .ID (ID ))>LIT ):\n        pass \n    else :\n        pass \n\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if (ID (ID .ID (ID ))>LIT ):try \n        pass \n    else :\n        pass \n\n\n"
    },
    {
        "code": "def closest_values(L):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jilljenn/tryalgo/tryalgo/closest_values.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 35351
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n\n"
    },
    {
        "code": "def __init__(self, n):\n    self.up = list(range(n))\n    self.rank = [0] * n\n",
        "metadata": {
            "file": "py150_files/data/jilljenn/tryalgo/tryalgo/kruskal.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35352
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID (ID (ID ))\n    ID .ID =[LIT ]*ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =ID (ID not ID ))\n    ID .ID =[LIT ]*ID \n"
    },
    {
        "code": "\ndef find(self, x):\n    if self.up[x] == x:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jilljenn/tryalgo/tryalgo/kruskal.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35353
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID [ID ]==ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    if ID .ID [ID ]==ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef dist(a, b):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jilljenn/tryalgo/tryalgo/kruskal.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35354
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n    ."
    },
    {
        "code": "def part_sum(x, i=0):\n    if i == len(x):\n        pass\n    else:\n        for s in part_sum(x, i + 1):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jilljenn/tryalgo/tryalgo/subsetsum_divide.py",
            "fix_location": 92,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35355
        },
        "correct_code": "def ID (ID ,ID =LIT ):\n    if ID ==ID (ID ):\n        pass \n    else :\n        for ID in ID (ID ,ID +LIT ):\n            pass \n",
        "wrong_code": "def ID (ID ,ID =LIT ):\n    if ID ==ID (ID ):\n        pass \n    else :\n        for ID in ID (,ID +LIT ):\n            pass \n"
    },
    {
        "code": "\ndef test_love(self):\n    love = translator('en', 'zh-TW', 'I love you')[0].pop()\n    self.assertTrue(love)\n",
        "metadata": {
            "file": "py150_files/data/jjangsangy/py-translate/translate/tests/test_translator.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35356
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT ,LIT )[LIT ].ID ()\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT with LIT )[LIT ].ID ()\n    ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef pipe2glue(pcomments, pformat, rec):\n    \"\"\"\n    Convert a NMRPipe table to a nmrglue table\n\n    Parameters\n    ----------\n    pcomments : list\n        List of NMRPipe comment lines.\n    pformats : list\n        List of NMRPipe table column formats strings.\n    rec : recarray\n        Records array with named fields.\n\n    Returns\n    -------\n    comments : list\n        List of comments\n    rec : recarray\n        Records array with named fields.\n\n    \"\"\"\n    # add a \"#\" to the list of comments and we are done\n    comments = [\"# \" + c for c in pcomments]\n    return comments, rec\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35357
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    #COMMENT\n\n    ID =[LIT +ID for ID in ID ]\n    return ID ,ID \n",
        "wrong_code": "\n\ndef ID (ID ,,ID ):\n    LIT \n    #COMMENT\n\n    ID =[LIT +ID for ID in ID ]\n    return ID ,ID \n"
    },
    {
        "code": "\n\ndef glue2pipe(comments, rec):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35358
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID )!:\n    pass \n"
    },
    {
        "code": "\n\ndef read(filename):\n    if len(nl) != 1:\n        pass\n    if len(dl) != 1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 35359
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID (ID )!=LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID as (ID )!=LIT :\n        pass \n    if ID (ID )!=LIT :\n        pass \n"
    },
    {
        "code": "\n\ndef write(filename, comments, rec, overwrite=False):\n\n    # write out the comment lines at the top of the file\n    for c in comments:\n        pass\n\n    # write out each line of the table\n    for row in rec:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35360
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID =LIT ):\n\n#COMMENT\n\n    for ID in ID :\n        pass \n\n        #COMMENT\n\n    for ID in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,LIT ID ,ID =LIT ):\n\n#COMMENT\n\n    for ID in ID :\n        pass \n\n        #COMMENT\n\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\n\n# Row functions\ndef insert_row(rec, N, row):\n    \"\"\"\n    Insert a row into a records array before row number N.\n\n    Parameters\n    ----------\n    rec : recarray\n        Records array.\n    N : int\n        Row number to insert new row before.\n    row : array_like\n        Array or similar object which will be converted into a new row.\n\n    Returns\n    -------\n    new_rec : recarray\n        New records array with inserted row.\n\n    \"\"\"\n    return np.insert(rec, N, row)\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35361
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):    LIT \n    return ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "\n\ndef append_row(rec, row):\n    \"\"\"\n    Append a row to the end of a records array.\n\n    Parameters\n    ----------\n    rec : recarray\n        Records array.\n    row : array_like\n         Array or similar object which will be converted into a new row.\n\n    Returns\n    -------\n    new_rec : recarray\n        New records array with inserted row.\n\n    \"\"\"\n    N = len(rec)\n    return insert_row(rec, N, row)\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 74,
            "fix_type": "delete",
            "id": 35362
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID (ID ,ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID (ID ,ID ,ID )\nand "
    },
    {
        "code": "\n\ndef delete_row(rec, N):\n    \"\"\"\n    Delete a row from a records array.\n\n    Parameters\n    ----------\n    rec : recarray\n        Records array.\n    N : int\n        Row number to delete.\n\n    Returns\n    -------\n    new_rec : recarray\n        New records array with row deleted.\n\n    See Also\n    --------\n    reorder_rows : delete multiple rows in a single call.\n\n    \"\"\"\n    return np.delete(rec, N)\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35363
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID :\n    LIT \n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef reorder_rows(rec, new_order):\n    \"\"\"\n    Reorder or delete rows in a records array.\n\n    This function can also be used to delete multiple rows from a records\n    array, only the rows in the new_order list are retained in the new records\n    array.\n\n    Parameters\n    ----------\n    rec : recarray\n        Records array.\n    new_order : list\n        List of row indices and order in new records array.  Only the rows in\n        this list are retained in the new records array.  Therefore this\n        function can also be used to delete multiple rows from a records\n        array.\n\n    Returns\n    -------\n    new_rec : recarray\n        New records array with rows reordered.\n\n    \"\"\"\n    return np.take(rec, new_order)\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 35364
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID ,ID def )\n"
    },
    {
        "code": "\n\n# Column functions\ndef append_column(rec, col, name=None, format=None):\n    return insert_column(rec, N, col, name, format)\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 35365
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    return ID (ID ,ID ,ID ,ID ,ID )\n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID import ,ID ,ID =ID ,ID =ID ):\n    return ID (ID ,ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "\n\ndef delete_column(rec, N):\n    for n in new_rec.dtype.names:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35366
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID ID :\n        pass \n"
    },
    {
        "code": "\n\ndef reorder_columns(rec, new_order):\n    for n in new_rec.dtype.names:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jjhelmus/nmrglue/nmrglue/fileio/table.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 35367
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID (.ID :\n        pass \n"
    },
    {
        "code": "\n\ndef test_response__str__():\n    response = Response(200, {\"just test\": \"hope pass\"}, \"happy test!\")\n    assert str(response) == \"\"\"200\n{'just test': 'hope pass'}\nhappy test!\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/jjyr/zerotest/tests/test_response.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 35368
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (LIT ,{LIT :LIT },LIT )\n    assert ID (ID )==LIT \n",
        "wrong_code": "\n\ndef ID ()finally \n    ID =ID (LIT ,{LIT :LIT },LIT )\n    assert ID (ID )==LIT \n"
    },
    {
        "code": "\ndef __init__(self, ssl_version=None, **kwargs):\n    self._ssl_version = ssl_version\n    super(HTTPieHTTPAdapter, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/httpie/client.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 35369
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,**ID ):\n    ID .ID =ID \n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,**ID ):\n    ID .ID =ID import \n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef init_poolmanager(self, *args, **kwargs):\n    kwargs['ssl_version'] = self._ssl_version\n    super(HTTPieHTTPAdapter, self).init_poolmanager(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/httpie/client.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35370
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID [LIT ]=ID .ID \n    ID (ID ,ID ).ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )\n    ID [LIT ]=ID .ID \n    ID (ID ,ID ).ID (*ID ,**ID )\n"
    },
    {
        "code": "\n\ndef get_requests_session(ssl_version):\n    for cls in plugin_manager.get_transport_plugins():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/httpie/client.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35371
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID .ID ():(pass \n"
    },
    {
        "code": "\n\ndef dump_request(kwargs):\n    sys.stderr.write('\\n>>> requests.request(**%s)\\n\\n'\n                     % repr_dict_nice(kwargs))\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/httpie/client.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35372
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID .ID (LIT \n    %ID (ID ))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID .ID (]\n    %ID (ID ))\n"
    },
    {
        "code": "\n\ndef encode_headers(headers):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/httpie/client.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35373
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass elif "
    },
    {
        "code": "# noinspection PyDefaultArgument\ndef __init__(self, url, headers={}, status_code=200):\n    self.url = url\n    self.headers = CaseInsensitiveDict(headers)\n    self.status_code = status_code\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 35374
        },
        "correct_code": "#COMMENT\n\ndef ID (ID ,ID ,ID ={},ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID (ID )\n    ID .ID =ID \n",
        "wrong_code": "#COMMENT\n\ndef ID (ID nonlocal ,ID ,ID ={},ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID (ID )\n    ID .ID =ID \n"
    },
    {
        "code": "def test_Content_Range_parsing(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 35375
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    :\n"
    },
    {
        "code": "\ndef test_filename_from_url(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35376
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):]    pass \n"
    },
    {
        "code": "# noinspection PyUnresolvedReferences,PyUnusedLocal\ndef exists(filename):\n    if exists.attempt == unique_on_attempt:\n        return False\n    exists.attempt += 1\n    return True\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35377
        },
        "correct_code": "#COMMENT\n\ndef ID (ID ):\n    if ID .ID ==ID :\n        return LIT \n    ID .ID +=LIT \n    return LIT \n",
        "wrong_code": "#COMMENT\n\ndef ID (ID ):\n    if ID .ID ==:\n        return LIT \n    ID .ID +=LIT \n    return LIT \n"
    },
    {
        "code": "\ndef attempts(unique_on_attempt=0):\n    # noinspection PyUnresolvedReferences,PyUnusedLocal\n    def exists(filename):\n        if exists.attempt == unique_on_attempt:\n            pass\n    return exists\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 35378
        },
        "correct_code": "\ndef ID (ID =LIT ):\n#COMMENT\n\n    def ID (ID ):\n        if ID .ID ==ID :\n            pass \n    return ID \n",
        "wrong_code": "\ndef ID (ID =LIT ):not \n#COMMENT\n\n    def ID (ID ):\n        if ID .ID ==ID :\n            pass \n    return ID \n"
    },
    {
        "code": "# TODO: more tests\n\ndef test_actual_download(self, httpbin_both, httpbin):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 35379
        },
        "correct_code": "#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "#COMMENT\n\n\ndef ID (ID ,ID +,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_download_with_Content_Length(self, httpbin_both):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35380
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    pass \n"
    },
    {
        "code": "\ndef test_download_no_Content_Length(self, httpbin_both):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35381
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_download_interrupted(self, httpbin_both):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jkbrzt/httpie/tests/test_downloads.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 35382
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef +ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "def wrapped(*args, **kwargs):\n    if not isinstance(ret, unicode):\n        pass\n    return ret.encode('utf-8', 'ignore')\n",
        "metadata": {
            "file": "py150_files/data/jmcarp/robobrowser/robobrowser/compat.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35383
        },
        "correct_code": "def ID (*ID ,**ID ):\n    if not ID (ID ,ID ):\n        pass \n    return ID .ID (LIT ,LIT )\n",
        "wrong_code": "def ID (*ID ,**ID ):\n    if not ID (ID ,ID )\n        pass \n    return ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\n\ndef encode_if_py2(func):\n    if not PY2:\n        pass\n    def wrapped(*args, **kwargs):\n        if not isinstance(ret, unicode):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/jmcarp/robobrowser/robobrowser/compat.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35384
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID :\n        pass \n    def ID (*ID ,**ID ):\n        if not ID (ID ,ID ):\n            pass \n",
        "wrong_code": "\n\n\nID (ID ):\n    if not ID :\n        pass \n    def ID (*ID ,**ID ):\n        if not ID (ID ,ID ):\n            pass \n"
    },
    {
        "code": "\n    ###########################################################################\n    #\n    # Format properties.\n    #\n    ###########################################################################\n\ndef set_font_name(self, font_name):\n    \"\"\"\n        Set the Format font_name property such as 'Time New Roman'. The\n        default Excel font is 'Calibri'.\n\n        Args:\n            font_name: String with the font name. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_name = font_name\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35385
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\nexcept \ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_size(self, font_size=11):\n    \"\"\"\n        Set the Format font_size property. The default Excel font size is 11.\n\n        Args:\n            font_size: Int with font size. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_size = font_size\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35386
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID elif ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_color(self, font_color):\n    \"\"\"\n        Set the Format font_color property. The Excel default is black.\n\n        Args:\n            font_color: String with the font color. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_color = self._get_color(font_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35387
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID ID )\n"
    },
    {
        "code": "\ndef set_bold(self, bold=1):\n    \"\"\"\n        Set the Format bold property.\n\n        Args:\n            bold: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.bold = bold\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 35388
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,as ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_italic(self, italic=1):\n    \"\"\"\n        Set the Format italic property.\n\n        Args:\n            italic: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.italic = italic\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35389
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "[\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_underline(self, underline=1):\n    \"\"\"\n        Set the Format underline property.\n\n        Args:\n            underline: Default is 1, single underline.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.underline = underline\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35390
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n    ="
    },
    {
        "code": "\ndef set_font_strikeout(self, font_strikeout=1):\n    \"\"\"\n        Set the Format font_strikeout property.\n\n        Args:\n            font_strikeout: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_strikeout = font_strikeout\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35391
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_script(self, font_script=1):\n    \"\"\"\n        Set the Format font_script property.\n\n        Args:\n            font_script: Default is 1, superscript.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_script = font_script\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35392
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n]"
    },
    {
        "code": "\ndef set_font_outline(self, font_outline=1):\n    \"\"\"\n        Set the Format font_outline property.\n\n        Args:\n            font_outline: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_outline = font_outline\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 35393
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_shadow(self, font_shadow=1):\n    \"\"\"\n        Set the Format font_shadow property.\n\n        Args:\n            font_shadow: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.font_shadow = font_shadow\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 35394
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT *\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_num_format(self, num_format):\n    \"\"\"\n        Set the Format num_format property such as '#,##0'.\n\n        Args:\n            num_format: String representing the number format. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.num_format = num_format\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35395
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n    ]"
    },
    {
        "code": "\ndef set_locked(self, locked=1):\n    \"\"\"\n        Set the Format locked property.\n\n        Args:\n            locked: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.locked = locked\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35396
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (break ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_hidden(self, hidden=1):\n    \"\"\"\n        Set the Format hidden property.\n\n        Args:\n            hidden: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.hidden = hidden\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 35397
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ID =LIT ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_center_across(self):\n    \"\"\"\n        Set the Format center_across property.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.set_text_h_align(6)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 35398
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (raise LIT )\n"
    },
    {
        "code": "\ndef set_text_wrap(self, text_wrap=1):\n    \"\"\"\n        Set the Format text_wrap property.\n\n        Args:\n            text_wrap: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.text_wrap = text_wrap\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 35399
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID del =ID \n"
    },
    {
        "code": "\ndef set_indent(self, indent=1):\n    \"\"\"\n        Set the Format indent property.\n\n        Args:\n            indent: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.indent = indent\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35400
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT :\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_shrink(self, shrink=1):\n    \"\"\"\n        Set the Format shrink property.\n\n        Args:\n            shrink: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.shrink = shrink\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35401
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_text_justlast(self, text_justlast=1):\n    \"\"\"\n        Set the Format text_justlast property.\n\n        Args:\n            text_justlast: Default is 1, turns property on.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.text_justlast = text_justlast\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 35402
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT elif \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_pattern(self, pattern=1):\n    \"\"\"\n        Set the Format pattern property.\n\n        Args:\n            pattern: Default is 1, solid fill.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.pattern = pattern\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35403
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_bg_color(self, bg_color):\n    \"\"\"\n        Set the Format bg_color property.\n\n        Args:\n            bg_color: Background color. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.bg_color = self._get_color(bg_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 35404
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    [ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_fg_color(self, fg_color):\n    \"\"\"\n        Set the Format fg_color property.\n\n        Args:\n            fg_color: Foreground color. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.fg_color = self._get_color(fg_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35405
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )LIT :\n    LIT \n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\n# set_border(style) Set cells borders to the same style\ndef set_border(self, style=1):\n    \"\"\"\n        Set the Format bottom property.\n\n        Args:\n            bottom: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.set_bottom(style)\n    self.set_top(style)\n    self.set_left(style)\n    self.set_right(style)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 35406
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID (ID )ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\n# set_border_color(color) Set cells border to the same color\ndef set_border_color(self, color):\n    \"\"\"\n        Set the Format bottom property.\n\n        Args:\n            color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.set_bottom_color(color)\n    self.set_top_color(color)\n    self.set_left_color(color)\n    self.set_right_color(color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 35407
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT ID )\n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_bottom(self, bottom=1):\n    \"\"\"\n        Set the Format bottom property.\n\n        Args:\n            bottom: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.bottom = bottom\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35408
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .=ID \n"
    },
    {
        "code": "\ndef set_bottom_color(self, bottom_color):\n    \"\"\"\n        Set the Format bottom_color property.\n\n        Args:\n            bottom_color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.bottom_color = self._get_color(bottom_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35409
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .(ID )\n"
    },
    {
        "code": "\ndef set_diag_type(self, diag_type=1):\n    \"\"\"\n        Set the Format diag_type property.\n\n        Args:\n            diag_type: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.diag_type = diag_type\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35410
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT finally :\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_left(self, left=1):\n    \"\"\"\n        Set the Format left property.\n\n        Args:\n            left: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.left = left\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35411
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .if =ID \n"
    },
    {
        "code": "\ndef set_left_color(self, left_color):\n    \"\"\"\n        Set the Format left_color property.\n\n        Args:\n            left_color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.left_color = self._get_color(left_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35412
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_right(self, right=1):\n    \"\"\"\n        Set the Format right property.\n\n        Args:\n            right: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.right = right\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 35413
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID if ID =ID \n"
    },
    {
        "code": "\ndef set_right_color(self, right_color):\n    \"\"\"\n        Set the Format right_color property.\n\n        Args:\n            right_color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.right_color = self._get_color(right_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 35414
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    /\n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_top(self, top=1):\n    \"\"\"\n        Set the Format top property.\n\n        Args:\n            top: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.top = top\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35415
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n!"
    },
    {
        "code": "\ndef set_top_color(self, top_color):\n    \"\"\"\n        Set the Format top_color property.\n\n        Args:\n            top_color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.top_color = self._get_color(top_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35416
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_diag_color(self, diag_color):\n    \"\"\"\n        Set the Format diag_color property.\n\n        Args:\n            diag_color: Color string. No default.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.diag_color = self._get_color(diag_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 35417
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID ).ID (ID )\n"
    },
    {
        "code": "\ndef set_diag_border(self, diag_border=1):\n    \"\"\"\n        Set the Format diag_border property.\n\n        Args:\n            diag_border: Default is 1, border type 1.\n\n        Returns:\n            Nothing.\n\n        \"\"\"\n    self.diag_border = diag_border\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35418
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    ID .ID =ID :"
    },
    {
        "code": "\n###########################################################################\n#\n# Internal Format properties. These aren't documented since they are\n# either only used internally or else are unlikely to be set by the user.\n#\n###########################################################################\n\ndef set_has_font(self, has_font=1):\n    # Set the has_font property.\n    self.has_font = has_font\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 77,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 35419
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ,ID while LIT ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_has_fill(self, has_fill=1):\n    # Set the has_fill property.\n    self.has_fill = has_fill\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35420
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,=LIT ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_index(self, font_index):\n    # Set the font_index property.\n    self.font_index = font_index\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 35421
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .async ID =ID \n"
    },
    {
        "code": "\ndef set_xf_index(self, xf_index):\n    # Set the xf_index property.\n    self.xf_index = xf_index\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35422
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID :\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_dxf_index(self, dxf_index):\n    # Set the xf_index property.\n    self.dxf_index = dxf_index\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 35423
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID )\n:\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_num_format_index(self, num_format_index):\n    # Set the num_format_index property.\n    self.num_format_index = num_format_index\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 35424
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n    =="
    },
    {
        "code": "\ndef set_text_h_align(self, text_h_align):\n    # Set the text_h_align property.\n    self.text_h_align = text_h_align\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35425
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "is \ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_text_v_align(self, text_v_align):\n    # Set the text_v_align property.\n    self.text_v_align = text_v_align\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 35426
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\ntry \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_reading_order(self, reading_order=1):\n    # Set the reading_order property.\n    self.reading_order = reading_order\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 35427
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID while ID =LIT ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_valign(self, align):\n    # Set vertical cell alignment. This is required by the constructor\n    # properties dict to differentiate between the vertical and horizontal\n    # properties.\n    self.set_align(align)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35428
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    ID .ID (])\n"
    },
    {
        "code": "\ndef set_font_family(self, font_family):\n    # Set the Format font_family property.\n    self.font_family = font_family\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35429
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "import \ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_charset(self, font_charset):\n    # Set the Format font_charset property.\n    self.font_charset = font_charset\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35430
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "break def ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_scheme(self, font_scheme):\n    # Set the Format font_scheme property.\n    self.font_scheme = font_scheme\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35431
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID continue ,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_condense(self, font_condense):\n    # Set the Format font_condense property.\n    self.font_condense = font_condense\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 35432
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n-#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_extend(self, font_extend):\n    # Set the Format font_extend property.\n    self.font_extend = font_extend\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 35433
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):if \n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_theme(self, theme):\n    # Set the Format theme property.\n    self.theme = theme\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35434
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .=ID \n"
    },
    {
        "code": "\ndef set_hyperlink(self, hyperlink=1):\n    # Set the properties for the hyperlink style. This doesn't\n    # currently work. To be fixed when styles are supported.\n\n    self.set_underline(1)\n    self.set_theme(10)\n    self.set_align('top')\n    self.hyperlink = hyperlink\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35435
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n#COMMENT\n\n\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (and ,ID =LIT ):\n#COMMENT\n\n#COMMENT\n\n\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_color_indexed(self, color_index):\n    # Used in the cell comment format.\n    self.color_indexed = color_index\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35436
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID \nID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_font_only(self, font_only=True):\n    # Used in the cell comment format.\n    self.font_only = font_only\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 35437
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT while :\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\n# Compatibility methods.\ndef set_font(self, font_name):\n    #  For compatibility with Excel::Writer::XLSX.\n    self.font_name = font_name\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35438
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID )\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_size(self, font_size):\n    #  For compatibility with Excel::Writer::XLSX.\n    self.font_size = font_size\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35439
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (+,ID ):\n#COMMENT\n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef set_color(self, font_color):\n    #  For compatibility with Excel::Writer::XLSX.\n    self.font_color = self._get_color(font_color)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 35440
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n=\n\n    ID .ID =ID .ID (ID )\n"
    },
    {
        "code": "\ndef _get_protection_properties(self):\n\n    if not self.locked:\n        pass\n    if self.hidden:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 35441
        },
        "correct_code": "\ndef ID (ID ):\n\n    if not ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    if not ID .ID :\n        pass \n    if ID .ID :yield \n        pass \n"
    },
    {
        "code": "\ndef _get_format_key(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35442
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (+):\n    pass \n"
    },
    {
        "code": "\ndef _get_font_key(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 35443
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nfrom "
    },
    {
        "code": "\ndef _get_border_key(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 35444
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID lambda (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _get_fill_key(self):\n\n    return key\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35445
        },
        "correct_code": "\ndef ID (ID ):\n\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):-\n    return ID \n"
    },
    {
        "code": "\ndef _get_alignment_key(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 35446
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID class ID ):\n    pass \n"
    },
    {
        "code": "\ndef _get_color(self, color):\n\n    if color in named_colors:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 35447
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    if elif ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef _to_string(self, value):\n    # Convert number to a string but allow for utf-8 strings in Python 2.\n    try:\n        return str(value)\n    except UnicodeEncodeError:\n        return value.encode('utf-8')\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/format.py",
            "fix_location": 107,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35448
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    try :\n        return ID (ID )\n    except ID :\n        return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    try :\n        return ID (ID )\n    except ID :\n        return ID .ID (LIT )except "
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_autofilter07.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35449
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "[\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_axis12.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35450
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (.):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_axis12.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35451
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_axis40.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 35452
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ={}\nnonlocal "
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_axis40.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35453
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (=ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_chartarea03.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "{",
            "id": 35454
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_chartarea03.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35455
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "lambda \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_crossing04.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35456
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID )::    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_crossing04.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35457
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_date04.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 35458
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n/def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_date04.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35459
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_errorbars05.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35460
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_errorbars05.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 35461
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):pass \n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_format13.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "{",
            "id": 35462
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =await }\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_format13.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 35463
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):pass \n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_gradient11.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35464
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\nID (ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_gradient11.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 35465
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_name01.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 35466
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ={}\n    from "
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_name01.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35467
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_radar03.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35468
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\nID (ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_radar03.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 35469
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "while \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_title02.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "}",
            "id": 35470
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ={finally \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_chart_title02.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35471
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_cond_format03.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35472
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID :\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_cond_format03.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35473
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_default_row04.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 35474
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID break .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_default_row04.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 35475
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID class ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_format01.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35476
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .elif ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_format01.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35477
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_hyperlink05.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35478
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef )(ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_hyperlink05.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35479
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_image07.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 35480
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):and     pass \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_image07.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35481
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_image_anchor02.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35482
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_image_anchor02.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35483
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n==ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_file_in_memory(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_image_anchor02.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 35484
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_outline01.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35485
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_outline01.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35486
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_properties01.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 35487
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ):\n    finally .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_properties01.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 35488
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ]"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_set_column02.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 35489
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\nnonlocal ID (ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_set_column02.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 35490
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_table06.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35491
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_table06.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 35492
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):(\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.ignore_elements = {}\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_textbox15.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 35493
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\nID (ID ):\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef test_create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/comparison/test_textbox15.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 35494
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (nonlocal ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.fh = StringIO()\n    self.sharedstrings = SharedStrings()\n    self.sharedstrings._set_filehandle(self.fh)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/sharedstrings/test_initialisation.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 35495
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID =ID ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_xml_declaration(self):\n    \"\"\"Test Sharedstrings xml_declaration()\"\"\"\n\n    self.sharedstrings._xml_declaration()\n\n    exp = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n\"\"\"\n    got = self.fh.getvalue()\n\n    self.assertEqual(got, exp)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/sharedstrings/test_initialisation.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 35496
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    ID .ID .ID ()\n\n    ID =LIT \n    ID =ID .ID .ID ()\n\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    .ID .ID ()\n\n    ID =LIT \n    ID =ID .ID .ID ()\n\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.fh = StringIO()\n    self.styles = Styles()\n    self.styles._set_filehandle(self.fh)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/styles/test_write_num_fmt.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 35497
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID as ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_write_num_fmt(self):\n\n    self.styles._write_num_fmt(164, '#,##0.0')\n\n    exp = \"\"\"<numFmt numFmtId=\"164\" formatCode=\"#,##0.0\"/>\"\"\"\n    got = self.fh.getvalue()\n\n    self.assertEqual(got, exp)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/styles/test_write_num_fmt.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 35498
        },
        "correct_code": "\ndef ID (ID ):\n\n    ID .ID .ID (LIT ,LIT )\n\n    ID =LIT \n    ID =ID .ID .ID ()\n\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID :\n\n    ID .ID .ID (LIT ,LIT )\n\n    ID =LIT \n    ID =ID .ID .ID ()\n\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "def test_assemble_xml_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/vml/test_vml02.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35499
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.fh = StringIO()\n    self.workbook = Workbook()\n    self.workbook._set_filehandle(self.fh)\n",
        "metadata": {
            "file": "py150_files/data/jmcnamara/XlsxWriter/xlsxwriter/test/workbook/test_write_file_version.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 35500
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID )\n    ID .ID =ID ()\n    ID .ID =ID ()\n    ID .ID .ID (ID .ID )\n"
    }
]