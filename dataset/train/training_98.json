[
    {
        "code": "\n\ndef test_deprecated_conditional_true():\n    predicate = lambda: True\n    with _test_deprecation():\n        deprecated_conditional(predicate, FUTURE_VERSION, \"test hint message\", stacklevel=0)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49001
        },
        "correct_code": "\n\ndef ID ():\n    ID =lambda :LIT \n    with ID ():\n        ID (ID ,ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =lambda :LIT \n    with ID ():\n        ID (ID ,assert ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\n\ndef test_deprecated_conditional_false():\n    predicate = lambda: False\n    with _test_deprecation(deprecation_expected=False):\n        deprecated_conditional(predicate, FUTURE_VERSION, \"test hint message\", stacklevel=0)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 49002
        },
        "correct_code": "\n\ndef ID ():\n    ID =lambda :LIT \n    with ID (ID =LIT ):\n        ID (ID ,ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =lambda :del LIT \n    with ID (ID =LIT ):\n        ID (ID ,ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "@property\n@deprecated(FUTURE_VERSION)\ndef deprecated_property(self):\n    return expected_return\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 49003
        },
        "correct_code": "@ID \n@ID (ID )\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "@ID \n@ID (ID )\ndef ID (ID ):\n    return ID \n    )"
    },
    {
        "code": "\n@deprecated(FUTURE_VERSION, hint_message=hint_message)\ndef deprecated_function():\n    return expected_return\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49004
        },
        "correct_code": "\n@ID (ID ,ID =ID )\ndef ID ():\n    return ID \n",
        "wrong_code": "\n@ID (ID ,ID =ID )\ndef ID (:\n    return ID \n"
    },
    {
        "code": "@deprecated(None)\ndef test_func():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 49005
        },
        "correct_code": "@ID (ID )\ndef ID ():\n    pass \n",
        "wrong_code": "@ID (ID )\ndef ID ():\nassert     pass \n"
    },
    {
        "code": "\n\ndef test_removal_version_required():\n    with pytest.raises(MissingRemovalVersionError):\n        @deprecated(None)\n        def test_func():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49006
        },
        "correct_code": "\n\ndef ID ():\n    with ID .ID (ID ):\n        @ID (ID )\n        def ID ():\n            pass \n",
        "wrong_code": "\n\ndef ID ():\n    with ID .ID (ID :\n        @ID (ID )\n        def ID ():\n            pass \n"
    },
    {
        "code": "@deprecated(1.0)\ndef test_func1():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 49007
        },
        "correct_code": "@ID (LIT )\ndef ID ():\n    pass \n",
        "wrong_code": "@ID (LIT )\ndef ID ():\n\n"
    },
    {
        "code": "@deprecated('1.a.0')\ndef test_func1a():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49008
        },
        "correct_code": "@ID (LIT )\ndef ID ():\n    pass \n",
        "wrong_code": "@!(LIT )\ndef ID ():\n    pass \n"
    },
    {
        "code": "\n@deprecated(VERSION)\ndef test_func():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 49009
        },
        "correct_code": "\n@ID (ID )\ndef ID ():\n    pass \n",
        "wrong_code": "\n@ID (ID )\ndef ID :():\n    pass \n"
    },
    {
        "code": "\n@deprecated('0.0.27')\ndef test_func():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 49010
        },
        "correct_code": "\n@ID (LIT )\ndef ID ():\n    pass \n",
        "wrong_code": "\n@ID (LIT )\ndef ID ():\n    [\n"
    },
    {
        "code": "@deprecated(FUTURE_VERSION)\n@property\ndef test_prop(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/base/test_deprecated.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49011
        },
        "correct_code": "@ID (ID )\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "@ID (and )\n@ID \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49012
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID for :\n    pass \n"
    },
    {
        "code": "\ndef test_create(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 49013
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n:    pass \n"
    },
    {
        "code": "\ndef test_create_bad_targets(self):\n    with self.assertRaises(TypeError):\n        pass\n    with self.assertRaises(TypeError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49014
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        pass \n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):    with ID .ID (ID ):\n        pass \n    with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_create_bad_objects(self):\n    with self.assertRaises(TypeError):\n        pass\n\n    with self.assertRaises(TypeError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 49015
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        pass \n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (:ID ):\n        pass \n\n    with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_bad_context_aware_object_factories(self):\n    with self.assertRaises(TypeError):\n        BuildFileAliases(context_aware_object_factories={'george': 1})\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 49016
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID (ID ={LIT :LIT })\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID (ID ={LIT :LIT global })\n"
    },
    {
        "code": "\ndef test_merge(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 49017
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_target_types(self):\n    aliases = BuildFileAliases(targets={'jake': Target, 'jill': self.target_macro_factory})\n    self.assertEqual({'jake': Target}, aliases.target_types)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49018
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ={LIT :ID ,LIT :ID .ID })\n    ID .ID ({LIT :ID },ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID ={LIT :ID ,LIT :ID .ID })\n    ID .ID ({LIT :ID },ID .ID )LIT "
    },
    {
        "code": "\ndef test_target_macro_factories(self):\n    aliases = BuildFileAliases(targets={'jake': Target, 'jill': self.target_macro_factory})\n    self.assertEqual({'jill': self.target_macro_factory}, aliases.target_macro_factories)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 49019
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ={LIT :ID ,LIT :ID .ID })\n    ID .ID ({LIT :ID .ID },ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID ={/LIT :ID ,LIT :ID .ID })\n    ID .ID ({LIT :ID .ID },ID .ID )\n"
    },
    {
        "code": "\ndef test_target_types_by_alias(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/build_graph/test_build_file_aliases.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49020
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    in "
    },
    {
        "code": "\n@abstractmethod\n@contextmanager\ndef mk_project_tree(self, build_root_src):\n    \"\"\"Construct a ProjectTree for the given src path.\"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49021
        },
        "correct_code": "\n@ID \n@ID \ndef ID (ID ,ID ):\n    LIT \n    pass \n",
        "wrong_code": "\n@ID @ID \ndef ID (ID ,ID ):\n    LIT \n    pass \n"
    },
    {
        "code": "\ndef specs(self, ftype, relative_to, *filespecs):\n    return PathGlobs.create_from_specs(ftype, relative_to, filespecs)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 49022
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,*ID ):\n    return ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ),*ID ):\n    return ID .ID (ID ,ID ,ID )\n"
    },
    {
        "code": "def validate(e):\n    self.assertEquals(type(e), FileContent)\n    return True\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49023
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID (ID ),ID )\n    return LIT \n",
        "wrong_code": "def ID (ID :\n    ID .ID (ID (ID ),ID )\n    return LIT \n"
    },
    {
        "code": "\ndef test_walk_literal(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 49024
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )try :\n    pass \n"
    },
    {
        "code": "\ndef test_walk_literal_directory(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49025
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nnot "
    },
    {
        "code": "\ndef test_walk_siblings(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49026
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID \n(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_walk_recursive(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49027
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID /(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_walk_recursive_directory(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49028
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID not :\n    pass \n"
    },
    {
        "code": "\ndef test_files_content_literal(self):\n    self.assert_content(['4.txt'], {'4.txt': 'four\\n'})\n    self.assert_content(['a/4.txt.ln'], {'4.txt': 'four\\n'})\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49029
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ([LIT ],{LIT :LIT })\n    ID .ID ([LIT ],{LIT :LIT })\n",
        "wrong_code": "[\ndef ID (ID ):\n    ID .ID ([LIT ],{LIT :LIT })\n    ID .ID ([LIT ],{LIT :LIT })\n"
    },
    {
        "code": "\ndef test_files_content_directory(self):\n    with self.assertRaises(Exception):\n        pass\n    with self.assertRaises(Exception):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 49030
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        pass \n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        pass \n    with ID *.ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_nodes_file(self):\n    self.assert_fsnodes(Files, ['4.txt'], [\n        (Path('4.txt'), Stats),\n      ])\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49031
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,[LIT ],[\n    (ID (LIT ),ID ),\n    ])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID return ID (ID ,[LIT ],[\n    (ID (LIT ),ID ),\n    ])\n"
    },
    {
        "code": "\ndef test_nodes_symlink_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 49032
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nor def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_nodes_symlink_globbed_dir(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49033
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):and \n    pass \n"
    },
    {
        "code": "\ndef test_nodes_symlink_globbed_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 49034
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ):\n    pass \n"
    },
    {
        "code": "\n@contextmanager\ndef mk_project_tree(self, build_root_src):\n    yield self.mk_fs_tree(build_root_src)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49035
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    yield ID .ID (ID )\n",
        "wrong_code": "else \n@ID \ndef ID (ID ,ID ):\n    yield ID .ID (ID )\n"
    },
    {
        "code": "\n@unittest.skip('https://github.com/pantsbuild/pants/issues/3281')\ndef test_walk_recursive(self):\n    super(GitFSTest, self).test_walk_recursive()\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 49036
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (async ID ):\n    ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "\n@unittest.skip('https://github.com/pantsbuild/pants/issues/3281')\ndef test_files_content_literal(self):\n    super(GitFSTest, self).test_files_content_literal()\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/engine/exp/test_fs.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49037
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "\n@ID .ID (assert )\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "def __init__(self, option_values):\n    self._option_values = option_values\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49038
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ID =ID \n"
    },
    {
        "code": "\ndef __getitem__(self, key):\n    return getattr(self, key)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 49039
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID )\n:"
    },
    {
        "code": "\ndef get(self, key, default=None):\n    if hasattr(self, key):\n        return getattr(self, key, default)\n    return default\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 49040
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID (ID ,ID ):\n        return ID (ID ,ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID (import ID ,ID ):\n        return ID (ID ,ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef __getattr__(self, key):\n    value = self._option_values[key]\n    return value.value if isinstance(value, RankedValue) else value\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49041
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID [ID ]\n    return ID .ID if ID (ID ,ID )else ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =await .ID [ID ]\n    return ID .ID if ID (ID ,ID )else ID \n"
    },
    {
        "code": "\ndef get_rank(self, key):\n    value = self._option_values[key]\n    return value.rank if isinstance(value, RankedValue) else RankedValue.FLAG\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 49042
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID [ID ]\n    return ID .ID if ID (ID ,ID )else ID .ID \n",
        "wrong_code": "\ndef )ID (ID ,ID ):\n    ID =ID .ID [ID ]\n    return ID .ID if ID (ID ,ID )else ID .ID \n"
    },
    {
        "code": "\ndef is_flagged(self, key):\n    return self.get_rank(key) == RankedValue.FLAG\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49043
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )==ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID for :\n    return ID .ID (ID )==ID .ID \n"
    },
    {
        "code": "\ndef is_default(self, key):\n    return self.get_rank(key) in (RankedValue.NONE, RankedValue.HARDCODED)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 54,
            "fix_type": "delete",
            "id": 49044
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )in (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )in (ID .ID ,!=ID .ID )\n"
    },
    {
        "code": "\n\ndef create_option_values(option_values):\n    \"\"\"Create a fake OptionValueContainer object for testing.\n\n  :param **options: Keyword args representing option values explicitly set via the command line.\n  :returns: A fake `OptionValueContainer` encapsulating the given option values.\n  \"\"\"\n    return _FakeOptionValues(option_values)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 49045
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID (ID )\n",
        "wrong_code": "\n\ndef ]ID (ID ):\n    LIT \n    return ID (ID )\n"
    },
    {
        "code": "\n\ndef create_option_values_for_optionable(optionable_type, **options):\n    if not issubclass(optionable_type, Optionable):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 49046
        },
        "correct_code": "\n\ndef ID (ID ,**ID ):\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,**ID ):await \n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def for_scope(self, scope):\n    # TODO(John Sirois): Some users pass in A dict of scope -> _FakeOptionValues instead of a\n    # dict of scope -> (dict of option name -> value).  Clean up these usages and kill this\n    # accomodation.\n    if isinstance(scoped_options, _FakeOptionValues):\n        pass\n    else:\n        return create_option_values(scoped_options)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49047
        },
        "correct_code": "def ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID ):\n        pass \n    else :\n        return ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n#COMMENT\nexcept \n#COMMENT\n\n#COMMENT\n\n    if ID (ID ,ID ):\n        pass \n    else :\n        return ID (ID )\n"
    },
    {
        "code": "\ndef for_global_scope(self):\n    return self.for_scope('')\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49048
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID LIT )\n"
    },
    {
        "code": "\ndef passthru_args_for_scope(self, scope):\n    return passthru_args or []\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "or",
            "id": 49049
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID or []\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID with []\n"
    },
    {
        "code": "\ndef items(self):\n    return options.items()\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49050
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return return .ID ()\n"
    },
    {
        "code": "\n@property\ndef scope_to_flags(self):\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 49051
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return {}\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return {with }\n"
    },
    {
        "code": "\ndef get_fingerprintable_for_scope(self, scope):\n    return []\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49052
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return []\n",
        "wrong_code": "\ndef ID (ID /,ID ):\n    return []\n"
    },
    {
        "code": "\ndef __getitem__(self, key):\n    return self.for_scope(key)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 49053
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef except ID (ID ,ID ):\n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef complete_scopes(scopes):\n    for scope in scopes:\n        while scope != '':\n            if scope not in completed_scopes:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49054
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        while ID !=LIT :\n            if ID not in ID :\n                pass \n",
        "wrong_code": "\ndef ID (ID ):    for ID in ID :\n        while ID !=LIT :\n            if ID not in ID :\n                pass \n"
    },
    {
        "code": "\ndef register_func(on_scope):\n    scoped_options = all_options[on_scope]\n    register = _options_registration_function(scoped_options)\n    register.bootstrap = bootstrap_option_values\n    register.scope = on_scope\n    return register\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/option/util/fakes.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 49055
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID [ID ]\n    ID =ID (ID )\n    ID .ID =ID \n    ID .ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID [ID ]\n    ID =ID (ID )\n    return ID .ID =ID \n    ID .ID =ID \n    return ID \n"
    },
    {
        "code": "def sources(self, rel_path, *args):\n    return Globs.create_fileset_with_spec(rel_path, *args)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/source/test_payload_fields.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49056
        },
        "correct_code": "def ID (ID ,ID ,*ID ):\n    return ID .ID (ID ,*ID )\n",
        "wrong_code": "def ID (ID ,ID ,*ID ):break return ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef test_sources_field(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/source/test_payload_fields.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49057
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):/    pass \n"
    },
    {
        "code": "\ndef test_fails_on_invalid_sources_kwarg(self):\n    with self.assertRaises(ValueError):\n        SourcesField(sources='not-a-list')\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/source/test_payload_fields.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 49058
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID (ID yield LIT )\n"
    },
    {
        "code": "\ndef test_passes_fileset_with_spec_through(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/source/test_payload_fields.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49059
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID or ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_empty_environment(self):\n    with environment_as():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49060
        },
        "correct_code": "\ndef ID (ID ):\n    with ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    with ID ():\n        pass \n    ["
    },
    {
        "code": "\ndef __init__(self):\n    self._time = 0.0\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49061
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    global .ID =LIT \n"
    },
    {
        "code": "\ndef time(self):\n    ret = self._time\n    self._time += 0.0001  # Force a little time to elapse.\n    return ret\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 49062
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID \n    ID .ID +=LIT #COMMENT\n\n    return ID \n",
        "wrong_code": "\ndef ID (]ID ):\n    ID =ID .ID \n    ID .ID +=LIT #COMMENT\n\n    return ID \n"
    },
    {
        "code": "\ndef sleep(self, duration):\n    self._time += duration\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49063
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID +=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID +=ID \n"
    },
    {
        "code": "\ndef test_stdio_as(self):\n\n    with stdio_as(stdout=1, stderr=2, stdin=3):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 49064
        },
        "correct_code": "\ndef ID (ID ):\n\n    with ID (ID =LIT ,ID =LIT ,ID =LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    with ID (ID =LIT ,ID =LIT ,ID =LIT ):\n        pass \n        nonlocal "
    },
    {
        "code": "\ndef test_stdio_as_stdin_default(self):\n\n    with stdio_as(stdout=1, stderr=2):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pants/tests/python/pants_test/util/test_contextutil.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49065
        },
        "correct_code": "\ndef ID (ID ):\n\n    with ID (ID =LIT ,ID =LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    with is (ID =LIT ,ID =LIT ):\n        pass \n"
    },
    {
        "code": "\n@classmethod\ndef of(cls, *chained_finder_or_finder):\n    for finder in chained_finder_or_finder:\n        if isinstance(finder, cls):\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 49066
        },
        "correct_code": "\n@ID \ndef ID (ID ,*ID ):\n    for ID in ID :\n        if ID (ID ,ID ):\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,*ID ):\n    for ID in ID :\n        if ID (ID ,ID ):from \n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, finders):\n    self.finders = finders\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49067
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __call__(self, importer, path_item, only=False):\n    for finder in self.finders:\n        for dist in finder(importer, path_item, only=only):\n            yield dist\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49068
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    for ID in ID .ID :\n        for ID in ID (ID ,ID ,ID =ID ):\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    for ID in ID .ID :\n        for ID in ID continue ID ,ID ,ID =ID ):\n            yield ID \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    if not isinstance(other, ChainedFinder):\n        return False\n    return self.finders == other.finders\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 87,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49069
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID ==ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID ==ID ID \n"
    },
    {
        "code": "\n\n# The following methods are somewhat dangerous as pkg_resources._distribution_finders is not an\n# exposed API.  As it stands, pkg_resources doesn't provide an API to chain multiple distribution\n# finders together.  This is probably possible using importlib but that does us no good as the\n# importlib machinery supporting this is only available in Python >= 3.1.\ndef _get_finder(importer):\n    if not hasattr(pkg_resources, '_distribution_finders'):\n        return None\n    return pkg_resources._distribution_finders.get(importer)\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 80,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49070
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    if not ID (ID ,LIT ):\n        return ID \n    return ID .ID .ID (ID )\n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    if not ID (ID ,LIT )\n        return ID \n    return ID .ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef _add_finder(importer, finder):\n\n    if not existing_finder:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 49071
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n    if not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ==):\n\n    if not ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n@classmethod\ndef _split_wheelname(cls, wheelname):\n    split_wheelname = wheelname.split('-')\n    return '-'.join(split_wheelname[:-3])\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49072
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    ID =ID .ID (LIT )\n    return LIT .ID (ID [:-LIT ])\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID )\n    ID =ID .ID (LIT )\n    return LIT .ID (ID [:-LIT ])\n"
    },
    {
        "code": "\ndef _setup_prefix(self):\n    while path != old:\n        if path.lower().endswith('.whl'):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 49073
        },
        "correct_code": "\ndef ID (ID ):\n    while ID !=ID :\n        if ID .ID ().ID (LIT ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\ncontinue     while ID !=ID :\n        if ID .ID ().ID (LIT ):\n            pass \n"
    },
    {
        "code": "\n@classmethod\ndef normalized_elements(cls, path):\n    while path_split[-1] in ('', '.'):\n        pass\n    return path_split\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 49074
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    while ID [-LIT ]in (LIT ,LIT ):\n        pass \n    return ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):\n    while pass ID [-LIT ]in (LIT ,LIT ):\n        pass \n    return ID \n"
    },
    {
        "code": "\ndef _fn(self, base, resource_name):\n    # super() does not work here as EggMetadata is an old-style class.\n    original_fn = pkg_resources.EggMetadata._fn(self, base, resource_name)\n    return '/'.join(self.normalized_elements(original_fn))\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 82,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49075
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    ID =ID .ID .ID (ID ,ID ,ID )\n    return LIT .ID (ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    ID =ID .ID .ID (ID ,ID ,ID )\n    return LIT .(ID .ID (ID ))\n"
    },
    {
        "code": "\ndef _zipinfo_name(self, fspath):\n    if fspath[:len(zip_pre)] == zip_pre:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 49076
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [:ID (ID )]==ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [:ID (ID )]==ID :\n        import pass \n"
    },
    {
        "code": "\n\ndef wheel_from_metadata(location, metadata):\n    if not metadata.has_metadata(pkg_resources.DistInfoDistribution.PKG_INFO):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49077
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID .ID (ID .ID .ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if not ID .ID (ID .ID .ID ):\n        pass \nnonlocal "
    },
    {
        "code": "\n\ndef find_wheels_in_zip(importer, path_item, only=False):\n    metadata = WheelMetadata(importer)\n    dist = wheel_from_metadata(path_item, metadata)\n    if dist:\n        yield dist\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49078
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =LIT ):\n    ID =ID (ID )\n    ID =ID (ID ,ID )\n    if ID :\n        yield ID \n",
        "wrong_code": "except \n\ndef ID (ID ,ID ,ID =LIT ):\n    ID =ID (ID )\n    ID =ID (ID ,ID )\n    if ID :\n        yield ID \n"
    },
    {
        "code": "\n\ndef register_finders():\n    if __PREVIOUS_FINDER:\n        pass\n\n    if importlib_bootstrap is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49079
        },
        "correct_code": "\n\ndef ID ():\n    if ID :\n        pass \n\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID \n        pass \n\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\n\ndef unregister_finders():\n    if not __PREVIOUS_FINDER:\n        pass\n\n    if importlib_bootstrap is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49080
        },
        "correct_code": "\n\ndef ID ():\n    if not ID :\n        pass \n\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\n\nID ():\n    if not ID :\n        pass \n\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\n\ndef get_script_from_egg(name, dist):\n    if name in dist.metadata_listdir('scripts'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49081
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID in ID .ID (LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID in ID .ID (LIT )pass \n        pass \n"
    },
    {
        "code": "\n\ndef safer_name(name):\n    return name.replace('-', '_')\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 49082
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID (LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    None ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\n\ndef get_script_from_whl(name, dist):\n    if dist.resource_isdir(wheel_scripts_dir) and name in dist.resource_listdir(wheel_scripts_dir):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49083
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID .ID (ID )and ID in ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (,ID ):\n    if ID .ID (ID )and ID in ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef get_script_from_distributions(name, dists):\n    for dist in dists:\n        if script_path:\n            pass\n    return None, None, None\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49084
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID :\n        if ID :\n            pass \n    return ID ,ID ,ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID )\n    for ID in ID :\n        if ID :\n            pass \n    return ID ,ID ,ID \n"
    },
    {
        "code": "\n\ndef get_entry_point_from_console_script(script, dists):\n\n    # if multiple matches, freak out\n    if len(entries) > 1:\n        pass\n\n    if entries:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/pex/finders.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49085
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    if ID (ID )>LIT :\n        pass \n\n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID .:\n\n#COMMENT\n\n    if ID (ID )>LIT :\n        pass \n\n    if ID :\n        pass \n"
    },
    {
        "code": "\n\ndef test_entry_points_dict():\n    assert_entry_points({'console_scripts': ['my_app = my_app:do_something']})\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_bdist_pex.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 49086
        },
        "correct_code": "\n\ndef ID ():\n    ID ({LIT :[LIT ]})\n",
        "wrong_code": "\n\ndef ID ():\n    ID ({LIT :[LIT \n    })\n"
    },
    {
        "code": "\n\ndef test_entry_points_ini_string():\n    assert_entry_points(dedent(\"\"\"\n      [console_scripts]\n      my_app=my_app:do_something\n    \"\"\"))\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_bdist_pex.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 49087
        },
        "correct_code": "\n\ndef ID ():\n    ID (ID (LIT ))\n",
        "wrong_code": "\n\ndef ID ():\n    ID (ID continue (LIT ))\n"
    },
    {
        "code": "def thing():\n    # no pydoc\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49088
        },
        "correct_code": "def ID ():\n#COMMENT\n\n    pass \n",
        "wrong_code": "def ID ()\n#COMMENT\n\n    pass \n"
    },
    {
        "code": "\ndef other_thing():\n    \"\"\"Type\n\n    Properly\n         formatted\n      text.\n    \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49089
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID ():\n    LIT \n/"
    },
    {
        "code": "\n\ndef test_process_pydoc():\n    def thing():\n        pass\n\n    def other_thing():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49090
        },
        "correct_code": "\n\ndef ID ():\n    def ID ():\n        pass \n\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef as ():\n    def ID ():\n        pass \n\n    def ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef test_iter_help():\n    for variable_name, variable_type, variable_text in Variables.iter_help():\n        assert variable_name.startswith('PEX_')\n        assert '\\n' not in variable_type\n        assert '\\n' not in variable_text\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 128,
            "fix_type": "delete",
            "id": 49091
        },
        "correct_code": "\n\ndef ID ():\n    for ID ,ID ,ID in ID .ID ():\n        assert ID .ID (LIT )\n        assert LIT not in ID \n        assert LIT not in ID \n",
        "wrong_code": "\n\ndef ID ():\n    for ID ,ID ,ID in ID .ID ():\n        assert ID .ID (LIT )\n        assert LIT not in ID \n        assert LIT not ,in ID \n"
    },
    {
        "code": "\n\ndef test_pex_string_variables():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49092
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    pass \n    in "
    },
    {
        "code": "\n\ndef test_pex_get_int():\n\n    with pytest.raises(SystemExit):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 49093
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    in with ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_pex_vars_set():\n    assert v._get_int('HELLO') is None\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49094
        },
        "correct_code": "\n\ndef ID ():\n    assert ID .ID (LIT )is ID \n",
        "wrong_code": "\n\ndef ID ():\n    assert ID .ID (LIT )is \n"
    },
    {
        "code": "\n\ndef test_pex_get_kv():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49095
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():ID \n    pass \n"
    },
    {
        "code": "\n\ndef test_pex_vars_defaults_stripped():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pantsbuild/pex/tests/test_variables.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49096
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\nID ():\n    pass \n"
    },
    {
        "code": "\ndef create_detail(self, object_list, bundle):\n\n    # a temporary fix - for now any logged in user can create any object\n    return True\n\n    \"\"\"\n        klass = self.base_checks(bundle.request, bundle.obj.__class__)\n        create_list=[]\n\n        if klass is False:\n            raise Unauthorized(\"You are not allowed to access that resource.\")\n\n        permission = 'add_%s' % (klass._meta.verbose_name)\n\n        for obj in object_list:\n            if bundle.request.user.has_perms(permission,obj):\n                create_list.append(obj)\n\n        if create_list:\n            return True\n        raise Unauthorized(\"You are not allowed to access that resource.\")\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/GuardianTastypieAuthz.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49097
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n#COMMENT\n\n    return LIT \n\n    LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n\n#COMMENT\n\n    return LIT None \n    LIT \n"
    },
    {
        "code": "\n\ndef extra_context(context):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/core/context_processors.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49098
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/core/migrations/0013_auto__chg_field_download_file_store_item__chg_field_download_analysis.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49099
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID \n:\n    pass \n"
    },
    {
        "code": "\ndef backwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/core/migrations/0013_auto__chg_field_download_file_store_item__chg_field_download_analysis.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 49100
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \nas "
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/core/migrations/0037_auto__add_field_invitation_sender.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 49101
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID !(ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef backwards(self, orm):\n    # Deleting field 'Invitation.sender'\n    db.delete_column(u'core_invitation', 'sender_id')\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/core/migrations/0037_auto__add_field_invitation_sender.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49102
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID :\n#COMMENT\n\n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49103
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "]\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _split_header(self, header):\n    return [x.strip() for x in header.replace(\"]\", \"\").strip().split(\"[\")]\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 49104
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return [ID .ID ()for ID in ID .ID (LIT ,LIT ).ID ().ID (LIT )]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return [ID .ID ()for ID in ID .ID (LIT ,LIT )not .ID ().ID (LIT )]\n"
    },
    {
        "code": "\ndef _parse_assay_file(self, study, assay, file_name):\n    self._current_file_name = file_name\n    self._current_assay = assay\n    self._parse_study_file(study, file_name)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49105
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID global ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef is_node(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) in \\\n            self._adjust_list_case(Node.TYPES)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49106
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())in ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ()-in ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef is_attribute(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) in \\\n            self._adjust_list_case(Attribute.TYPES)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49107
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())in ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ]nonlocal ID ())in ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef is_protocol_reference(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Protocol REF\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 49108
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )finally LIT ].ID ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_protocol_reference_parameter(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Parameter Value\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 74,
            "fix_type": "delete",
            "id": 49109
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (if LIT )\n"
    },
    {
        "code": "\ndef is_protocol_reference_performer(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Performer\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49110
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_protocol_reference_date(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Date\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49111
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID /,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_protocol_reference_information(self, string):\n    return self.is_protocol_reference_date(string) or \\\n            self.is_protocol_reference_performer(string) or \\\n            self.is_protocol_reference_parameter(string)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49112
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )or ID .ID (ID )or ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .](ID )or ID .ID (ID )or ID .ID (ID )\n"
    },
    {
        "code": "\ndef is_unit(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Unit\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 49113
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (return ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_term_accession(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Term Accession Number\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 49114
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID await ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_term_source(self, string):\n    return self._adjust_string_case(string.split(\"[\")[0].strip()) == \\\n            self._adjust_string_case(\"Term Source REF\")\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49115
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ==return ID .ID (ID .ID (LIT )[LIT ].ID ())==ID .ID (LIT )\n"
    },
    {
        "code": "\ndef is_term_information(self, string):\n    return self.is_term_accession(string) or self.is_term_source(string)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49116
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )or ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .(ID )or ID .ID (ID )\n"
    },
    {
        "code": "\ndef _adjust_string_case(self, string):\n    \"\"\"Returns a lowercase copy of string if the parser has\n        ignore_case set to True, otherwise string will be returned.\n        \"\"\"\n    if self.ignore_case:\n        return string.lower()\n    return string\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49117
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        return ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        return ID .ID (\n    return ID \n"
    },
    {
        "code": "\ndef _adjust_list_case(self, list):\n    \"\"\"Returns a copy of list with all lowercase entries if the parser has\n        ignore_case set to True, otherwise list will be returned.\n        \"\"\"\n    if self.ignore_case:\n        return [s.lower() for s in list]\n    return list\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49118
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        return [ID .ID ()for ID in ID ]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .except :\n        return [ID .ID ()for ID in ID ]\n    return ID \n"
    },
    {
        "code": "\ndef _adjust_dict_case(self, dict):\n    \"\"\"Returns a copy of dict with all lowercase keys if the parser has\n        ignore_case set to True, otherwise dict will be returned. Use\n        with _adjust_string_case to do a case insensitive lookup\n        \"\"\"\n    if self.ignore_case:\n        return {k.lower(): dict[k] for k in dict}\n    return dict\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/data_set_manager/isa_tab_parser.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49119
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID .ID :\n        return {ID .ID ():ID [ID ]for ID in ID }\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT if ID .ID :\n        return {ID .ID ():ID [ID ]for ID in ID }\n    return ID \n"
    },
    {
        "code": "\ndef save_model(self, request, obj, form, change):\n    '''Symlink if source is a local file\n\n        '''\n    if os.path.isabs(obj.source) and not obj.is_local():\n        obj.symlink_datafile()\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/file_store/admin.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49120
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    if ID .ID .ID (ID .ID )and not ID .ID ():\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (!,ID ,ID ,ID ,ID ):\n    LIT \n    if ID .ID .ID (ID .ID )and not ID .ID ():\n        ID .ID ()\n"
    },
    {
        "code": "\ndef __unicode__(self):\n    return self.description + \" (\" + self.api_key + \")\"\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/galaxy_connector/models.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49121
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID +LIT +ID .ID +LIT \n",
        "wrong_code": "\ndef ID ID ):\n    return ID .ID +LIT +ID .ID +LIT \n"
    },
    {
        "code": "\ndef galaxy_connection(self):\n    return galaxy.GalaxyInstance(url=self.base_url, key=self.api_key)\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/galaxy_connector/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49122
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID =ID .ID ,ID =ID .ID )\n",
        "wrong_code": "(\ndef ID (ID ):\n    return ID .ID (ID =ID .ID ,ID =ID .ID )\n"
    },
    {
        "code": "\ndef get_complete_workflows(self):\n    for workflow_entry in connection.workflows.get_workflows():\n        for input_identifier, input_description in workflow_inputs.items():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/parklab/refinery-platform/refinery/galaxy_connector/models.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49123
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID ():\n        for ID ,ID in ID .ID ():\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID nonlocal ID ():\n        for ID ,ID in ID .ID ():\n            pass \n"
    },
    {
        "code": "\n\ndef open_pastpages_url(url, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pastpages/storytracker/storytracker/pastpages.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49124
        },
        "correct_code": "\n\ndef ID (ID ,**ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID global ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_unusedImport(self):\n    self.flakes('import fu, bar', m.UnusedImport, m.UnusedImport)\n    self.flakes('from baz import fu, bar', m.UnusedImport, m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 49125
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID ,ID .ID )\n    ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID ,ID .ID )\n    ID .ID (LIT ,ID .ID else ,ID .ID )\n"
    },
    {
        "code": "\ndef test_aliasedImport(self):\n    self.flakes('import fu as FU, bar as FU',\n                m.RedefinedWhileUnused, m.UnusedImport)\n    self.flakes('from moo import fu as FU, bar as FU',\n                m.RedefinedWhileUnused, m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 49126
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,\n    ID .ID ,ID .ID )\n    ID .ID (LIT ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    and ID .ID (LIT ,\n    ID .ID ,ID .ID )\n    ID .ID (LIT ,\n    ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_usedImport(self):\n    self.flakes('import fu; print(fu)')\n    self.flakes('from baz import fu; print(fu)')\n    self.flakes('import fu; del fu')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49127
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\nID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedWhileUnused(self):\n    self.flakes('import fu; fu = 3', m.RedefinedWhileUnused)\n    self.flakes('import fu; fu, bar = 3', m.RedefinedWhileUnused)\n    self.flakes('import fu; [fu, bar] = 3', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49128
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_redefinedIf(self):\n    \"\"\"\n        Test that importing a module twice within an if\n        block does raise a warning.\n        \"\"\"\n    self.flakes('''\n        i = 2\n        if i==1:\n            import os\n            import os\n        os.path''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49129
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .)\n"
    },
    {
        "code": "\ndef test_redefinedIfElse(self):\n    \"\"\"\n        Test that importing a module twice in if\n        and else blocks does not raise a warning.\n        \"\"\"\n    self.flakes('''\n        i = 2\n        if i==1:\n            import os\n        else:\n            import os\n        os.path''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 49130
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID assert .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTry(self):\n    \"\"\"\n        Test that importing a module twice in an try block\n        does raise a warning.\n        \"\"\"\n    self.flakes('''\n        try:\n            import os\n            import os\n        except:\n            pass\n        os.path''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49131
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_redefinedTryExcept(self):\n    \"\"\"\n        Test that importing a module twice in an try\n        and except block does not raise a warning.\n        \"\"\"\n    self.flakes('''\n        try:\n            import os\n        except:\n            import os\n        os.path''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49132
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTryNested(self):\n    \"\"\"\n        Test that importing a module twice using a nested\n        try/except and if blocks does not issue a warning.\n        \"\"\"\n    self.flakes('''\n        try:\n            if True:\n                if True:\n                    import os\n        except:\n            import os\n        os.path''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 49133
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\ntry     LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTryExceptMulti(self):\n    self.flakes(\"\"\"\n        try:\n            from aa import mixer\n        except AttributeError:\n            from bb import mixer\n        except RuntimeError:\n            from cc import mixer\n        except:\n            from dd import mixer\n        mixer(123)\n        \"\"\")\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49134
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\nID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTryElse(self):\n    self.flakes(\"\"\"\n        try:\n            from aa import mixer\n        except ImportError:\n            pass\n        else:\n            from bb import mixer\n        mixer(123)\n        \"\"\", m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49135
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID pass ID )\n"
    },
    {
        "code": "\ndef test_redefinedTryExceptElse(self):\n    self.flakes(\"\"\"\n        try:\n            import funca\n        except ImportError:\n            from bb import funca\n            from bb import funcb\n        else:\n            from bbb import funcb\n        print(funca, funcb)\n        \"\"\")\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49136
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ==LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTryExceptFinally(self):\n    self.flakes(\"\"\"\n        try:\n            from aa import a\n        except ImportError:\n            from bb import a\n        finally:\n            a = 42\n        print(a)\n        \"\"\")\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49137
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (():\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedTryExceptElseFinally(self):\n    self.flakes(\"\"\"\n        try:\n            import b\n        except ImportError:\n            b = Ellipsis\n            from bb import a\n        else:\n            from aa import a\n        finally:\n            a = 42\n        print(a, b)\n        \"\"\")\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 49138
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT .)\n"
    },
    {
        "code": "\ndef test_redefinedByFunction(self):\n    self.flakes('''\n        import fu\n        def fu():\n            pass\n        ''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49139
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID )==\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_redefinedInNestedFunction(self):\n    \"\"\"\n        Test that shadowing a global name with a nested function definition\n        generates a warning.\n        \"\"\"\n    self.flakes('''\n        import fu\n        def bar():\n            def baz():\n                def fu():\n                    pass\n        ''', m.RedefinedWhileUnused, m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 49140
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID ,ID for .ID )\n"
    },
    {
        "code": "\ndef test_redefinedByClass(self):\n    self.flakes('''\n        import fu\n        class fu:\n            pass\n        ''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 49141
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n!"
    },
    {
        "code": "\ndef test_redefinedBySubclass(self):\n    \"\"\"\n        If an imported name is redefined by a class statement which also uses\n        that name in the bases list, no warning is emitted.\n        \"\"\"\n    self.flakes('''\n        from fu import bar\n        class bar(bar):\n            pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49142
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT \n"
    },
    {
        "code": "\ndef test_redefinedInClass(self):\n    \"\"\"\n        Test that shadowing a global with a class attribute does not produce a\n        warning.\n        \"\"\"\n    self.flakes('''\n        import fu\n        class bar:\n            fu = 1\n        print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49143
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID del (ID ):\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInFunction(self):\n    self.flakes('''\n        import fu\n        def fun():\n            print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49144
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (=LIT )\n"
    },
    {
        "code": "\ndef test_shadowedByParameter(self):\n    self.flakes('''\n        import fu\n        def fun(fu):\n            print(fu)\n        ''', m.UnusedImport)\n\n    self.flakes('''\n        import fu\n        def fun(fu):\n            print(fu)\n        print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49145
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (:):\n    ID .ID (LIT ,ID .ID )\n\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_newAssignment(self):\n    self.flakes('fu = None')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49146
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT assert \n"
    },
    {
        "code": "\ndef test_usedInGetattr(self):\n    self.flakes('import fu; fu.bar.baz')\n    self.flakes('import fu; \"bar\".fu.baz', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49147
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID except ID (LIT )\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_usedInSlice(self):\n    self.flakes('import fu; print(fu.bar[1:])')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49148
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .)ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInIfBody(self):\n    self.flakes('''\n        import fu\n        if True: print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49149
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )except \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInIfConditional(self):\n    self.flakes('''\n        import fu\n        if fu: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49150
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInElifConditional(self):\n    self.flakes('''\n        import fu\n        if False: pass\n        elif fu: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49151
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT \n"
    },
    {
        "code": "\ndef test_usedInElse(self):\n    self.flakes('''\n        import fu\n        if False: pass\n        else: print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49152
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n+"
    },
    {
        "code": "\ndef test_usedInCall(self):\n    self.flakes('import fu; fu.bar()')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49153
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (/)\n"
    },
    {
        "code": "\ndef test_usedInClass(self):\n    self.flakes('''\n        import fu\n        class bar:\n            bar = fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49154
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID as ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInClassBase(self):\n    self.flakes('''\n        import fu\n        class bar(object, fu.baz):\n            pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49155
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )return \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_notUsedInNestedScope(self):\n    self.flakes('''\n        import fu\n        def bleh():\n            pass\n        print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 49156
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    for "
    },
    {
        "code": "\ndef test_usedInFor(self):\n    self.flakes('''\n        import fu\n        for bar in range(9):\n            print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49157
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,:\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInForElse(self):\n    self.flakes('''\n        import fu\n        for bar in range(10):\n            pass\n        else:\n            print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49158
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "continue def ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedByFor(self):\n    self.flakes('''\n        import fu\n        for fu in range(2):\n            pass\n        ''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 49159
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n]"
    },
    {
        "code": "\ndef test_shadowedByFor(self):\n    \"\"\"\n        Test that shadowing a global name with a for loop variable generates a\n        warning.\n        \"\"\"\n    self.flakes('''\n        import fu\n        fu.bar()\n        for fu in ():\n            pass\n        ''', m.ImportShadowedByLoopVar)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49160
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID )nonlocal \n    LIT \n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_shadowedByForDeep(self):\n    \"\"\"\n        Test that shadowing a global name with a for loop variable nested in a\n        tuple unpack generates a warning.\n        \"\"\"\n    self.flakes('''\n        import fu\n        fu.bar()\n        for (x, y, z, (a, b, c, (fu,))) in ():\n            pass\n        ''', m.ImportShadowedByLoopVar)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 49161
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .async ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_usedInReturn(self):\n    self.flakes('''\n        import fu\n        def fun():\n            return fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 49162
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (return ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInOperators(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49163
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_usedInAssert(self):\n    self.flakes('import fu; assert fu.bar')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49164
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "in def ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInSubscript(self):\n    self.flakes('import fu; fu.bar[1]')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49165
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .LIT ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInLogic(self):\n    self.flakes('import fu; fu and False')\n    self.flakes('import fu; fu or False')\n    self.flakes('import fu; not fu.bar')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49166
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ..ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInList(self):\n    self.flakes('import fu; [fu]')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49167
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    async "
    },
    {
        "code": "\ndef test_usedInTuple(self):\n    self.flakes('import fu; (fu,)')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49168
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID nonlocal ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInTry(self):\n    self.flakes('''\n        import fu\n        try: fu\n        except: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49169
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "==\ndef ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInExcept(self):\n    self.flakes('''\n        import fu\n        try: fu\n        except: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49170
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )/\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedByExcept(self):\n    as_exc = ', ' if version_info < (2, 6) else ' as '\n    self.flakes('''\n        import fu\n        try: pass\n        except Exception%sfu: pass\n        ''' % as_exc, m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49171
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT if ID <(LIT ,LIT )else LIT \n    ID .ID (LIT %ID ,ID .ID )\n",
        "wrong_code": "return def ID (ID ):\n    ID =LIT if ID <(LIT ,LIT )else LIT \n    ID .ID (LIT %ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_usedInRaise(self):\n    self.flakes('''\n        import fu\n        raise fu.bar\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49172
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .\n    ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInYield(self):\n    self.flakes('''\n        import fu\n        def gen():\n            yield fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49173
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInDict(self):\n    self.flakes('import fu; {fu:None}')\n    self.flakes('import fu; {1:fu}')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49174
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInParameterDefault(self):\n    self.flakes('''\n        import fu\n        def f(bar=fu):\n            pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49175
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT is \n"
    },
    {
        "code": "\ndef test_usedInAttributeAssign(self):\n    self.flakes('import fu; fu.bar = 1')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 49176
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ):\n"
    },
    {
        "code": "\ndef test_usedInKeywordArg(self):\n    self.flakes('import fu; fu.bar(stuff=fu)')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49177
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID LIT )\n"
    },
    {
        "code": "\ndef test_usedInAssignment(self):\n    self.flakes('import fu; bar=fu')\n    self.flakes('import fu; n=0; n+=fu')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49178
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID :\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInListComp(self):\n    self.flakes('import fu; [fu for _ in range(1)]')\n    self.flakes('import fu; [1 for _ in range(1) if fu]')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49179
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "async \ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedByListComp(self):\n    self.flakes('import fu; [1 for fu in range(1)]', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 49180
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID *)\n"
    },
    {
        "code": "\ndef test_usedInTryFinally(self):\n    self.flakes('''\n        import fu\n        try: pass\n        finally: fu\n        ''')\n\n    self.flakes('''\n        import fu\n        try: fu\n        finally: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 49181
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n\n    ID .ID (LIT )\n",
        "wrong_code": "\n.def ID (ID ):\n    ID .ID (LIT )\n\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInWhile(self):\n    self.flakes('''\n        import fu\n        while 0:\n            fu\n        ''')\n\n    self.flakes('''\n        import fu\n        while fu: pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 49182
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (assert ID ):\n    ID .ID (LIT )\n\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInGlobal(self):\n    self.flakes('''\n        import fu\n        def f(): global fu\n        ''', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49183
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .[)\n"
    },
    {
        "code": "\n@skipIf(version_info >= (3,), 'deprecated syntax')\ndef test_usedInBackquote(self):\n    self.flakes('import fu; `fu`')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49184
        },
        "correct_code": "\n@ID (ID >=(LIT ,),LIT )\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\n@ID (ID >=(LIT ,),LIT )\ndef ID (ID ):\n    .ID (LIT )\n"
    },
    {
        "code": "\ndef test_usedInExec(self):\n    if version_info < (3,):\n        exec_stmt = 'exec \"print 1\" in fu.bar'\n    else:\n        exec_stmt = 'exec(\"print(1)\", fu.bar)'\n    self.flakes('import fu; %s' % exec_stmt)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49185
        },
        "correct_code": "\ndef ID (ID ):\n    if ID <(LIT ,):\n        ID =LIT \n    else :\n        ID =LIT \n    ID .ID (LIT %ID )\n",
        "wrong_code": "\ndef -(ID ):\n    if ID <(LIT ,):\n        ID =LIT \n    else :\n        ID =LIT \n    ID .ID (LIT %ID )\n"
    },
    {
        "code": "\ndef test_usedInLambda(self):\n    self.flakes('import fu; lambda: fu')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49186
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (elif LIT )\n"
    },
    {
        "code": "\ndef test_shadowedByLambda(self):\n    self.flakes('import fu; lambda fu: fu', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 49187
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID finally .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_usedInSliceObj(self):\n    self.flakes('import fu; \"meow\"[::fu]')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 49188
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID await .ID (LIT )\n"
    },
    {
        "code": "\ndef test_unusedInNestedScope(self):\n    self.flakes('''\n        def bar():\n            import fu\n        fu\n        ''', m.UnusedImport, m.UndefinedName)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49189
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_methodsDontUseClassScope(self):\n    self.flakes('''\n        class bar:\n            import fu\n            def fun(self):\n                fu\n        ''', m.UnusedImport, m.UndefinedName)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 49190
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID ,ID is .ID )\n"
    },
    {
        "code": "\ndef test_nestedFunctionsNestScope(self):\n    self.flakes('''\n        def a():\n            def b():\n                fu\n            import fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 49191
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef lambda ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_nestedClassAndFunctionScope(self):\n    self.flakes('''\n        def a():\n            import fu\n            class b:\n                def c(self):\n                    print(fu)\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49192
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT )\nelse "
    },
    {
        "code": "\ndef test_importStar(self):\n    self.flakes('from fu import *', m.ImportStarUsed)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49193
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_packageImport(self):\n    \"\"\"\n        If a dotted name is imported and used, no warning is reported.\n        \"\"\"\n    self.flakes('''\n        import fu.bar\n        fu.bar\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49194
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT as \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_unusedPackageImport(self):\n    \"\"\"\n        If a dotted name is imported and not used, an unused import warning is\n        reported.\n        \"\"\"\n    self.flakes('import fu.bar', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49195
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID except ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_duplicateSubmoduleImport(self):\n    \"\"\"\n        If a submodule of a package is imported twice, an unused import warning\n        and a redefined while unused warning are reported.\n        \"\"\"\n    self.flakes('''\n        import fu.bar, fu.bar\n        fu.bar\n        ''', m.RedefinedWhileUnused)\n    self.flakes('''\n        import fu.bar\n        import fu.bar\n        fu.bar\n        ''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49196
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT assert ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_differentSubmoduleImport(self):\n    \"\"\"\n        If two different submodules of a package are imported, no duplicate\n        import warning is reported for the package.\n        \"\"\"\n    self.flakes('''\n        import fu.bar, fu.baz\n        fu.bar, fu.baz\n        ''')\n    self.flakes('''\n        import fu.bar\n        import fu.baz\n        fu.bar, fu.baz\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49197
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .(LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_assignRHSFirst(self):\n    self.flakes('import fu; fu = fu')\n    self.flakes('import fu; fu, bar = fu')\n    self.flakes('import fu; [fu, bar] = fu')\n    self.flakes('import fu; fu += fu')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49198
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )if \n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_tryingMultipleImports(self):\n    self.flakes('''\n        try:\n            import fu\n        except ImportError:\n            import bar as fu\n        fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49199
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "as \ndef ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_nonGlobalDoesNotRedefine(self):\n    self.flakes('''\n        import fu\n        def a():\n            fu = 3\n            return fu\n        fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49200
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_functionsRunLater(self):\n    self.flakes('''\n        def a():\n            fu\n        import fu\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49201
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID not :\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_functionNamesAreBoundNow(self):\n    self.flakes('''\n        import fu\n        def fu():\n            fu\n        fu\n        ''', m.RedefinedWhileUnused)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 49202
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT ,ID .as ID )\n"
    },
    {
        "code": "\ndef test_ignoreNonImportRedefinitions(self):\n    self.flakes('a = 1; a = 2')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49203
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\n*ID (ID ):\n    ID .ID (LIT )\n"
    },
    {
        "code": "\n@skip(\"todo\")\ndef test_importingForImportError(self):\n    self.flakes('''\n        try:\n            import fu\n        except ImportError:\n            pass\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49204
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ):\n    ID .ID (LIT )\n",
        "wrong_code": "\n@ID (LIT )\ndef ID (ID ):\n    ID .ID (LIT import \n"
    },
    {
        "code": "\n@skip(\"todo: requires evaluating attribute access\")\ndef test_importedInClass(self):\n    \"\"\"Imports in class scope can be used through self.\"\"\"\n    self.flakes('''\n        class c:\n            import i\n            def __init__(self):\n                self.i\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 49205
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\n@ID (LIT )\ndef ID (ID ):\n    LIT \n    /ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_futureImport(self):\n    \"\"\"__future__ is special.\"\"\"\n    self.flakes('from __future__ import division')\n    self.flakes('''\n        \"docstring is allowed before future import\"\n        from __future__ import division\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49206
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_futureImportFirst(self):\n    \"\"\"\n        __future__ imports must come before anything else.\n        \"\"\"\n    self.flakes('''\n        x = 5\n        from __future__ import division\n        ''', m.LateFutureImport)\n    self.flakes('''\n        from foo import bar\n        from __future__ import division\n        bar\n        ''', m.LateFutureImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49207
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID )[\n    LIT \n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "def test_ignoredInFunction(self):\n    \"\"\"\n        An C{__all__} definition does not suppress unused import warnings in a\n        function scope.\n        \"\"\"\n    self.flakes('''\n        def foo():\n            import bar\n            __all__ = [\"bar\"]\n        ''', m.UnusedImport, m.UnusedVariable)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 49208
        },
        "correct_code": "def ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    LIT \n    ID finally .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_ignoredInClass(self):\n    \"\"\"\n        An C{__all__} definition does not suppress unused import warnings in a\n        class scope.\n        \"\"\"\n    self.flakes('''\n        class foo:\n            import bar\n            __all__ = [\"bar\"]\n        ''', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 49209
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID async (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_warningSuppressed(self):\n    \"\"\"\n        If a name is imported and unused but is named in C{__all__}, no warning\n        is reported.\n        \"\"\"\n    self.flakes('''\n        import foo\n        __all__ = [\"foo\"]\n        ''')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49210
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID except (ID ):\n    LIT \n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef test_unrecognizable(self):\n    \"\"\"\n        If C{__all__} is defined in a way that can't be recognized statically,\n        it is ignored.\n        \"\"\"\n    self.flakes('''\n        import foo\n        __all__ = [\"f\" + \"oo\"]\n        ''', m.UnusedImport)\n    self.flakes('''\n        import foo\n        __all__ = [] + [\"foo\"]\n        ''', m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49211
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n    ID .ID for LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_unboundExported(self):\n\n    # Skip this in __init__.py though, since the rules there are a little\n    # different.\n    for filename in [\"foo/__init__.py\", \"__init__.py\"]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49212
        },
        "correct_code": "\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in [(,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef test_importStarExported(self):\n    \"\"\"\n        Do not report undefined if import * is used\n        \"\"\"\n    self.flakes('''\n        from foolib import *\n        __all__ = [\"foo\"]\n        ''', m.ImportStarUsed)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 49213
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,ID .ID async )\n"
    },
    {
        "code": "\ndef test_usedInGenExp(self):\n    \"\"\"\n        Using a global in a generator expression results in no warnings.\n        \"\"\"\n    self.flakes('import fu; (fu for _ in range(1))')\n    self.flakes('import fu; (1 for _ in range(1) if fu)')\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 49214
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    ID .if ID (LIT )\n"
    },
    {
        "code": "\ndef test_redefinedByGenExp(self):\n    \"\"\"\n        Re-using a global name as the loop variable for a generator\n        expression results in a redefinition warning.\n        \"\"\"\n    self.flakes('import fu; (1 for fu in range(1))',\n                m.RedefinedWhileUnused, m.UnusedImport)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 49215
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,\n    ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT ,\n    ID .ID ,ID .)ID )\n"
    },
    {
        "code": "\ndef test_usedAsDecorator(self):\n    \"\"\"\n        Using a global name in a decorator statement results in no warnings,\n        but using an undefined name in a decorator statement results in an\n        undefined name warning.\n        \"\"\"\n    self.flakes('''\n        from interior import decorate\n        @decorate\n        def f():\n            return \"hello\"\n        ''')\n\n    self.flakes('''\n        from interior import decorate\n        @decorate('value')\n        def f():\n            return \"hello\"\n        ''')\n\n    self.flakes('''\n        @decorate\n        def f():\n            return \"hello\"\n        ''', m.UndefinedName)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49216
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n\n    ID .ID (LIT )\n\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n\n    ID .ID (LIT )\n\n    ID .ID (LIT ,ID .ID )\n    ]"
    },
    {
        "code": "\n@skipIf(version_info < (2, 6), \"Python >= 2.6 only\")\ndef test_usedAsClassDecorator(self):\n\n    self.flakes('''\n        @decorate\n        class foo:\n            pass\n        ''', m.UndefinedName)\n",
        "metadata": {
            "file": "py150_files/data/patrys/PythonChecker/pyflakes/test/test_imports.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49217
        },
        "correct_code": "\n@ID (ID <(LIT ,LIT ),LIT )\ndef ID (ID ):\n\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\n@ID (ID <(LIT ,LIT ),LIT )\ndef ID (ID ):nonlocal \n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\n\ndef django_greater_than(version):\n    # Slice to avoid StrictVersion errors with versions like 1.8c1\n    DJANGO_VERSION = django.get_version()[0:3]\n    return StrictVersion(DJANGO_VERSION) >= StrictVersion(version)\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49218
        },
        "correct_code": "\n\ndef ID (ID ):\n#COMMENT\n\n    ID =ID .ID ()[LIT :LIT ]\n    return ID (ID )>=ID (ID )\n",
        "wrong_code": "\nelif def ID (ID ):\n#COMMENT\n\n    ID =ID .ID ()[LIT :LIT ]\n    return ID (ID )>=ID (ID )\n"
    },
    {
        "code": "\n\ndef get_app_name(app_module):\n    \"\"\"\n    app is the object (python module) returned by get_apps method\n    \"\"\"\n    return app_module.__name__.split('.')[0]\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49219
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (LIT )[LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    return ID del ID .ID (LIT )[LIT ]\n"
    },
    {
        "code": "\n\ndef get_models_of_an_app(app_label):\n    if django_greater_than('1.7'):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49220
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID async LIT ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\n# Models\ndef get_app_name_of_model(model_class):\n    return model_class.__module__.split('.')[0]\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 49221
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    return ID .ID .ID (LIT )[LIT ]\n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    return ID .ID .ID (LIT )[LIT ]\ndef "
    },
    {
        "code": "\n\ndef get_model_name(model_class):\n    \"Example: ModelName\"\n    return model_class.__name__\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49222
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\n\ndef !(ID ):\n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\n\ndef get_unique_model_name(model_class):\n    \"Example: app.packages.ModelName\"\n    return model_class.__module__ + '.' + model_class.__name__\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 49223
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID +LIT +ID .ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    None ID .ID +LIT +ID .ID \n"
    },
    {
        "code": "\n\ndef get_fields_from_model(model_class):\n    \"Returns all fields, including inherited fields but ignoring M2M fields.\"\n    return model_class._meta.fields\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49224
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n\ndef ID (*):\n    LIT \n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef get_local_fields(model):\n    \"Returns all local fields!?\"\n    return model._meta.local_fields\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49225
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\nfor def ID (ID ):\n    LIT \n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef get_many_to_many_fields_from_model(model_class):\n    \"Return only M2M fields, including inherited ones?\"\n    return model_class._meta.many_to_many\n    #_meta.local_many_to_many\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 49226
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n    #COMMENT\n\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    except return ID .ID .ID \n    #COMMENT\n\n"
    },
    {
        "code": "\n\ndef get_all_fields_of_model(model_class):\n    fields1 = get_fields_from_model(model_class)\n    fields2 = get_many_to_many_fields_from_model(model_class)\n    fields1.extend(fields2)\n    return fields1\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 49227
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID )\n    ID =ID (ID )\n    ID .ID (ID )\n    return ID \n",
        "wrong_code": "\n\ndef ID (import ID ):\n    ID =ID (ID )\n    ID =ID (ID )\n    ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef get_field_names_of_model(model_class):\n    \"Get field names, including inherited fields, except M2M fields.\"\n    fields = get_fields_from_model(model_class)\n    return [field.name for field in fields]\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49228
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID )\n    return [ID .ID for ID in ID ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID )\n    return [ID .ID for ID in ID ]\n:"
    },
    {
        "code": "\n\ndef get_field_by_name_or_raise(model_class, field_name):\n    if django_greater_than('1.8'):\n        pass\n    else:\n        return model_class._meta.get_field_by_name(field_name)[0]\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 78,
            "fix_type": "delete",
            "id": 49229
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID (LIT ):\n        pass \n    else :\n        return ID .ID .ID (ID )[LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID (LIT ):\n        pass \n    else :\n        return import ID .ID .ID (ID )[LIT ]\n"
    },
    {
        "code": "\n\ndef is_model_class(instance_or_model_class):\n    \"True if model_class is a Django Model.\"\n    return isinstance(instance_or_model_class, Model) or instance_or_model_class.__class__ == ModelBase\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 49230
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID (ID ,ID )or ID .ID ==ID \n",
        "wrong_code": "\n\ndef *ID (ID ):\n    LIT \n    return ID (ID ,ID )or ID .ID ==ID \n"
    },
    {
        "code": "\n\ndef is_model_abstract(model):\n    \"True if abstract is True in Meta class\"\n    return model._meta.abstract\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49231
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n\ndef ID (ID ):]    LIT \n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef is_model_managed(model):\n    \"True if managed is True in Meta class\"\n    return model._meta.managed\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49232
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID del ID \n"
    },
    {
        "code": "\n\ndef model_has_the_field(model_class, field_name):\n    \"\"\n    try:\n        get_field_by_name_or_raise(model_class, field_name)\n        return True\n    except FieldDoesNotExist:\n        return False\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 49233
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    try :\n        ID (ID ,ID )\n        return LIT \n    except ID :\n        return LIT \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):ID \n    LIT \n    try :\n        ID (ID ,ID )\n        return LIT \n    except ID :\n        return LIT \n"
    },
    {
        "code": "\n\n# Fields\ndef get_unique_field_name(field):\n    if hasattr(field, 'model'):\n        return get_unique_model_name(field.model) + '.' + field.name\n    return field.name\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 74,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49234
        },
        "correct_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        return ID (ID .ID )+LIT +ID .ID \n    return ID .ID \n",
        "wrong_code": "\n\n#COMMENT\n\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        return ID (ID .ID \n        +LIT +ID .ID \n    return ID .ID \n"
    },
    {
        "code": "\n\ndef get_related_model(field):\n    return field.rel.to\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49235
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "class \n\ndef ID (ID ):\n    return ID .ID .ID \n"
    },
    {
        "code": "\n\ndef field_is_a_parent_link(field):\n    # FIXME\n    #return hasattr(field, 'rel') and hasattr(field.rel, 'parent_link') and field.rel.parent_link\n    return hasattr(field, 'parent_link') and field.parent_link\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49236
        },
        "correct_code": "\n\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID (ID ,LIT )and ID .ID \n",
        "wrong_code": "\n\ndef (ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID (ID ,LIT )and ID .ID \n"
    },
    {
        "code": "\n\ndef field_has_choices(field):\n    \"\"\"field.choices may be a tee, which we can't count without converting\n    it to a list, or it may be a large database queryset, in which case we\n    don't want to convert it to a list. We only care if the list is empty\n    or not, so just try to access the first element and return True if that\n    doesn't throw an exception.\"\"\"\n    for i in field.choices:\n        return True\n    return False\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 49237
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    for ID in ID .ID :\n        return LIT \n    return LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    for ID is ID .ID :\n        return LIT \n    return LIT \n"
    },
    {
        "code": "\n\ndef field_has_default_value(field):\n    return field.default != NOT_PROVIDED\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49238
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID !=ID \n",
        "wrong_code": "\n\ndef ID (ID from :\n    return ID .ID !=ID \n"
    },
    {
        "code": "\n\ndef field_is_unique(field):\n    return field.unique\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 49239
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID .ID \n    *"
    },
    {
        "code": "\n\ndef is_key_field(field):\n    return isinstance(field, AutoField)\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 49240
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\nawait     return ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef is_relationship_field(field):\n    return isinstance(field, (ForeignKey, OneToOneField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 49241
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID (ID ,(ID [,ID ))\n"
    },
    {
        "code": "\n\ndef is_file_field(field):\n    return isinstance(field, FileField)\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 49242
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID (yield ID ,ID )\n"
    },
    {
        "code": "\n\ndef print_field_values(model_instance_or_list_of_model_instances_or_queryset):\n    if isinstance(model_instance_or_list_of_model_instances_or_queryset, (list, tuple, QuerySet)):\n        for model_instance in model_instance_or_list_of_model_instances_or_queryset:\n            pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 49243
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,(ID ,ID ,ID )):\n        for ID in ID :\n            pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID (ID ,(ID ,ID ,==ID )):\n        for ID in ID :\n            pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef enable_auto_now(field):\n    if hasattr(field, 'auto_now'):\n        field.auto_now = True\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 49244
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n    elif ID (ID ,LIT ):\n        ID .ID =LIT \n"
    },
    {
        "code": "\ndef disable_auto_now(field):\n    if hasattr(field, 'auto_now'):\n        field.auto_now = False\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49245
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n]"
    },
    {
        "code": "\ndef enable_auto_now_add(field):\n    if hasattr(field, 'auto_now_add'):\n        field.auto_now_add = True\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49246
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID )\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n"
    },
    {
        "code": "\ndef disable_auto_now_add(field):\n    if hasattr(field, 'auto_now_add'):\n        field.auto_now_add = False\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49247
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (,LIT ):\n        ID .ID =LIT \n"
    },
    {
        "code": "\n\n\ndef is_boolean(field):\n    return isinstance(field, (BooleanField, NullBooleanField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 3,
            "fix_type": "delete",
            "id": 49248
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ))\n",
        "wrong_code": "\n\n\nimport def ID (ID ):\n    return ID (ID ,(ID ,ID ))\n"
    },
    {
        "code": "\ndef is_string(field):\n    return isinstance(field, (CharField, EmailField, IPAddressField, SlugField, URLField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 49249
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ,ID ,ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ,ID ,ID as ,ID ))\n"
    },
    {
        "code": "\ndef is_number(field):\n    return isinstance(field, (IntegerField, SmallIntegerField, PositiveIntegerField,\n        PositiveSmallIntegerField, BigIntegerField, CommaSeparatedIntegerField, DecimalField, FloatField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 49250
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ,ID ,\n    ID ,ID ,ID ,ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ,as ID ,\n    ID ,ID ,ID ,ID ,ID ))\n"
    },
    {
        "code": "\ndef is_datetime(field):\n    return isinstance(field, (DateTimeField, DateField, TimeField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49251
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,,ID ))\n"
    },
    {
        "code": "\ndef is_file(field):\n    return isinstance(field, (FileField, FilePathField))\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 49252
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID ,(ID ,ID ))\n    for "
    },
    {
        "code": "\ndef is_binary(field):\n    if django_greater_than('1.6'):\n        return isinstance(field, (BinaryField))\n    else:\n        return False\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/django_dynamic_fixture/django_helper.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49253
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (LIT ):\n        return ID (ID ,(ID ))\n    else :\n        return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID LIT ):\n        return ID (ID ,(ID ))\n    else :\n        return LIT \n"
    },
    {
        "code": "\n\ndef runtests(*test_args, **kwargs):\n    # Slice to avoid StrictVersion errors with versions like 1.8c1\n    if StrictVersion(django.get_version()[0:3]) >= StrictVersion('1.7'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/paulocheque/django-dynamic-fixture/runtests.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 49254
        },
        "correct_code": "\n\ndef ID (*ID ,**ID ):\n#COMMENT\n\n    if ID (ID .ID ()[LIT :LIT ])>=ID (LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID (*ID ,**ID ):\n#COMMENT\n\n    if ID (ID .ID ()nonlocal LIT :LIT ])>=ID (LIT ):\n        pass \n"
    },
    {
        "code": "@task\n@needs('cog', 'paver.doctools.html')\ndef html():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49255
        },
        "correct_code": "@ID \n@ID (LIT ,LIT )\ndef ID ():\n    pass \n",
        "wrong_code": "@ID \n@ID (LIT LIT )\ndef ID ():\n    pass \n"
    },
    {
        "code": "\n@task\n@needs('html', \"minilib\", \"generate_setup\", old_sdist)\ndef sdist():\n    \"\"\"Builds the documentation and the tarball.\"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 49256
        },
        "correct_code": "\n@ID \n@ID (LIT ,LIT ,LIT ,ID )\ndef ID ():\n    LIT \n    pass \n",
        "wrong_code": "\n@ID \n@ID (LIT ,,LIT ,ID )\ndef ID ():\n    LIT \n    pass \n"
    },
    {
        "code": "@task\ndef bootstrap():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49257
        },
        "correct_code": "@ID \ndef ID ():\n    pass \n",
        "wrong_code": "@ID \ndef ID ()import :\n    pass \n"
    },
    {
        "code": "@task\ndef clean():\n    path(\"build\").rmtree_p()\n    path(\"bin\").rmtree_p()\n    path(\"lib\").rmtree_p()\n    path(\".Python\").remove_p()\n    \n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49258
        },
        "correct_code": "@ID \ndef ID ():\n    ID (LIT ).ID ()\n    ID (LIT ).ID ()\n    ID (LIT ).ID ()\n    ID (LIT ).ID ()\n\n",
        "wrong_code": "@ID \ndef ID ():\n    .(LIT ).ID ()\n    ID (LIT ).ID ()\n    ID (LIT ).ID ()\n    ID (LIT ).ID ()\n\n"
    },
    {
        "code": "@task\n@needs(\"uncog\")\n@consume_args\ndef commit(args):\n    \"\"\"Removes the generated code from the docs and then commits to bzr.\"\"\"\n    sh(\"git commit \" + ' '.join(args))\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 70,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49259
        },
        "correct_code": "@ID \n@ID (LIT )\n@ID \ndef ID (ID ):\n    LIT \n    ID (LIT +LIT .ID (ID ))\n",
        "wrong_code": "@ID \n@ID (LIT )\n@ID \ndef ID (ID ):\n    LIT \n    ID (LIT +LIT .ID (ID )\n"
    },
    {
        "code": "\n\n@task\ndef build_release():\n\n    # clone current branch to temporary directory\n    try:\n        pass\n\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 49260
        },
        "correct_code": "\n\n@ID \ndef ID ():\n\n#COMMENT\n\n    try :\n        pass \n\n    finally :\n        pass \n",
        "wrong_code": "\n\n@ID \ndef ID ():\n\n#COMMENT\n\nin     try :\n        pass \n\n    finally :\n        pass \n"
    },
    {
        "code": "\n@task\ndef tag_release():\n    import paver.version\n    sh(\"git tag -s 'Paver-%(version)s' -m 'Release version %(version)s'\" % {\n        'version': paver.version.VERSION\n    })\n    sh(\"git push --tags\")\n    sh(\"paver register\")\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 49261
        },
        "correct_code": "\n@ID \ndef ID ():\n    import ID .ID \n    ID (LIT %{\n    LIT :ID .ID .ID \n    })\n    ID (LIT )\n    ID (LIT )\n",
        "wrong_code": "\n@ID \ndef ID ():\n    import ID .ID if \n    ID (LIT %{\n    LIT :ID .ID .ID \n    })\n    ID (LIT )\n    ID (LIT )\n"
    },
    {
        "code": "\n@task\n@needs([\"tag_release\", \"build_release\"])\ndef release():\n    \"\"\" Release new version of Paver \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/paver/paver/pavement.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 49262
        },
        "correct_code": "\n@ID \n@ID ([LIT ,LIT ])\ndef ID ():\n    LIT \n",
        "wrong_code": "\n@ID \n@ID ([LIT ,LIT )\ndef ID ():\n    LIT \n"
    },
    {
        "code": "\n\ndef home_handler():\n    return 'Welcome to SuPPort!'\n",
        "metadata": {
            "file": "py150_files/data/paypal/support/examples/basic_wsgi.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49263
        },
        "correct_code": "\n\ndef ID ():\n    return LIT \n",
        "wrong_code": "\n\ntry ID ():\n    return LIT \n"
    },
    {
        "code": "\n\ndef main():\n\n    if platform.system() == 'Windows':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/paypal/support/examples/basic_wsgi.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49264
        },
        "correct_code": "\n\ndef ID ():\n\n    if ID .ID ()==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    if ID .ID ()==LIT :\n        pass \n    else :nonlocal pass \n"
    },
    {
        "code": "\n@Generator\ndef discount(entry):\n    amount = entry.amount * Decimal(\"0.1\")\n    yield entry.account - amount\n    yield self.cash_account + amount\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49265
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    ID =ID .ID *ID (LIT )\n    yield ID .ID -ID \n    yield ID .ID +ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    ID =ID .ID *ID (LIT )\n    yield ID .ID -ID \n    yield ID class ID +ID \n"
    },
    {
        "code": "def setUp(self):\n\n    @Generator\n    def discount(entry):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49266
        },
        "correct_code": "def ID (ID ):\n\n    @ID \n    def ID (ID ):\n        pass \n",
        "wrong_code": "!=def ID (ID ):\n\n    @ID \n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef testRuleOnLedger(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49267
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID lambda :\n    pass \n"
    },
    {
        "code": "\ndef testAccountTagRule(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 49268
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "def testNullGenerator(self):\n    g = Generator.null\n    transaction = object()\n    entry = object()\n\n    self.assertEqual([], list(g(transaction, entry)))\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 85,
            "fix_type": "delete",
            "id": 49269
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID \n    ID =ID ()\n    ID =ID ()\n\n    ID .ID ([],ID (ID (ID ,ID )))\n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID \n    ID =ID ()\n    ID =ID ()\n\n    ID .ID ([],ID (ID (ID :,ID )))\n"
    },
    {
        "code": "@Generator\ndef g1(transaction, entry):\n    yield entry\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 49270
        },
        "correct_code": "@ID \ndef ID (ID ,ID ):\n    yield ID \n",
        "wrong_code": "@ID \ndef ID (ID ,ID ):\n    yield *ID \n"
    },
    {
        "code": "\n@Generator\ndef g2(transaction, entry):\n    yield entry\n    yield entry\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 49271
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    yield ID \n    yield ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):global \n    yield ID \n    yield ID \n"
    },
    {
        "code": "\ndef testGeneratorSum(self):\n    @Generator\n    def g1(transaction, entry):\n        pass\n\n    @Generator\n    def g2(transaction, entry):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pcapriotti/pledger/tests/test-rules.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49272
        },
        "correct_code": "\ndef ID (ID ):\n    @ID \n    def ID (ID ,ID ):\n        pass \n\n    @ID \n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef (ID ):\n    @ID \n    def ID (ID ,ID ):\n        pass \n\n    @ID \n    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef delete_metric(conn, metric):\n    if r.status_code != 204:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pcn/pyKairosDB/pyKairosDB/deleter.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49273
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID !=LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    if ID .ID !=LIT :\n        pass \n"
    },
    {
        "code": "\ndef delete_metrics(conn, metric_names_list):\n    \"\"\"\n    :type conn: pyKairosDB.connect object\n    :param conn: the interface to the requests library\n\n    :type metric_names_list: list of str\n    :param metric_names_list: A list of metric names to be deleted\n    \"\"\"\n    for metric in metric_names_list:\n        delete_metric(conn, metric)\n",
        "metadata": {
            "file": "py150_files/data/pcn/pyKairosDB/pyKairosDB/deleter.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49274
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    for ID in ID :\n        ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):except     LIT \n    for ID in ID :\n        ID (ID ,ID )\n"
    },
    {
        "code": "\ndef delete_datapoints(conn, metric_names_list, start_time,\n                      end_time=None, tags=None):\n    if tags:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pcn/pyKairosDB/pyKairosDB/deleter.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 49275
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,\nID =ID ,ID =ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,\nID =ID ,ID =[ID ):\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef get_url(self):\n    try:\n        return self.new_url_format.format(**self.url_data)\n    except KeyError:\n        return self.old_url_format.format(**self.url_data)\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49276
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        return ID .ID .ID (**ID .ID )\n    except ID :\n        return ID .ID .ID (**ID .ID )\n",
        "wrong_code": "\ndef (ID ):\n    try :\n        return ID .ID .ID (**ID .ID )\n    except ID :\n        return ID .ID .ID (**ID .ID )\n"
    },
    {
        "code": "\ndef get_video_data(self, response):\n    parsed = feedparser.parse(response.text.encode('utf-8'))\n    return Suite.parse_feed_entry(parsed.entries[0])\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49277
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (ID .ID .ID (LIT ))\n    return ID .ID (ID .ID [LIT ])\n",
        "wrong_code": "\ndef ID (!,ID ):\n    ID =ID .ID (ID .ID .ID (LIT ))\n    return ID .ID (ID .ID [LIT ])\n"
    },
    {
        "code": "\ndef get_url_data(self, url):\n    if parsed_url.scheme in ('http', 'https'):\n        if parsed_url.netloc == 'blip.tv':\n            if match:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49278
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID in (LIT ,LIT ):\n        if ID .ID ==LIT :\n            if ID :\n                pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID in (LIT ,LIT ):\n        if ID assert ID ==LIT :\n            if ID :\n                pass \n"
    },
    {
        "code": "\ndef get_page_url_data(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49279
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )\n    pass \n"
    },
    {
        "code": "\ndef get_video_data(self, item):\n    return Suite.parse_feed_entry(item)\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49280
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )\n",
        "wrong_code": "/\ndef ID (ID ,ID ):\n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef get_video_data(self, item):\n    return Suite.parse_feed_entry(item)\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49281
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (,ID ):\n    return ID .ID (ID )\n"
    },
    {
        "code": "\n@staticmethod\ndef parse_feed_entry(entry):\n    if 'blip_puredescription' not in entry:\n        pass\n    if 'license' in entry:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pculture/vidscraper/vidscraper/suites/blip.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49282
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if LIT not in ID :\n        pass \n    if LIT in ID :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    if LIT not in ID :\n        pass if LIT in ID :\n        pass \n"
    },
    {
        "code": "\n\ndef create_parser(compiler):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49283
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID None ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef _logging(argv):\n    if ('-v' in argv) or ('--verbose' in argv):\n        pass\n    elif '--debug' in argv:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 49284
        },
        "correct_code": "\n\ndef ID (ID ):\n    if (LIT in ID )or (LIT in ID ):\n        pass \n    elif LIT in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if (LIT in ID )or (LIT +in ID ):\n        pass \n    elif LIT in ID :\n        pass \n"
    },
    {
        "code": "\n\ndef version(args, compiler):\n    print('Pdef Compiler %s' % compiler.version())\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49285
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID (LIT %ID .ID ())\n",
        "wrong_code": "\n\ndef ID (ID ,ID )elif \n    ID (LIT %ID .ID ())\n"
    },
    {
        "code": "\n\ndef version_command(commands, compiler):\n    func = lambda args: version(args, compiler)\n    \n    p = commands.add_parser('version', help='display the compiler version')\n    p.set_defaults(command_func=func)\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 49286
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =lambda ID :ID (ID ,ID )\n\n    ID =ID .ID (LIT ,ID =LIT )\n    ID .ID (ID =ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID lambda ID :ID (ID ,ID )\n\n    ID =ID .ID (LIT ,ID =LIT )\n    ID .ID (ID =ID )\n"
    },
    {
        "code": "\n\ndef check(args, compiler):\n    src = args.src\n    compiler.compile(src)\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 49287
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID .ID (ID )\nif "
    },
    {
        "code": "\n\ndef check_command(commands, compiler):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49288
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    pass as "
    },
    {
        "code": "\n\ndef gen_java(args, compiler):\n    src = args.src\n    dst = args.dst\n    package = args.package\n    compiler.generate_java(src, dst, jpackage_name=package)\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 49289
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID =ID .ID \n    ID =ID .ID \n    ID .ID (ID ,ID ,ID =ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID =ID .ID \n    ID =ID .ID lambda \n    ID .ID (ID ,ID ,ID =ID )\n"
    },
    {
        "code": "\n\ndef gen_java_command(commands, compiler):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49290
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef get_objc(args, compiler):\n    src = args.src\n    dst = args.dst\n    prefix = args.prefix\n    compiler.generate_objc(src, dst, prefix=prefix)\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 49291
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    ID =ID .ID \n    ID =ID .ID \n    ID =ID .ID \n    ID .ID (ID ,ID ,ID =ID )\n",
        "wrong_code": "\n\ndef ID (ID while ,ID ):\n    ID =ID .ID \n    ID =ID .ID \n    ID =ID .ID \n    ID .ID (ID ,ID ,ID =ID )\n"
    },
    {
        "code": "\n\ndef gen_objc_command(commands, compiler):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pdef/pdef/compiler/pdefc/cli.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49292
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\ndel ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pebble/cloudpebble/ide/migrations/0002_auto__add_usersettings.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49293
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef backwards(self, orm):\n    # Deleting model 'UserSettings'\n    db.delete_table(u'ide_usersettings')\n",
        "metadata": {
            "file": "py150_files/data/pebble/cloudpebble/ide/migrations/0002_auto__add_usersettings.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49294
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID assert LIT )\n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pebble/cloudpebble/ide/migrations/0029_auto__add_field_project_app_platforms.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49295
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID continue :\n    pass \n"
    },
    {
        "code": "\n\ndef backwards(self, orm):\n    # Deleting field 'Project.app_platforms'\n    db.delete_column(u'ide_project', 'app_platforms')\n",
        "metadata": {
            "file": "py150_files/data/pebble/cloudpebble/ide/migrations/0029_auto__add_field_project_app_platforms.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49296
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):)#COMMENT\n\n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef __init__(self, url):\n    self.url = url\n    \"\"\":type: str\"\"\"\n    self.ws = None\n    \"\"\":type: websocket.WebSocket\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/communication/transports/websocket/__init__.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49297
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    LIT \n    ID .ID =ID \n    LIT \n",
        "wrong_code": "\ndef ID while (ID ,ID ):\n    ID .ID =ID \n    LIT \n    ID .ID =ID \n    LIT \n"
    },
    {
        "code": "\n@property\ndef connected(self):\n    return self.ws is not None and self.ws.connected\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/communication/transports/websocket/__init__.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49298
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID is not ID and ID .ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return except .ID is not ID and ID .ID .ID \n"
    },
    {
        "code": "\ndef send_packet(self, message, target=MessageTargetWatch()):\n\n    handlers[type(target)](message)\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/communication/transports/websocket/__init__.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 49299
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ()):\n\n    ID [ID (ID )](ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ()):\n\n    ID [ID (ID break )](ID )\n"
    },
    {
        "code": "\ndef _send_to_watch(self, message):\n    self.send_packet(WebSocketRelayToWatch(payload=message), target=MessageTargetPhone())\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/communication/transports/websocket/__init__.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 49300
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID (ID =ID ),ID =ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID )and \n    ID .ID (ID (ID =ID ),ID =ID ())\n"
    },
    {
        "code": "\ndef _send_to_phone(self, message):\n    message = struct.pack('B', endpoints[type(message)]) + message.serialise()\n    self.ws.send_binary(message)\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/communication/transports/websocket/__init__.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49301
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (LIT ,ID [ID (ID )])+ID .ID ()\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID (LIT ,][ID (ID )])+ID .ID ()\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "def __init__(self, pebble):\n    self._pebble = pebble\n    self._txid = 0\n    super(GetBytesService, self).__init__()\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/services/getbytes.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49302
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID (ID ,ID ).ID ()\n",
        "wrong_code": "def ID )ID ,ID ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID (ID ,ID ).ID ()\n"
    },
    {
        "code": "\ndef get_coredump(self, require_fresh=False):\n    \"\"\"\n        Retrieves a coredump, if one exists. Raises :exc:`.GetBytesError` on failure.\n\n        :param require_fresh: If true, coredumps that have already been read are considered to not exist.\n        :type require_fresh: bool\n        :return: The retrieved coredump\n        :rtype: bytes\n        \"\"\"\n    return self._get(GetBytesUnreadCoredumpRequest() if require_fresh else GetBytesCoredumpRequest())\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/services/getbytes.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49303
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID .ID (ID ()if ID else ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID .ID (ID ()if ID else ==())\n"
    },
    {
        "code": "\ndef get_file(self, filename):\n    \"\"\"\n        Retrieves a PFS file from the watch. This only works on watches running non-release firmware.\n        Raises :exc:`.GetBytesError` on failure.\n\n        :return: The retrieved file\n        :rtype: bytes\n        \"\"\"\n    return self._get(GetBytesFileRequest(filename=filename))\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/services/getbytes.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49304
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID (ID =ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID (ID =ID *)\n"
    },
    {
        "code": "\ndef get_flash_region(self, offset, length):\n    \"\"\"\n        Retrieves the contents of a region of flash from the watch. This only works on watches running\n        non-release firmware.\n        Raises :exc:`.GetBytesError` on failure.\n\n        :return: The retrieved data\n        :rtype: bytes\n        \"\"\"\n    return self._get(GetBytesFlashRequest(offset=offset, length=length))\n",
        "metadata": {
            "file": "py150_files/data/pebble/libpebble2/libpebble2/services/getbytes.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49305
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID .ID (ID (ID =ID ,ID =ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT return ID .ID (ID (ID =ID ,ID =ID ))\n"
    },
    {
        "code": "\ndef install(self):\n    if self not in sys.meta_path:\n        sys.meta_path.append(self)\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/extensions.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 49306
        },
        "correct_code": "\ndef ID (ID ):\n    if ID not in ID .ID :\n        ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID not as in ID .ID :\n        ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef __eq__(self, b):\n    return self.__class__.__module__ == b.__class__.__module__ and \\\n            self.__class__.__name__ == b.__class__.__name__\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/extensions.py",
            "fix_location": 78,
            "fix_type": "delete",
            "id": 49307
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID ==ID .ID .ID and ID .ID .ID ==ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID ==ID .ID .ID and ID .ID .ID ==ID .ID continue .ID \n"
    },
    {
        "code": "\ndef __ne__(self, b):\n    return not self.__eq__(b)\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/extensions.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49308
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return not ID .ID (ID )\n",
        "wrong_code": "\nimport ID (ID ,ID ):\n    return not ID .ID (ID )\n"
    },
    {
        "code": "\ndef find_module(self, fullname, path=None):\n    if fullname.startswith(self.prefix):\n        return self\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/extensions.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49309
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID .ID (ID .ID ):\n        return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID .ID del ID .ID ):\n        return ID \n"
    },
    {
        "code": "\ndef app(environ, start_response):\n    response_headers = [('Content-type', 'text/plain')]\n    start_response('200 OK', response_headers)\n    return ['Hello world!\\n']\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49310
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =[(LIT ,LIT )]\n    ID (LIT ,ID )\n    return [LIT ]\n",
        "wrong_code": "\ndef (ID ,ID ):\n    ID =[(LIT ,LIT )]\n    ID (LIT ,ID )\n    return [LIT ]\n"
    },
    {
        "code": "\ndef setUp(self):\n\n    def app(environ, start_response):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49311
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n==    def ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "def start_response(status, response_headers, exc_info=None):\n    self._status = status\n    self._response_headers = response_headers\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49312
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,not ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _request(self, path):\n    def start_response(status, response_headers, exc_info=None):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49313
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    def ID (ID ,ID ,ID =ID ):\n        pass \n",
        "wrong_code": "\ndef ID try (ID ,ID ):\n    def ID (ID ,ID ,ID =ID ):\n        pass \n"
    },
    {
        "code": "\ndef _get_response_header(self, header):\n    for k, v in self._response_headers:\n        if k.upper() == header.upper():\n            return v\n    return None\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 49314
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID :\n        if ID .ID ()==ID .ID ():\n            return ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID pass in ID .ID :\n        if ID .ID ()==ID .ID ():\n            return ID \n    return ID \n"
    },
    {
        "code": "\ndef test_file_can_be_found(self):\n    result = self._request('/static_fixtures/text.txt')\n    assert isinstance(result, FileWrapper)\n    result.close()\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49315
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID (ID ,ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID except (ID ):\n    ID =ID .ID (LIT )\n    assert ID (ID ,ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef test_no_file_found_causes_passthrough(self):\n    result = self._request('/static_fixtures/nosuchfile.txt')\n    assert not isinstance(result, FileWrapper)\n    assert result == ['Hello world!\\n']\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49316
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert not ID (ID ,ID )\n    assert ID ==[LIT ]\n",
        "wrong_code": ",\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert not ID (ID ,ID )\n    assert ID ==[LIT ]\n"
    },
    {
        "code": "\ndef test_mime_type_works_for_png_files(self):\n    result = self._request('/static_fixtures/self.png')\n    assert self._get_response_header('Content-Type') == 'image/png'\n    result.close()\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49317
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID .ID (LIT )==LIT \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ID LIT )\n    assert ID .ID (LIT )==LIT \n    ID .ID ()\n"
    },
    {
        "code": "\ndef test_file_can_be_closed(self):\n    result = self._request('/static_fixtures/text.txt')\n    assert result.close() is None\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49318
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID .ID ()is ID \n",
        "wrong_code": "\nID (ID ):\n    ID =ID .ID (LIT )\n    assert ID .ID ()is ID \n"
    },
    {
        "code": "\ndef test_file_can_be_iterated_over(self):\n    result = self._request('/static_fixtures/text.txt')\n    assert len([x for x in result])\n    result.close()\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49319
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ([ID for ID in ID ])\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ([for ID in ID ])\n    ID .ID ()\n"
    },
    {
        "code": "\ndef test_date_dumping_on_unix_timestamps(self):\n    result = _dump_date(1331755274.59, ' ')\n    assert result == 'Wed, 14 Mar 2012 20:01:14 GMT'\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49320
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT )\n    assert ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ):    ID =ID (LIT ,LIT )\n    assert ID ==LIT \n"
    },
    {
        "code": "\ndef test_separator_sanitization_still_finds_file(self):\n    os.altsep = ':'\n    result = self._request(':static_fixtures:text.txt')\n    assert isinstance(result, FileWrapper)\n    result.close()\n",
        "metadata": {
            "file": "py150_files/data/pecan/pecan/pecan/tests/middleware/test_static.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49321
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n    ID =ID .ID (LIT )\n    assert ID (ID ,ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =class \n    ID =ID .ID (LIT )\n    assert ID (ID ,ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef __deepcopy__(self, memo):\n    from copy import deepcopy\n    return self.__class__([(key, deepcopy(value, memo))\n                           for key, value in self.iteritems()])\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49322
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    from ID import ID \n    return ID .ID ([(ID ,ID (ID ,ID ))\n    for ID ,ID in ID .ID ()])\n",
        "wrong_code": "\ndef ID (ID yield ,ID ):\n    from ID import ID \n    return ID .ID ([(ID ,ID (ID ,ID ))\n    for ID ,ID in ID .ID ()])\n"
    },
    {
        "code": "\ndef __delitem__(self, key):\n    super(SortedDict, self).__delitem__(key)\n    self.keyOrder.remove(key)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49323
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (ID ,ID ).ID (ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID :\n    ID (ID ,ID ).ID (ID )\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef __iter__(self):\n    for k in self.keyOrder:\n        yield k\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49324
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID ["
    },
    {
        "code": "\ndef pop(self, k, *args):\n    try:\n        pass\n    except ValueError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 49325
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    try :\n        pass \n    except ID :\n        del \n"
    },
    {
        "code": "\ndef popitem(self):\n    result = super(SortedDict, self).popitem()\n    self.keyOrder.remove(result[0])\n    return result\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 49,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49326
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID .ID .ID (ID [LIT ])\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID ID .ID (ID [LIT ])\n    return ID \n"
    },
    {
        "code": "\ndef items(self):\n    return zip(self.keyOrder, self.values())\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49327
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ID .ID ,ID .ID ())\n"
    },
    {
        "code": "\ndef iteritems(self):\n    for key in self.keyOrder:\n        yield key, super(SortedDict, self).__getitem__(key)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49328
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID ,ID (ID ,ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID ,ID (ID ,ID ).finally (ID )\n"
    },
    {
        "code": "\ndef keys(self):\n    return self.keyOrder[:]\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 49329
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID [:]\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID [:\n"
    },
    {
        "code": "\ndef iterkeys(self):\n    return iter(self.keyOrder)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 49330
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID [.ID )\n"
    },
    {
        "code": "\ndef values(self):\n    return [super(SortedDict, self).__getitem__(k) for k in self.keyOrder]\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49331
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID (ID ,ID ).ID (ID )for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (ID )\n    return [ID (ID ,ID ).ID (ID )for ID in ID .ID ]\n"
    },
    {
        "code": "\ndef itervalues(self):\n    for key in self.keyOrder:\n        yield super(SortedDict, self).__getitem__(key)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 49332
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID (ID ,ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID (from ID ,ID ).ID (ID )\n"
    },
    {
        "code": "\ndef update(self, dict_):\n    for k, v in dict_.items():\n        self.__setitem__(k, v)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49333
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID ():\n        ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (elif ,ID ):\n    for ID ,ID in ID .ID ():\n        ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef setdefault(self, key, default):\n    if key not in self.keyOrder:\n        pass\n    return super(SortedDict, self).setdefault(key, default)\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 99,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49334
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID not in ID .ID :\n        pass \n    return ID (ID ,ID ).ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID not in ID .ID :\n        pass \n    return ID (ID ,ID ).ID (ID ,ID )-"
    },
    {
        "code": "\ndef value_for_index(self, index):\n    \"\"\"Returns the value of the item at the given zero-based index.\"\"\"\n    return self[self.keyOrder[index]]\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49335
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID [ID .ID [ID ]]\n",
        "wrong_code": "\nID (ID ,ID ):\n    LIT \n    return ID [ID .ID [ID ]]\n"
    },
    {
        "code": "\ndef insert(self, index, key, value):\n    if key in self.keyOrder:\n        if n < index:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49336
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID in ID .ID :\n        if ID <ID :\n            pass \n",
        "wrong_code": "\ndef ID (,ID ,ID ,ID ):\n    if ID in ID .ID :\n        if ID <ID :\n            pass \n"
    },
    {
        "code": "\ndef copy(self):\n    \"\"\"Returns a copy of this object.\"\"\"\n    # This way of initializing the copy means it works for subclasses, too.\n    obj = self.__class__(self)\n    obj.keyOrder = self.keyOrder[:]\n    return obj\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 49337
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID (ID )\n    ID .ID =ID .ID [:]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID .ID (ID )\n    ID .ID async ID .ID [:]\n    return ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    \"\"\"\n        Replaces the normal dict.__repr__ with a version that returns the keys\n        in their sorted order.\n        \"\"\"\n    return '{%s}' % ', '.join(['%r: %r' % (k, v) for k, v in self.items()])\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49338
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT %LIT .ID ([LIT %(ID ,ID )for ID ,ID in ID .ID ()])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT return return LIT %LIT .ID ([LIT %(ID ,ID )for ID ,ID in ID .ID ()])\n"
    },
    {
        "code": "\ndef clear(self):\n    super(SortedDict, self).clear()\n    self.keyOrder = []\n",
        "metadata": {
            "file": "py150_files/data/pelme/django-compress/compress/filters/csstidy_python/tools.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49339
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ):with     ID (ID ,ID ).ID ()\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef get_user_info(self):\n    user = json.loads(self.query(self.url))\n    return user\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/dropbox/views.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 49340
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID .ID (ID .ID ))\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (ID .ID (ID .ID ))\n    return ID \n    async "
    },
    {
        "code": "\ndef complete_login(self, request, app, token, response):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/dropbox/views.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49341
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\nand ID (ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_mocked_response(self):\n    #\n    return [\n        MockedResponse(200, r\"\"\"\n {\"stat\": \"ok\", \"user\": {\"username\": {\"_content\": \"pennersr\"}, \"id\": \"12345678@N00\"}}\n\"\"\"),  # noqa\n        MockedResponse(200, r\"\"\"\n{\"person\": {\"username\": {\"_content\": \"pennersr\"}, \"photosurl\": {\"_content\": \"http://www.flickr.com/photos/12345678@N00/\"}, \"nsid\": \"12345678@N00\", \"path_alias\": null, \"photos\": {\"count\": {\"_content\": 0}, \"firstdatetaken\": {\"_content\": null}, \"views\": {\"_content\": \"28\"}, \"firstdate\": {\"_content\": null}}, \"iconserver\": \"0\", \"description\": {\"_content\": \"\"}, \"mobileurl\": {\"_content\": \"http://m.flickr.com/photostream.gne?id=6294613\"}, \"profileurl\": {\"_content\": \"http://www.flickr.com/people/12345678@N00/\"}, \"mbox_sha1sum\": {\"_content\": \"5e5b359c123e54f95236209c8808d607a5cdd21e\"}, \"ispro\": 0, \"location\": {\"_content\": \"\"}, \"id\": \"12345678@N00\", \"realname\": {\"_content\": \"raymond penners\"}, \"iconfarm\": 0}, \"stat\": \"ok\"}\n\"\"\")]  # noqa\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/flickr/tests.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 49342
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    return [\n    ID (LIT ,LIT ),#COMMENT\n\n    ID (LIT ,LIT )]#COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    return [\n    ID (LIT ,LIT ),#COMMENT\n\n    return ID (LIT ,LIT )]#COMMENT\n\n"
    },
    {
        "code": "\ndef test_login(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/flickr/tests.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 49343
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass and \n"
    },
    {
        "code": "\ndef get_mocked_response(self):\n    return MockedResponse(200, \"\"\"\n        {\n          \"meta\": {\n            \"code\": 200\n          },\n          \"data\": {\n            \"username\": \"georgewhewell\",\n            \"bio\": \"\",\n            \"website\": \"\",\n            \"profile_picture\": \"http://images.ak.instagram.com/profiles/profile_11428116_75sq_1339547159.jpg\",\n            \"full_name\": \"georgewhewell\",\n            \"counts\": {\n              \"media\": 74,\n              \"followed_by\": 91,\n              \"follows\": 104\n            },\n            \"id\": \"11428116\"\n          }\n        }\"\"\")  # noqa\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/instagram/tests.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49344
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT ,LIT )#COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):*\n    return ID (LIT ,LIT )#COMMENT\n\n"
    },
    {
        "code": "def get_mocked_response(self):\n    return [MockedResponse(200, \"\"\"{\n        \"name\": \"wayward710\"}\"\"\")]\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/reddit/tests.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 49345
        },
        "correct_code": "def ID (ID ):\n    return [ID (LIT ,LIT )]\n",
        "wrong_code": "def ID (ID ):\n    [[ID (LIT ,LIT )]\n"
    },
    {
        "code": "def get_profile_url_(self):\n    return 'http://%s.tumblr.com/' \\\n            % self.account.extra_data.get('name')\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/tumblr/provider.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49346
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID .ID .ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    return LIT %ID .ID .ID .ID (LIT )\n    import "
    },
    {
        "code": "\ndef to_str(self):\n    dflt = super(TumblrAccount, self).to_str()\n    name = self.account.extra_data.get('name', dflt)\n    return name\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/tumblr/provider.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49347
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID ).ID ()\n    ID =ID .ID .ID .ID (LIT ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (ID ,ID import .ID ()\n    ID =ID .ID .ID .ID (LIT ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef extract_uid(self, data):\n    return data['name']\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/tumblr/provider.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49348
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID [nonlocal ]\n"
    },
    {
        "code": "\ndef extract_common_fields(self, data):\n    return dict(first_name=data.get('name'),)\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/tumblr/provider.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 49349
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID =ID .ID (LIT ),)\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID =ID .ID (.),)\n"
    },
    {
        "code": "\ndef complete_login(self, request, app, token, **kwargs):\n    if email:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/providers/vk/views.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 49350
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,**ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,**ID ):\n    ID :\n        pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n\n    # Changing field 'SocialToken.token'\n    db.alter_column('socialaccount_socialtoken', 'token', self.gf('django.db.models.fields.CharField')(max_length=255))\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/south_migrations/0010_auto__chg_field_socialtoken_token.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49351
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )(ID =LIT ))\n",
        "wrong_code": "\ndef ID (ID ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )(ID =LIT ))\n"
    },
    {
        "code": "\ndef backwards(self, orm):\n\n    # Changing field 'SocialToken.token'\n    db.alter_column('socialaccount_socialtoken', 'token', self.gf('django.db.models.fields.CharField')(max_length=200))\n",
        "metadata": {
            "file": "py150_files/data/pennersr/django-allauth/allauth/socialaccount/south_migrations/0010_auto__chg_field_socialtoken_token.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49352
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )(ID =LIT ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )(ID =LIT ))\n    else "
    },
    {
        "code": "\ndef _from_catalog(self):\n    if self.dbconn.version < 90100:\n        return\n    for coll in self.fetch():\n        self[coll.key()] = coll\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/pyrseas/dbobject/collation.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 49353
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID .ID <LIT :\n        return \n    for ID in ID .ID ():\n        ID [ID .ID ()]=ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID .ID <LIT :\n        return \n    for ID in ID .ID ():\n        raise ID [ID .ID ()]=ID \n"
    },
    {
        "code": "\ndef __setattr__(self, name, value):\n    if not hasattr(self, '_heading') or name == '_tuple_version':\n        pass\n    if not name in self.__dict__:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/pyrseas/relation/tuple.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 49354
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID (ID ,LIT )or ID ==LIT :\n        pass \n    if not ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,from ID ):\n    if not ID (ID ,LIT )or ID ==LIT :\n        pass \n    if not ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"Tuple(%s)\" % \", \".join(\"%s %s\" % (name, type_.__name__)\n                                   for name, type_ in self._heading)\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/pyrseas/relation/tuple.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 49355
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %LIT .ID (LIT %(ID ,ID .ID )\n    for ID ,ID in ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %LIT .ID (LIT %(ID ,ID .ID )\n    for ID ,ID in ID .ID )\n,"
    },
    {
        "code": "\ndef test_map_schema(self):\n    \"Map a created schema\"\n    dbmap = self.to_map([CREATE_STMT])\n    assert dbmap['schema s1'] == {}\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49356
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID ([ID ])\n    assert ID [LIT ]=={}\n",
        "wrong_code": "\ndef ID (ID :\n    LIT \n    ID =ID .ID ([ID ])\n    assert ID [LIT ]=={}\n"
    },
    {
        "code": "\ndef test_map_schema_comment(self):\n    \"Map a schema comment\"\n    dbmap = self.to_map([CREATE_STMT, COMMENT_STMT])\n    assert dbmap['schema s1'] == {'description': 'Test schema s1'}\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49357
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID ([ID ,ID ])\n    assert ID [LIT ]=={LIT :LIT }\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID ==.ID ([ID ,ID ])\n    assert ID [LIT ]=={LIT :LIT }\n"
    },
    {
        "code": "\ndef test_map_select_schema(self):\n    assert 'schema s3' not in dbmap\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49358
        },
        "correct_code": "\ndef ID (ID ):\n    assert LIT not in ID \n",
        "wrong_code": "\ndef ID (ID nonlocal ):\n    assert LIT not in ID \n"
    },
    {
        "code": "\ndef test_bad_schema_map(self):\n    \"Error creating a schema with a bad map\"\n    with pytest.raises(KeyError):\n        self.to_sql({'s1': {}})\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 49359
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID .ID ({LIT :{}})\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID .ID ({LIT :{}assert })\n"
    },
    {
        "code": "\ndef test_drop_schema(self):\n    \"Drop an existing schema\"\n    sql = self.to_sql(self.std_map(), [CREATE_STMT])\n    assert sql == [\"DROP SCHEMA s1\"]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49360
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .ID (),[ID ])\n    assert ID ==[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .return (),[ID ])\n    assert ID ==[LIT ]\n"
    },
    {
        "code": "\ndef test_rename_schema(self):\n    assert sql == [\"ALTER SCHEMA s1 RENAME TO s2\"]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 49361
        },
        "correct_code": "\ndef ID (ID ):\n    assert ID ==[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    assert ID ==[LIT ]\nimport "
    },
    {
        "code": "\ndef test_bad_rename_schema(self):\n    with pytest.raises(KeyError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49362
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID and ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_schema_with_comment(self):\n    \"Create a schema with a comment\"\n    inmap = self.std_map()\n    inmap.update(self._schmap)\n    sql = self.to_sql(inmap)\n    assert sql == [CREATE_STMT, COMMENT_STMT]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49363
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID (ID .ID )\n    ID =ID .ID (ID )\n    assert ID ==[ID ,ID ]\n",
        "wrong_code": "(def ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID (ID .ID )\n    ID =ID .ID (ID )\n    assert ID ==[ID ,ID ]\n"
    },
    {
        "code": "\ndef test_comment_on_schema(self):\n    inmap = self.std_map()\n    inmap.update(self._schmap)\n    sql = self.to_sql(inmap, [CREATE_STMT])\n    assert sql == [COMMENT_STMT]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 49364
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID .ID )\n    ID =ID .ID (ID ,[ID ])\n    assert ID ==[ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID (ID .ID )\n    ID ID .ID (ID ,[ID ])\n    assert ID ==[ID ]\n"
    },
    {
        "code": "\ndef test_drop_schema_comment(self):\n    assert sql == [\"COMMENT ON SCHEMA s1 IS NULL\"]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 49365
        },
        "correct_code": "\ndef ID (ID ):\n    assert ID ==[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n:    assert ID ==[LIT ]\n"
    },
    {
        "code": "\ndef test_change_schema_comment(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49366
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID in ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_undo_create_schema(self):\n    inmap.update({'schema s1': {}})\n    sql = self.to_sql(inmap, revert=True)\n    assert sql == [\"DROP SCHEMA s1\"]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 49367
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ({LIT :{}})\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID ==[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ({LIT :{}})\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID ==[LIT assert ]\n"
    },
    {
        "code": "\ndef test_undo_drop_schema(self):\n    \"Revert dropping a schema\"\n    sql = self.to_sql(self.std_map(), [CREATE_STMT], revert=True)\n    assert sql[0] == CREATE_STMT\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 49368
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .ID (),[ID ],ID =LIT )\n    assert ID [LIT ]==ID \n",
        "wrong_code": "\ndef ID ](ID ):\n    LIT \n    ID =ID .ID (ID .ID (),[ID ],ID =LIT )\n    assert ID [LIT ]==ID \n"
    },
    {
        "code": "\ndef test_undo_comment_on_schema(self):\n    sql = self.to_sql(inmap, [CREATE_STMT], revert=True)\n    assert sql == [\"COMMENT ON SCHEMA s1 IS NULL\"]\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 49369
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID ,[ID ],ID =LIT )\n    assert ID ==[LIT ]\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (ID ,[ID ],ID =LIT )\n    assert pass ID ==[LIT ]\n"
    },
    {
        "code": "\ndef test_undo_drop_schema_comment(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/perseas/Pyrseas/tests/dbobject/test_schema.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 49370
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \ndef "
    },
    {
        "code": "\n\ndef runtests():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterbe/django-fancy-cache/runtests.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49371
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    pass \n("
    },
    {
        "code": "\n\ndef download(url):\n    html = urlopen(url).read()\n    return unicode(html, 'utf-8')\n",
        "metadata": {
            "file": "py150_files/data/peterbe/mincss/proxy/app.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49372
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID ).ID ()\n    return ID (ID ,LIT )\n",
        "wrong_code": "\n!=def ID (ID ):\n    ID =ID (ID ).ID ()\n    return ID (ID ,LIT )\n"
    },
    {
        "code": "\n\ndef add_collect_stats_qs(url, value):\n    \"\"\"if :url is `page.html?foo=bar` return.\n\n    `page.html?foo=bar&MINCSS_STATS=:value`\n\n    \"\"\"\n    if '?' in url:\n        url += '&'\n    else:\n        url += '?'\n    url += 'MINCSS_STATS=%s' % value\n    return url\n",
        "metadata": {
            "file": "py150_files/data/peterbe/mincss/proxy/app.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49373
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    if LIT in ID :\n        ID +=LIT \n    else :\n        ID +=LIT \n    ID +=LIT %ID \n    return ID \n",
        "wrong_code": "\n\ndef ID )ID ,ID ):\n    LIT \n    if LIT in ID :\n        ID +=LIT \n    else :\n        ID +=LIT \n    ID +=LIT %ID \n    return ID \n"
    },
    {
        "code": "\n\ndef summorize_stats_html(stats):\n    for each, before, after in stats:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/peterbe/mincss/proxy/app.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49374
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID ,ID ,ID in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID ,ID ,ID in ID \n        pass \n"
    },
    {
        "code": "\n\ndef sizeof(num):\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if num < 1024.0 and num > -1024.0:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/peterbe/mincss/proxy/app.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49375
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        if ID <LIT and ID >-LIT :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID )and :\n    for ID in [LIT ,LIT ,LIT ,LIT ]:\n        if ID <LIT and ID >-LIT :\n            pass \n"
    },
    {
        "code": "\n\ndef demo(screen):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterbrittain/asciimatics/samples/images.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49376
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef /(ID ):\n    pass \n"
    },
    {
        "code": "\n@staticmethod\ndef _log(*args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 49377
        },
        "correct_code": "\n@ID \ndef ID (*ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (*ID ,**ID ):\n    pass (\n"
    },
    {
        "code": "\n@classmethod\ndef storeAssociation(cls, server_url, association):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 49378
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,ID ):\nand     pass \n"
    },
    {
        "code": "\n\n@classmethod\ndef cleanupAssociations(cls):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 49379
        },
        "correct_code": "\n\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n@ID \ndef ID (ID ):\n    pass \n    or "
    },
    {
        "code": "    \n    \n@classmethod\ndef removeAssociation(cls, server_url, handle):\n    if key.get():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 49380
        },
        "correct_code": "\n\n@ID \ndef ID (ID ,ID ,ID ):\n    if ID .ID ():\n        pass \n",
        "wrong_code": "\n\n@ID \ndef ID (ID ,ID ,ID ):\n    if ID .ID ():\n    finally pass \n"
    },
    {
        "code": "    \n    \n@classmethod\ndef useNonce(cls, server_url, timestamp, salt):\n    \n    if result:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 49381
        },
        "correct_code": "\n\n@ID \ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\n@ID \n!def ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "    \n    \n@classmethod\ndef cleanupNonces(cls):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/authomatic/extras/gae/openid.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49382
        },
        "correct_code": "\n\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "(\n\n@ID \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef get(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/peterhudec/authomatic/examples/gae/extras/main.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 49383
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\n\ndef redirect_to_self(clear=False):\n    if clear:\n        return redirect(url_for(request.endpoint))\n    return redirect(url_for(request.endpoint, **request.view_args))\n",
        "metadata": {
            "file": "py150_files/data/petermelias/flask-easymode/flask_easymode/helpers.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49384
        },
        "correct_code": "\n\ndef ID (ID =LIT ):\n    if ID :\n        return ID (ID (ID .ID ))\n    return ID (ID (ID .ID ,**ID .ID ))\n",
        "wrong_code": "\n\ndef ID (ID =LIT ):None     if ID :\n        return ID (ID (ID .ID ))\n    return ID (ID (ID .ID ,**ID .ID ))\n"
    },
    {
        "code": "\n\ndef redirect_to_next(clear=True, key='next'):\n    if key in request.args:\n        if clear:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/petermelias/flask-easymode/flask_easymode/helpers.py",
            "fix_location": 99,
            "fix_type": "delete",
            "id": 49385
        },
        "correct_code": "\n\ndef ID (ID =LIT ,ID =LIT ):\n    if ID in ID .ID :\n        if ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID =LIT ,ID =LIT ):\n    if ID in ID .ID :\n        if ID :\n            pass \n        else yield :\n            pass \n"
    },
    {
        "code": "def _docTagElement(self, element):\n    if hasattr(self, hook):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 49386
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        not pass \n"
    },
    {
        "code": "    \n    # E L E M E N T  D I S P A T C H \n    \ndef doc_topic(self, element, attrs):\n    attrs = self.addDocBaseClass('topic', attrs)\n    self.div(**attrs)\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 77,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49387
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID \n"
    },
    {
        "code": "\ndef _doc_topic(self):\n    self._div(comment='topic')\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49388
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )nonlocal "
    },
    {
        "code": "\ndef doc_summary(self, element, attrs):\n    attrs = self.addDocBaseClass('summary', attrs)\n    self.div(**attrs)\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": "**",
            "id": 49389
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (!ID )\n"
    },
    {
        "code": "\ndef _doc_summary(self):\n    self._div(comment='summary')\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49390
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (=LIT )\n"
    },
    {
        "code": "\ndef doc_chapters(self, element, attrs):\n    attrs = self.addDocBaseClass('chapters', attrs)\n    self.div(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 49391
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_chapters(self):\n    self._div(comment='chapters')\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49392
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID =LIT )\n\n",
        "wrong_code": "[def ID (ID ):\n    ID .ID (ID =LIT )\n\n"
    },
    {
        "code": "def doc_chapter(self, element, attrs):\n    attrs = self.addDocBaseClass('chapter', attrs)\n    self.div(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 49393
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    assert ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_chapter(self):\n    self._div(comment='chapter')\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49394
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID =LIT )\n\n",
        "wrong_code": "def ID (ID ):\n    ID except ID (ID =LIT )\n\n"
    },
    {
        "code": "def doc_meta(self, element, attrs):\n    u\"\"\"Ignore the meta tag, just process titel and subtitle and summary by \n        direct XPath query.\"\"\"\n    self.pushResult()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 49395
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    LIT \n    ID .ID ()\n",
        "wrong_code": "def ID (ID ,ID ,ID and ):\n    LIT \n    ID .ID ()\n"
    },
    {
        "code": "\ndef _doc_meta(self):\n    u\"\"\"Ignore the content by popping the current result stream.\"\"\"\n    self.popResult()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49396
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .yield ()\n"
    },
    {
        "code": "\ndef doc_title(self, element, attrs):\n    u\"\"\"Transform chapter/title into h2.\"\"\"\n    self.h2()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49397
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID ()\n\n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    LIT \n    ID .ID ()\n\n"
    },
    {
        "code": "def _doc_title(self):\n    self._h2()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49398
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\nfor     ID .ID ()\n"
    },
    {
        "code": " \ndef doc_lead(self, element, attrs):\n    attrs = self.addDocBaseClass('lead', attrs)\n    self.p(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49399
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,ID )\n    ID .ID (**+)\n\n"
    },
    {
        "code": "def _doc_lead(self):\n    self._p()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49400
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID ()="
    },
    {
        "code": "   \ndef doc_h1(self, element, attrs):\n    self.h1(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49401
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID is ,ID ,ID ):\n    ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_h1(self): \n    self._h1()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49402
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID )as :\n    ID .ID ()\n\n"
    },
    {
        "code": "def doc_h2(self, element, attrs):\n    self.h2(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49403
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):async ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_h2(self): \n    self._h2()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49404
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID )=:\n    ID .ID ()\n\n"
    },
    {
        "code": "def doc_h3(self, element, attrs):\n    self.h3(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49405
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID \n\n"
    },
    {
        "code": "def _doc_h3(self): \n    self._h3()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49406
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "ID (ID ):\n    ID .ID ()\n\n"
    },
    {
        "code": "def doc_h4(self, element, attrs):\n    self.h4(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49407
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n    and "
    },
    {
        "code": "def _doc_h4(self): \n    self._h4()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 49408
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID ):\n    ID .ID continue ()\n\n"
    },
    {
        "code": "def doc_h5(self, element, attrs):\n    self.h5(attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49409
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (ID )\n\n",
        "wrong_code": "def ID (ID ID ,ID ):\n    ID .ID (ID )\n\n"
    },
    {
        "code": "def _doc_h5(self): \n    self._h5()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49410
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID LIT :\n    ID .ID ()\n\n"
    },
    {
        "code": "def doc_h6(self, element, attrs):\n    self.h6(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49411
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n    nonlocal "
    },
    {
        "code": "def _doc_h6(self): \n    self._h6()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49412
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID )\n    ID .ID ()\n\n"
    },
    {
        "code": "def _doc_p(self):\n    self._p()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 49413
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID from ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef doc_b(self, element, attrs):\n    self.b()\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49414
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID ()\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (\n\n"
    },
    {
        "code": "def _doc_b(self):\n    self._b()\n       \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 49415
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID ):\n    ID try ID ()\n\n"
    },
    {
        "code": "def doc_blockquote(self, element, attrs):\n    self.blockquote(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49416
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**)\n\n"
    },
    {
        "code": "def _doc_blockquote(self):\n    self._blockquote()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49417
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def is (ID ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef doc_code(self, element, attrs):\n    self.pre(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 49418
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n="
    },
    {
        "code": "def _doc_code(self):\n    self._pre()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 49419
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID def ):\n    ID .ID ()\n"
    },
    {
        "code": "  \ndef doc_em(self, element, attrs):\n    self.em(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49420
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,,ID ):\n    ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_em(self):\n    self._em()\n          \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49421
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (\n\n"
    },
    {
        "code": "def doc_list(self, element, attrs):\n    self.ul(**attrs)\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 49422
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n",
        "wrong_code": "yield ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n"
    },
    {
        "code": "\ndef _doc_list(self):\n    self._ul()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 49423
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ==ID (ID ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef doc_nlist(self, element, attrs):\n    self.ol(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49424
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID **ID )\n\n"
    },
    {
        "code": "def _doc_nlist(self):\n    self._ol()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49425
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID ()LIT \n"
    },
    {
        "code": "        \ndef doc_item(self, element, attrs):\n    self.li(**attrs)\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49426
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (**ID )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )\n    ID .ID (**ID )\n\n"
    },
    {
        "code": "def _doc_item(self):\n    self._li()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49427
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef doc_amp(self, element, attrs):\n    self.text('&amp;')\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49428
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (LIT )\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):)    ID .ID (LIT )\n\n"
    },
    {
        "code": "def _doc_amp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49429
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\nID     pass \n"
    },
    {
        "code": "\ndef doc_footnote(self, element, attrs):\n    if not attrs.has_key('class_'):\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49430
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID .ID (LIT ):\n        pass \n\n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n    if not ID .ID (LIT ):\n        pass \n\n"
    },
    {
        "code": "def _doc_footnote(self):\n    tail = self.popResult() \n    self._a()\n    self._sup()\n  \n    # I M A G I N G\n           \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49431
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID ()\n    ID .ID ()\n    ID .ID ()\n\n    #COMMENT\n\n\n",
        "wrong_code": "def await (ID ):\n    ID =ID .ID ()\n    ID .ID ()\n    ID .ID ()\n\n    #COMMENT\n\n\n"
    },
    {
        "code": "def doc_image(self, element, attrs):\n    if not attrs.has_key('src'): # No src url defined, then use default image.\n        pass\n    if not attrs.has_key('class_'):\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 49432
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    if not ID .ID (LIT ):#COMMENT\n\n        pass \n    if not ID .ID (LIT ):\n        pass \n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    if not ID .ID (LIT ):#COMMENT\n\n        pass \n    if not ID .break ID (LIT ):\n        pass \n\n"
    },
    {
        "code": "def _doc_image(self):\n    if caption:\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49433
        },
        "correct_code": "def ID (ID ):\n    if ID :\n        pass \n\n",
        "wrong_code": "def ID (ID ):\nelse     if ID :\n        pass \n\n"
    },
    {
        "code": "# L I N K S\n\ndef doc_www(self, element, attrs):\n    if href and not href.startswith('http://') and not href.startswith('/'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 49434
        },
        "correct_code": "#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    if ID and not ID .ID (LIT )and not ID .ID (LIT ):\n        pass \n",
        "wrong_code": "#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n[    if ID and not ID .ID (LIT )and not ID .ID (LIT ):\n        pass \n"
    },
    {
        "code": "\ndef _doc_www(self):\n    self._a()\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 49435
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n-    ID .ID ()\n"
    },
    {
        "code": "  \n#def doc_next(self, element, attrs):\n#def doc_prev(self, element, attrs):\n \n# S V G\n\ndef doc_svgexample(self, element, attrs):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49436
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n\ndef ID (ID ,ID ,ID ):\n    pass \n\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n\ndef assert (ID ,ID ,ID ):\n    pass \n\n"
    },
    {
        "code": "def _doc_svgexample(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/builders/builderparts/xmltransformerpart.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 49437
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID .):\n    pass \n"
    },
    {
        "code": "\ndef baseComponents(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/sites/examples/helloworld/make.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 49438
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef make(self, root):\n    # Save the resulting HTML file in \"index.html\"\n    # Answer the file path, so we can directly open the file with a browser.\n    return htmlBuilder.save(self, path=root + 'index.html')  \n",
        "metadata": {
            "file": "py150_files/data/petrvanblokland/Xierpa3/xierpa3/sites/examples/helloworld/make.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49439
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID .ID (ID ,ID =ID +LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID .ID (ID ,=ID +LIT )\n"
    },
    {
        "code": "\ndef add_extension(file_path, extension):\n    if not file_path.endswith(extension):\n        file_path += extension\n    return file_path\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49440
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        ID +=ID \n    return ID \n",
        "wrong_code": "and \ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        ID +=ID \n    return ID \n"
    },
    {
        "code": "\ndef prepare_file_paths(string, extension):\n    for prefix in string.split(\",\"):\n        if not os.path.exists(file_path):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49441
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID (LIT ):\n        if not ID .ID .ID (ID ):\n            pass \n",
        "wrong_code": "\nID (ID ,ID ):\n    for ID in ID .ID (LIT ):\n        if not ID .ID .ID (ID ):\n            pass \n"
    },
    {
        "code": "def __init__(\n        self,\n        headword,\n        definition\n):\n    self.headword = headword\n    self.definition = definition\n    self.clear_synonyms()\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49442
        },
        "correct_code": "def ID (\nID ,\nID ,\nID \n):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID ()\n",
        "wrong_code": "def ID (\n,\nID ,\nID \n):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID ()\n"
    },
    {
        "code": "\ndef clear_synonyms(self):\n    self.synonyms = []\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "",
            "id": 49443
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =[]\n)"
    },
    {
        "code": "\ndef add_synonym(self, synonym):\n    self.synonyms.append(synonym)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 49444
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID .ID (ID )\n"
    },
    {
        "code": "\ndef get_synonyms(self):\n    return self.synonyms\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49445
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return yield .ID \n"
    },
    {
        "code": "\ndef __len__(self):\n    if self.headword is None:\n        return 0\n    return len(self.headword)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 49446
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is ID :\n        return LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is ID :\n        return LIT ID \n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return u\"\"\"DictionaryEntry\n    Headword: '%s'\n    Definition: '%s'\"\"\" % (self.headword, self.definition)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 49447
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .return ID ,ID .ID )\n"
    },
    {
        "code": "\ndef prefix(self, prefix_length):\n    if len(self) < prefix_length:\n        return self.headword\n    return self.headword[0:prefix_length]\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49448
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )<ID :\n        return ID .ID \n    return ID .ID [LIT :ID ]\n",
        "wrong_code": "\ndef ID (while ,ID ):\n    if ID (ID )<ID :\n        return ID .ID \n    return ID .ID [LIT :ID ]\n"
    },
    {
        "code": "\ndef __str__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 49449
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n@property\ndef is_monolingual(self):\n    if self.language_from is None:\n        return False\n    return self.language_from == self.language_to\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49450
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if ID .ID is ID :\n        return LIT \n    return ID .ID ==ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    if ID .is ID :\n        return LIT \n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "\n@property\ndef is_bilingual(self):\n    if self.language_from is None:\n        return False\n    return self.language_from != self.language_to\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 49451
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if ID .ID is ID :\n        return LIT \n    return ID .ID !=ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    if ID .ID is ID :\n        return LIT (\n    return ID .ID !=ID .ID \n"
    },
    {
        "code": "def __init__(\n        self,\n        metadata=None\n):\n    if self.metadata is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 49452
        },
        "correct_code": "def ID (\nID ,\nID =ID \n):\n    if ID .ID is ID :\n        pass \n",
        "wrong_code": "def ID (\nID ,yield \nID =ID \n):\n    if ID .ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"\"\"Dictionary\nNumber of entries:          %d\nNumber of unique headwords: %d\nHas synonyms:               %s\n%s\"\"\" % (len(self), self.unique_headwords, str(self.has_synonyms), str(self.metadata))\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49453
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID (ID ),ID .ID ,ID (ID .ID ),ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %ID (ID ),ID .ID ,ID (ID .ID ),ID (ID .ID ))\n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.entries)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 49454
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    pass return ID (ID .ID )\n"
    },
    {
        "code": "\ndef clear(self):\n    self.entries = []\n    self.entries_index = {}\n    self.entries_index_sorted = []\n    self.has_synonyms = False\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 68,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49455
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =[]\n    ID .ID ={}\n    ID .ID =[]\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =[]\n    ID .ID ={}\n    ID .ID =[]\n    ID .=LIT \n"
    },
    {
        "code": "\n@property\ndef unique_headwords(self):\n    return len(self.entries_index)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 49456
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID (ID .ID )\nexcept "
    },
    {
        "code": "\n@property\ndef has_unique_headwords_only(self):\n    return len(self) == self.unique_headwords\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49457
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID (ID )==ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID (ID )==ID .\n"
    },
    {
        "code": "\ndef add_synonym(self, synonym, headword_index):\n    if headword_index < len(self):\n        entry = self.entries[headword_index]\n        entry.add_synonym(synonym)\n        self.has_synonyms = True\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 105,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 49458
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID <ID (ID ):\n        ID =ID .ID [ID ]\n        ID .ID (ID )\n        ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID <ID (ID ):\n        ID =ID .ID [ID ]\n        ID .ID (ID )\n        ID .ID LIT \n"
    },
    {
        "code": "\ndef add_entry(self, entry=None, headword=None, definition=None):\n    if entry is None:\n        pass\n    if not entry.headword in self.entries_index:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 49459
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ):\n    if ID is ID :\n        pass \n    if not ID .ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =*ID ,ID =ID ):\n    if ID is ID :\n        pass \n    if not ID .ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef has_headword(self, headword):\n    return headword in self.entries_index\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 49460
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID in ID .ID \n",
        "wrong_code": "\ndef ID (ID yield ID ):\n    return ID in ID .ID \n"
    },
    {
        "code": "\ndef get_definitions(self, headword):\n    if not self.has_headword(headword):\n        pass\n    for index in self.entries_index[headword]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49461
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID ):\n        pass \n    for ID in ID .ID [ID ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not ID .ID ID ):\n        pass \n    for ID in ID .ID [ID ]:\n        pass \n"
    },
    {
        "code": "\ndef get_synonyms(self):\n    if self.has_synonyms:\n        for index in self.entries_index_sorted:\n            for synonym in entry.get_synonyms():\n                pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 49462
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        for ID in ID .ID :\n            for ID in ID .ID ():\n                pass \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID :\n        for ID in ID .ID :\n            for ID in ID .ID ():\n                pass \n"
    },
    {
        "code": "\ndef flatten_synonyms(self):\n    if not self.has_synonyms:\n        pass\n\n    for entry in self.entries:\n        for synonym in entry.get_synonyms():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 68,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49463
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n\n    for ID in ID .ID :\n        for ID in ID .ID ():\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n\n    for ID in ID .:\n        for ID in ID .ID ():\n            pass \n"
    },
    {
        "code": "\ndef default_merge_function(headword, definitions):\n    \"\"\"\n            Merge definitions for the same headword in a custom way:\n            1 def   => definition\n            2+ defs => definition<SEP>definition<SEP>...\n            \"\"\"\n    return merge_separator.join(definitions)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 49464
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (nonlocal ID ,ID ):\n    LIT \n    return ID .ID (ID )\n"
    },
    {
        "code": "def return_triple(groups):\n    if u\"SPECIAL\" in groups:\n        pass\n    keys = sorted(groups.keys())\n    return (spec, keys, groups)\n",
        "metadata": {
            "file": "py150_files/data/pettarin/penelope/penelope/dictionary.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 49465
        },
        "correct_code": "def ID (ID ):\n    if LIT in ID :\n        pass \n    ID =ID (ID .ID ())\n    return (ID ,ID ,ID )\n",
        "wrong_code": "def ID (ID )\n    if LIT in ID :\n        pass \n    ID =ID (ID .ID ())\n    return (ID ,ID ,ID )\n"
    },
    {
        "code": "\n\ndef get_function_hooks():\n    if not hasattr(thread_local, 'function_hooks'):\n        thread_local.function_hooks = collections.OrderedDict()\n    return thread_local.function_hooks\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/__init__.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 49466
        },
        "correct_code": "\n\ndef ID ():\n    if not ID (ID ,LIT ):\n        ID .ID =ID .ID ()\n    return ID .ID \n",
        "wrong_code": "\n\ndef ID ():\n    not ID (ID ,LIT ):\n        ID .ID =ID .ID ()\n    return ID .ID \n"
    },
    {
        "code": "\n\ndef is_debug():\n    \"\"\"Get the debug mode.\n\n    Returns:\n        bool: Return ``True`` if Chainer is in debug mode.\n    \"\"\"\n    return _debug\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/__init__.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 49467
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    return ID \n",
        "wrong_code": "\n\nis def ID ():\n    LIT \n    return ID \n"
    },
    {
        "code": "\n\ndef set_debug(debug):\n    \"\"\"Set the debug mode.\n\n    note::\n\n        This method changes global state. When you use this method on\n        multi-threading environment, it may affects other threads.\n\n    Args:\n        debug (bool): New debug mode.\n    \"\"\"\n    global _debug\n    _debug = debug\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/__init__.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49468
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    global ID \n    ID =ID \n",
        "wrong_code": "\n\ndef ID (ID ):[    LIT \n    global ID \n    ID =ID \n"
    },
    {
        "code": "\ndef check_type_forward(self, in_types):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/array/select_item.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 49469
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ]\n"
    },
    {
        "code": "\ndef backward_cpu(self, inputs, grad_outputs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/array/select_item.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 49470
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    global pass \n"
    },
    {
        "code": "\ndef backward_gpu(self, inputs, grad_outputs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/array/select_item.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49471
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):as     pass \n"
    },
    {
        "code": "\n\ndef select_item(x, t):\n    \"\"\"Select elements stored in given indices.\n\n    This function returns ``t.choose(x.T)``, that means\n    ``y[i] == x[i, t[i]]`` for all ``i``.\n\n    Args:\n        x (Variable): Variable storing arrays.\n        t (Variable): Variable storing index numbers.\n\n    Returns:\n        ~chainer.Variable: Variable that holds ``t``-th element of ``x``.\n\n    \"\"\"\n    return SelectItem()(x, t)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/array/select_item.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 49472
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID ()(ID ,ID )\n",
        "wrong_code": "\n\ndef ID ID ,ID ):\n    LIT \n    return ID ()(ID ,ID )\n"
    },
    {
        "code": "\ndef check_type_forward(self, in_types):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/math/identity.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49473
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef forward(self, xs):\n    return xs\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/math/identity.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 49474
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID del ID ):\n    return ID \n"
    },
    {
        "code": "\ndef backward(self, xs, gys):\n    return gys\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/math/identity.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49475
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID -:\n    return ID \n"
    },
    {
        "code": "\n\ndef identity(*inputs):\n    \"\"\"Just returns input variables.\"\"\"\n    return Identity()(*inputs)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/functions/math/identity.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 49476
        },
        "correct_code": "\n\ndef ID (*ID ):\n    LIT \n    return ID ()(*ID )\n",
        "wrong_code": "\n\ndef ID (*ID ::\n    LIT \n    return ID ()(*ID )\n"
    },
    {
        "code": "\ndef __init__(self, n_units, n_inputs=None):\n    if n_inputs is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 49477
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID )def :\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef __call__(self, h, x):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 49478
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID global ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, in_size, out_size):\n    super(StatefulGRU, self).__init__(out_size, in_size)\n    self.state_size = out_size\n    self.reset_state()\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 49479
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID (ID ,ID ).ID (ID ,ID )\n    ID .ID =ID \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID (ID ,ID ).ID (ID ,ID )\n    ID .ID import =ID \n    ID .ID ()\n"
    },
    {
        "code": "\ndef to_cpu(self):\n    super(StatefulGRU, self).to_cpu()\n    if self.h is not None:\n        self.h.to_cpu()\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 49480
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    if ID .ID is not ID :\n        ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    if ID .ID is not ID :\n        ID .await ID .ID ()\n"
    },
    {
        "code": "\ndef to_gpu(self, device=None):\n    super(StatefulGRU, self).to_gpu(device)\n    if self.h is not None:\n        self.h.to_gpu(device)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49481
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID )\n    if ID .ID is not ID :\n        ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID )lambda if ID .ID is not ID :\n        ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_state(self, h):\n    if self.xp == numpy:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 49482
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID :\n        def \n    else :\n        pass \n"
    },
    {
        "code": "\ndef reset_state(self):\n    self.h = None\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 49483
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ):,\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __call__(self, x):\n    if self.h is not None:\n        pass\n    if self.h is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/links/connection/gru.py",
            "fix_location": 83,
            "fix_type": "delete",
            "id": 49484
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID def :\n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    name = base.__str__(self)\n    return '%s  parameter: %s' % (name, param)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 49485
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID )\n    return LIT %(ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID lambda .ID (ID )\n    return LIT %(ID ,ID )\n"
    },
    {
        "code": "\n\ndef _gen_case(base, module, i, param):\n\n    def __str__(self):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 49486
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID ):\n\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ID ):\n\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef _gen_cases(name, base, params):\n    module = sys.modules[name]\n    for i, param in enumerate(params):\n        _gen_case(base, module, i, param)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49487
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID [ID ]\n    for ID ,ID in ID (ID ):\n        ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID [ID ]\n    for ID ,ID in ID (ID ):def ID (ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "def f(klass):\n    assert issubclass(klass, unittest.TestCase)\n    _gen_cases(klass.__module__, klass, params)\n    # Remove original base class\n    return None\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 49488
        },
        "correct_code": "def ID (ID ):\n    assert ID (ID ,ID .ID )\n    ID (ID .ID ,ID ,ID )\n    #COMMENT\n\n    return ID \n",
        "wrong_code": "def ID (ID )is :\n    assert ID (ID ,ID .ID )\n    ID (ID .ID ,ID ,ID )\n    #COMMENT\n\n    return ID \n"
    },
    {
        "code": "\n\ndef parameterize(*params):\n    def f(klass):\n        # Remove original base class\n        return None\n    return f\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 49489
        },
        "correct_code": "\n\ndef ID (*ID ):\n    def ID (ID ):\n    #COMMENT\n\n        return ID \n    return ID \n",
        "wrong_code": "\n\ndef ID (*ID ):not     def ID (ID ):\n    #COMMENT\n\n        return ID \n    return ID \n"
    },
    {
        "code": "\n\ndef product(parameter):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/chainer/testing/parameterized.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49490
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (await ):\n    pass \n"
    },
    {
        "code": "\n\ndef multi_gpu(gpu_num):\n    return attrib.attr(gpu=gpu_num)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/cupy/testing/attr.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49491
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID (ID =ID )\n",
        "wrong_code": "\n\ndef from (ID ):\n    return ID .ID (ID =ID )\n"
    },
    {
        "code": "\ndef __init__(self, n_vocab, n_units, loss_func):\n    super(ContinuousBoW, self).__init__(\n        embed=F.EmbedID(n_vocab, n_units),\n        loss_func=loss_func,\n    )\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49492
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID (ID ,ID ).ID (\n    ID =ID .ID (ID ,ID ),\n    ID =ID ,\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID (ID ,ID ).ID (\n    ID =ID .ID (ID ,[),\n    ID =ID ,\n    )\n"
    },
    {
        "code": "\ndef __call__(self, x, context):\n    for c in context:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49493
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, n_vocab, n_units, loss_func):\n    super(SkipGram, self).__init__(\n        embed=L.EmbedID(n_vocab, n_units),\n        loss_func=loss_func,\n    )\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 49494
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID (ID ,ID ).ID (\n    ID =ID .ID (ID ,ID ),\n    ID =ID ,\n    )\n",
        "wrong_code": "await \ndef ID (ID ,ID ,ID ,ID ):\n    ID (ID ,ID ).ID (\n    ID =ID .ID (ID ,ID ),\n    ID =ID ,\n    )\n"
    },
    {
        "code": "\ndef __call__(self, x, context):\n    for c in context:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 49495
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID del ,ID ):\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, n_in, n_out):\n    super(SoftmaxCrossEntropyLoss, self).__init__(\n        W=L.Linear(n_in, n_out),\n    )\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 49496
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID (ID ,ID ).ID (\n    ID =ID .ID (ID ,ID ),\n    )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID (ID ,ID ).ID assert \n    ID =ID .ID (ID ,ID ),\n    )\n"
    },
    {
        "code": "\ndef __call__(self, x, t):\n    return F.softmax_cross_entropy(self.W(x), t)\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 49497
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID (ID .ID (ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID (ID .(ID ),ID )\n"
    },
    {
        "code": "\n\ndef calculate_loss(model, dataset, position):\n    for offset in range(-w, w + 1):\n        if offset == 0:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/examples/word2vec/train_word2vec.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 49498
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID (-ID ,ID +LIT ):\n        if ID ==LIT :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    for ID in ID (-.,ID +LIT ):\n        if ID ==LIT :\n            pass \n"
    },
    {
        "code": "\ndef setUp(self, use_cudnn=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/tests/chainer_tests/functions_tests/connection_tests/test_convolution_2d.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 49499
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\n@attr.cudnn\ndef test_forward_consistency(self, nobias=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/pfnet/chainer/tests/chainer_tests/functions_tests/connection_tests/test_convolution_2d.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 49500
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (import ID ,ID =LIT ):\n    pass \n"
    }
]