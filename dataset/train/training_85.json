[
    {
        "code": "\ndef sRGB1_to_sRGB1_linear(sRGB1):\n    \"\"\"Convert sRGB (as floats in the 0-to-1 range) to linear sRGB.\"\"\"\n    sRGB1 = np.asarray(sRGB1, dtype=float)\n    sRGB1_linear = C_linear(sRGB1)\n    return sRGB1_linear\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42501
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID ,ID =ID )\n    ID =ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID ,ID =ID )\n    ID ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef sRGB1_linear_to_XYZ100(sRGB1_linear):\n    # this is broadcasting matrix * array-of-vectors, where the vector is the\n    # last dim\n    XYZ100 = np.einsum(\"...ij,...j->...i\", sRGB1_to_XYZ100_matrix, sRGB1_linear)\n    XYZ100 *= 100\n    return XYZ100\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42502
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID (LIT ,ID ,ID )\n    ID *=LIT \n    return ID \n",
        "wrong_code": "\ndef (ID ):\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID (LIT ,ID ,ID )\n    ID *=LIT \n    return ID \n"
    },
    {
        "code": "\ndef test_sRGB1_to_sRGB1_linear():\n    from .gold_values import sRGB1_sRGB1_linear_gold\n    check_conversion(sRGB1_to_sRGB1_linear, sRGB1_linear_to_sRGB1,\n                     sRGB1_sRGB1_linear_gold,\n                     a_max=1, b_max=1)\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42503
        },
        "correct_code": "\ndef ID ():\n    from .ID import ID \n    ID (ID ,ID ,\n    ID ,\n    ID =LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID ():\n    from .ID import await \n    ID (ID ,ID ,\n    ID ,\n    ID =LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_sRGB1_linear_to_XYZ100():\n    from .gold_values import sRGB1_linear_XYZ100_gold\n    check_conversion(sRGB1_linear_to_XYZ100, XYZ100_to_sRGB1_linear,\n                     sRGB1_linear_XYZ100_gold,\n                     a_max=1, b_max=100)\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 42504
        },
        "correct_code": "\ndef ID ():\n    from .ID import ID \n    ID (ID ,ID ,\n    ID ,\n    ID =LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID ():\n    from .ID import ID \n    ID (ID ,ID ,\n    ID nonlocal ,\n    ID =LIT ,ID =LIT )\n"
    },
    {
        "code": "\n################################################################\n# XYZ <-> xyY\n################################################################\n\n# These functions work identically for both the 0-100 and 0-1 versions of\n# XYZ/xyY.\ndef XYZ_to_xyY(XYZ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42505
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n]#COMMENT\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef xyY_to_XYZ(xyY):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 42506
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    None pass \n"
    },
    {
        "code": "\ndef test_XYZ_to_xyY():\n\n    check_conversion(XYZ_to_xyY, xyY_to_XYZ,\n                     _XYZ1_to_xyY1_test_vectors, b_max=[1, 1, 1])\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42507
        },
        "correct_code": "\ndef ID ():\n\n    ID (ID ,ID ,\n    ID ,ID =[LIT ,LIT ,LIT ])\n",
        "wrong_code": "\ndef ID (:\n\n    ID (ID ,ID ,\n    ID ,ID =[LIT ,LIT ,LIT ])\n"
    },
    {
        "code": "\n################################################################\n# XYZ100 <-> CIEL*a*b*\n################################################################\n\n# https://en.wikipedia.org/wiki/Lab_color_space#CIELAB-CIEXYZ_conversions\ndef _f(t):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42508
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\ndef ID (ID ):.    pass \n"
    },
    {
        "code": "\ndef XYZ100_to_CIELab(XYZ100, XYZ100_w):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 42509
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n=    pass \n"
    },
    {
        "code": "\ndef _finv(t):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42510
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID assert (ID ):\n    pass \n"
    },
    {
        "code": "\ndef CIELab_to_XYZ100(CIELab, XYZ100_w):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42511
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    pass \n"
    },
    {
        "code": "\ndef test_XYZ100_to_CIELab():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42512
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID async ):\n    pass \n"
    },
    {
        "code": "\n################################################################\n# CIELab <-> CIELCh\n################################################################\n\ndef CIELab_to_CIELCh(CIELab):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 42513
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n    if "
    },
    {
        "code": "\ndef CIELCh_to_CIELab(CIELCh):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/njsmith/colorspacious/colorspacious/basics.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42514
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass /"
    },
    {
        "code": "\n# Init, teardown\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    session.remove()\n",
        "metadata": {
            "file": "py150_files/data/nkuttler/flaskwallet/main.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 42515
        },
        "correct_code": "\n#COMMENT\n\n@ID .ID \ndef ID (ID =ID ):\n    ID .ID ()\n",
        "wrong_code": "\n#COMMENT\n\nexcept @ID .ID \ndef ID (ID =ID ):\n    ID .ID ()\n"
    },
    {
        "code": "\n\n# Setting up our users\n@when('I click on the connect button of the second user')\ndef impl(context):\n    context.browser.find_by_css('.connect-btn').click()\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/bdd/features/steps/connect.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 42516
        },
        "correct_code": "\n\n#COMMENT\n\n@ID (LIT )\ndef ID (ID ):\n    ID .ID .ID (LIT ).ID ()\n",
        "wrong_code": "\n\n#COMMENT\n\n@ID (LIT /)\ndef ID (ID ):\n    ID .ID .ID (LIT ).ID ()\n"
    },
    {
        "code": "\n\n@then('I will be redirected to the connect page')\ndef impl(context):\n    assert 'Contact Another User' in context.browser.title\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/bdd/features/steps/connect.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42517
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ):\n    assert LIT in ID .ID .ID \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID )==\n    assert LIT in ID .ID .ID \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42518
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_inactive_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42519
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):while     pass \n"
    },
    {
        "code": "\ndef test_reactivated_account_token_is_reset(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42520
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )assert :\n    pass \n"
    },
    {
        "code": "\ndef test_reactivation_email_sent_to_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42521
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nimport "
    },
    {
        "code": "\ndef test_get_user(self):\n    user = get_user('my.user@test.test')\n\n    self.assertEqual(user, self.standard_user)\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42522
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (LIT )\n\n    ID .ID (ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (LIT )\n\n    ID pass ID (ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_unregistered_email(self):\n    \"\"\"\n        Test that an email not registered to another user is returned as True.\n        i.e. It is available for another user to use.\n        \"\"\"\n    unregistered = validate_email_availability(\n        'unregistered.user@test.test')\n    self.assertTrue(unregistered)\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42523
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (\n    LIT )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (\n    LIT )\n    ID .ID (ID )while "
    },
    {
        "code": "\ndef test_registered_email(self):\n    \"\"\"\n        Test that an email registered to another user is returned as False.\n        i.e. It is NOT available for another user to use.\n        \"\"\"\n    with self.assertRaises(ValidationError):\n        validate_email_availability('my.user@test.test')\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/accounts/tests/test_utils.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42524
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID (LIT )\n",
        "wrong_code": "\ndef ID (ID )class :\n    LIT \n    with ID .ID (ID ):\n        ID (LIT )\n"
    },
    {
        "code": "\ndef test_can_log_moderation_event(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/moderation/tests/test_utils.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42525
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID None (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_date_limits_with_one_date(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/moderation/tests/test_utils.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42526
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "def def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_date_limits_with_two_dates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/moderation/tests/test_utils.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42527
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef continue ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_date_limits_with_non_UTC_timezone(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlhkabu/connect/connect/moderation/tests/test_utils.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42528
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nor ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef install():\n    \"\"\"\n        Install this reactor.\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/application/reactors.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42529
        },
        "correct_code": "\ndef ID ():\n    LIT \n",
        "wrong_code": "\ndef ID (:\n    LIT \n"
    },
    {
        "code": "\n\ndef __init__(self, shortName, moduleName, description):\n    self.shortName = shortName\n    self.moduleName = moduleName\n    self.description = description\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/application/reactors.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42530
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ,ID ):    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\n\ndef install(self):\n    namedAny(self.moduleName).install()\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/application/reactors.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42531
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID (ID .ID ).ID ()\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID (ID .[).ID ()\n"
    },
    {
        "code": "\n\n\ndef getReactorTypes():\n    \"\"\"\n    Return an iterator of L{IReactorInstaller} plugins.\n    \"\"\"\n    return getPlugins(IReactorInstaller)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/application/reactors.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42532
        },
        "correct_code": "\n\n\ndef ID ():\n    LIT \n    return ID (ID )\n",
        "wrong_code": "\n\n\ndef ID (global :\n    LIT \n    return ID (ID )\n"
    },
    {
        "code": "\n\n\ndef installReactor(shortName):\n    \"\"\"\n    Install the reactor with the given C{shortName} attribute.\n\n    @raise NoSuchReactor: If no reactor is found with a matching C{shortName}.\n\n    @raise: anything that the specified reactor can raise when installed.\n    \"\"\"\n    for installer in getReactorTypes():\n        if installer.shortName == shortName:\n            return installer.install()\n    raise NoSuchReactor(shortName)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/application/reactors.py",
            "fix_location": 94,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42533
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    LIT \n    for ID in ID ():\n        if ID .ID ==ID :\n            return ID .ID ()\n    raise ID (ID )\n",
        "wrong_code": "\n\n\ndef ID (ID ):\n    LIT \n    for ID in ID ():\n        if ID .ID ==ID :\n            return ID finally ID ()\n    raise ID (ID )\n"
    },
    {
        "code": "\ndef test_lookup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 42534
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\n\ndef test_constructorExpires(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 42535
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    not \n"
    },
    {
        "code": "\ndef cbLookup(result):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42536
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID pass (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_normalLookup(self):\n\n    def cbLookup(result):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 42537
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n    def ID (ID )else :\n        pass \n"
    },
    {
        "code": "\n\ndef test_cachedResultExpires(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42538
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass raise "
    },
    {
        "code": "\n\ndef test_expiredTTLLookup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/names/test/test_cache.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42539
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef makeConnection(self, transport):\n    protocol.Protocol.makeConnection(self, transport)\n    self._sful_data = self.getInitialState(), StringIO(), 0\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/protocols/stateful.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 42540
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID ,ID )\n    ID .ID =ID .ID (),ID (),LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID ,as ID )\n    ID .ID =ID .ID (),ID (),LIT \n"
    },
    {
        "code": "\ndef getInitialState(self):\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/protocols/stateful.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42541
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID \n",
        "wrong_code": "\ndef ID (ID ):\n/    raise ID \n"
    },
    {
        "code": "\ndef _isPythonIdentifier(string):\n    \"\"\"\n    cheezy fake test for proper identifier-ness.\n\n    @param string: a str which might or might not be a valid python identifier.\n\n    @return: True or False\n    \"\"\"\n    return (' ' not in string and\n            '.' not in string and\n            '-' not in string)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "and",
            "id": 42542
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return (LIT not in ID and \n    LIT not in ID and \n    LIT not in ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return (LIT not in ID \n    LIT not in ID and \n    LIT not in ID )\n"
    },
    {
        "code": "\n\n\ndef _isPackagePath(fpath):\n    # Determine if a FilePath-like object is a Python package.  TODO: deal with\n    # __init__module.(so|dll|pyd)?\n    extless = fpath.splitext()[0]\n    basend = splitpath(extless)[1]\n    return basend == \"__init__\"\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 95,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42543
        },
        "correct_code": "\n\n\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID ()[LIT ]\n    ID =ID (ID )[LIT ]\n    return ID ==LIT \n",
        "wrong_code": "\n\n\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID ()[LIT ]\n    ID =ID (ID )[LIT ]\n    return !==LIT \n"
    },
    {
        "code": "\ndef walkModules(self, importPackages=False):\n    yield self\n    for package in self.iterModules():\n        for module in package.walkModules(importPackages=importPackages):\n            yield module\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 107,
            "fix_type": "delete",
            "id": 42544
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    yield ID \n    for ID in ID .ID ():\n        for ID in ID .ID (ID =ID ):\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    yield ID \n    for ID in ID .ID ():\n        for ID in ID .ID (ID =ID ):\n        :yield ID \n"
    },
    {
        "code": "\ndef _subModuleName(self, mn):\n    \"\"\"\n        This is a hook to provide packages with the ability to specify their names\n        as a prefix to submodules here.\n        \"\"\"\n    return mn\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42545
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID nonlocal "
    },
    {
        "code": "\ndef _packagePaths(self):\n    \"\"\"\n        Implement in subclasses to specify where to look for modules.\n\n        @return: iterable of FilePath-like objects.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42546
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef await (ID ):\n    LIT \n    raise ID ()\n"
    },
    {
        "code": "\ndef _getEntry(self):\n    \"\"\"\n        Implement in subclasses to specify what path entry submodules will come\n        from.\n\n        @return: a PathEntry instance.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 42547
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    raise for ID ()\n"
    },
    {
        "code": "\n\ndef __getitem__(self, modname):\n    for module in self.iterModules():\n        if module.name == self._subModuleName(modname):\n            pass\n    raise KeyError(modname)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42548
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if ID .ID ==ID .ID (ID ):\n            pass \n    raise ID (ID )\n",
        "wrong_code": "\n\nID (ID ,ID ):\n    for ID in ID .ID ():\n        if ID .ID ==ID .ID (ID ):\n            pass \n    raise ID (ID )\n"
    },
    {
        "code": "\ndef __iter__(self):\n    \"\"\"\n        Implemented to raise NotImplementedError for clarity, so that attempting to\n        loop over this object won't call __getitem__.\n\n        Note: in the future there might be some sensible default for iteration,\n        like 'walkEverything', so this is deliberately untested and undefined\n        behavior.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42549
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "del def ID (ID ):\n    LIT \n    raise ID ()\n"
    },
    {
        "code": "def __init__(self, name, onObject, loaded, pythonValue):\n    \"\"\"\n        Create a PythonAttribute.  This is a private constructor.  Do not construct\n        me directly, use PythonModule.iterAttributes.\n\n        @param name: the FQPN\n        @param onObject: see ivar\n        @param loaded: always True, for now\n        @param pythonValue: the value of the attribute we're pointing to.\n        \"\"\"\n    self.name = name\n    self.onObject = onObject\n    self._loaded = loaded\n    self.pythonValue = pythonValue\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 42550
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =as ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return 'PythonAttribute<%r>'%(self.name,)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 42551
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,)\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,)\n]"
    },
    {
        "code": "\ndef isLoaded(self):\n    \"\"\"\n        Return a boolean describing whether the attribute this describes has\n        actually been loaded into memory by importing its module.\n\n        Note: this currently always returns true; there is no Python parser\n        support in this module yet.\n        \"\"\"\n    return self._loaded\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 42552
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID \ntry "
    },
    {
        "code": "\ndef load(self, default=_nothing):\n    \"\"\"\n        Load the value associated with this attribute.\n\n        @return: an arbitrary Python object, or 'default' if there is an error\n        loading it.\n        \"\"\"\n    return self.pythonValue\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 42553
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):ID \n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\ndef iterAttributes(self):\n    for name, val in inspect.getmembers(self.load()):\n        yield PythonAttribute(self.name+'.'+name, self, True, val)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42554
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID (ID .ID ()):\n        yield ID (ID .ID +LIT +ID ,ID ,LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID (ID .ID ()):\n        yield ID yield ID .ID +LIT +ID ,ID ,LIT ,ID )\n"
    },
    {
        "code": "\ndef __init__(self, name, filePath, pathEntry):\n    self.parentPath = filePath.parent()\n    self.pathEntry = pathEntry\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42555
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID \n",
        "wrong_code": "\ndef .(ID ,ID ,ID ,ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _getEntry(self):\n    return self.pathEntry\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42556
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .elif \n"
    },
    {
        "code": "\ndef __repr__(self):\n    \"\"\"\n        Return a string representation including the module name.\n        \"\"\"\n    return 'PythonModule<%r>' % (self.name,)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42557
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT %(ID .ID ,)\n",
        "wrong_code": "\ndef ID \nID ):\n    LIT \n    return LIT %(ID .ID ,)\n"
    },
    {
        "code": "\n\ndef isLoaded(self):\n    \"\"\"\n        Determine if the module is loaded into sys.modules.\n\n        @return: a boolean: true if loaded, false if not.\n        \"\"\"\n    return self.pathEntry.pythonPath.moduleDict.get(self.name) is not None\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42558
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID .ID .ID .ID (ID .ID )is not ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    return .ID .ID .ID .ID (ID .ID )is not ID \n"
    },
    {
        "code": "\n\ndef iterAttributes(self):\n    if not self.isLoaded():\n        pass\n    for name, val in inspect.getmembers(self.load()):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 88,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42559
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID .ID ():\n        pass \n    for ID ,ID in ID .ID (ID .ID ()):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if not ID .ID ():\n        pass \n    for ID ,ID in ID .ID (ID .ID ())\n        pass \n"
    },
    {
        "code": "\ndef isPackage(self):\n    \"\"\"\n        Returns true if this module is also a package, and might yield something\n        from iterModules.\n        \"\"\"\n    return _isPackagePath(self.filePath)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42560
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):or     LIT \n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef load(self, default=_nothing):\n    try:\n        pass\n    except:                 # this needs more thought...\n        if default is not _nothing:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 42561
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    try :\n        pass \n    except :#COMMENT\n\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ID =ID ):\n    try :\n        pass \n    except :#COMMENT\n\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    \"\"\"\n        PythonModules with the same name are equal.\n        \"\"\"\n    if not isinstance(other, PythonModule):\n        return False\n    return other.name == self.name\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42562
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID ==ID .ID \n",
        "wrong_code": "\ndef -ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "\ndef __ne__(self, other):\n    \"\"\"\n        PythonModules with different names are not equal.\n        \"\"\"\n    if not isinstance(other, PythonModule):\n        return True\n    return other.name != self.name\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 105,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42563
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID !=ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID ):\n        return LIT \n    return ID .ID !=ID .ID \n    del "
    },
    {
        "code": "\ndef walkModules(self, importPackages=False):\n    if importPackages and self.isPackage():\n        self.load()\n    return super(PythonModule, self).walkModules(importPackages=importPackages)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 104,
            "fix_type": "delete",
            "id": 42564
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    if ID and ID .ID ():\n        ID .ID ()\n    return ID (ID ,ID ).ID (ID =ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    if ID and ID .ID ():\n        ID .ID ()\n    return ID (ID ,ID ).ID (ID =ID )\n-"
    },
    {
        "code": "\ndef _subModuleName(self, mn):\n    \"\"\"\n        submodules of this module are prefixed with our name.\n        \"\"\"\n    return self.name + '.' + mn\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 42565
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID +LIT +ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return *ID .ID +LIT +ID \n"
    },
    {
        "code": "def __init__(self, filePath, pythonPath):\n    \"\"\"\n        Create a PathEntry.  This is a private constructor.\n        \"\"\"\n    self.filePath = filePath\n    self.pythonPath = pythonPath\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 42566
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,elif ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _getEntry(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42567
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID )nonlocal :\n    return ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return 'PathEntry<%r>' % (self.filePath,)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42568
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,)\n",
        "wrong_code": "\ndef ID (ID not :\n    return LIT %(ID .ID ,)\n"
    },
    {
        "code": "\ndef _packagePaths(self):\n    yield self.filePath\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42569
        },
        "correct_code": "\ndef ID (ID ):\n    yield ID .ID \n",
        "wrong_code": "\ndef ID (ID )continue :\n    yield ID .ID \n"
    },
    {
        "code": "def mapPath(self, pathLikeString):\n    \"\"\"\n        Return a FilePath-like object.\n\n        @param pathLikeString: a path-like string, like one that might be\n        passed to an import hook.\n\n        @return: a L{FilePath}, or something like it (currently only a\n        L{ZipPath}, but more might be added later).\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 42570
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    LIT \n!="
    },
    {
        "code": "def mapPath(self, fsPathString):\n    return FilePath(fsPathString)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 42571
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID (import ID )\n"
    },
    {
        "code": "def __init__(self, importer):\n    self.importer = importer\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42572
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =\n"
    },
    {
        "code": "\ndef mapPath(self, fsPathString):\n    if myPath == itsPath:\n        pass\n    for seg in segs:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 42573
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID ==ID :\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID ==ID :\n        pass \n    for ID in ID ::\n        pass \n"
    },
    {
        "code": "\ndef _defaultSysPathFactory():\n    \"\"\"\n    Provide the default behavior of PythonPath's sys.path factory, which is to\n    return the current value of sys.path.\n\n    @return: L{sys.path}\n    \"\"\"\n    return sys.path\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42574
        },
        "correct_code": "\ndef ID ():\n    LIT \n    return ID .ID \n",
        "wrong_code": "\ndef ID ():\n    LIT \n    return ID if ID \n"
    },
    {
        "code": "\n\ndef _getSysPath(self):\n    \"\"\"\n        Retrieve the current value of the module search path list.\n        \"\"\"\n    return self._sysPathFactory()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42575
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID .ID ()\n",
        "wrong_code": "\n\ndef ID (ID :\n    LIT \n    return ID .ID ()\n"
    },
    {
        "code": "\ndef iterEntries(self):\n    \"\"\"\n        Iterate the entries on my sysPath.\n\n        @return: a generator yielding PathEntry objects\n        \"\"\"\n    for pathName in self.sysPath:\n        fp = self._smartPath(pathName)\n        yield PathEntry(fp, self)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 42576
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID :\n        ID =ID .ID (ID )\n        yield ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID is :\n        ID =ID .ID (ID )\n        yield ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef __repr__(self):\n    \"\"\"\n        Display my sysPath and moduleDict in a string representation.\n        \"\"\"\n    return \"PythonPath(%r,%r)\" % (self.sysPath, self.moduleDict)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42577
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\n\ndef ID async (ID ):\n    LIT \n    return LIT %(ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef iterModules(self):\n    \"\"\"\n        Yield all top-level modules on my sysPath.\n        \"\"\"\n    for entry in self.iterEntries():\n        for module in entry.iterModules():\n            yield module\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 108,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42578
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID ():\n        for ID in ID .ID ():\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID ():\n        for ID in ID .ID ():\n            yield ID \n        from "
    },
    {
        "code": "\ndef walkModules(self, importPackages=False):\n    \"\"\"\n        Similar to L{iterModules}, this yields every module on the path, then every\n        submodule in each package or entry.\n        \"\"\"\n    for package in self.iterModules():\n        for module in package.walkModules(importPackages=False):\n            yield module\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42579
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    for ID in ID .ID ():\n        for ID in ID .ID (ID =LIT ):\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    LIT \n    for ID in ID .ID ():\n        for ID in try .ID (ID =LIT ):\n            yield ID \n"
    },
    {
        "code": "\ndef walkModules(importPackages=False):\n    \"\"\"\n    Deeply iterate all modules on the global python path.\n\n    @param importPackages: Import packages as they are seen.\n    \"\"\"\n    return theSystemPath.walkModules(importPackages=importPackages)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42580
        },
        "correct_code": "\ndef ID (ID =LIT ):\n    LIT \n    return ID .ID (ID =ID )\n",
        "wrong_code": "\ndef ID class (ID =LIT ):\n    LIT \n    return ID .ID (ID =ID )\n"
    },
    {
        "code": "\ndef iterModules():\n    \"\"\"\n    Iterate all modules and top-level packages on the global Python path, but\n    do not descend into packages.\n\n    @param importPackages: Import packages as they are seen.\n    \"\"\"\n    return theSystemPath.iterModules()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42581
        },
        "correct_code": "\ndef ID ():\n    LIT \n    return ID .ID ()\n",
        "wrong_code": "\nID ():\n    LIT \n    return ID .ID ()\n"
    },
    {
        "code": "\ndef getModule(moduleName):\n    \"\"\"\n    Retrieve a module from the system path.\n    \"\"\"\n    return theSystemPath[moduleName]\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/python/modules.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42582
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID is ID ]\n"
    },
    {
        "code": "\ndef makeService(config):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/tap/telnet.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42583
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (/ID ):\n    pass \n"
    },
    {
        "code": "\ndef _toModuleName(self, filename):\n    if segs[-1] == '__init__':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "-",
            "id": 42584
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID [-LIT ]==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID [,LIT ]==LIT :\n        pass \n"
    },
    {
        "code": "\ndef getModules(self):\n    return map(self._toModuleName, zip(*self.files)[0])\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42585
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ,ID (*ID .ID )[LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    return and (ID .ID ,ID (*ID .ID )[LIT ])\n"
    },
    {
        "code": "\ndef cleanUpModules(self):\n    for module in modules:\n        try:\n            pass\n        except KeyError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42586
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "(\ndef ID (ID ):\n    for ID in ID :\n        try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "\ndef createFiles(self, files, parentDir='.'):\n    for filename, contents in self.files:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42587
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    for ID ,ID in ID .ID :\n        pass \n",
        "wrong_code": "+\ndef ID (ID ,ID ,ID =LIT ):\n    for ID ,ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef _createDirectory(self, filename):\n    directory = os.path.dirname(filename)\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 42588
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID )\n    if not ID .ID .ID (ID ):\n        ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ./ID (ID )\n    if not ID .ID .ID (ID ):\n        ID .ID (ID )\n"
    },
    {
        "code": "\ndef setUp(self, parentDir=None):\n    if parentDir is None:\n        parentDir = self.mktemp()\n    self.parent = parentDir\n    self.createFiles(self.files, parentDir)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 102,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42589
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        ID =ID .ID ()\n    ID .ID =ID \n    ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :\n        ID =ID .ID ()\n    ID .ID =ID \n    ID .ID (ID .ID ,ID +\n"
    },
    {
        "code": "\ndef tearDown(self):\n    self.cleanUpModules()\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42590
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID !=)\n"
    },
    {
        "code": "def setUp(self, parent=None):\n    if parent is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 42591
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "def ID (ID ,ID =ID ):\n    if ID is ID :\n    [pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    PackageTest.tearDown(self)\n    self.mangleSysPath(self.oldPath)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 42592
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID )\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID )\n    ID .ID (ID ID )\n"
    },
    {
        "code": "\ndef mangleSysPath(self, pathVar):\n    sys.path[:] = pathVar\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/trial/test/packages.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42593
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID [:]=ID \n",
        "wrong_code": "==def ID (ID ,ID ):\n    ID .ID [:]=ID \n"
    },
    {
        "code": "\ndef __init__(self, algorithm, authenticationRealm):\n    \"\"\"\n        Create the digest credential factory that this object wraps.\n        \"\"\"\n    self.digest = credentials.DigestCredentialFactory(algorithm,\n                                                      authenticationRealm)\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/_auth/digest.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 42594
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID =ID .ID (ID ,\n    ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID .ID async =ID .ID (ID ,\n    ID )\n"
    },
    {
        "code": "\n\ndef getChallenge(self, request):\n    \"\"\"\n        Generate the challenge for use in the WWW-Authenticate header\n\n        @param request: The L{IRequest} to with access was denied and for the\n            response to which this challenge is being generated.\n\n        @return: The C{dict} that can be used to generate a WWW-Authenticate\n            header.\n        \"\"\"\n    return self.digest.getChallenge(request.getClientIP())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/_auth/digest.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 42595
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID (ID .ID ())\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    return ID .elif ID .ID (ID .ID ())\n"
    },
    {
        "code": "\n\ndef decode(self, response, request):\n    \"\"\"\n        Create a L{twisted.cred.digest.DigestedCredentials} object from the\n        given response and request.\n\n        @see: L{ICredentialFactory.decode}\n        \"\"\"\n    return self.digest.decode(response,\n                              request.method,\n                              request.getClientIP())\n",
        "metadata": {
            "file": "py150_files/data/kuri65536/python-for-android/python-modules/twisted/twisted/web/_auth/digest.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42596
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID .ID .ID (ID ,\n    ID .ID ,\n    ID .ID ())\n",
        "wrong_code": "is \ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID .ID .ID (ID ,\n    ID .ID ,\n    ID .ID ())\n"
    },
    {
        "code": "def setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42597
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "continue def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_staticMethods(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42598
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef return (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_locationFooBar(self):\n    \"\"\"\n        Test matching foo with child bar.\n        \"\"\"\n    xp = XPathQuery(\"/foo/bar\")\n    self.assertEqual(xp.matches(self.e), 1)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42599
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .(ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_locationFooBarFoo(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42600
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "[\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_locationNoBar3(self):\n    \"\"\"\n        Test not finding bar3.\n        \"\"\"\n    xp = XPathQuery(\"/foo/bar3\")\n    self.assertEqual(xp.matches(self.e), 0)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42601
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID :\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_locationAllChilds(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42602
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass with "
    },
    {
        "code": "\ndef test_attribute(self):\n    \"\"\"\n        Test matching foo with attribute.\n        \"\"\"\n    xp = XPathQuery(\"/foo[@attrib1]\")\n    self.assertEqual(xp.matches(self.e), True)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 75,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42603
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT \n"
    },
    {
        "code": "\ndef test_attributeWithValueAny(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42604
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "*\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_position(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42605
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):pass \n    pass \n"
    },
    {
        "code": "\ndef test_namespaceFound(self):\n    \"\"\"\n        Test matching node with namespace.\n        \"\"\"\n    xp = XPathQuery(\"/foo[@xmlns='testns']/bar\")\n    self.assertEqual(xp.matches(self.e), 1)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42606
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT nonlocal ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_namespaceNotFound(self):\n    \"\"\"\n        Test not matching node with wrong namespace.\n        \"\"\"\n    xp = XPathQuery(\"/foo[@xmlns='badns']/bar2\")\n    self.assertEqual(xp.matches(self.e), 0)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42607
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_attributeWithValue(self):\n    \"\"\"\n        Test matching node with attribute having value.\n        \"\"\"\n    xp = XPathQuery(\"/foo[@attrib1='value1']\")\n    self.assertEqual(xp.matches(self.e), 1)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42608
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef as ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_queryForString(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42609
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_queryForNodes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42610
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )except \n    pass \n"
    },
    {
        "code": "\ndef test_textCondition(self):\n    \"\"\"\n        Test matching a node with given text.\n        \"\"\"\n    xp = XPathQuery(\"/foo[text() = 'somecontent']\")\n    self.assertEqual(xp.matches(self.e), True)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42611
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID for ID ),LIT )\n"
    },
    {
        "code": "\ndef test_textNotOperator(self):\n    \"\"\"\n        Test for not operator.\n        \"\"\"\n    xp = XPathQuery(\"/foo[not(@nosuchattrib)]\")\n    self.assertEqual(xp.matches(self.e), True)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42612
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):    LIT \n    ID =ID (LIT )\n    ID .ID (ID .ID (ID .ID ),LIT )\n"
    },
    {
        "code": "\ndef test_anyLocationAndText(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42613
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_anyLocation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 42614
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass raise \n"
    },
    {
        "code": "\ndef test_anyLocationQueryForString(self):\n    \"\"\"\n        L{XPathQuery.queryForString} should raise a L{NotImplementedError}\n        for any location.\n        \"\"\"\n    xp = XPathQuery(\"//bar\")\n    self.assertRaises(NotImplementedError, xp.queryForString, None)\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 42615
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .ID (ID ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID (LIT )\n    ID .)ID (ID ,ID .ID ,ID )\n"
    },
    {
        "code": "\ndef test_andOperator(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 42616
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID class ):\n    pass \n"
    },
    {
        "code": "\ndef test_orOperator(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42617
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (try ):\n    pass \n"
    },
    {
        "code": "\ndef test_booleanOperatorsParens(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42618
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_booleanOperatorsNoParens(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/twisted/words/test/test_xpath.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 42619
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    [pass \n"
    },
    {
        "code": "\n\ndef ro(object):\n    \"\"\"Compute a \"resolution order\" for an object\n    \"\"\"\n    return mergeOrderings([_flatten(object)])\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/zope/interface/ro.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42620
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    return ID ([ID (ID )])\n",
        "wrong_code": "\n\ndef ID (ID ):lambda     LIT \n    return ID ([ID (ID )])\n"
    },
    {
        "code": "\ndef _flatten(ob):\n    for ob in iter(result):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlloyd/SubliminalCollaborator/libs/zope/interface/ro.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 42621
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID (ID ):\n        pass as \n"
    },
    {
        "code": "###\n\ndef _datetime_mtime(path):\n    return datetime.fromtimestamp(getmtime(path))\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42622
        },
        "correct_code": "#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID (ID (ID ))\n",
        "wrong_code": "#COMMENT\n\n\ndef ID (ID ):\n    return ID .ID (ID ID ))\n"
    },
    {
        "code": "\ndef _safe_dirname(path):\n    # This handles the case of a trailing slash for the dir path\n    return basename(path) or dirname(dirname(path))\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42623
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID (ID )or ID (ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID ID )or ID (ID (ID ))\n"
    },
    {
        "code": "\ndef _youngest_backup(dir):\n    if not backups:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42624
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if not in :\n        pass \n"
    },
    {
        "code": "\ndef _backups(dir):\n    return len([f for f in listdir(dir)\n        if f.endswith('.' + TAR_GZ_SUFFIX)])\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42625
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ([ID for ID in ID (ID )\n    if ID .ID (LIT +ID )])\n",
        "wrong_code": "\ndef ID (ID while :\n    return ID ([ID for ID in ID (ID )\n    if ID .ID (LIT +ID )])\n"
    },
    {
        "code": "\ndef tearDown(self):\n    rmtree(self.tmp_dir)\n    rmtree(self.data_dir)\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42626
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID .ID )\n    ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID .ID except \n    ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_empty(self):\n    backup(backup_dir=self.tmp_dir, data_dir=self.data_dir)\n    self.assertTrue(_backups(self.tmp_dir),\n            'no back-up was created upon empty backup dir')\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42627
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID =ID .ID ,ID =ID .ID )\n    ID .ID (ID (ID .ID ),\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID =ID .ID ,ID =ID .ID )\n    ID .ID (ID (ID .]),\n    LIT )\n"
    },
    {
        "code": "\ndef test_delay(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42628
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ((ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_no_change(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/server/src/backup.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42629
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nawait ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _argparser():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/tools/colourise.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 42630
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n\n"
    },
    {
        "code": "\ndef main(args):\n\n    for lbl in lbls:\n\n        if argp.visual_conf:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/tools/colourise.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 42631
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID :\n\n        if ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    for ID in ID :\n\n        if lambda ID .ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef _text_by_offsets_gen(text, offsets):\n    for start, end in offsets:\n        yield text[start:end]\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/tools/sentencesplit.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42632
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID :\n        yield ID [ID :ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID :\n        yield ID [ID ID ]\n"
    },
    {
        "code": "\ndef _normspace(s):\n    import re\n    return re.sub(r'\\s', ' ', s)\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/tools/sentencesplit.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42633
        },
        "correct_code": "\ndef ID (ID ):\n    import ID \n    return ID .ID (LIT ,LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ):finally \n    import ID \n    return ID .ID (LIT ,LIT ,ID )\n"
    },
    {
        "code": "\ndef main(argv):\n    while True:        \n        if len(text) == 0:\n            pass\n        sys.stdout.write(sentencebreaks_to_newlines(text))\n",
        "metadata": {
            "file": "py150_files/data/nlplab/brat/tools/sentencesplit.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 42634
        },
        "correct_code": "\ndef ID (ID ):\n    while LIT :\n        if ID (ID )==LIT :\n            pass \n        ID .ID .ID (ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    while LIT :\n        if ID (ID )==LIT :\n            pass \n        ID .ID .)ID (ID (ID ))\n"
    },
    {
        "code": "\ndef zen_chat():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/chat/zen.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42635
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass \n."
    },
    {
        "code": "\ndef demo():\n    zen_chat()\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/chat/zen.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42636
        },
        "correct_code": "\ndef ID ():\n    ID ()\n",
        "wrong_code": "\nID ():\n    ID ()\n"
    },
    {
        "code": "def __init__(self, normalise=False, svd_dimensions=None):\n    \"\"\"\n        :param normalise:       should vectors be normalised to length 1\n        :type normalise:        boolean\n        :param svd_dimensions:  number of dimensions to use in reducing vector\n                                dimensionsionality with SVD\n        :type svd_dimensions:   int\n        \"\"\"\n    self._Tt = None\n    self._should_normalise = normalise\n    self._svd_dimensions = svd_dimensions\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42637
        },
        "correct_code": "def ID (ID ,ID =LIT ,ID =ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID LIT ,ID =ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef cluster_vectorspace(self, vectors, trace):\n    \"\"\"\n        Finds the clusters using the given set of vectors.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42638
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef try (ID ,ID ,ID ):\n    LIT \n    raise ID ()\n"
    },
    {
        "code": "\ndef classify(self, vector):\n    if self._should_normalise:\n        pass\n    if self._Tt is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42639
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef (ID ,ID ):\n    if ID .ID :\n        pass \n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef classify_vectorspace(self, vector):\n    \"\"\"\n        Returns the index of the appropriate cluster for the vector.\n        \"\"\"\n    raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42640
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID or )\n"
    },
    {
        "code": "\ndef likelihood(self, vector, label):\n    if self._should_normalise:\n        pass\n    if self._Tt is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42641
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef likelihood_vectorspace(self, vector, cluster):\n    \"\"\"\n        Returns the likelihood of the vector belonging to the cluster.\n        \"\"\"\n    predicted = self.classify_vectorspace(vector)\n    return (1.0 if cluster == predicted else 0.0)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42642
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =ID .ID (ID )\n    return (LIT if ID ==ID else LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =ID .((ID )\n    return (LIT if ID ==ID else LIT )\n"
    },
    {
        "code": "\ndef vector(self, vector):\n    if self._should_normalise:\n        pass\n    if self._Tt is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 42643
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .with ID :\n        pass \n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef _normalise(self, vector):\n    \"\"\"\n        Normalises the vector to unit length.\n        \"\"\"\n    return vector / sqrt(numpy.dot(vector, vector))\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42644
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID /ID (ID .ID (ID ,ID ))\n",
        "wrong_code": "\nID (ID ,ID ):\n    LIT \n    return ID /ID (ID .ID (ID ,ID ))\n"
    },
    {
        "code": "\ndef euclidean_distance(u, v):\n    \"\"\"\n    Returns the euclidean distance between vectors u and v. This is equivalent\n    to the length of the vector (u - v).\n    \"\"\"\n    diff = u - v\n    return sqrt(numpy.dot(diff, diff))\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 42645
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID -ID \n    return ID (ID .ID (ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID -ID \n    return ID (ID def .ID (ID ,ID ))\n"
    },
    {
        "code": "\ndef cosine_distance(u, v):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42646
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "==\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, value, *children):\n    self._value = value\n    self._children = children\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 42647
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,continue *ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, items=[]):\n    self._original_items = copy.copy(self._items)\n    self._merge = 1\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42648
        },
        "correct_code": "\ndef ID (ID ,ID =[]):\n    ID .ID =ID .ID (ID .ID )\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,=[]):\n    ID .ID =ID .ID (ID .ID )\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef merge(self, *indices):\n    for i in indices[1:]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 42649
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    for ID in ID [LIT :]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,*ID LIT ):\n    for ID in ID [LIT :]:\n        pass \n"
    },
    {
        "code": "\ndef groups(self, n):\n    if len(self._items) > 1:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42650
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n# display functions\ndef format(centre, left=' ', right=' '):\n    return '%s%s%s' % (lhalf*left, centre, right*rhalf)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 42651
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    return LIT %(ID *ID ,ID ,ID *ID )\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    return LIT %(ID *ID ,ID ,is ID *ID )\n"
    },
    {
        "code": "def display(str):\n    stdout.write(str)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42652
        },
        "correct_code": "def ID (ID ):\n    ID .ID (ID )\n",
        "wrong_code": "ID (ID ):\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    if len(self._items) > 1:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/cluster/util.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42653
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "is \ndef ID (ID ):\n    if ID (ID .ID )>LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef raw(self, fileids=None):\n    if fileids is None: fileids = self._fileids\n    elif isinstance(fileids, compat.string_types): fileids = [fileids]\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42654
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :ID =ID .ID \n    elif ID (ID ,ID .ID ):ID =[ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID is ID :ID =ID .ID \n    elif ID (ID ,ID .ID /:ID =[ID ]\n"
    },
    {
        "code": "\ndef instances(self, baseform=None):\n    if baseform is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42655
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\nID (ID ,ID =ID ):\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef lines(self):\n    \"\"\"\n        :return: a corpus view that acts as a list of strings, one for\n        each line in the predicate-argument annotation file.\n        \"\"\"\n    return StreamBackedCorpusView(self.abspath(self._nomfile),\n                                  read_line_block,\n                                  encoding=self.encoding(self._nomfile))\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 42656
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID (ID .ID ),\n    ID ,\n    ID =ID .ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID (ID .ID ),\n    ID ,global \n    ID =ID .ID (ID .ID ))\n"
    },
    {
        "code": "\ndef nouns(self):\n    \"\"\"\n        :return: a corpus view that acts as a list of all noun lemmas\n        in this corpus (from the nombank.1.0.words file).\n        \"\"\"\n    return StreamBackedCorpusView(self.abspath(self._nounsfile),\n                                  read_line_block,\n                                  encoding=self.encoding(self._nounsfile))\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42657
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID (ID .ID ),\n    ID ,\n    ID =ID .ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n!=    LIT \n    return ID (ID .ID (ID .ID ),\n    ID ,\n    ID =ID .ID (ID .ID ))\n"
    },
    {
        "code": "\ndef __init__(self, fileid, sentnum, wordnum, baseform, sensenumber,\n             predicate, predid, arguments, parse_corpus=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42658
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,\nID ,ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,try ID ,ID ,ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\n@property\ndef roleset(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42659
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    pass \n    is "
    },
    {
        "code": "\ndef __repr__(self):\n    return ('<NombankInstance: %s, sent %s, word %s>' %\n            (self.fileid, self.sentnum, self.wordnum))\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 57,
            "fix_type": "delete",
            "id": 42660
        },
        "correct_code": "\ndef ID (ID ):\n    return (LIT %\n    (ID .ID ,ID .ID ,ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return (LIT %\n    (ID .ID ,ID .ID ,ID LIT .ID ))\n"
    },
    {
        "code": "\ndef __str__(self):\n    for (argloc, argid) in sorted(items):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42661
        },
        "correct_code": "\ndef ID (ID ):\n    for (ID ,ID )in ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):is \n    for (ID ,ID )in ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef _get_tree(self):\n    if self.parse_corpus is None: return None\n    if self.fileid not in self.parse_corpus.fileids(): return None\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42662
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is ID :return ID \n    if ID .ID not in ID .ID .ID ():return ID \n",
        "wrong_code": "\nID (ID ):\n    if ID .ID is ID :return ID \n    if ID .ID not in ID .ID .ID ():return ID \n"
    },
    {
        "code": "def __init__(self):\n    if self.__class__ == NombankPointer:\n        raise NotImplementedError()\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42663
        },
        "correct_code": "def ID (ID ):\n    if ID .ID ==ID :\n        raise ID ()\n",
        "wrong_code": "def ID (ID ):\n    if ID .ID ==ID :\n        raise ID ()\n        ,"
    },
    {
        "code": "def __init__(self, pieces):\n    self.pieces = pieces\n    \"\"\"A list of the pieces that make up this chain.  Elements may\n           be either ``NombankSplitTreePointer`` or\n           ``NombankTreePointer`` pointers.\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42664
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    LIT \n",
        "wrong_code": "def ID (,ID ):\n    ID .ID =ID \n    LIT \n"
    },
    {
        "code": "\ndef __str__(self):\n    return '*'.join('%s' % p for p in self.pieces)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42665
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (LIT %ID for ID in ID .ID )\n",
        "wrong_code": "\ndef ID (ID LIT :\n    return LIT .ID (LIT %ID for ID in ID .ID )\n"
    },
    {
        "code": "def __repr__(self):\n    return '<NombankChainTreePointer: %s>' % self\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 42666
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID \n",
        "wrong_code": "def ID (ID ):\n    return LIT %or ID \n"
    },
    {
        "code": "def select(self, tree):\n    if tree is None: raise ValueError('Parse tree not avaialable')\n    return Tree('*CHAIN*', [p.select(tree) for p in self.pieces])\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42667
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID is ID :raise ID (LIT )\n    return ID (LIT ,[ID .ID (ID )for ID in ID .ID ])\n",
        "wrong_code": "def ID (ID ,ID ):\n    if ID is ID :raise ID (LIT )\n    return ID (LIT ,+ID .ID (ID )for ID in ID .ID ])\n"
    },
    {
        "code": "def __init__(self, pieces):\n    self.pieces = pieces\n    \"\"\"A list of the pieces that make up this chain.  Elements are\n           all ``NombankTreePointer`` pointers.\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 42668
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n    LIT \n",
        "wrong_code": "def ID (ID assert ID ):\n    ID .ID =ID \n    LIT \n"
    },
    {
        "code": "\ndef __str__(self):\n    return ','.join('%s' % p for p in self.pieces)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 42669
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (LIT %ID for ID in ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT .ID (LIT %ID for ID in ID .ID )\n    else "
    },
    {
        "code": "def __repr__(self):\n    return '<NombankSplitTreePointer: %s>' % self\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42670
        },
        "correct_code": "def ID (ID ):\n    return LIT %ID \n",
        "wrong_code": "]ID (ID ):\n    return LIT %ID \n"
    },
    {
        "code": "def select(self, tree):\n    if tree is None: raise ValueError('Parse tree not avaialable')\n    return Tree('*SPLIT*', [p.select(tree) for p in self.pieces])\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 42671
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID is ID :raise ID (LIT )\n    return ID (LIT ,[ID .ID (ID )for ID in ID .ID ])\n",
        "wrong_code": "def ID (ID ,ID ):None \n    if ID is ID :raise ID (LIT )\n    return ID (LIT ,[ID .ID (ID )for ID in ID .ID ])\n"
    },
    {
        "code": "def __init__(self, wordnum, height):\n    self.wordnum = wordnum\n    self.height = height\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42672
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def finally (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return '%s:%s' % (self.wordnum, self.height)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 42673
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID finally ):\n    return LIT %(ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return 'NombankTreePointer(%d, %d)' % (self.wordnum, self.height)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 42674
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT for %(ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    while isinstance(other, (NombankChainTreePointer,\n                             NombankSplitTreePointer)):\n        pass\n\n    if not isinstance(other, NombankTreePointer):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 42675
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while ID (ID ,(ID ,\n    ID )):\n        pass \n\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    while ID (ID ,(ID ,\n    ID )):\n        pass \n\n    elif not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef __ne__(self, other):\n    return not self == other\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42676
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return not ID ==ID \n",
        "wrong_code": "\ndef ID (break ID ,ID ):\n    return not ID ==ID \n"
    },
    {
        "code": "\ndef __lt__(self, other):\n    while isinstance(other, (NombankChainTreePointer,\n                             NombankSplitTreePointer)):\n        pass\n\n    if not isinstance(other, NombankTreePointer):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 51,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42677
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while ID (ID ,(ID ,\n    ID )):\n        pass \n\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    while ID (ID ,(ID ,\n    ID )await :\n        pass \n\n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef select(self, tree):\n    if tree is None: raise ValueError('Parse tree not avaialable')\n    return tree[self.treepos(tree)]\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/reader/nombank.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 42678
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID is ID :raise ID (LIT )\n    return ID [ID .ID (ID )]\n",
        "wrong_code": "\ndef ID (ID ,ID def ):\n    if ID is ID :raise ID (LIT )\n    return ID [ID .ID (ID )]\n"
    },
    {
        "code": "def __init__(self, name, reader_cls, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 42679
        },
        "correct_code": "def ID (ID ,ID ,ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,*ID ,**ID ):\n    elif pass \n"
    },
    {
        "code": "\n# _unload support: assign __dict__ and __class__ back, then do GC.\n# after reassigning __dict__ there shouldn't be any references to\n# corpus data so the memory should be deallocated after gc.collect()\ndef _unload(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 42680
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n["
    },
    {
        "code": "\ndef __getattr__(self, attr):\n\n    # Fix for inspect.isclass under Python 2.6\n    # (see http://bugs.python.org/issue1225107).\n    # Without this fix tests may take extra 1.5GB RAM\n    # because all corpora gets loaded during test collection.\n    if attr == '__bases__':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 42681
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\nfinally #COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '<%s in %r (not loaded yet)>' % (\n        self.__reader_cls.__name__, '.../corpora/'+self.__name)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 42682
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(\n    ID .ID .ID ,LIT +ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return %(\n    ID .ID .ID ,LIT +ID .ID )\n"
    },
    {
        "code": "\ndef _unload(self):\n    # If an exception occures during corpus loading then\n    # '_unload' method may be unattached, so __getattr__ can be called;\n    # we shouldn't trigger corpus loading again in this case.\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42683
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    pass \nas "
    },
    {
        "code": "def meth(self): pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/corpus/util.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 42684
        },
        "correct_code": "def ID (ID ):pass \n",
        "wrong_code": "def if ID (ID ):pass \n"
    },
    {
        "code": "def key(v): return -(ref_fdist[v]+test_fdist[v])\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42685
        },
        "correct_code": "def ID (ID ):return -(ID [ID ]+ID [ID ])\n",
        "wrong_code": "def ID (ID ):return -(ID [ID ]+ID [ID ])assert "
    },
    {
        "code": "\ndef __getitem__(self, li_lj_tuple):\n    i = self._indices[li]\n    j = self._indices[lj]\n    return self._confusion[i][j]\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42686
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID [ID ]\n    ID =ID .ID [ID ]\n    return ID .ID [ID ][ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =await .ID [ID ]\n    ID =ID .ID [ID ]\n    return ID .ID [ID ][ID ]\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '<ConfusionMatrix: %s/%s correct>' % (self._correct,\n                                                 self._total)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42687
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,\n    ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID global ID ,\n    ID .ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.pretty_format()\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42688
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (\n"
    },
    {
        "code": "\ndef key(self):\n    for i in range(len(values)):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42689
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID (ID )):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID (ID (ID ))try \n        pass \n"
    },
    {
        "code": "\ndef demo():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/metrics/confusionmatrix.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42690
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "try def ID ():\n    pass \n"
    },
    {
        "code": "\n# The main part of the stemming algorithm starts here.\n# Note that only lower case sequences are stemmed. Forcing to lower case\n# should be done before stem(...) is called.\n\ndef __init__(self):\n    for key in irregular_forms:\n        for val in irregular_forms[key]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/stem/porter.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 42691
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    for ID in ID :\n        for ID in ID [ID ]:\n            pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    for ID in ID :\n        for ID in ID yield [ID ]:\n            pass \n"
    },
    {
        "code": "\ndef _doublec(self, word):\n    if len(word) < 2:\n        pass\n    if (word[-1] != word[-2]):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/stem/porter.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42692
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )<LIT :\n        pass \n    if (ID [-LIT ]!=ID [-LIT ]):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID !=<LIT :\n        pass \n    if (ID [-LIT ]!=ID [-LIT ]):\n        pass \n"
    },
    {
        "code": "\n## --NLTK--\n## Add a string representation function\ndef __repr__(self):\n    return '<PorterStemmer>'\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/stem/porter.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 42693
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    return LIT \n    ."
    },
    {
        "code": "\ndef setup_module(module):\n    try:\n        pass\n    except LookupError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/childes_fixt.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42694
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID for (ID ):\n    try :\n        pass \n    except ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    self.auth = Authenticate()\n    os.environ['TWITTER'] = 'twitter-files'\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42695
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID [LIT ]=LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID [yield ]=LIT \n"
    },
    {
        "code": "\ndef test_environment(self):\n    \"\"\"\n        Test that environment variable has been read correctly.\n        \"\"\"\n    fn = os.path.basename(self.auth.creds_subdir)\n    self.assertEqual(fn, os.environ['TWITTER'])\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 42696
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (ID .ID .ID )\n    ID .ID (ID ,ID .ID [LIT ])\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =in ID .ID .ID (ID .ID .ID )\n    ID .ID (ID ,ID .ID [LIT ])\n"
    },
    {
        "code": "\ndef test_empty_subdir2(self):\n    try:\n        pass\n    except ValueError:\n        pass\n    except Exception as e:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 83,
            "fix_type": "modify",
            "fix_token": "as",
            "id": 42697
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID \n    ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef test_incomplete_file(self):\n    try:\n        pass\n    except ValueError:\n        pass\n    except Exception as e:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 42698
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID as ID del :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef test_malformed_file1(self):\n    try:\n        pass\n    except ValueError:\n        pass\n    except Exception as e:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 42699
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        ==pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef test_malformed_file2(self):\n    try:\n        pass\n    except ValueError:\n        pass\n    except Exception as e:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "try",
            "id": 42700
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    ==:\n        pass \n    except ID :\n        pass \n    except ID as ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef test_correct_path(self):\n    \"\"\"\n        Path to default credentials file is well-formed, given specified\n        subdir.\n        \"\"\"\n    self.auth.load_creds(subdir=self.subdir)\n    self.auth.creds_fullpath = os.path.join(self.subdir, self.auth.creds_file)\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42701
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID =ID .ID )\n    ID .ID .ID =ID .ID .ID (ID .ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID =ID .ID \n    ID .ID .ID =ID .ID .ID (ID .ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef test_correct_file1(self):\n    \"\"\"\n        Default credentials file is identified\n        \"\"\"\n    self.auth.load_creds(subdir=self.subdir)\n    self.assertEqual(self.auth.creds_file, 'credentials.txt')\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42702
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID =ID .ID )\n    ID .ID (ID .ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID (ID =ID .ID \n    ID .ID (ID .ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_correct_file2(self):\n    \"\"\"\n        Default credentials file has been read correctluy\n        \"\"\"\n    oauth = self.auth.load_creds(subdir=self.subdir)\n    self.assertEqual(oauth['app_key'], 'a')\n",
        "metadata": {
            "file": "py150_files/data/nltk/nltk/nltk/test/unit/test_twitter_auth.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 42703
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (ID =ID .ID )\n    ID .ID (ID [LIT ],LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (ID =ID .ID )\n    ID .ID (ID [LIT ]]LIT )\n"
    },
    {
        "code": "\n\ndef rst(filename):\n    content = open(filename).read()\n    for regex, replacement in PYPI_RST_FILTERS:\n        content = re.sub(regex, replacement, content)\n    return content\n",
        "metadata": {
            "file": "py150_files/data/noirbizarre/flask-restplus/setup.py",
            "fix_location": 94,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42704
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID ).ID ()\n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID ,ID )\n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID (ID ).ID ()\n    for ID ,ID in ID :\n        ID =ID .ID (ID ,ID ,ID )return ID \n"
    },
    {
        "code": "\n\ndef rglob(treeroot, pattern):\n    for base, dirs, files in os.walk(treeroot):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/noklesta/SublimeEmberNav/recursive_glob.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 42705
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID ,ID ,ID in ID .ID (ID ):\n        pass \n",
        "wrong_code": "\nas \ndef ID (ID ,ID ):\n    for ID ,ID ,ID in ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef get_setting(settings, key):\n    if settings.has(key):\n        return settings.get(key)\n    else:\n        return None\n",
        "metadata": {
            "file": "py150_files/data/noraesae/ClassHierarchy/settings.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42706
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID (ID ):\n        return ID .ID (ID )\n    else :\n        return ID \n",
        "wrong_code": "\ndef ID break (ID ,ID ):\n    if ID .ID (ID ):\n        return ID .ID (ID )\n    else :\n        return ID \n"
    },
    {
        "code": "\ndef get_setting_from_view(key):\n    try:\n        return get_setting(view.settings(), \"class_hierarchy_%s\" % key)\n    except:\n        return None\n",
        "metadata": {
            "file": "py150_files/data/noraesae/ClassHierarchy/settings.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 42707
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        return ID (ID .ID (),LIT %ID )\n    except :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        return ID (ID .and ID (),LIT %ID )\n    except :\n        return ID \n"
    },
    {
        "code": "\ndef get_setting_from_preferences(key):\n    settings = sublime.load_settings(\"Preferences.sublime-settings\")\n    return get_setting(settings, \"class_hierarchy_%s\" % key)\n",
        "metadata": {
            "file": "py150_files/data/noraesae/ClassHierarchy/settings.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42708
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    return ID (ID ,LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID and LIT )\n    return ID (ID ,LIT %ID )\n"
    },
    {
        "code": "\ndef get_setting_from_plugin(key):\n    settings = sublime.load_settings(\"ClassHierarchy.sublime-settings\")\n    return get_setting(settings, key)\n",
        "metadata": {
            "file": "py150_files/data/noraesae/ClassHierarchy/settings.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42709
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    return ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    *=ID .ID (LIT )\n    return ID (ID ,ID )\n"
    },
    {
        "code": "\ndef setting(key, view=None):\n    if value:\n        pass\n    if value:\n        pass\n    if value:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/noraesae/ClassHierarchy/settings.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42710
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID :\n        pass \n    if ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\ndef (ID ,ID =ID ):\n    if ID :\n        pass \n    if ID :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef registerInSubprocess(self, event):\n    event.pluginClasses.append(self.__class__)\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/plugins/loader/testcases.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42711
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )\n    ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef isTestMethod(attrname, testCaseClass=testCaseClass,\n                 excluded=excluded):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/plugins/loader/testcases.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42712
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,\nID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,\nID =ID :\n    pass \n"
    },
    {
        "code": "\n@it.has_setup\ndef setup():\n    log.info(\"Called setup in such test\")\n    it.unique_resource = UniqueResource()\n    it.unique_resource.lock()\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/support/scenario/layers_and_non_layers/test_such_with_has_setup.py",
            "fix_location": 73,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42713
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    ID .ID (LIT )\n    ID .ID =ID ()\n    ID .ID .ID ()\n",
        "wrong_code": "\n@ID .ID \ndef ID ():\n    ID .ID (LIT )\n    ID .ID =ID ()\n    ID .ID .ID (\n"
    },
    {
        "code": "\n@it.has_teardown\ndef teardown():\n    log.info(\"Called teardown in such test\")\n    it.unique_resource.unlock()\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/support/scenario/layers_and_non_layers/test_such_with_has_setup.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42714
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    ID .ID (LIT )\n    ID .ID .ID ()\n",
        "wrong_code": "\n@ID .ID \ndef ID ():\n    ID .ID (LIT )\n    ID ..ID ()\n"
    },
    {
        "code": "\n@it.should('do something')\ndef test(case):\n    it.assertTrue(it.unique_resource.used)\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/support/scenario/layers_and_non_layers/test_such_with_has_setup.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42715
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    ID .ID (ID .ID .ID )\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    ID .ID (ID .ID .with )\n"
    },
    {
        "code": "\n\ndef test():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/support/scenario/module_import_err/pkg/test_import_err.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42716
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    pass \n    is "
    },
    {
        "code": "\ndef test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/support/scenario/module_import_err/pkg/test_import_err.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 42717
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    !="
    },
    {
        "code": "def setUp(self):\n    for m in [m for m in sys.modules if m.startswith('pkgegg')]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 76,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 42718
        },
        "correct_code": "def ID (ID ):\n    for ID in [ID for ID in ID .ID if ID .ID (LIT )]:\n        pass \n",
        "wrong_code": "def ID (ID ):\n    for ID in [ID for ID in ID .ID if ID .ID (LIT )]:\n        !\n"
    },
    {
        "code": "        \ndef test_non_egg_discoverer_does_not_fail_when_looking_in_egg(self):\n    proc = self.runIn(\n        'scenario/tests_in_zipped_eggs',\n        '-v',\n        'pkgegg')\n    self.assertTestRunOutputMatches(proc, stderr='Ran 0 tests in')\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 42719
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID nonlocal =ID .ID (\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_can_discover_test_modules_in_zipped_eggs(self):\n    proc = self.runIn(\n        'scenario/tests_in_zipped_eggs', \n        '-v',\n        '--plugin=nose2.plugins.loader.eggdiscovery',\n        'pkgegg')\n    self.assertTestRunOutputMatches(proc, stderr='FAILED \\(failures=5, errors=1, skipped=1\\)')\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 91,
            "fix_type": "delete",
            "id": 42720
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID async =LIT )\n"
    },
    {
        "code": "    \ndef test_eggdiscovery_failure_does_not_exist(self):\n    proc = self.runIn(\n        'scenario', \n        '-v',\n        '--plugin=nose2.plugins.loader.eggdiscovery',\n        '--exclude-plugin=nose2.plugins.loader.discovery',\n        '-s',\n        'tests_in_zipped_eggs_BAD')\n    self.assertTestRunOutputMatches(proc, stderr='tests_in_zipped_eggs_BAD does not exist')\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42721
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\n[ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n"
    },
    {
        "code": "def setUp(self):\n    for m in [m for m in sys.modules if m.startswith('pkgegg')]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42722
        },
        "correct_code": "def ID (ID ):\n    for ID in [ID for ID in ID .ID if ID .ID (LIT )]:\n        pass \n",
        "wrong_code": "def ID (ID ):\n    for elif in [ID for ID in ID .ID if ID .ID (LIT )]:\n        pass \n"
    },
    {
        "code": "        \ndef test_eggdiscovery_ignores_unzipped_eggs(self):\n    proc = self.runIn(\n        'scenario/tests_in_unzipped_eggs', \n        '-v',\n        '--plugin=nose2.plugins.loader.eggdiscovery',\n        'pkgunegg')\n    self.assertTestRunOutputMatches(proc, stderr='FAILED \\(failures=5, errors=1, skipped=1\\)')\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/functional/test_eggdiscovery_loader.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42723
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID )\n    ID =ID .ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    LIT )\n    ID .ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_e1(self):\n    raise KeyError(\"k\")\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42724
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\nID (ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef test_e2(self):\n    raise TypeError(\"x\")\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42725
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID (LIT )\n",
        "wrong_code": "\n-ID (ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef test_e3(self):\n    raise IOError(\"o\")\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42726
        },
        "correct_code": "\ndef ID (ID ):\n    raise ID (LIT )\n",
        "wrong_code": "!def ID (ID ):\n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef __init__(self):\n    self.outcomes = {}\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42727
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID in :\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef testOutcome(self, event):\n    self.outcomes.setdefault(event.outcome, []).append(event)\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 42728
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID ,[]).ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID ,[]).ID (/ID )\n"
    },
    {
        "code": "\ndef test_labels_upper(self):\n    self.assertEqual(self.plugin.labels('xxx'), ('X', 'XXX'))\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 42729
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (LIT ),(LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (LIT ),(LIT :,LIT ))\n"
    },
    {
        "code": "\ndef test_can_do_nothing_when_not_configured(self):\n    test = self.case('test_e1')\n    test(self.result)\n    assert self.watcher.outcomes['error']\n    assert not 'failed' in self.watcher.outcomes\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 68,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 42730
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID (ID .ID )\n    assert ID .ID .ID [LIT ]\n    assert not LIT in ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    ID (ID .ID )\n    assert ID ID .ID [LIT ]\n    assert not LIT in ID .ID .ID \n"
    },
    {
        "code": "\ndef test_can_treat_as_fail(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42731
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (assert ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_can_treat_as_skip(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 42732
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    :"
    },
    {
        "code": "\ndef test_can_handle_multiple_events_cleanly(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nose-devs/nose2/nose2/tests/unit/test_outcomes_plugin.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42733
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "del \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, context=None):\n\n    # Check that all the mandatory context is present.\n    for key in self.get_params():\n        if key not in context:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42734
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        if ID not in ID :\n            pass \n",
        "wrong_code": "\ndef /(ID ,ID =ID ):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        if ID not in ID :\n            pass \n"
    },
    {
        "code": "\ndef get_language(self):\n    # Auto detect the current language\n    return translation.get_language()  # Get current language\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42735
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID .ID ()#COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID .()#COMMENT\n\n"
    },
    {
        "code": "\ndef get_params(self):\n    \"\"\"Returns the list of mandatory context variables.\"\"\"\n    return self.params\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42736
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\ndef del ID (ID ):\n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\ndef get_context_data(self, **kwargs):\n    \"\"\"Returns automatic context_data.\"\"\"\n    return kwargs.copy()\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42737
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    LIT \n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    LIT \n    return ID .ID break )\n"
    },
    {
        "code": "\ndef get_attachments(self, attachments=None):\n    \"\"\"Return the attachments.\"\"\"\n    return attachments or []\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 42738
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    return ID or []\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    LIT pass \n    return ID or []\n"
    },
    {
        "code": "\ndef get_template_part(self, part, lang=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42739
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    pass and "
    },
    {
        "code": "\ndef _render_part(self, part, lang=None):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42740
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    try while \n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef send(self, emails, attachments=None, from_email=None, headers=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42741
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass await "
    },
    {
        "code": "\ndef mail_admins(self, attachments=None, from_email=None):\n    \"\"\"Send email to admins.\"\"\"\n    self.send([a[1] for a in settings.ADMINS], attachments, from_email)\n",
        "metadata": {
            "file": "py150_files/data/novafloss/django-mail-factory/mail_factory/mails.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42742
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    LIT \n    ID .ID ([ID [LIT ]for ID in ID .ID ],ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ):\n    LIT \n    ID elif ID ([ID [LIT ]for ID in ID .ID ],ID ,ID )\n"
    },
    {
        "code": "def __init__(self, value, color=None, background=None, reverse=False, width=None, align='left', resizable=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 42743
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =ID ,ID =LIT ,ID =ID ,ID =LIT ,ID =LIT ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ,ID =ID ,ID =LIT ,ID =ID ,ID (LIT ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef lines(self):\n    if self.width:\n        return int(math.ceil(len(self.value) / float(self.width)))\n    return self.width\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42744
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        return ID (ID .ID (ID (ID .ID )/ID (ID .ID )))\n    return ID .ID \n",
        "wrong_code": "\ndef ID await ID ):\n    if ID .ID :\n        return ID (ID .ID (ID (ID .ID )/ID (ID .ID )))\n    return ID .ID \n"
    },
    {
        "code": "\ndef line(self, num):\n    return self.value[num * self.width:(1 + num) * self.width]\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 42745
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID *ID .ID :(LIT +ID )*ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID *ID .ID :(!=LIT +ID )*ID .ID ]\n"
    },
    {
        "code": "\ndef pad(self, text, width):\n    if self.align == 'right':\n        pass\n    elif self.align == 'center':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 105,
            "fix_type": "insert",
            "fix_token": "",
            "id": 42746
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID ==LIT :\n        pass \n    elif ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID ==LIT :\n        pass \n    elif ID .ID ==LIT :\n        pass \n        else :\n        pass \n    "
    },
    {
        "code": "def __init__(self, *cells):\n    super(AsciiRow, self).__init__()\n    self.cells = [ isinstance(x, AsciiCell) and x or AsciiCell(x) for x in cells ]\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 42747
        },
        "correct_code": "def ID (ID ,*ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =[ID (ID ,ID )and ID or ID (ID )for ID in ID ]\n",
        "wrong_code": "def ID (or ID ,*ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =[ID (ID ,ID )and ID or ID (ID )for ID in ID ]\n"
    },
    {
        "code": "\ndef lines(self):\n    return max([ x.lines for x in self.cells ])\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 42748
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ([ID .ID for ID in ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ):\n    return :ID ([ID .ID for ID in ID .ID ])\n"
    },
    {
        "code": "\ndef __getitem__(self, index):\n    return self.cells[index]\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42749
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID )global \n    return ID .ID [ID ]\n"
    },
    {
        "code": "\ndef __iter__(self):\n    for cell in self.cells:\n        yield cell\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42750
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield try \n"
    },
    {
        "code": "\ndef __len__(self):\n    return len(self.cells)\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 42751
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID return .ID )\n"
    },
    {
        "code": "def __init__(self, headers, left_padding=None, right_padding=None, horizontal_rule=True, max_width=None, border_characters=[u'+', u'|', u'-']):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42752
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =ID ,ID =LIT ,ID =ID ,ID =[LIT ,LIT ,LIT ]):\n    pass \n",
        "wrong_code": "def ID (ID ,,ID =ID ,ID =ID ,ID =LIT ,ID =ID ,ID =[LIT ,LIT ,LIT ]):\n    pass \n"
    },
    {
        "code": "\ndef add_row(self, data):\n    if len(data) != len(self.headers):\n        raise Exception('The number of columns in a row must be equal to the header column count.')\n    self.rows.append(AsciiRow(*data))\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42753
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )!=ID (ID .ID ):\n        raise ID (LIT )\n    ID .ID .ID (ID (*ID ))\n",
        "wrong_code": "\nas ID (ID ,ID ):\n    if ID (ID )!=ID (ID .ID ):\n        raise ID (LIT )\n    ID .ID .ID (ID (*ID ))\n"
    },
    {
        "code": "\ndef __str__(self):\n    self.__unicode__()\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42754
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (pass ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef __unicode__(self):\n    self._print()\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42755
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (pass ID ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef _print_horizontal_rule(self):\n    if self.border_corner or self.border_horizontal:\n        for column, width in zip(self.headers, self._widths):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 42756
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID or ID .ID :\n        for ID ,ID in ID (ID .ID ,ID .ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID or ID .ID :\n        for ID ,ID in ID (ID .ID ,ID .ID ):\n            pass \n"
    },
    {
        "code": "\ndef _print_headers(self):\n    self._print_horizontal_rule()\n    self._print_row(self.headers)\n    self._print_horizontal_rule()\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42757
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID (ID .ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID (ID .ID )\n    ID assert ID ()\n"
    },
    {
        "code": "\ndef _print_rows(self):\n    for row in self.rows:\n        self._print_row(row)\n        if self.horizontal_rule:\n            self._print_horizontal_rule()\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 42758
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        ID .ID (ID )\n        if ID .ID :\n            ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID )in ID .ID :\n        ID .ID (ID )\n        if ID .ID :\n            ID .ID ()\n"
    },
    {
        "code": "\ndef _print_row(self, row):\n    for line in xrange(row.lines):\n        for cell, width in zip(row, self._widths):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 42759
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID .ID ):\n        for ID ,ID in ID (ID ,ID .ID ):\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID (ID .ID ):\n        for ID ,ID :ID (ID ,ID .ID ):\n            pass \n"
    },
    {
        "code": "\ndef render(self):\n    self._calculate_widths()\n\n    self._print_headers()\n    self._print_rows()\n    if not self.horizontal_rule:\n        self._print_horizontal_rule()\n",
        "metadata": {
            "file": "py150_files/data/nowells/git-goggles/gitgoggles/asciitable.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42760
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n\n    ID .ID ()\n    ID .ID ()\n    if not ID .ID :\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n\n    ID .ID ()\n    ID .ID (from \n    if not ID .ID :\n        ID .ID ()\n"
    },
    {
        "code": "\n\ndef read(fname):\n    try:\n        pass\n    except Exception:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nschloe/betterbib/setup.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42761
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef ==(ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, num_pools=10, headers=None, **connection_pool_kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 42762
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID is ,ID =LIT ,ID =ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef _new_pool(self, scheme, host, port):\n    if scheme == 'http':\n        for kw in SSL_KEYWORDS:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42763
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID ==LIT :\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ]==LIT :\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef clear(self):\n    \"\"\"\n        Empty our store of pools and direct them all to close.\n\n        This will not affect in-flight connections, but they will not be\n        re-used after completion.\n        \"\"\"\n    self.pools.clear()\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42764
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n",
        "wrong_code": "\ndef \n(ID ):\n    LIT \n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef connection_from_url(self, url):\n    \"\"\"\n        Similar to :func:`urllib3.connectionpool.connection_from_url` but\n        doesn't pass any additional parameters to the\n        :class:`urllib3.connectionpool.ConnectionPool` constructor.\n\n        Additional parameters are taken from the :class:`.PoolManager`\n        constructor.\n        \"\"\"\n    u = parse_url(url)\n    return self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 42765
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID .ID (ID .ID ,ID =ID .ID ,ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID ==.ID (ID .ID ,ID =ID .ID ,ID =ID .ID )\n"
    },
    {
        "code": "\ndef connection_from_host(self, host, port=None, scheme='http'):\n    if scheme == \"https\":\n        pass\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42766
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ):\n    if ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,=ID ,ID =LIT ):\n    if ID ==LIT :\n        pass \n"
    },
    {
        "code": "\ndef _set_proxy_headers(self, url, headers=None):\n    if netloc:\n        pass\n\n    if headers:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 42767
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID :\n        pass \n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID is ID ,ID =ID ):\n    if ID :\n        pass \n\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef urlopen(self, method, url, redirect=True, **kw):\n\n    if u.scheme == \"http\":\n        pass\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "==",
            "id": 42768
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,**ID ):\n\n    if ID .ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,**ID ):\n\n    if ID .ID except LIT :\n        pass \n"
    },
    {
        "code": "\n\ndef proxy_from_url(url, **kw):\n    return ProxyManager(proxy_url=url, **kw)\n",
        "metadata": {
            "file": "py150_files/data/drzoidberg33/plexpy/lib/requests/packages/urllib3/poolmanager.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42769
        },
        "correct_code": "\n\ndef ID (ID ,**ID ):\n    return ID (ID =ID ,**ID )\n",
        "wrong_code": "\n\ndef ID (ID ,**ID ):\n    return ID (ID =ID ,**ID )\n    in "
    },
    {
        "code": "\ndef __init__(self, circuit_manager, circuit_id, conn, circuit_type,\n             path, crypt_path, max_streams=MAX_STREAMS_V3):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42770
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\nID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,\n,ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef canHandleRequest(self, request):\n    if self._state == CState.BUFFERING:\n        pass\n\n    if len(self._streams) == self._max_streams:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 42771
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID .ID :\n        pass \n\n    if ID (ID .ID )==ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID ==ID .ID :\n        pass \n\n    if ID (ID elif .ID )==ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef send(self, data, stream):\n    if len(data) > MAX_RPAYLOAD_LEN:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 42772
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID )>ID :\n        pass \n",
        "wrong_code": "\ncontinue def ID (ID ,ID ,ID ):\n    if ID (ID )>ID :\n        pass \n"
    },
    {
        "code": "\ndef recv(self, cell):\n    '''Put the incoming cell on this circuit's read_queue to be processed.\n\n        Called be a connection when it receives a cell addressed to this\n        circuit.\n\n        :param cell cell: incoming cell that was received from the network\n        '''\n    self._read_queue.put(cell)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42773
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID while ID .ID (ID )\n"
    },
    {
        "code": "\ndef beginStream(self, stream):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42774
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \nawait "
    },
    {
        "code": "\ndef sendStreamSendMe(self, stream):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42775
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef destroyCircuitFromManager(self):\n    self._sendDestroyCell()\n    self._closeAllStreams()\n    self._connection.removeCircuit(self)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42776
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID ()\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID ()\n    ID ..ID (ID )\n"
    },
    {
        "code": "\ndef destroyCircuitFromConnection(self):\n    '''Called when a connection closes this circuit (usually because\n        the connection went down).\n\n        Primarily called when we lose the TLS connection to our connection\n        object.  Do a 'hard' destroy and immediately close all associated\n        streams.  Do not send a destroy cell.\n        '''\n    msg = (\"Circuit {} destroyed by its connection.\"\n           .format(self.circuit_id))\n    logging.debug(msg)\n    self._closeCircuit()\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 86,
            "fix_type": "delete",
            "id": 42777
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =(LIT \n    .ID (ID .ID ))\n    ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =(LIT \n    .ID (ID .ID ))\n    ID .ID (ID )\n    ID .ID (()\n"
    },
    {
        "code": "\ndef _pollReadQueue(self):\n    '''Try pulling a cell from this circuit's read_queue and add a\n        callback to handle the cell when it's available.\n        '''\n    self._read_task = self._read_queue.get()\n    self._read_task.addCallback(self._recvCell)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42778
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID .ID .ID ()\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID .ID .ID ()\n    ID .ID .ID (..ID )\n"
    },
    {
        "code": "\ndef _pollWriteQueue(self):\n    '''Try pulling data from this circuit's write_queue and add a\n        callback to process the data when it's available.\n        '''\n    self._write_task = self._write_queue.get()\n    self._write_task.addCallback(self._writeData)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 42779
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID .ID .ID ()\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID !(ID ):\n    LIT \n    ID .ID =ID .ID .ID ()\n    ID .ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef _writeData(self, data_stream_id_tuple):\n    '''Write data to this circuit's connection.\n\n        Do the following:\n\n            1. Package this data (with appropriate stream_id) into a\n               RelayDataCell.\n            2. Encrypt this cell.\n            3. Write this cell to this circuit's connection.\n            4. Decrement this circuit's packaging window (if we can't\n               package anymore data, enter state CState.BUFFERING, otherwise\n               begin polling from _write_queue again).\n\n        :param tuple, str, int data_stream_id_tuple: tuple of (data, stream_id)\n            to package into a RelayData cell\n        '''\n    data, stream_id = data_stream_id_tuple\n    cell = RelayDataCell.make(self.circuit_id, stream_id, data)\n    self._encryptAndSendCell(cell)\n    self._decPackageWindow()\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 42780
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID ,ID =ID \n    ID =ID .ID (ID .ID ,ID ,ID )\n    ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ID ):\n    LIT \n    ID ,ID =ID \n    ID =ID .ID (ID .ID ,ID ,ID )\n    ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef _recvCell(self, cell):\n    if type(cell) not in BACKWARD_CELL_TYPES:\n        pass\n    elif isinstance(cell, DestroyCell):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 105,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42781
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID )not in ID :\n        pass \n    elif ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID )not in ID :\n        pass \n    elif ID (ID ,ID ):\n        pass \n        LIT else :\n        pass \n    "
    },
    {
        "code": "\ndef _processRelayDataCell(self, cell, origin):\n\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 86,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42782
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n\n    try :\n        pass \n    except ID :\n        pass \n        in "
    },
    {
        "code": "\ndef _processRelayEndCell(self, cell, origin):\n\n    try:\n        # TODO: handle REASON_EXITPOLICY\n        if cell.reason != REASON_DONE:\n            pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42783
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    try :\n    #COMMENT\n\n        if ID .ID !=ID :\n            pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,as ):\n\n    try :\n    #COMMENT\n\n        if ID .ID !=ID :\n            pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef _processRelayConnectedCell(self, cell, origin):\n\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 42784
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\nID (ID ,ID ,ID ):\n\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef _processRelaySendMeCell(self, cell, origin):\n\n    if sid == 0:\n        pass\n    else:\n        try:\n            pass\n        except KeyError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42785
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n\n    if ID ==LIT :\n        pass \n    else :\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )\n\n    if ID ==LIT :\n        pass \n    else :\n        try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "\ndef _processRelayTruncatedCell(self, cell, origin):\n    logging.debug(msg)\n    self._sendDestroyCell()\n    self._closeCircuit()\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42786
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID )\n    ID .ID ()\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,,ID ):\n    ID .ID (ID )\n    ID .ID ()\n    ID .ID ()\n"
    },
    {
        "code": "\ndef _processRelayDropCell(self, cell, origin):\n    '''Called when this circuit receives a RelayDrop cell.\n\n        Just drop it :)\n\n        :param oppy.cell.relay.RelayDropCell cell: relay drop cell\n            recieved from the network\n        :param int origin: which node on the circuit's path this cell\n            came from\n        '''\n    msg = \"Circuit {} received a RelayDropCell.\".format(self.circuit_id)\n    logging.debug(msg)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 42787
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =LIT .ID (ID .ID )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID with ID ):\n    LIT \n    ID =LIT .ID (ID .ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef _processRelayResolvedCell(self, cell, origin):\n    '''Called when this circuit receives a RelayResolvedCell.\n\n        oppy doesn't know how to handle these right now, so we just drop\n        them.\n\n        :param oppy.cell.relay.RelayResolvedCell cell: relay resolved cell\n            recieved from the network\n        :param int origin: which node on the circuit's path this cell\n            came from\n        '''\n    msg = (\"Circuit {} received a RelayResolvedCell for stream {}.\"\n           .format(self.circuit_id, cell.rheader.stream_id))\n    logging.debug(msg)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42788
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =(LIT \n    .ID (ID .ID ,ID .ID .ID ))\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    ID =(LIT \n    .ID (ID .ID ,ID .ID .ID ))\n    ID .else (ID )\n"
    },
    {
        "code": "\ndef _decDeliverWindow(self):\n    if self._deliver_window <= SENDME_THRESHOLD:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42789
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID <=ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID <=if :\n        pass \n"
    },
    {
        "code": "\n\ndef _decPackageWindow(self):\n    if self._package_window > 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "else",
            "id": 42790
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID >LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID .ID >LIT :\n        pass \n    [:\n        pass \n"
    },
    {
        "code": "\ndef _incPackageWindow(self):\n\n    if self._state == CState.BUFFERING and self._package_window > 0:\n\n        if self._write_task is None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42791
        },
        "correct_code": "\ndef ID (ID ):\n\n    if ID .ID ==ID .ID and ID .ID >LIT :\n\n        if ID .ID is ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID )\n\n    if ID .ID ==ID .ID and ID .ID >LIT :\n\n        if ID .ID is ID :\n            pass \n"
    },
    {
        "code": "\ndef _sendDestroyCell(self):\n    '''Send a destroy cell.\n\n        .. note:: reason NONE is always used when sending forward destroy\n            cells to avoid leaking version information.\n        '''\n    cell = DestroyCell.make(self.circuit_id)\n    self._connection.send(cell)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 42792
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    with LIT \n    ID =ID .ID (ID .ID )\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef _closeAllStreams(self):\n    for stream in self._streams.values():\n        stream.closeFromCircuit()\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42793
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID ():\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in .ID .ID ():\n        ID .ID ()\n"
    },
    {
        "code": "\ndef _closeCircuit(self):\n    '''Close this circuit.\n\n        Close all associated streams, notify the circuit manager this\n        circuit has closed, and notify this circuit's connection that this\n        circuit has closed.\n        '''\n    self._closeAllStreams()\n    self._circuit_manager.circuitDestroyed(self)\n    self._connection.removeCircuit(self)\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/circuit/circuit.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42794
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID ()\n    ID .ID .ID (ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID .ID ()\n    ID .ID .ID (ID )\n    ID .else .ID (ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.cm = connectionmanager.ConnectionManager()\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 42795
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .LIT ID =ID .ID ()\n"
    },
    {
        "code": "\n# TODO: test that cipher list is set properly for v3 protocol\ndef test_TLSClientContextFactory_v3(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42796
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\ndef LIT ID (ID ):\n    pass \n"
    },
    {
        "code": "\n@mock.patch('twisted.internet.endpoints', autospec=True)\ndef test_getConnection_have_connection(self, mock_endpoints):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42797
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,not ):\n    pass \n"
    },
    {
        "code": "\n@mock.patch('twisted.internet.endpoints', autospec=True)\ndef test_getConnection_have_pending_connection(self, mock_endpoints):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42798
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID !=:\n    pass \n"
    },
    {
        "code": "\ndef test_initialConnectionFailed(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42799
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )!=\n    pass \n"
    },
    {
        "code": "\n@mock.patch('oppy.connection.connectionmanager.Connection', autospec=True)\ndef test_connectionTaskSucceeded(self, mock_connection):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 42800
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =)\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n@mock.patch('oppy.connection.connectionmanager.logging', autospec=True)\ndef test_connectionTaskSucceeded_no_reference(self, mock_logging):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42801
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_connectionTaskFailed(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 42802
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef class ID (ID ):\n    pass \n"
    },
    {
        "code": "\n@mock.patch('oppy.connection.connectionmanager.logging', autospec=True)\ndef test_connectionTaskFailed_no_reference(self, mock_logging):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 42803
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n=ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_removeConnection(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42804
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):)\n    pass \n"
    },
    {
        "code": "\n@mock.patch('oppy.connection.connectionmanager.logging', autospec=True)\ndef test_removeConnection_no_reference(self, mock_logging):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42805
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT class \ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_shouldDestroyConnection(self):\n    self.assertTrue(self.cm.shouldDestroyConnection(mock.Mock()))\n",
        "metadata": {
            "file": "py150_files/data/nskinkel/oppy/oppy/tests/unit/connection/test_connectionmanager.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42806
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (ID .ID ()))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID .ID .ID (ID .ID ()))\n    from "
    },
    {
        "code": "def __init__(self, socket):\n    self._decompressor = snappy.StreamDecompressor()\n    self._compressor = snappy.StreamCompressor()\n    self._socket = socket\n    self._bootstrapped = None\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42807
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =ID .ID (\n    ID .ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __getattr__(self, name):\n    return getattr(self._socket, name)\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 42808
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (or ID .ID ,ID )\n"
    },
    {
        "code": "\ndef bootstrap(self, data):\n    if data:\n        self._bootstrapped = self._decompressor.decompress(data)\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42809
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID :\n        ID .ID =ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID :\n        ID .ID ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef recv(self, size):\n    return self._recv(size, self._socket.recv)\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42810
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID assert ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef read(self, size):\n    return self._recv(size, self._socket.read)\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42811
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID ,ID .ID .and )\n"
    },
    {
        "code": "\ndef _recv(self, size, method):\n    if self._bootstrapped:\n        pass\n    if not uncompressed:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42812
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n    if not pass :\n        pass \n"
    },
    {
        "code": "\ndef send(self, data):\n    chunk = self._compressor.add_chunk(data, compress=True)\n    self._socket.send(chunk)\n    return len(data)\n",
        "metadata": {
            "file": "py150_files/data/nsqio/pynsq/nsq/snappy_socket.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42813
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID .ID (ID )\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID ,ID =LIT )\n    ID .ID .ID (ID )\n    return ID (ID and \n"
    },
    {
        "code": "def SetComp(elt, generators):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42814
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    pass ]"
    },
    {
        "code": "def DictComp(key, value, generators):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42815
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,,ID ):\n    pass \n"
    },
    {
        "code": "def Set(elts):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42816
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):else \n    pass \n"
    },
    {
        "code": "def __init__(self, lexer, lineno):\n    self.lexer = lexer\n    self.lineno = lineno\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42817
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID raise ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\n\ndef ast_for_testlist(testlist):\n    if isinstance(testlist, list):\n        pass\n    else:\n        value = testlist\n    return value\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42818
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        ID =ID \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID (ID ,ID )is \n        pass \n    else :\n        ID =ID \n    return ID \n"
    },
    {
        "code": "\n\ndef ast_for_dotted_name(dotted_name):\n    for part in parts:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 42819
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID :\n    or pass \n"
    },
    {
        "code": "def __init__(self, values=None):\n    self.values = values or []\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42820
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    ID .ID =ID or []\n",
        "wrong_code": "for ID (ID ,ID =ID ):\n    ID .ID =ID or []\n"
    },
    {
        "code": "def __init__(self, elt=None, generators=None):\n    self.elt = elt\n    self.generators = generators or []\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42821
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID or []\n",
        "wrong_code": "def ID ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID or []\n"
    },
    {
        "code": "def __init__(self, args=None, keywords=None, starargs=None, kwargs=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42822
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "def ID (del ,ID =ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\n\n#==============================================================================\n# Begin Parsing Rules\n#==============================================================================\n\n#------------------------------------------------------------------------------\n# Enaml Module\n#------------------------------------------------------------------------------\n# These special rules to handle the variations of newline and endmarkers\n# are because of the various lexer states that deal with python blocks\n# and enaml code, as well as completely empty files.\ndef p_enaml1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42823
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\nlambda #COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_enaml2(p):\n    ''' enaml : NEWLINE ENDMARKER\n              | ENDMARKER '''\n    p[0] = enaml_ast.Module()\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42824
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID ()\n",
        "wrong_code": "[\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID ()\n"
    },
    {
        "code": "\n\ndef p_enaml_module_body1(p):\n    if not isinstance(items, list):\n        items = [items]\n    p[0] = p[1] + items\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42825
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID (ID ,ID ):\n        ID =[ID ]\n    ID [LIT ]=ID [LIT ]+ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if not ID (ID ,ID ):\n        ID =[ID ]\n    yield [LIT ]=ID [LIT ]+ID \n"
    },
    {
        "code": "\n\ndef p_enaml_module_body2(p):\n    ''' enaml_module_body : enaml_module_item '''\n    items = p[1]  # a stmt can be a list\n    if not isinstance(items, list):\n        items = [items]\n    p[0] = items\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 42826
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]#COMMENT\n\n    if not ID (ID ,ID ):\n        ID =[ID ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]#COMMENT\n\n    if not ID (ID nonlocal ,ID ):\n        ID =[ID ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_enaml_module_item(p):\n    ''' enaml_module_item : stmt\n                          | enamldef\n                          | template '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42827
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):finally     LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\ndef check_id(name, node):\n    if name in ident_names:\n        syntax_warning(msg % name, FakeToken(lexer, node.lineno))\n    ident_names.add(name)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 42828
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID :\n        ID (ID %ID ,ID (ID ,ID .ID ))\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID in ID :\n        ID (ID %ID ,ID (ID ,ID .ID ))\n    LIT ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef p_enamldef1(p):\n    ''' enamldef : enamldef_impl '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 42829
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=class ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_enamldef2(p):\n    ''' enamldef : pragmas enamldef_impl '''\n    node = p[2]\n    node.pragmas = p[1]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42830
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID else ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_enamldef_impl1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42831
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndel def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_enamldef_impl2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 42832
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\nasync     pass \n"
    },
    {
        "code": "\n\ndef p_enamldef_impl3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 42833
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass assert \n"
    },
    {
        "code": "\n\ndef p_enamldef_impl4(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42834
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n,ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_enamldef_suite1(p):\n    ''' enamldef_suite : NEWLINE INDENT enamldef_suite_items DEDENT '''\n    # Filter out any pass statements\n    items = filter(None, p[3])\n    p[0] = ('', items)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 91,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42835
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID (ID ,ID [LIT ])\n    ID [LIT ]=(LIT ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID (ID ,ID [LIT ])\n    ID [LIT ]=(LIT ,ID )\nlambda "
    },
    {
        "code": "\n\ndef p_enamldef_suite2(p):\n    ''' enamldef_suite : NEWLINE INDENT STRING NEWLINE enamldef_suite_items DEDENT '''\n    # Filter out any pass statements\n    items = filter(None, p[5])\n    p[0] = (p[3], items)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 42836
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID (ID ,ID [LIT ])\n    ID [LIT ]=(ID [LIT ],ID )\n",
        "wrong_code": "\nas \ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID (ID ,ID [LIT ])\n    ID [LIT ]=(ID [LIT ],ID )\n"
    },
    {
        "code": "\n\ndef p_enamldef_suite_items1(p):\n    ''' enamldef_suite_items : enamldef_suite_item '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42837
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "nonlocal \ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_enamldef_suite_items2(p):\n    ''' enamldef_suite_items : enamldef_suite_items enamldef_suite_item '''\n    p[0] = p[1] + [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42838
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID )\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_enamldef_suite_item(p):\n    ''' enamldef_suite_item : enamldef_simple_item\n                            | decl_funcdef\n                            | child_def\n                            | template_inst '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42839
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "finally \n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_enamldef_simple_item1(p):\n    ''' enamldef_simple_item : binding\n                             | ex_binding\n                             | alias_expr\n                             | storage_expr '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42840
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "try \ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_enamldef_simple_item2(p):\n    ''' enamldef_simple_item : PASS NEWLINE '''\n    p[0] = None\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42841
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=)\n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# Pragmas\n#------------------------------------------------------------------------------\ndef p_pragmas1(p):\n    ''' pragmas : pragma pragmas '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42842
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=nonlocal ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_pragmas2(p):\n    ''' pragmas : pragma '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 42843
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT as =[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_pragma1(p):\n    ''' pragma : PRAGMA NAME NEWLINE\n               | PRAGMA NAME LPAR RPAR NEWLINE '''\n    node = enaml_ast.Pragma()\n    node.lineno = p.lineno(1)\n    node.command = p[2]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42844
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_pragma2(p):\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42845
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID )while :\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_pragma_args1(p):\n    ''' pragma_args : pragma_arg COMMA pragma_args '''\n    p[0] = [p[1]] + p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42846
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [nonlocal ]=[ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_pragma_args2(p):\n    ''' pragma_args : pragma_arg '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 42847
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT )\n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_pragma_arg(p):\n    ''' pragma_arg : NAME '''\n    p[0] = enaml_ast.PragmaArg(kind='token', value=p[1])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42848
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID (ID =LIT ,ID =ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID )!:\n    LIT \n    ID [LIT ]=ID .ID (ID =LIT ,ID =ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_pragma_arg2(p):\n    ''' pragma_arg : NUMBER '''\n    p[0] = enaml_ast.PragmaArg(kind='number', value=p[1])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42849
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID (ID =LIT ,ID =ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID )\n    LIT \n    ID [LIT ]=ID .ID (ID =LIT ,ID =ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_pragma_arg3(p):\n    ''' pragma_arg : STRING '''\n    p[0] = enaml_ast.PragmaArg(kind='string', value=p[1])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42850
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID (ID =LIT ,ID =ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]ID .ID (ID =LIT ,ID =ID [LIT ])\n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# AliasExpr\n#------------------------------------------------------------------------------\ndef p_alias_expr1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 42851
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\nglobal \n\n#COMMENT\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_alias_expr2(p):\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42852
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID lambda LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_alias_expr3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42853
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \nasync "
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# ConstExpr\n#------------------------------------------------------------------------------\ndef p_const_expr1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42854
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n\ndef p_const_expr2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42855
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID if :\n    pass \n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# StorageExpr\n#------------------------------------------------------------------------------\ndef _validate_storage_expr(kind, lineno, lexer):\n    if kind not in ('attr', 'event'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 42856
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    if ID not in (LIT ,LIT ):\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    if ID not in (]LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\n\ndef p_storage_expr1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42857
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID in ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_storage_expr2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42858
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):for \n    pass \n"
    },
    {
        "code": "\n\ndef p_storage_expr3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42859
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ncontinue def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_storage_expr4(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42860
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )yield \n    pass \n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# ChildDef\n#------------------------------------------------------------------------------\ndef p_child_def1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 42861
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n!=    pass \n"
    },
    {
        "code": "\n\ndef p_child_def2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42862
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \ndef "
    },
    {
        "code": "\n\ndef p_child_def3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 42863
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n\n"
    },
    {
        "code": "\n\ndef p_child_def4(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42864
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID finally (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_child_def_suite(p):\n    ''' child_def_suite : NEWLINE INDENT child_def_suite_items DEDENT '''\n    # Filter out any pass statements\n    items = filter(None, p[3])\n    p[0] = items\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42865
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =ID (ID ,ID [LIT ])\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID =](ID ,ID [LIT ])\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_child_def_suite_items1(p):\n    ''' child_def_suite_items : child_def_suite_item '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42866
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID (LIT ]]\n"
    },
    {
        "code": "\n\ndef p_child_def_suite_items2(p):\n    ''' child_def_suite_items : child_def_suite_items child_def_suite_item '''\n    p[0] = p[1] + [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 42867
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n    ["
    },
    {
        "code": "\n\ndef p_child_def_suite_item(p):\n    ''' child_def_suite_item : child_def_simple_item\n                             | decl_funcdef\n                             | child_def\n                             | template_inst '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42868
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID :\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_child_def_simple_item1(p):\n    ''' child_def_simple_item : binding\n                              | ex_binding\n                              | alias_expr\n                              | storage_expr '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 42869
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID []=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_child_def_simple_item2(p):\n    ''' child_def_simple_item : PASS NEWLINE '''\n    p[0] = None\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42870
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID None ID ):\n    LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# Binding\n#------------------------------------------------------------------------------\ndef p_binding(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 42871
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    await pass \n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# ExBinding\n#------------------------------------------------------------------------------\ndef p_ex_binding(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 42872
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (global ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_ex_dotted_names1(p):\n    ''' ex_dotted_names : DOT NAME '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42873
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID :\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_ex_dotted_names2(p):\n    ''' ex_dotted_names : DOT NAME ex_dotted_names '''\n    p[0] = [p[2]] + p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 42874
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n    *"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# OperatorExpr\n#------------------------------------------------------------------------------\ndef p_operator_expr1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 42875
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n+\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_operator_expr2(p):\n    if not isinstance(body, _INVERTABLE):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42876
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID return ):\n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef p_operator_expr3(p):\n    for item in ast.walk(mod):\n        if type(item) in _NOTIFICATION_DISALLOWED:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42877
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID (ID ):\n        if ID (ID )in ID :\n            pass \n",
        "wrong_code": "\n\ndef ID ID ):\n    for ID in ID .ID (ID ):\n        if ID (ID )in ID :\n            pass \n"
    },
    {
        "code": "\n\ndef _validate_decl_funcdef(funcdef, lexer):\n    for item in walker:\n        if type(item) in _DECL_FUNCDEF_DISALLOWED:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42878
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID :\n        if ID (ID )in ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID :\n        if ID is ID )in ID :\n            pass \n"
    },
    {
        "code": "\n\ndef p_decl_funcdef1(p):\n    if p[1] != 'func':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 42879
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID [LIT ]!=LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID [LIT ]!=LIT -\n        pass \n"
    },
    {
        "code": "\n\ndef p_decl_funcdef2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 42880
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n.def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef check_const(name, node):\n    if name in param_names:\n        pass\n    elif name in const_names:\n        pass\n    if msg is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42881
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID :\n        pass \n    elif ID in ID :\n        pass \n    if ID is not ID :\n        pass \n",
        "wrong_code": "or \ndef ID (ID ,ID ):\n    if ID in ID :\n        pass \n    elif ID in ID :\n        pass \n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\n\ndef p_template1(p):\n    ''' template : template_impl '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42882
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_template2(p):\n    ''' template : pragmas template_impl '''\n    node = p[2]\n    node.pragmas = p[1]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 77,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 42883
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT =ID \n"
    },
    {
        "code": "\n\ndef p_template_impl1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42884
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )::\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_impl2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42885
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_impl3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42886
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass assert "
    },
    {
        "code": "\n\ndef p_template_suite(p):\n    ''' template_suite : NEWLINE INDENT template_suite_items DEDENT '''\n    # Filter out any pass statements\n    p[0] = filter(None, p[3])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42887
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID [LIT ]=ID (ID ,ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID :\n    LIT \n    #COMMENT\n\n    ID [LIT ]=ID (ID ,ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_template_doc_suite(p):\n    ''' template_doc_suite : NEWLINE INDENT STRING NEWLINE template_suite_items DEDENT '''\n    # Filter out any pass statements\n    p[0] = (p[3], filter(None, p[5]))\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 82,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42888
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID [LIT ]=(ID [LIT ],ID (ID ,ID [LIT ]))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    ID [LIT ]=(ID [LIT ],ID (ID ,ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_template_suite_items1(p):\n    ''' template_suite_items : template_suite_item '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42889
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_suite_items2(p):\n    ''' template_suite_items : template_suite_items template_suite_item '''\n    p[0] = p[1] + [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 42890
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT +[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_suite_item(p):\n    ''' template_suite_item : template_simple_item\n                            | child_def\n                            | template_inst '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42891
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID try ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_template_simple_item1(p):\n    ''' template_simple_item : const_expr '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42892
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID )\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_template_simple_item2(p):\n    ''' template_simple_item : PASS NEWLINE '''\n    p[0] = None\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42893
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID None :\n    LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_params1(p):\n    ''' template_params : LPAR RPAR '''\n    node = enaml_ast.TemplateParameters()\n    node.lineno = p.lineno(1)\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 42894
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID try ID .ID (LIT )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_params2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 42895
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nassert def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_paramlist1(p):\n    ''' template_paramlist : template_param '''\n    p[0] = ([p[1]], '')\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 42896
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]],LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [def LIT ]],LIT )\n"
    },
    {
        "code": "\n\ndef p_template_paramlist2(p):\n    ''' template_paramlist : STAR NAME '''\n    p[0] = ([], p[2])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 42897
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([],ID [LIT ])\n",
        "wrong_code": "\n\ndef ,ID (ID ):\n    LIT \n    ID [LIT ]=([],ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_template_paramlist3(p):\n    ''' template_paramlist : template_param template_paramlist_list '''\n    p[0] = ([p[1]] + p[2], '')\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42898
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]]+ID [LIT ],LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]]+ID [LIT ],LIT \n"
    },
    {
        "code": "\n\ndef p_template_paramlist4(p):\n    ''' template_paramlist : template_param COMMA STAR NAME '''\n    p[0] = ([p[1]], p[4])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 42899
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]],ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]](,ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_template_paramlist5(p):\n    ''' template_paramlist : template_param template_paramlist_list COMMA STAR NAME '''\n    p[0] = ([p[1]] + p[2], p[5])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42900
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]]+ID [LIT ],ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=(raise ID [LIT ]]+ID [LIT ],ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_template_paramlist_list1(p):\n    ''' template_paramlist_list : COMMA template_param '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 42901
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_paramlist_list2(p):\n    ''' template_paramlist_list : template_paramlist_list COMMA template_param '''\n    p[0] = p[1] + [p[3]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 42902
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID ()ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_param1(p):\n    ''' template_param : NAME '''\n    node = enaml_ast.PositionalParameter()\n    node.lineno = p.lineno(1)\n    node.name = p[1]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 89,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 42903
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT -\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_param2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42904
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID =:\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_param3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 42905
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \nasync "
    },
    {
        "code": "\n\ndef p_template_inst1(p):\n    ''' template_inst : template_inst_impl '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 42906
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT \n"
    },
    {
        "code": "\n\ndef p_template_inst2(p):\n    ''' template_inst : pragmas template_inst_impl '''\n    node = p[2]\n    node.pragmas = p[1]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42907
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_inst_impl1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 42908
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass lambda \n"
    },
    {
        "code": "\n\ndef p_template_inst_impl2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42909
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef \n(ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_inst_impl3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 42910
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nelif def ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_inst_impl4(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 42911
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    /\n"
    },
    {
        "code": "\n\ndef p_template_args1(p):\n    ''' template_args : LPAR RPAR '''\n    node = enaml_ast.TemplateArguments()\n    node.lineno = p.lineno(1)\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42912
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\nas ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef _fixup_template_args(node):\n    for arg in node.args:\n        if arg.lineno == -1:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 42913
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID :\n        if ID .ID ==-LIT :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID .ID :\n        ID .ID ==-LIT :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\n\ndef p_template_args2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 42914
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \n    lambda "
    },
    {
        "code": "\n\ndef p_template_arglist1(p):\n    ''' template_arglist : template_argument '''\n    p[0] = ([p[1]], None)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 42915
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]],ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\nfrom     LIT \n    ID [LIT ]=([ID [LIT ]],ID )\n"
    },
    {
        "code": "\n\ndef p_template_arglist2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42916
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID [ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_arglist3(p):\n    ''' template_arglist : template_argument template_arglist_list '''\n    p[0] = ([p[1]] + p[2], None)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 60,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 42917
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]]+ID [LIT ],ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=([ID [LIT ]]+ID [LIT import ,ID )\n"
    },
    {
        "code": "\n\ndef p_template_arglist4(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 42918
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\nis     pass \n"
    },
    {
        "code": "\n\ndef p_template_arglist5(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42919
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\nfinally ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_template_arglist_list1(p):\n    if arg.lineno == -1:\n        arg.lineno = p.lineno(1)\n    p[0] = [arg]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42920
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID ==-LIT :\n        ID .ID =ID .ID (LIT )\n    ID [LIT ]=[ID ]\n",
        "wrong_code": "\n\ndef ID ()):\n    if ID .ID ==-LIT :\n        ID .ID =ID .ID (LIT )\n    ID [LIT ]=[ID ]\n"
    },
    {
        "code": "\n\ndef p_template_arglist_list2(p):\n    if arg.lineno == -1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 42921
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID .ID ==-LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID .ID ==-LIT :\n        pass \nif "
    },
    {
        "code": "\n\ndef p_template_argument1(p):\n    ''' template_argument : test '''\n    expr = ast.Expression(body=p[1])\n    node = enaml_ast.PythonExpression(ast=expr)\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 88,
            "fix_type": "delete",
            "id": 42922
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID =ID [LIT ])\n    ID =ID .ID (ID =ID )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID =ID [LIT ])\n    ID =ID .ID (ID =ID )\n    ID try [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_argument2(p):\n    node = enaml_ast.PythonExpression(ast=expr)\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42923
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID (ID =ID )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef (ID ):\n    ID =ID .ID (ID =ID )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_ids2(p):\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42924
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID [LIT ]=ID \n",
        "wrong_code": "]\n\ndef ID (ID ):\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_ids3(p):\n    ''' template_ids : STAR NAME '''\n    node = enaml_ast.TemplateIdentifiers()\n    node.lineno = p.lineno(1)\n    node.starname = p[2]\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 42925
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\nelif ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_ids4(p):\n    p[0] = node\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42926
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):(\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_id_list1(p):\n    ''' template_id_list : NAME COMMA '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42927
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    and \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_id_list2(p):\n    ''' template_id_list : template_id_list NAME COMMA '''\n    p[0] = p[1] + [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42928
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    :[LIT ]=ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_inst_suite(p):\n    ''' template_inst_suite : NEWLINE INDENT template_inst_suite_items DEDENT '''\n    p[0] = p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 42929
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n    with "
    },
    {
        "code": "\n\ndef p_template_inst_suite_items1(p):\n    ''' template_inst_suite_items : template_inst_suite_items template_inst_suite_item '''\n    p[0] = p[1] + [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42930
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_inst_suite_items2(p):\n    ''' template_inst_suite_items : template_inst_suite_item '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 42931
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID )[LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_template_inst_suite_item1(p):\n    ''' template_inst_suite_item : template_inst_binding '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 42932
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT for ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_template_inst_suite_item2(p):\n    ''' template_inst_suite_item : PASS NEWLINE '''\n    p[0] = None\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42933
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):    LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_template_inst_binding(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 42934
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\n\n#------------------------------------------------------------------------------\n# Python Grammar\n#------------------------------------------------------------------------------\ndef p_suite1(p):\n    if isinstance(stmt, list):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 105,
            "fix_type": "delete",
            "id": 42935
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass from \n"
    },
    {
        "code": "\n\ndef p_suite2(p):\n    ''' suite : NEWLINE INDENT stmt_list DEDENT '''\n    p[0] = p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42936
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID None :\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_stmt_list1(p):\n    if isinstance(stmt, list):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 42937
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n\n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef p_stmt_list2(p):\n    if isinstance(stmt, list):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 42938
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ==if ID (ID ,ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef p_stmt(p):\n    ''' stmt : simple_stmt\n             | compound_stmt '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 42939
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID if ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_simple_stmt1(p):\n    ''' simple_stmt : small_stmt NEWLINE '''\n    stmt = p[1]\n    stmt.lineno = p.lineno(2)\n    ast.fix_missing_locations(stmt)\n    p[0] = stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42940
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =ID .ID (LIT )\n    ID .ID (ID )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID break ID =ID .ID (LIT )\n    ID .ID (ID )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_simple_stmt2(p):\n    for stmt in stmts:\n        pass\n    p[0] = stmts\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42941
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID :\n        pass \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef (ID ):\n    for ID in ID :\n        pass \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_small_stmt_list1(p):\n    ''' small_stmt_list : small_stmt SEMI '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 42942
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    for ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_small_stmt_list2(p):\n    ''' small_stmt_list : small_stmt small_stmt_list_list '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 42943
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID )def :\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_small_stmt_list3(p):\n    ''' small_stmt_list : small_stmt small_stmt_list_list SEMI '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42944
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n    as "
    },
    {
        "code": "\n\ndef p_small_stmt_list_list1(p):\n    ''' small_stmt_list_list : SEMI small_stmt '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 42945
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):nonlocal \n    LIT \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_small_stmt_list_list2(p):\n    ''' small_stmt_list_list : small_stmt_list_list SEMI small_stmt '''\n    p[0] = p[1] + [p[3]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 42946
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_small_stmt1(p):\n    ''' small_stmt : expr_stmt\n                   | print_stmt\n                   | del_stmt\n                   | pass_stmt\n                   | flow_stmt\n                   | import_stmt\n                   | global_stmt\n                   | exec_stmt\n                   | assert_stmt '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 42947
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID break (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_print_stmt1(p):\n    ''' print_stmt : PRINT '''\n    prnt = ast.Print()\n    prnt.dest = None\n    prnt.values = []\n    prnt.nl = True\n    p[0] = prnt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 42948
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    [LIT \n    ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =[]\n    ID .ID =LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_print_stmt2(p):\n    prnt.dest = None\n    prnt.values = [p[2]]\n    prnt.nl = True\n    p[0] = prnt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42949
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID \n    ID .ID =[ID [LIT ]]\n    ID .ID =LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID =ID \n    ID .ID =[ID [continue ]]\n    ID .ID =LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_print_stmt3(p):\n    if all_values[-1] is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42950
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID [-LIT ]is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (not ):\n    if ID [-LIT ]is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef p_print_stmt4(p):\n    prnt = ast.Print()\n    prnt.dest = p[3]\n    prnt.values = []\n    prnt.nl = True\n    p[0] = prnt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42951
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =[]\n    ID .ID =LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    .ID =[]\n    ID .ID =LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_print_stmt5(p):\n    prnt.values = [p[5]]\n    prnt.nl = True\n    p[0] = prnt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 42952
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =[ID [LIT ]]\n    ID .ID =LIT \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID =[ID [LIT ]]\n    ID .ID =LIT \n    ID [LIT ]try =ID \n"
    },
    {
        "code": "\n\ndef p_print_stmt6(p):\n    if all_values[-1] is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 42953
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID [-LIT ]is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (if ID ):\n    if ID [-LIT ]is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef p_print_list1(p):\n    ''' print_list : test COMMA '''\n    p[0] = [p[1], None]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 42954
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ],ID ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]break ,ID ]\n"
    },
    {
        "code": "\n\ndef p_print_list2(p):\n    ''' print_list : test print_list_list '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 42955
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_print_list3(p):\n    ''' print_list : test print_list_list COMMA '''\n    p[0] = [p[1]] + p[2] + [None]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42956
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]+[ID ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    from [LIT ]=[ID [LIT ]]+ID [LIT ]+[ID ]\n"
    },
    {
        "code": "\n\ndef p_print_list_list1(p):\n    ''' print_list_list : COMMA test '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42957
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID while LIT ]]\n"
    },
    {
        "code": "\n\ndef p_print_list_list2(p):\n    ''' print_list_list : print_list_list COMMA test '''\n    p[0] = p[1] + [p[3]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 42958
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT nonlocal ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_del_stmt(p):\n    set_context(exprlist, Del, p)\n    del_stmt = ast.Delete()\n    del_stmt.targets = [exprlist]\n    p[0] = del_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 42959
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID (ID ,ID ,ID )\n    ID =ID .ID ()\n    ID .ID =[ID ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID (ID ,ID ID )\n    ID =ID .ID ()\n    ID .ID =[ID ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_pass_stmt(p):\n    ''' pass_stmt : PASS '''\n    pass_stmt = ast.Pass()\n    pass_stmt.lineno = p.lineno(1)\n    p[0] = pass_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42960
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_flow_stmt(p):\n    ''' flow_stmt : break_stmt\n                  | continue_stmt\n                  | return_stmt\n                  | raise_stmt\n                  | yield_stmt '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 42961
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\ndel "
    },
    {
        "code": "\n\ndef p_break_stmt(p):\n    ''' break_stmt : BREAK '''\n    break_stmt = ast.Break()\n    break_stmt.lineno = p.lineno(1)\n    p[0] = break_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 42962
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_continue_stmt(p):\n    ''' continue_stmt : CONTINUE '''\n    continue_stmt = ast.Continue()\n    continue_stmt.lineno = p.lineno(1)\n    p[0] = continue_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42963
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID ID .ID (LIT )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_return_stmt1(p):\n    ''' return_stmt : RETURN '''\n    ret = ast.Return()\n    ret.value = None\n    p[0] = ret\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42964
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (]):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_return_stmt2(p):\n    ''' return_stmt : RETURN testlist '''\n    value = ast_for_testlist(p[2])\n    ret = ast.Return()\n    ret.value = value\n    p[0] = ret\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 64,
            "fix_type": "delete",
            "id": 42965
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID [LIT ])\n    ID =ID .ID ()\n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID [LIT ])\n    ID =ID .ID (is )\n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_raise_stmt1(p):\n    ''' raise_stmt : RAISE '''\n    raise_stmt = ast.Raise()\n    raise_stmt.type = None\n    raise_stmt.inst = None\n    raise_stmt.tback = None\n    p[0] = raise_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42966
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if \n    ID =ID .ID ()\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_raise_stmt2(p):\n    raise_stmt = ast.Raise()\n    raise_stmt.type = p[2]\n    raise_stmt.inst = None\n    raise_stmt.tback = None\n    p[0] = raise_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 80,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 42967
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID .global =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_raise_stmt3(p):\n    raise_stmt.type = p[2]\n    raise_stmt.inst = p[4]\n    raise_stmt.tback = None\n    p[0] = raise_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42968
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID def ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_raise_stmt4(p):\n    raise_stmt.tback = p[6]\n    p[0] = raise_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 42969
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID await ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_yield_stmt(p):\n    ''' yield_stmt : yield_expr '''\n    p[0] = ast.Expr(value=p[1])\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42970
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID (ID =ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID []]=ID .ID (ID =ID [LIT ])\n"
    },
    {
        "code": "\n\ndef p_yield_expr1(p):\n    ''' yield_expr : YIELD '''\n    p[0] = ast.Yield(value=None, lineno=p.lineno(1))\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 42971
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID .ID (ID =ID ,ID =ID .ID (LIT ))\n",
        "wrong_code": "\n\ndef ID (ID finally :\n    LIT \n    ID [LIT ]=ID .ID (ID =ID ,ID =ID .ID (LIT ))\n"
    },
    {
        "code": "\n\ndef p_yield_expr2(p):\n    ''' yield_expr : YIELD testlist '''\n    value = ast_for_testlist(p[2])\n    p[0] = ast.Yield(value=value, lineno=p.lineno(1))\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 42972
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID [LIT ])\n    ID [LIT ]=ID .ID (ID =ID ,ID =ID .ID (LIT ))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID (ID [LIT ])\n    ID [LIT ]ID .ID (ID =ID ,ID =ID .ID (LIT ))\n"
    },
    {
        "code": "\n\ndef p_global_stmt1(p):\n    global_stmt = ast.Global()\n    global_stmt.names = [p[2]]\n    global_stmt.lineno = p.lineno(1)\n    p[0] = global_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 42973
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =[ID [LIT ]]\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID finally )\n    ID .ID =[ID [LIT ]]\n    ID .ID =ID .ID (LIT )\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_global_stmt2(p):\n    p[0] = global_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42974
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID [LIT ]=\n"
    },
    {
        "code": "\n\ndef p_globals_list1(p):\n    ''' globals_list : COMMA NAME globals_list '''\n    p[0] = [p[2]] + p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42975
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):and     LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_globals_list2(p):\n    ''' globals_list : COMMA NAME '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 42976
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\nasync "
    },
    {
        "code": "\n\ndef p_exec_stmt1(p):\n    exec_stmt = ast.Exec()\n    exec_stmt.body = p[2]\n    exec_stmt.globals = None\n    exec_stmt.locals = None\n    p[0] = exec_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 42977
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID ()\n    ID .ID =ID [LIT ]ID .ID =ID \n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_exec_stmt2(p):\n    exec_stmt.body = p[2]\n    exec_stmt.globals = p[4]\n    exec_stmt.locals = None\n    p[0] = exec_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 42978
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT lambda \n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_exec_stmt3(p):\n    exec_stmt.locals = p[6]\n    p[0] = exec_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 42979
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID =ID [LIT ]or \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_assert_stmt1(p):\n    ''' assert_stmt : ASSERT test '''\n    assert_stmt = ast.Assert()\n    assert_stmt.test = p[2]\n    assert_stmt.msg = None\n    p[0] = assert_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 42980
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID LIT ]\n    ID .ID =ID \n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_assert_stmt2(p):\n    ''' assert_stmt : ASSERT test COMMA test '''\n    assert_stmt = ast.Assert()\n    assert_stmt.test = p[2]\n    assert_stmt.msg = p[4]\n    p[0] = assert_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 42981
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID finally .ID =ID [LIT ]\n    ID .ID =ID [LIT ]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_expr_stmt1(p):\n    ''' expr_stmt : testlist '''\n    expr = ast.Expr()\n    expr.value = ast_for_testlist(p[1])\n    p[0] = expr\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42982
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID (ID [LIT ])\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID ()\n    ID .ID =ID (ID global LIT ])\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_expr_stmt2(p):\n    if type(lhs) not in aug_assign_allowed:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 42983
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID )not in ID :\n        pass \n",
        "wrong_code": "class \n\ndef ID (ID ):\n    if ID (ID )not in ID :\n        pass \n"
    },
    {
        "code": "\n\ndef p_expr_stmt3(p):\n    for item in targets:\n        if type(item) == ast.Yield:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 83,
            "fix_type": "modify",
            "fix_token": "",
            "id": 42984
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID :\n        if ID (ID )==ID .ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID :\n        if ID (ID )==ID .ID :\n            pass \n:"
    },
    {
        "code": "\n\ndef p_augassign(p):\n    ''' augassign : AMPEREQUAL\n                  | CIRCUMFLEXEQUAL\n                  | DOUBLESLASHEQUAL\n                  | DOUBLESTAREQUAL\n                  | LEFTSHIFTEQUAL\n                  | MINUSEQUAL\n                  | PERCENTEQUAL\n                  | PLUSEQUAL\n                  | RIGHTSHIFTEQUAL\n                  | SLASHEQUAL\n                  | STAREQUAL\n                  | VBAREQUAL '''\n    lineno = p.lineno(1)\n    op = augassign_table[p[1]]\n    p[0] = (op, lineno)\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 88,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 42985
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT )\n    ID =ID [ID [LIT ]]\n    ID [LIT ]=(ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT )\n    ID =ID [ID [LIT ]]\n    ID [LIT ]=(ID async ID )\n"
    },
    {
        "code": "\n\ndef p_equal_list1(p):\n    ''' equal_list : EQUAL testlist\n                   | EQUAL yield_expr '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 42986
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]ID ]\n"
    },
    {
        "code": "\n\ndef p_equal_list2(p):\n    ''' equal_list : EQUAL testlist equal_list\n                   | EQUAL yield_expr equal_list '''\n    p[0] = [p[2]] + p[3]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 42987
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_testlist1(p):\n    ''' testlist : test '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 42988
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT =ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_testlist2(p):\n    ''' testlist : test COMMA '''\n    p[0] = [p[1]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 42989
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\nclass def ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_testlist3(p):\n    ''' testlist : test testlist_list '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "[",
            "id": 42990
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID LIT ]=[ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_testlist4(p):\n    ''' testlist : test testlist_list COMMA '''\n    p[0] = [p[1]] + p[2]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 42991
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]+ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [and ]=[ID [LIT ]]+ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_testlist_list1(p):\n    ''' testlist_list : COMMA test '''\n    p[0] = [p[2]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 42992
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=[ID [LIT ]]\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT class ]=[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_testlist_list2(p):\n    ''' testlist_list : testlist_list COMMA test '''\n    p[0] = p[1] + [p[3]]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 42993
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n",
        "wrong_code": "\n\nraise def ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]+[ID [LIT ]]\n"
    },
    {
        "code": "\n\ndef p_compound_stmt(p):\n    ''' compound_stmt : if_stmt\n                      | while_stmt\n                      | for_stmt\n                      | try_stmt\n                      | with_stmt\n                      | funcdef\n                      | classdef\n                      | decorated '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 42994
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ):\nasync     LIT \n    ID [LIT ]=ID [LIT ]\n"
    },
    {
        "code": "\n\ndef p_if_stmt1(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42995
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):None     pass \n"
    },
    {
        "code": "\n\ndef p_if_stmt2(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 42996
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef p_if_stmt3(p):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42997
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass raise "
    },
    {
        "code": "\n\ndef p_if_stmt4(p):\n    while elif_stmt.orelse:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 42998
        },
        "correct_code": "\n\ndef ID (ID ):\n    while ID .ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    while ID .ID :\n        pass break "
    },
    {
        "code": "\n\ndef p_elif_stmts1(p):\n    ''' elif_stmts : elif_stmt elif_stmts '''\n    elif_stmt = p[1]\n    elif_stmt.orelse = [p[2]]\n    p[0] = elif_stmt\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 42999
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =[ID [LIT ]]\n    ID [LIT ]=ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID [LIT ]\n    ID .ID =[ID continue LIT ]]\n    ID [LIT ]=ID \n"
    },
    {
        "code": "\n\ndef p_elif_stmts2(p):\n    ''' elif_stmts : elif_stmt '''\n    p[0] = p[1]\n",
        "metadata": {
            "file": "py150_files/data/nucleic/enaml/enaml/core/parser.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 43000
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID [LIT ]=ID [LIT ]\n",
        "wrong_code": "\n\ndef ID (ID ]):\n    LIT \n    ID [LIT ]=ID [LIT ]\n"
    }
]