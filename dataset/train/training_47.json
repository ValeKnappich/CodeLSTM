[
    {
        "code": "@context\ndef test():\n    self.assertIsNone(context.exc)\n    self.assertTrue(context.started)\n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_context_management/test_external.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23501
        },
        "correct_code": "@ID \ndef ID ():\n    ID .ID (ID .ID )\n    ID .ID (ID .ID )\n",
        "wrong_code": "@ID \ndef ID ():\n    ID .(ID .ID )\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "@ContextManagerType\ndef woohoo(y):\n    state.append(y)\n    yield\n    state.append(999)\n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_context_management/test_external.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23502
        },
        "correct_code": "@ID \ndef ID (ID ):\n    ID .ID (ID )\n    yield \n    ID .ID (LIT )\n",
        "wrong_code": "@ID \ndef while (ID ):\n    ID .ID (ID )\n    yield \n    ID .ID (LIT )\n"
    },
    {
        "code": "\n@woohoo(1)\ndef test(x):\n    self.assertEqual(state, [1])\n    state.append(x)\n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_context_management/test_external.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23503
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ):\n    ID .ID (ID ,[LIT ])\n    ID .ID (ID )\n",
        "wrong_code": "\n@ID (LIT )\n!ID (ID ):\n    ID .ID (ID ,[LIT ])\n    ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef test_contextmanager_as_decorator(self):\n    @ContextManagerType\n    def woohoo(y):\n        pass\n\n    @woohoo(1)\n    def test(x):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_context_management/test_external.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23504
        },
        "correct_code": "\n\ndef ID (ID ):\n    @ID \n    def ID (ID ):\n        pass \n\n    @ID (LIT )\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    @ID \n    def ID (ID ):\n        pass \n\n    @ID (while )\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_restrict_number_to_range():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_math_tools/test_restrict_number_to_range.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23505
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ):\n    pass \n"
    },
    {
        "code": "        \n        \ndef test():\n    \n    while volatile_things:\n        if _is_weakreffable(volatile_thing):\n            pass\n        else:\n            pass\n\n            \n    while unvolatile_things:\n        pass\n        \n        \n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_sleek_reffing/test_cute_sleek_value_dict/tests.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23506
        },
        "correct_code": "\n\ndef ID ():\n\n    while ID :\n        if ID (ID ):\n            pass \n        else :\n            pass \n\n\n    while ID :\n        pass \n\n\n",
        "wrong_code": "\n\ndef ID ():\n\n    while ID :\n        if ID (ID ):\n            pass return else :\n            pass \n\n\n    while ID :\n        pass \n\n\n"
    },
    {
        "code": "def test_none():\n    \n\n    for key in csvd.keys():\n        pass\n    \n    \n        \n",
        "metadata": {
            "file": "py150_files/data/cool-RR/python_toolbox/source_py3/test_python_toolbox/test_sleek_reffing/test_cute_sleek_value_dict/tests.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 23507
        },
        "correct_code": "def ID ():\n\n\n    for ID in ID .ID ():\n        pass \n\n\n\n",
        "wrong_code": "def ID ():\ncontinue \n\n    for ID in ID .ID ():\n        pass \n\n\n\n"
    },
    {
        "code": "\n\n@pytest.fixture\ndef json_codec():\n    return CoreJSONCodec()\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23508
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    return ID ()\n",
        "wrong_code": "\n\n@ID .ID \ndef ID ():\n    return ID ()elif "
    },
    {
        "code": "\n\n@pytest.fixture\ndef html_codec():\n    return CoreHTMLCodec()\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 3,
            "fix_type": "delete",
            "id": 23509
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    return ID ()\n",
        "wrong_code": "\n\n@[ID .ID \ndef ID ():\n    return ID ()\n"
    },
    {
        "code": "\n\n@pytest.fixture\ndef doc():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23510
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    pass \n",
        "wrong_code": "\n\n@ID .return \ndef ID ():\n    pass \n"
    },
    {
        "code": "\n\n# Documents have a mapping to python primatives in JSON style.\n\ndef test_document_to_primative(doc):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23511
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef :(ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_primative_to_document(doc):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 23512
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\nnonlocal     pass \n"
    },
    {
        "code": "\n\ndef test_error_to_primative():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23513
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\nfor     pass \n"
    },
    {
        "code": "\n\ndef test_primative_to_error():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23514
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID (class :\n    pass \n"
    },
    {
        "code": "\n\n# Codecs can load a document successfully.\n\ndef test_minimal_document(json_codec):\n    assert doc.url == ''\n    assert doc.title == ''\n    assert doc == {}\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23515
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    assert ID .ID ==LIT \n    assert ID .ID ==LIT \n    assert ID =={}\n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    assert ID .ID ==LIT \n    assert ID .==LIT \n    assert ID =={}\n"
    },
    {
        "code": "\n\ndef test_minimal_error(json_codec):\n    \"\"\"\n    Ensure we can load a minimal error message encoding.\n    \"\"\"\n    error = json_codec.load(b'{\"_type\":\"error\",\"_meta\":{\"title\":\"Failure\"},\"messages\":[\"failed\"]}')\n    assert error == Error(title=\"Failure\", content={'messages': ['failed']})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23516
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID (LIT )\n    assert ID ==ID (ID =LIT ,ID ={LIT :[LIT ]})\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .!=(LIT )\n    assert ID ==ID (ID =LIT ,ID ={LIT :[LIT ]})\n"
    },
    {
        "code": "\n\n# Parse errors should be raised for invalid encodings.\n\ndef test_malformed_json(json_codec):\n    \"\"\"\n    Invalid JSON should raise a ParseError.\n    \"\"\"\n    with pytest.raises(ParseError):\n        json_codec.load(b'_')\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23517
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID .ID (LIT )\n",
        "wrong_code": "\n+#COMMENT\n\n\ndef ID (ID ):\n    LIT \n    with ID .ID (ID ):\n        ID .ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_not_a_document(json_codec):\n    \"\"\"\n    Valid JSON that does not return a document should be coerced into one.\n    \"\"\"\n    assert json_codec.load(b'{}') == Document()\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23518
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    assert ID .ID (LIT )==ID ()\n",
        "wrong_code": "\n\ndef (ID ):\n    LIT \n    assert ID .ID (LIT )==ID ()\n"
    },
    {
        "code": "\n\n# Encodings may have a verbose and a compact style.\n\ndef test_compact_style(json_codec):\n    doc = Document(content={'a': 123, 'b': 456})\n    bytes = json_codec.dump(doc)\n    assert bytes == b'{\"_type\":\"document\",\"a\":123,\"b\":456}'\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23519
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :LIT ,LIT :LIT })\n    ID =ID .ID (ID )\n    assert ID ==LIT \n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :LIT ,LIT :LIT })ID =ID .ID (ID )\n    assert ID ==LIT \n"
    },
    {
        "code": "\n\ndef test_verbose_style(json_codec):\n    doc = Document(content={'a': 123, 'b': 456})\n    bytes = json_codec.dump(doc, indent=True)\n    assert bytes == b\"\"\"{\n    \"_type\": \"document\",\n    \"a\": 123,\n    \"b\": 456\n}\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23520
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :LIT ,LIT :LIT })\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID ==LIT \n",
        "wrong_code": "\n\ndef ID (ID ):\n    !=ID (ID ={LIT :LIT ,LIT :LIT })\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID ==LIT \n"
    },
    {
        "code": "\n\n# Links should use compact format for optional fields, verbose for required.\n\ndef test_link_encodings(json_codec):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 23521
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID ()ID ):\n    pass \n"
    },
    {
        "code": "\n\n# Tests for graceful omissions.\n\ndef test_invalid_document_meta_ignored(json_codec):\n    doc = json_codec.load(b'{\"_type\": \"document\", \"_meta\": 1, \"a\": 1}')\n    assert doc == Document(content={\"a\": 1})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 79,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23522
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :LIT })\n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :})\n"
    },
    {
        "code": "\n\ndef test_invalid_document_url_ignored(json_codec):\n    doc = json_codec.load(b'{\"_type\": \"document\", \"_meta\": {\"url\": 1}, \"a\": 1}')\n    assert doc == Document(content={\"a\": 1})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 49,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23523
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :LIT })\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ==ID (ID ={LIT :LIT })\n"
    },
    {
        "code": "\n\ndef test_invalid_document_title_ignored(json_codec):\n    doc = json_codec.load(b'{\"_type\": \"document\", \"_meta\": {\"title\": 1}, \"a\": 1}')\n    assert doc == Document(content={\"a\": 1})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23524
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :LIT })\n",
        "wrong_code": "\n\ndef ID (ID ):if     ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :LIT })\n"
    },
    {
        "code": "\n\ndef test_invalid_link_url_ignored(json_codec):\n    doc = json_codec.load(b'{\"_type\": \"document\", \"link\": {\"_type\": \"link\", \"url\": 1}}')\n    assert doc == Document(content={\"link\": Link()})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23525
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :ID ()})\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID ID ={LIT :ID ()})\n"
    },
    {
        "code": "\n\ndef test_invalid_link_fields_ignored(json_codec):\n    doc = json_codec.load(b'{\"_type\": \"document\", \"link\": {\"_type\": \"link\", \"fields\": 1}}')\n    assert doc == Document(content={\"link\": Link()})\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23526
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :ID ()})\n",
        "wrong_code": "\n\ndef !=(ID ):\n    ID =ID .ID (LIT )\n    assert ID ==ID (ID ={LIT :ID ()})\n"
    },
    {
        "code": "\n\n# Tests for 'Content-Type' header lookup.\n\ndef test_get_default_decoder():\n    assert isinstance(negotiate_decoder(), CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23527
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID ():\n    assert ID (ID (),ID )\n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID ():\n    assert ID (ID (),ID +\n"
    },
    {
        "code": "\n\ndef test_get_supported_decoder():\n    assert isinstance(negotiate_decoder('application/vnd.coreapi+json'), CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 23528
        },
        "correct_code": "\n\ndef ID ():\n    assert ID (ID (LIT ),ID )\n",
        "wrong_code": "\n\ndef ID ():\n    assert ID (ID ID (LIT ),ID )\n"
    },
    {
        "code": "\n\ndef test_get_supported_decoder_with_parameters():\n    assert isinstance(negotiate_decoder('application/vnd.coreapi+json; verison=1.0'), CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23529
        },
        "correct_code": "\n\ndef ID ():\n    assert ID (ID (LIT ),ID )\n",
        "wrong_code": "\n\ndef ID ()for \n    assert ID (ID (LIT ),ID )\n"
    },
    {
        "code": "\n\ndef test_get_unsupported_decoder():\n    with pytest.raises(UnsupportedContentType):\n        negotiate_decoder('application/csv')\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23530
        },
        "correct_code": "\n\ndef ID ():\n    with ID .ID (ID ):\n        ID (LIT )\n",
        "wrong_code": "\n\ndef ID ():\nraise     with ID .ID (ID ):\n        ID (LIT )\n"
    },
    {
        "code": "\n\n# Tests for 'Accept' header lookup.\n\ndef test_get_default_encoder():\n    codec = negotiate_encoder()\n    assert isinstance(codec, CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23531
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID ():\n    ID =ID ()\n    assert ID (ID ,ID )\n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID ():\n    ID =ID raise )\n    assert ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_encoder_preference():\n    codec = negotiate_encoder(\n        accept='text/html; q=1.0, application/vnd.coreapi+json; q=1.0'\n    )\n    assert isinstance(codec, CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23532
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (\n    ID =LIT \n    )\n    assert ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID ():None \n    ID =ID (\n    ID =LIT \n    )\n    assert ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_get_accepted_encoder():\n    codec = negotiate_encoder(accept='application/vnd.coreapi+json')\n    assert isinstance(codec, CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23533
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (ID =LIT )\n    assert ID (ID ,ID )\n",
        "wrong_code": "\n\nawait ID ():\n    ID =ID (ID =LIT )\n    assert ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_get_underspecified_encoder():\n    codec = negotiate_encoder(accept='text/*')\n    assert isinstance(codec, CoreHTMLCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 23534
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (ID =LIT )\n    assert ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID (ID =LIT )\n    ,assert ID (ID ,ID )\n"
    },
    {
        "code": "\n\ndef test_get_unsupported_encoder():\n    with pytest.raises(NotAcceptable):\n        negotiate_encoder('application/csv')\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "with",
            "id": 23535
        },
        "correct_code": "\n\ndef ID ():\n    with ID .ID (ID ):\n        ID (LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    ID .ID (ID ):\n        ID (LIT )\n"
    },
    {
        "code": "\n\ndef test_get_unsupported_encoder_with_fallback():\n    codec = negotiate_encoder(accept='application/csv, */*')\n    assert isinstance(codec, CoreJSONCodec)\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 23536
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID (ID =LIT )\n    assert ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID ID (ID =LIT )\n    assert ID (ID ,ID )\n"
    },
    {
        "code": "\n\n# Tests for HTML rendering\n\ndef test_html_document_rendering(html_codec):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 23537
        },
        "correct_code": "\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n\ndef ID ==(ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_html_object_rendering(html_codec):\n    assert '<th>b</th>' in content\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 23538
        },
        "correct_code": "\n\ndef ID (ID ):\n    assert LIT in ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    assert LIT in ==ID \n"
    },
    {
        "code": "\n\ndef test_html_array_rendering(html_codec):\n    assert 'coreapi-array' in content\n    assert '<th>0</th>' in content\n    assert '<th>1</th>' in content\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23539
        },
        "correct_code": "\n\ndef ID (ID ):\n    assert LIT in ID \n    assert LIT in ID \n    assert LIT in ID \n",
        "wrong_code": "\n\ndef ID (ID ):    assert LIT in ID \n    assert LIT in ID \n    assert LIT in ID \n"
    },
    {
        "code": "\n\ndef test_html_link_rendering(html_codec):\n    doc = Document(content={'link': Link(url='/test/')})\n    content = html_codec.dump(doc)\n    assert 'coreapi-link' in content\n    assert 'href=\"/test/\"' in content\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23540
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :ID (ID =LIT )})\n    ID =ID .ID (ID )\n    assert LIT in ID \n    assert LIT in ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    del =ID (ID ={LIT :ID (ID =LIT )})\n    ID =ID .ID (ID )\n    assert LIT in ID \n    assert LIT in ID \n"
    },
    {
        "code": "\n\ndef test_html_error_rendering(html_codec):\n    doc = Error(content={'message': ['something failed']})\n    content = html_codec.dump(doc)\n    assert 'coreapi-error' in content\n    assert 'something failed' in content\n",
        "metadata": {
            "file": "py150_files/data/core-api/python-client/tests/test_codecs.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "}",
            "id": 23541
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :[LIT ]})\n    ID =ID .ID (ID )\n    assert LIT in ID \n    assert LIT in ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID (ID ={LIT :[LIT ])\n    ID =ID .ID (ID )\n    assert LIT in ID \n    assert LIT in ID \n"
    },
    {
        "code": "\ndef __init__( self, func ):\n    self.func_greenlet = greenlet(func)\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/fl/GreenletWrapper.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23542
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .try =ID (ID )\n"
    },
    {
        "code": "\ndef __call__( self, *args, **kwargs ):\n    self.func_greenlet.switch( *args, **kwargs )\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/fl/GreenletWrapper.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 23543
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (*ID and ,**ID )\n"
    },
    {
        "code": "\ndef done( self ):\n    return self.func_greenlet.dead\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/fl/GreenletWrapper.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 23544
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID return .ID \n"
    },
    {
        "code": "\ndef __init__( s, dtype, src_msgs, sink_msgs ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23545
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef done( s ):\n    return s.src.done and s.sink.done\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 23546
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID and ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID .elif ID and ID .ID .ID \n"
    },
    {
        "code": "\ndef line_trace( s ):\n    return s.src.line_trace() + \" | \" + s.sink.line_trace()\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23547
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID ()+LIT +ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID )]:\n    return ID .ID .ID ()+LIT +ID .ID .ID ()\n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------\n# Message Creator\n#-------------------------------------------------------------------------\ndef mk_msg( src, dest, seqnum, payload ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 23548
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,lambda ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------\n# TestSimpleNetSink test runner\n#-------------------------------------------------------------------------\ndef run_test( dump_vcd, src_msgs, sink_msgs ):\n    while not model.done():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23549
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ,ID ):\n    while not ID .ID ():\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\nimport #COMMENT\n\ndef ID (ID ,ID ,ID ):\n    while not ID .ID ():\n        pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------\n# TestSimpleNetSink unit test - Inorder Messages\n#-------------------------------------------------------------------------\ndef test_inorder_msgs( dump_vcd ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 23550
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\nelse #COMMENT\n\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------\n# TestSimpleNetSink unit test - Out of Order Messages\n#-------------------------------------------------------------------------\ndef test_outoforder_msgs( dump_vcd ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23551
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (del ):\n    pass \n"
    },
    {
        "code": "\n#-------------------------------------------------------------------------\n# TestSimpleNetSink unit test - Redundant Messages\n#-------------------------------------------------------------------------\ndef test_redundant_msgs( dump_vcd ):\n\n    with pytest.raises( AssertionError ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pclib/test/TestSimpleNetSink_test.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23552
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n\n    with ID .ID (ID :\n        pass \n"
    },
    {
        "code": "def __init__( s, dtype ):\n    s.msg = InPort  ( dtype )\n    s.val = InPort  ( 1 )\n    s.rdy = OutPort ( 1 )\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23553
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID (ID )\n    ID .ID =ID (LIT )\n    ID .ID =ID (LIT )\n",
        "wrong_code": "def (ID ,ID ):\n    ID .ID =ID (ID )\n    ID .ID =ID (LIT )\n    ID .ID =ID (LIT )\n"
    },
    {
        "code": "\ndef __init__( s, dtype ):\n    s.deq   = OutValRdyBundle( dtype )\n\n    s.full  = Wire( 1 )\n    s.wen   = Wire( 1 )\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 23554
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID (ID )\n\n    ID .ID =ID (LIT )\n    ID .ID =ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID (ID )\n\n    ID .ID =ID (LIT )try \n    ID .ID =ID (LIT )\n"
    },
    {
        "code": "\n@s.combinational\ndef comb():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23555
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    pass \n",
        "wrong_code": "\n@ID .ID \ndef ID ():\n    pass \n    =="
    },
    {
        "code": "\n\ndef line_trace( s ):\n\n    return \"{} () {}\".format( s.enq, s.deq )\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23556
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    return LIT .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\n\ndef ID (ID def :\n\n    return LIT .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef test_elaboration():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23557
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ()\n    pass \n"
    },
    {
        "code": "\ndef __init__( s, dtype ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23558
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ),ID ):\n    pass \n"
    },
    {
        "code": "\n#-----------------------------------------------------------------------\n# Test Elaboration\n#-----------------------------------------------------------------------\n\ndef test_connect():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 23559
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\nclass \ndef ID ():\n    pass \n"
    },
    {
        "code": "\n# Define functions mapping the test vector to ports in model\n\ndef tv_in( model, test_vector ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23560
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef tv_out( model, test_vector ):\n    if not test_vector[5] == '?':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23561
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID [LIT ]==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (,ID ):\n    if not ID [LIT ]==LIT :\n        pass \n"
    },
    {
        "code": "\ndef __init__( s, dtype, nports ):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23562
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID \nID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n@s.combinational\ndef comb():\n\n    for i in range( s.nports ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23563
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n\n    for ID in ID (ID .ID ):\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID ()-:\n\n    for ID in ID (ID .ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef line_trace( s ):\n    for enq, deq in zip( s.enq, s.deq ):\n        print_str += \"{} () {} \".format( enq, deq )\n\n    return print_str\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 74,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23564
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID ,ID in ID (ID .ID ,ID .ID ):\n        ID +=LIT .ID (ID ,ID )\n\n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID ,ID in ID (ID .ID ,ID .ID ):\n        ID +=LIT .(ID ,ID )\n\n    return ID \n"
    },
    {
        "code": "\n# Define functions mapping the test vector to ports in model\n\ndef tv_in( model, test_vector ):\n\n    for i in range( nports ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23565
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n    for ID in ID (ID )\n        pass \n"
    },
    {
        "code": "\ndef tv_out( model, test_vector ):\n\n    for i in range( nports ):\n        if not test_vector[5] == '?':\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 23566
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        if not ID [LIT ]==LIT :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        if not ID [LIT ]==in LIT :\n            pass \n"
    },
    {
        "code": "\ndef __init__( s, nbits, nports ):\n    s.deq = OutValRdyBundle[ nports ]( dtype )\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23567
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID [ID ](ID )\n",
        "wrong_code": ":def ID (ID ,ID ,ID ):\n    ID .ID =ID [ID ](ID )\n"
    },
    {
        "code": "\n@s.combinational\ndef comb():\n\n    for i in range( s.nports ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 23568
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n\n    for ID in ID (ID .ID ):\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID ():\n\n    for ID (ID (ID .ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef line_trace( s ):\n    for enq, deq in zip( s.enq, s.deq ):\n        print_str += \"{} () {} \".format( enq, deq )\n\n    return print_str\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23569
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID ,ID in ID (ID .ID ,ID .ID ):\n        ID +=LIT .ID (ID ,ID )\n\n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ,ID in ID (ID .ID ,ID .ID ):\n        ID +=LIT .ID (ID ,ID )\n\n    return ID \n"
    },
    {
        "code": "\n# Define functions mapping the test vector to ports in model\n\ndef tv_in( model, test_vector ):\n\n    for i in range( nports ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 23570
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        pass \nawait "
    },
    {
        "code": "\ndef tv_out( model, test_vector ):\n\n    for i in range( nports ):\n        if not test_vector[5] == '?':\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/model/PortBundle_test.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23571
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    for ID in ID (ID ):\n        if not ID [LIT ]==LIT :\n            pass \n",
        "wrong_code": "\ndef ID (ID pass ID ):\n\n    for ID in ID (ID ):\n        if not ID [LIT ]==LIT :\n            pass \n"
    },
    {
        "code": "def get_vcd_timescale( model ):\n    try:\n        return model.vcd_timescale\n    except AttributeError:\n        return DEFAULT_TIMESCALE\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/tools/simulation/vcd.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 23572
        },
        "correct_code": "def ID (ID ):\n    try :\n        return ID .ID \n    except ID :\n        return ID \n",
        "wrong_code": "def ID (ID ):\n    try :\n        return ID .ID \n        LIT except ID :\n        return ID \n"
    },
    {
        "code": "\ndef dedent( lines, trim=4 ):\n    return ''.join( [x[trim:]+'\\n' for x in lines.split('\\n')] ).lstrip()\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/tools/simulation/vcd.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23573
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    return LIT .ID ([ID [ID :]+LIT for ID in ID .ID (LIT )]).ID ()\n",
        "wrong_code": "\ndef ID while ID ,ID =LIT ):\n    return LIT .ID ([ID [ID :]+LIT for ID in ID .ID (LIT )]).ID ()\n"
    },
    {
        "code": "\n#-----------------------------------------------------------------------\n# write_vcd_header\n#-----------------------------------------------------------------------\ndef write_vcd_header( o, model ):\n\n    def dedent( lines, trim=4 ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/tools/simulation/vcd.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23574
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ,ID ):\n\n    def ID (ID ,ID =LIT ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef *(ID ,ID ):\n\n    def ID (ID ,ID =LIT ):\n        pass \n"
    },
    {
        "code": "\n#-----------------------------------------------------------------------\n# mangle_name\n#-----------------------------------------------------------------------\n# Mangle signal names so that lists of signals/models show up correctly.\ndef mangle_name( name ):\n    return name.replace('[','(').replace(']',')')\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/tools/simulation/vcd.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 23575
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    return ID .ID (LIT ,LIT ).ID (LIT ,LIT )\n",
        "wrong_code": "\n#COMMENT\n\nelse #COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    return ID .ID (LIT ,LIT ).ID (LIT ,LIT )\n"
    },
    {
        "code": "\n# Function to map an integer n to a new vcd symbol\ndef next_vcd_symbol(n):\n    while q > 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cornell-brg/pymtl/pymtl/tools/simulation/vcd.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 23576
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    while ID >LIT :\n        pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ):\n    while ID >LIT :\n        finally \n"
    },
    {
        "code": "def check( cls, value ):\n    \"\"\"Is the value an instance of this class?\"\"\"\n    return isinstance( value, BasePath )\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 23577
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID )\n",
        "wrong_code": "def ID (ID (,ID ):\n    LIT \n    return ID (ID ,ID )\n"
    },
    {
        "code": "\t\ndef __repr__( self ):\n    return '%s(%s)'%(self.__class__.__name__, super(BasePath,self).__repr__( ))\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23578
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID ,ID (ID ,ID ).ID ())\n",
        "wrong_code": "\ndef elif (ID ):\n    return LIT %(ID .ID .ID ,ID (ID ,ID ).ID ())\n"
    },
    {
        "code": "def __eq__( self, other ):\n    \"\"\"Attempt to determine if we are equal to other__\"\"\"\n    other = self.__class__.coerce( other )\n    return self.canonical() == other.canonical()\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23579
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID .ID ()\n",
        "wrong_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID assert )==ID .ID ()\n"
    },
    {
        "code": "def isParent (self, other):\n    \"\"\"Return true if we are the parent of the other path\n\n\t\tOther can be a string specifier or a Path object\n\t\t\"\"\"\n    other = self.__class__.coerce( other )\n    return other.parent() == self\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23580
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .continue (ID )\n    return ID .ID ()==ID \n"
    },
    {
        "code": "def isChild (self, other):\n    \"\"\"Return true if we are a child of the other path\"\"\"\n    other = self.__class__.coerce( other )\n    return self.parent() == other\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 23581
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID \n",
        "wrong_code": "def ID (ID ,ID ):\nawait     LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID \n"
    },
    {
        "code": "def isDescendent( self, other ):\n    \"\"\"Return true if we are a descendent of the other path\"\"\"\n    other = self.__class__.coerce( other )\n    return other.isAncestor( self )\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 75,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23582
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )and "
    },
    {
        "code": "\ndef shareRoot( self, other):\n    \"\"\"Return true if we are descended from the same root in the file system\"\"\"\n    other = self.__class__.coerce( other )\n    return other.root() == self.root()\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 84,
            "fix_type": "delete",
            "id": 23583
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID ()==ID .ID ()not \n"
    },
    {
        "code": "\n\t### virtual methods...\ndef isFile( self ):\n    \"\"\"Return true if we are a file path\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23584
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    LIT \n",
        "wrong_code": "\n#COMMENT\n\ndef ID ID ):\n    LIT \n"
    },
    {
        "code": "def isAbsolute (self):\n    \"\"\"Return true if this path is an absolute path (i.e. fully specified from a root)\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23585
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (async ID ):\n    LIT \n"
    },
    {
        "code": "def isRoot( self ):\n    \"\"\"True iff this object is the root of its filesystem\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23586
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "ID (ID ):\n    LIT \n"
    },
    {
        "code": "def baseOnly( self ):\n    \"\"\"Is this path reachable using only the base file system\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23587
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (ID ):\n    LIT \n    !"
    },
    {
        "code": "\ndef sharedRoot(self, other):\n    \"\"\"Return the path of the longest shared prefix for ourselves and other\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23588
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "\ndef ID yield (ID ,ID ):\n    LIT \n"
    },
    {
        "code": "def canonical(self):\n    \"\"\"Get a canonical version of this path\n\n\t\tThe new path will be absolute, expanded,\n\t\tcase-normalized, normalized, and converted\n\t\tto a path of the same type as this one.\n\n\t\tIt will include, where required, a pointer\n\t\tto the parent-filesystem-path which points\n\t\tto this path's root.\n\t\t\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23589
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (ID =:\n    LIT \n"
    },
    {
        "code": "def join( self, name ):\n    \"\"\"Create a new Path from this path plus name\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 23590
        },
        "correct_code": "def ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "def .ID (ID ,ID ):\n    LIT \n"
    },
    {
        "code": "def split( self ):\n    \"\"\"Return our parent path (if available) and our name\"\"\"\n",
        "metadata": {
            "file": "py150_files/data/correl/Transmission-XBMC/resources/lib/basictypes/vfs/basepath.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23591
        },
        "correct_code": "def ID (ID ):\n    LIT \n",
        "wrong_code": "def ID (ID ):\n\n"
    },
    {
        "code": "\ndef __init__(self, apiClient):\n    self.apiClient = apiClient\n",
        "metadata": {
            "file": "py150_files/data/cortical-io/python-client-sdk/cortical/imageApi.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 23592
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID class \n"
    },
    {
        "code": "\n\n\ndef getImageForExpression(self, retina_name, body, image_scalar=2, plot_shape=\"circle\", image_encoding=\"base64/png\", sparsity=1.0):\n    pass\n\n    \n",
        "metadata": {
            "file": "py150_files/data/cortical-io/python-client-sdk/cortical/imageApi.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23593
        },
        "correct_code": "\n\n\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    pass \n\n\n",
        "wrong_code": "\n\n\ndef ID (ID ,ID ,ID ,ID =LIT ,=LIT ,ID =LIT ,ID =LIT ):\n    pass \n\n\n"
    },
    {
        "code": "\ndef getOverlayImage(self, retina_name, body, plot_shape=\"circle\", image_scalar=2, image_encoding=\"base64/png\"):\n    pass\n\n    \n",
        "metadata": {
            "file": "py150_files/data/cortical-io/python-client-sdk/cortical/imageApi.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 23594
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID =LIT ):\n    pass \n\n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ,ID /LIT ):\n    pass \n\n\n"
    },
    {
        "code": "\ndef getImageForBulkExpressions(self, retina_name, body, get_fingerprint=None, image_scalar=2, plot_shape=\"circle\", sparsity=1.0):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cortical-io/python-client-sdk/cortical/imageApi.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 23595
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =LIT ,ID =LIT ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID from LIT ,ID =LIT ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef wrapped_function(*args, **kwargs):\n\n    if options.get('automatic_options') and request.method == 'OPTIONS':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/corydolphin/flask-cors/flask_cors/decorator.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23596
        },
        "correct_code": "\ndef ID (*ID ,**ID ):\n\n    if ID .ID (LIT )and ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (:*ID ,**ID ):\n\n    if ID .ID (LIT )and ID .ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def locate_sites():\n    for site, regex in sites_dict.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/corywalker/selenium-crawler/seleniumcrawler/filesystem.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": "for",
            "id": 23597
        },
        "correct_code": "def ID ():\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "def ID ():\n    ID ,ID in ID .ID ():\n        pass \n"
    },
    {
        "code": "@classmethod\ndef get_by_id(cls, id):\n    if id in data:\n        return data[id]\n    else:\n        raise NotFound\n",
        "metadata": {
            "file": "py150_files/data/cosmic-api/cosmic.py/examples/quotes.py",
            "fix_location": 73,
            "fix_type": "delete",
            "id": 23598
        },
        "correct_code": "@ID \ndef ID (ID ,ID ):\n    if ID in ID :\n        return ID [ID ]\n    else :\n        raise ID \n",
        "wrong_code": "@ID \ndef ID (ID ,ID ):\n    if ID in ID :\n        return ID [ID ]\n        in else :\n        raise ID \n"
    },
    {
        "code": "\n\ndef set_json_converters(encode, decode):\n    \"\"\"\n    Modify the default JSON conversion functions. This affects all\n    :class:`~couchbase.bucket.Bucket` instances.\n\n    These functions will called instead of the default ones (``json.dumps``\n    and ``json.loads``) to encode and decode JSON (when :const:`FMT_JSON` is\n    used).\n\n    :param callable encode: Callable to invoke when encoding an object to JSON.\n        This should have the same prototype as ``json.dumps``, with the\n        exception that it is only ever passed a single argument.\n\n    :param callable decode: Callable to invoke when decoding an object to JSON.\n        This should have the same prototype and behavior\n        as ``json.loads`` with the exception that it is only ever\n        passed a single argument.\n\n    :return: A tuple of ``(old encoder, old decoder)``\n\n    No exceptions are raised, and it is the responsibility of the caller to\n    ensure that the provided functions operate correctly, otherwise exceptions\n    may be thrown randomly when encoding and decoding values\n    \"\"\"\n    ret = _LCB._modify_helpers(json_encode=encode, json_decode=decode)\n    return (ret['json_encode'], ret['json_decode'])\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 94,
            "fix_type": "delete",
            "id": 23599
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (ID =ID ,ID =ID )\n    return (ID [LIT ],ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (ID =ID ,ID =ID )\n    return (ID [LIT ],ID [LIT ])assert \n"
    },
    {
        "code": "\n\ndef set_pickle_converters(encode, decode):\n    \"\"\"\n    Modify the default Pickle conversion functions. This affects all\n    :class:`~couchbase.bucket.Bucket` instances.\n\n    These functions will be called instead of the default ones\n    (``pickle.dumps`` and ``pickle.loads``) to encode and decode values to and\n    from the Pickle format (when :const:`FMT_PICKLE` is used).\n\n    :param callable encode: Callable to invoke when encoding an object to\n        Pickle. This should have the same prototype as ``pickle.dumps`` with\n        the exception that it is only ever called with a single argument\n\n    :param callable decode: Callable to invoke when decoding a Pickle encoded\n        object to a Python object. Should have the same prototype as\n        ``pickle.loads`` with the exception that it is only ever passed a\n        single argument\n\n    :return: A tuple of ``(old encoder, old decoder)``\n\n    No exceptions are raised and it is the responsibility of the caller to\n    ensure that the provided functions operate correctly.\n    \"\"\"\n    ret = _LCB._modify_helpers(pickle_encode=encode, pickle_decode=decode)\n    return (ret['pickle_encode'], ret['pickle_decode'])\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 77,
            "fix_type": "delete",
            "id": 23600
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (ID =ID ,ID =ID )\n    return (ID [LIT ],ID [LIT ])\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID (ID =ID ,ID =ID )\n    return (ID ][LIT ],ID [LIT ])\n"
    },
    {
        "code": "\n\ndef _to_json(*args):\n    \"\"\"\n    Utility function to encode an object to json using the user-defined\n    JSON encoder (see :meth:`set_json_converters`).\n\n    :param args: Arguments passed to the encoder\n    :return: Serialized JSON string\n    \"\"\"\n    return _LCB._get_helper('json_encode')(*args)\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23601
        },
        "correct_code": "\n\ndef ID (*ID ):\n    LIT \n    return ID .ID (LIT )(*ID )\n",
        "wrong_code": "\n\ndef ID (*ID ):    LIT \n    return ID .ID (LIT )(*ID )\n"
    },
    {
        "code": "\n\ndef _from_json(*args):\n    \"\"\"\n    Utility function to decode a JSON string to a Python object using\n    the user-defined JSON decoder (see :meth:`set_json_converters`).\n\n    :param args: Arguments passed to the decoder\n    :return: Python object converted from JSON\n    \"\"\"\n    return _LCB._get_helper('json_decode')(*args)\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 49,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23602
        },
        "correct_code": "\n\ndef ID (*ID ):\n    LIT \n    return ID .ID (LIT )(*ID )\n",
        "wrong_code": "\n\ndef ID (*ID ):\n    LIT \n    return ID .ID (LIT (*ID )\n"
    },
    {
        "code": "\n\ndef enable_logging():\n    \"\"\"\n    Enables integration with Python's `logging` module.\n\n    This function enables the C library's logging to be propagated to\n    the Python standard `logging` module.\n\n    Calling this function affects any :class:`~.Bucket` objects created\n    afterwards (but not before). Note that currently this will also\n    override any ``LCB_LOGLEVEL`` directive inside the environment as\n    well.\n\n    The \"root\" couchbase logger is ``couchbase``.\n    \"\"\"\n    import couchbase._logutil\n    couchbase._logutil.configure(True)\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23603
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    import ID .ID \n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    LIT \n    import ID .ID \n    ID .ID .ID (in )\n"
    },
    {
        "code": "\n\ndef disable_logging():\n    import couchbase._logutil\n    couchbase._logutil.configure(False)\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23604
        },
        "correct_code": "\n\ndef ID ():\n    import ID .ID \n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    import ID .ID \n    ID .ID .ID (LIT else \n"
    },
    {
        "code": "@classmethod\ndef connect(self, bucket, **kwargs):\n    from couchbase.bucket import _depr\n    from couchbase.connection import Connection\n    _depr('Couchbase.connect()', 'Bucket()')\n    return Connection(bucket, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/__init__.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23605
        },
        "correct_code": "@ID \ndef ID (ID ,ID ,**ID ):\n    from ID .ID import ID \n    from ID .ID import ID \n    ID (LIT ,LIT )\n    return ID (ID ,**ID )\n",
        "wrong_code": "@ID not def ID (ID ,ID ,**ID ):\n    from ID .ID import ID \n    from ID .ID import ID \n    ID (LIT ,LIT )\n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef test_append_prepend(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/append_t.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23606
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_append_binary(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/append_t.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 23607
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )LIT :\n    pass \n"
    },
    {
        "code": "\ndef test_append_nostr(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/append_t.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23608
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass ."
    },
    {
        "code": "\ndef test_append_enoent(self):\n    try:\n        pass\n    except CouchbaseError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/append_t.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23609
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID as ID \n        pass \n"
    },
    {
        "code": "\ndef test_append_multi(self):\n\n    for k, v in rvs.items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/append_t.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 23610
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID ,ID in ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    for ID ,ID in ID .ID ():\n        pass \nexcept "
    },
    {
        "code": "def setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/spatial_t.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23611
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ),\n    pass \n"
    },
    {
        "code": "\ndef test_simple_spatial(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/couchbase/couchbase-python-client/couchbase/tests/cases/spatial_t.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23612
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nnot ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef run(self, ctx):\n    if o.help:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/commands/build_egg.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23613
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID for ID :\n        pass \n"
    },
    {
        "code": "def setUp(self):\n    try:\n        try:\n            pass\n        except:\n            pass\n    except:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/commands/tests/test_hooks.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23614
        },
        "correct_code": "def ID (ID ):\n    try :\n        try :\n            pass \n        except :\n            pass \n    except :\n        pass \n",
        "wrong_code": "def ID (ID ):\n    try :\n        try :pass pass \n        except :\n            pass \n    except :\n        pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    os.chdir(self.old_cwd)\n    shutil.rmtree(self.new_cwd)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/commands/tests/test_hooks.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 23615
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID )\n    ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID class .ID (ID .ID )\n    ID .ID (ID .ID )\n"
    },
    {
        "code": "\ndef test_simple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/commands/tests/test_hooks.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23616
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID lambda (ID ):\n    pass \n"
    },
    {
        "code": "\ndef relpath(path, start=curdir):\n\n    if not path:\n        pass\n    if not rel_list:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/compat/posix_path.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 23617
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n\n    if not ID :\n        pass \n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ID ):\n\n    if not ID :\n        pass \n    if not ID :\n        pass \n"
    },
    {
        "code": "\ndef create_fake_tree(top_node, tree):\n    for f in tree:\n        n = top_node.make_node(f)\n        n.parent.mkdir()\n        n.write(\"\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/core/tests/test_subpackage.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23618
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID :\n        ID =ID .ID (ID )\n        ID .ID .ID ()\n        ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID if ID ):\n    for ID in ID :\n        ID =ID .ID (ID )\n        ID .ID .ID ()\n        ID .ID (LIT )\n"
    },
    {
        "code": "def test_extension(self):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/core/tests/test_subpackage.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 23619
        },
        "correct_code": "def ID (ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "def ID (ID ):\n    try else :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef _test_compiled_library(self, tree, clib, spkg, sources, include_dirs):\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/core/tests/test_subpackage.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23620
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):LIT     try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\n\ndef test_compiled_library(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/core/tests/test_subpackage.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 23621
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    not \n"
    },
    {
        "code": "\ndef test_compiled_library_glob(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/core/tests/test_subpackage.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 23622
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n]    pass \n"
    },
    {
        "code": "\ndef split(s):\n    ret = []\n    for i in s.split(\" \"):\n        ret.extend(i.splitlines())\n    return ret\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23623
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[]\n    for ID in ID .ID (LIT ):\n        ID .ID (ID .ID ())\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[]\n    for ID in ID .ID (LIT ):\n        .ID (ID .ID ())\n    return ID \n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 23624
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID ID =ID ()\n"
    },
    {
        "code": "\ndef _test(self, data, ref):\n    self.lexer.input(data)\n    self._test_impl(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 23625
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID .ID (ID )\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n+    ID .ID .ID (ID )\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _get_tokens(self, data):\n    self.lexer.input(data)\n    return list(self.lexer)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23626
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,(ID ):\n    ID .ID .ID (ID )\n    return ID (ID .ID )\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23627
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ,.ID =ID ()\n"
    },
    {
        "code": "\ndef test_single_line(self):\n    data = \"\"\"\\\nName: yo\n\"\"\"\n    ref = [\"NAME_ID\", \"COLON\", \"WORD\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23628
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID elif ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_two_lines(self):\n    data = \"\"\"\\\nName: yo\nSummary: a brief summary\n\"\"\"\n    ref = [\"NAME_ID\", \"COLON\", \"WORD\",\n           \"SUMMARY_ID\", \"COLON\", \"STRING\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 84,
            "fix_type": "delete",
            "id": 23629
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID [(ID ,ID )\n"
    },
    {
        "code": "\ndef test_tab(self):\n    data = \"\"\"\\\nLibrary:\n\\tpackages\n\"\"\"\n    self.assertRaises(SyntaxError, lambda: self._test(data, []))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23630
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID .ID (ID ,lambda :ID .ID (ID ,[]))\n",
        "wrong_code": "\ndef ID ID ):\n    ID =LIT \n    ID .ID (ID ,lambda :ID .ID (ID ,[]))\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 7,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23631
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID and ID ):\n    ID .ID =ID ()\n"
    },
    {
        "code": "\ndef test_simple(self):\n    data = \"yoyo\"\n    ref = \"WORD\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23632
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_empty(self):\n    data = \"\"\n    ref = []\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23633
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID try :\n    ID =LIT \n    ID =[]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_escape(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \"yoyo \")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 23634
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID elif (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "\ndef test_double_escape(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \"yoyo\\\\\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23635
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID def ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "def f():\n    self._get_tokens(data)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23636
        },
        "correct_code": "def ID ():\n    ID .ID (ID )\n",
        "wrong_code": "ID ():\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef test_wrong_escape(self):\n    data = \"yoyo\\\\\"\n    def f():\n        self._get_tokens(data)\n    self.assertRaises(SyntaxError, f)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23637
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    def ID ():\n        ID .ID (ID )\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =raise \n    def ID ():\n        ID .ID (ID )\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23638
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =ID ()not "
    },
    {
        "code": "\ndef test_simple(self):\n    data = \"yoyo\"\n    ref = \"WORD\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 23639
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n    is "
    },
    {
        "code": "\ndef test_empty(self):\n    data = \"\"\n    ref = []\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 23640
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n/    ID =LIT \n    ID =[]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_escape(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \"yoyo \")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23641
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID assert \n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "\ndef test_simple_escape2(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \" yoyo \")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23642
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\n)ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "\ndef test_double_escape(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \"yoyo  yaya\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 23643
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID nonlocal .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "\ndef test_literal_escape(self):\n    self._test(data, ref)\n\n    tokens = self._get_tokens(data)\n    self.assertEqual(tokens[0].value, \"yoyo\\\\\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 23644
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()ID ,ID )\n\n    ID =ID .ID (ID )\n    ID .ID (ID [LIT ].ID ,LIT )\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 23645
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID ID ()\n"
    },
    {
        "code": "\ndef test_single_line(self):\n    data = \"\"\"\\\nName: yo\n\"\"\"\n    ref = [\"NAME_ID\", \"COLON\", \"WORD\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23646
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ==\n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_two_lines(self):\n    data = \"\"\"\\\nName: yo\nSummary: a brief summary\n\"\"\"\n    ref = [\"NAME_ID\", \"COLON\", \"WORD\",\n           \"SUMMARY_ID\", \"COLON\", \"STRING\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23647
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID (,ID )\n"
    },
    {
        "code": "\ndef test_simple_indent(self):\n    data = \"\"\"\\\nPackages:\n    yo\n\"\"\"\n    ref = \"\"\"\\\nPACKAGES_ID COLON INDENT WORD DEDENT\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23648
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =def \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_indent2(self):\n    data = \"\"\"\\\nPackages:\n    yo,\n    yeah\n\"\"\"\n    ref = \"\"\"\\\nPACKAGES_ID COLON\nINDENT\nWORD COMMA\nWORD\nDEDENT\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 23649
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID [,ID )\n"
    },
    {
        "code": "\ndef test_indent_newlines(self):\n    data = \"\"\"\\\nDescription:\n    some\n    words\n\n    and then more\n\"\"\"\n    ref = \"\"\"\\\nDESCRIPTION_ID COLON INDENT MULTILINES_STRING DEDENT\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23650
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID class (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_double_indentation(self):\n    data = \"\"\"\\\nDescription:\n    some\n     words\n\"\"\"\n    ref = \"\"\"\\\nDESCRIPTION_ID COLON INDENT MULTILINES_STRING DEDENT\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23651
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_dedent(self):\n    data = \"\"\"\\\nPackages:\n    some\nName: words\n\"\"\"\n    ref = \"\"\"\\\nPACKAGES_ID COLON INDENT WORD DEDENT\nNAME_ID COLON WORD\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23652
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID if (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_indent_dedent(self):\n    data = \"\"\"\\\nLibrary:\n    Packages:\n        yo\n        yo.foo\n    Modules:\n        foo.py\n    Extension: _bar\n\"\"\"\n    ref = \"\"\"\\\nLIBRARY_ID COLON\nINDENT\nPACKAGES_ID COLON\nINDENT\nWORD\nWORD\nDEDENT\nMODULES_ID COLON\nINDENT\nWORD\nDEDENT\nEXTENSION_ID COLON WORD\nDEDENT\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23653
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_complex_indent(self):\n    data = \"\"\"\\\nLibrary:\n    Packages:\n        yo\n        yo.foo\n    Modules:\n        foo.py\n        bar.py\nExtension: yeah\nExtension: yeah2\n\"\"\"\n    ref = \"\"\"\\\nLIBRARY_ID COLON\nINDENT\nPACKAGES_ID COLON\nINDENT\nWORD WORD\nDEDENT\nMODULES_ID COLON\nINDENT\nWORD\nWORD\nDEDENT DEDENT\nEXTENSION_ID COLON WORD\nEXTENSION_ID COLON WORD\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23654
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):as     ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_indent_value(self):\n\n    string = tokens[-1].value\n    self.assertEqual(string, \"\"\"\\\nsome\nwords and whatnot\n  .\\\n\"\"\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23655
        },
        "correct_code": "\ndef ID (ID ):\n\n    ID =ID [-LIT ].ID \n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n\n    ID =ID [-LIT ].ID \n    ID LIT ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_indent_value2(self):\n    data = \"\"\"\\\nDescription: some\n    words and whatnot\n      .\nName: yo\n\"\"\"\n    ref = \"\"\"\\\nDESCRIPTION_ID COLON MULTILINES_STRING\nNAME_ID COLON WORD\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23656
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "def test_description_in_flag(self):\n    data = \"\"\"\\\nFlag: foo\n    Default: true\n    Description: yo mama\n\nLibrary:\n    if not flag(foo):\n        Modules: foo.py\n\"\"\"\n    ref = \"\"\"\\\nFLAG_ID COLON WORD\nINDENT\nDEFAULT_ID COLON WORD\nDESCRIPTION_ID COLON STRING\nDEDENT\nLIBRARY_ID COLON\nINDENT\nIF NOT_OP FLAG_OP LPAR WORD RPAR COLON\nINDENT\nMODULES_ID COLON WORD\nDEDENT\nDEDENT\n\"\"\"\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23657
        },
        "correct_code": "def ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID )\n",
        "wrong_code": "def ID (ID ):\n    ID =LIT \n    ID =LIT del ID .ID (ID ,ID )\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23658
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (=):\n    ID .ID =ID ()\n"
    },
    {
        "code": "\ndef test_single_line(self):\n    data = \"\"\"\\\nName: yo\n\"\"\"\n    ref = [\"NAME_ID\", \"COLON\", \"WORD\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23659
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ]\n    ID .ID (,ID )\n"
    },
    {
        "code": "\ndef test_two_lines(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23660
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass :"
    },
    {
        "code": "\ndef test_simple_indent(self):\n    data = \"\"\"\\\nPackages:\n    yo\n\"\"\"\n    ref = [\"PACKAGES_ID\", \"COLON\",\n           \"INDENT\", \"WORD\", \"DEDENT\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 23661
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,==\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_indent2(self):\n    data = \"\"\"\\\nPackages:\n    yo,\n    yeah\n\"\"\"\n    ref = [\"PACKAGES_ID\", \"COLON\",\n           \"INDENT\",\n           \"WORD\", \"COMMA\",\n           \"WORD\",\n           \"DEDENT\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 101,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23662
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,\n    LIT ,\n    LIT ,LIT ,\n    LIT ,\n    LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,\n    LIT ,\n    LIT ,LIT ,\n    LIT ,\n    LIT ]\n    ID .(ID ,ID )\n"
    },
    {
        "code": "\ndef test_indent_newlines(self):\n    data = \"\"\"\\\nDescription:\n    some\n    words\n\n    and then more\n\"\"\"\n    ref = [\"DESCRIPTION_ID\", \"COLON\", \"INDENT\", \"MULTILINES_STRING\", \"DEDENT\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23663
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID .ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_double_indentation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23664
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_simple_dedent(self):\n    data = \"\"\"\\\nPackages:\n    some\nName: words\n\"\"\"\n    ref = [\"PACKAGES_ID\", \"COLON\",\n           \"INDENT\", \"WORD\", \"DEDENT\",\n           \"NAME_ID\", \"COLON\", \"WORD\"]\n    self._test(data, ref)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23665
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,\n    LIT ,LIT ,LIT ,\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =[LIT ,LIT ,\n    LIT ,LIT ,except ,\n    LIT ,LIT ,LIT ]\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_simple_indent_dedent(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23666
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (None ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_complex_indent(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23667
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):.    pass \n"
    },
    {
        "code": "\ndef test_indent_value(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23668
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_indent_value2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23669
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID /:\n    pass \n"
    },
    {
        "code": "\n\ndef test_comma(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23670
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_comma2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 23671
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    except "
    },
    {
        "code": "\ndef test_tab(self):\n    data = \"\"\"\\\nLibrary:\n\\tpackages\n\"\"\"\n    self.assertRaises(SyntaxError, lambda: self._test(data, []))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23672
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID .ID (ID ,lambda :ID .ID (ID ,[]))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n    ID .ID (ID ,lambda :ID ID (ID ,[]))\n"
    },
    {
        "code": "\ndef test_rest_literal1(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23673
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID +(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_colon_in_word(self):\n    data = \"Url: http://foo.com\"\n\n    ref_str = \"URL_ID COLON WORD\"\n\n    self._test(data, ref_str)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23674
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n\n    ID .ID (ID ,ID )\n",
        "wrong_code": "raise def ID (ID ):\n    ID =LIT \n\n    ID =LIT \n\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef test_rest_literal2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23675
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    is pass \n"
    },
    {
        "code": "\ndef test_space_no_space(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23676
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID /):\n    pass \n"
    },
    {
        "code": "\ndef test_ref_literal2(self):\n    # Test transition from SCANING_MULTILINE_FIELD\n    data = \"\"\"\\\nDescription: a summary\nName: yo\n\"\"\"\n    ref_str = \"\"\"\\\nDESCRIPTION_ID COLON MULTILINES_STRING\nNAME_ID COLON WORD\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23677
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID =if \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_indented_multiline(self):\n    data = \"\"\"\\\nPath: path\n    Description: descr\n    Name: name\n\"\"\"\n\n    ref_str = \"\"\"\\\nPATH_ID COLON WORD\nINDENT\nDESCRIPTION_ID COLON STRING\nNAME_ID COLON WORD\nDEDENT\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23678
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "is \ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_indented_multiline2(self):\n    data = \"\"\"\\\nClassifiers:\n    foo\nPath: path\n    Description: descr\n    Name: name\n\"\"\"\n\n    ref_str = \"\"\"\\\nCLASSIFIERS_ID COLON\nINDENT\nSTRING\nDEDENT\nPATH_ID COLON WORD\nINDENT\nDESCRIPTION_ID COLON STRING\nNAME_ID COLON WORD\nDEDENT\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23679
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID -):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23680
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =ID (with \n"
    },
    {
        "code": "\n# Test we throw away NEWLINES except in literals\ndef test_lastnewline(self):\n    data = \"\"\"\\\nName: yo\n\"\"\"\n    ref_str = \"\"\"\\\nNAME_ID COLON WORD\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 23681
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID )).\n"
    },
    {
        "code": "\ndef test_start_with_newlines(self):\n    data = \"\"\"\\\n\nName: yo\n\"\"\"\n    ref_str = \"\"\"\\\nNAME_ID COLON WORD\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23682
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID )):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_start_with_newlines2(self):\n    data = \"\"\"\\\nSummary: a summary\n\"\"\"\n    ref_str = \"\"\"\\\nSUMMARY_ID COLON STRING\n\"\"\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23683
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    class ID =LIT \n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_dedent_newline(self):\n    self.assertEqual(string, \"\"\"\\\nSphinx\nis\n    a\ntool\"\"\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23684
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef in (ID ):\n    ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_single_line(self):\n    data = \"Name: word\"\n\n    ref_str = \"NAME_ID COLON WORD\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23685
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID class ID (ID ,ID (ID ))\n"
    },
    {
        "code": "def setUp(self):\n    self.lexer = BentoLexer()\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23686
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID )\n    ID .ID =ID ()\n"
    },
    {
        "code": "\ndef test_simple(self):\n    data = \"\"\"\\\n# Simple comment\nName: foo\n\"\"\"\n\n    ref_str = \"NAME_ID COLON WORD\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23687
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ]ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "\ndef test_simple_inline(self):\n    self.assertEqual(name, \"foo\")\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23688
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID LIT )\n"
    },
    {
        "code": "\ndef test_simple_inline2(self):\n    data = \"\"\"\\\nExtraSourceFiles:\n    # indented comment\n    foo\n\"\"\"\n\n    ref_str = \"EXTRA_SOURCE_FILES_ID COLON INDENT WORD DEDENT\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 23689
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\nfor "
    },
    {
        "code": "def test_license(self):\n    data = \"\"\"\\\nLicense: PSF or  ZPL\n\"\"\"\n\n    ref_str = \"LICENSE_ID COLON STRING\"\n    self._test(data, split(ref_str))\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 23690
        },
        "correct_code": "def ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID .ID (ID ,ID (ID ))\n",
        "wrong_code": "def ID (ID ):\n    ID =LIT \n\n    ID =LIT \n    ID for .ID (ID ,ID (ID ))\n"
    },
    {
        "code": "def test_multiline_string_count(self):\n    try:\n        pass\n    except ParseError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/parser/tests/test_lexer.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23691
        },
        "correct_code": "def ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "def ID ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "def getenv():\n    env = dict(os.environ)\n    env.update({'PYTHONPATH': ':'.join(pp)})\n    return env\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/tools/py3tool.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 23692
        },
        "correct_code": "def ID ():\n    ID =ID (ID .ID )\n    ID .ID ({LIT :LIT .ID (ID )})\n    return ID \n",
        "wrong_code": "def ID ():\n    ID =ID (ID .ID )\n    ID .ID ({LIT :LIT .ID (ID ()})\n    return ID \n"
    },
    {
        "code": "\n@extension('.cxx')\ndef cxx_hook(self, node):\n    tasks = cxxcompile_task(self, node)\n    self.object_tasks.extend(tasks)\n    return tasks\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 23693
        },
        "correct_code": "\n@ID (LIT )\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID )\n    ID .ID .ID (ID )\n    return ID \n",
        "wrong_code": "\n@ID (LIT )\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID )\n    ID .ID .ID (ID )\n    return ID \nis "
    },
    {
        "code": "\ndef cxxcompile_task(self, node):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23694
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):async     pass \n"
    },
    {
        "code": "def declare_target():\n    return self.bld.path.declare(tmp)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 23695
        },
        "correct_code": "def ID ():\n    return ID .ID .ID .ID (ID )\n",
        "wrong_code": "def ID ():\n    return ID .ID .ID .ID (ID )\n=="
    },
    {
        "code": "\ndef cxxprogram_task(self, name):\n    def declare_target():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23696
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    def ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    def ID (is :\n        pass \n"
    },
    {
        "code": "def clone(self):\n    return CXXBuilder(self.ctx)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 23697
        },
        "correct_code": "def ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID .ID )from \n"
    },
    {
        "code": "\ndef __init__(self, ctx):\n    yaku.tools.Builder.__init__(self, ctx)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23698
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef and ID (ID ,ID ):\n    ID .ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef ccompile(self, name, sources, env=None):\n    for t in tasks:\n        pass\n    for t in tasks:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23699
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    for ID in ID :\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,try ,ID ,ID =ID ):\n    for ID in ID :\n        pass \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef program(self, name, sources, env=None):\n    for t in tasks:\n        pass\n    for t in ltask:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 75,
            "fix_type": "delete",
            "id": 23700
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    for ID in ID :\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =ID ):\n    for ID in ID :\n        pass \n    for ID if in ID :\n        pass \n"
    },
    {
        "code": "\ndef get_builder(ctx):\n    return CXXBuilder(ctx)\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/private/_yaku/yaku/tools/cxxtasks.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23701
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):except     return ID (ID )\n"
    },
    {
        "code": "\ndef rename(source, target):\n    try:\n        pass\n    except OSError:\n        if e.errno == errno.EXDEV:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cournape/Bento/bento/utils/os2.py",
            "fix_location": 139,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23702
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID .ID ==ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID .ID ==ID .ID :\n            pass \n        else :\n            pass \nelse "
    },
    {
        "code": "\ndef __init__(self, sql):\n    # Check that first column is the effective timestamp\n    # And the second column is the expiration timestamp\n    if self.column(HIST_EFFECTIVE_COLUMN) is None or\\\n                self.column(HIST_EXPIRATION_COLUMN) is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/coursera/dataduct/dataduct/database/history_table.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23703
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    if ID .ID (ID )is ID or ID .ID (ID )is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ]:\n#COMMENT\n\n#COMMENT\n\n    if ID .ID (ID )is ID or ID .ID (ID )is ID :\n        pass \n"
    },
    {
        "code": "\ndef _select_current_script(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/coursera/dataduct/dataduct/database/history_table.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23704
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "==\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef update_history_script(self, source):\n\n    if not isinstance(source, Table):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/coursera/dataduct/dataduct/database/history_table.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23705
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "/\ndef ID (ID ,ID ):\n\n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef setUp(self):\n    \"\"\"Setup test fixtures for the table tests\n        \"\"\"\n    self.basic_table = create_table(\n        'CREATE TABLE test_table (id INTEGER);')\n",
        "metadata": {
            "file": "py150_files/data/coursera/dataduct/dataduct/database/tests/test_table.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 23706
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID =ID (\n    LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT !=\n    ID .ID =ID (\n    LIT )\n"
    },
    {
        "code": "\ndef __init__(self, cfg):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cowrie/cowrie/cowrie/output/localsyslog.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 23707
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef !ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef start(self):\n    \"\"\"\n        \"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cowrie/cowrie/cowrie/output/localsyslog.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23708
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):with     LIT \n    pass \n"
    },
    {
        "code": "\n\ndef stop(self):\n    \"\"\"\n        \"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cowrie/cowrie/cowrie/output/localsyslog.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23709
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    pass \n",
        "wrong_code": "\n\ndef except (ID ):\n    LIT \n    pass \n"
    },
    {
        "code": "\n\ndef write(self, logentry):\n    if self.format == 'cef':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cowrie/cowrie/cowrie/output/localsyslog.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 23710
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID .ID if ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, widget):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23711
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"WidgetRedirector(%s<%s>)\" % (self.widget.__class__.__name__,\n                                         self.widget._w)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23712
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID .ID ,\n    ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID .ID ,\n    ID ..ID )\n"
    },
    {
        "code": "\ndef close(self):\n    for name in self.dict:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 23713
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        pass \nexcept "
    },
    {
        "code": "\ndef register(self, name, function):\n    if name in self.dict:\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 23714
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID in ID .ID :\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID in ID .ID :\n        pass \n        +\n    else :\n        pass \n"
    },
    {
        "code": "\ndef unregister(self, name):\n    if name in self.dict:\n        if hasattr(self.widget, name):\n            pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 122,
            "fix_type": "delete",
            "id": 23715
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID .ID :\n        if ID (ID .ID ,ID ):\n            pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID in ID .ID :\n        if ID (ID .ID ,ID ):\n            pass \n\n    else :\n        pass \n        elif "
    },
    {
        "code": "\ndef dispatch(self, cmd, *args):\n    try:\n        if m:\n            pass\n        else:\n            pass\n    except tk.TclError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23716
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    try :\n        if ID :\n            pass \n        else :\n            pass \n    except ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    try :\n        if ID \n            pass \n        else :\n            pass \n    except ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, redir, name):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 23717
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"OriginalCommand(%r, %r)\" % (self.redir, self.name)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23718
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID )if :\n    return LIT %(ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __call__(self, *args):\n    return self.tk_call(self.orig_and_name + args)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23719
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    return ID .ID (ID .ID +ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    return ID .ID (ID .=+ID )\n"
    },
    {
        "code": "\ndef __init__(self, master=None, cnf={}, **kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 23720
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID ={},**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID ={}=,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef new_insert(self, *args):\n    self.orig_insert(*args)\n    self.event_generate('<<Change>>')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23721
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID (*ID )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,*ID )\n    ID .ID (*ID )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef new_delete(self, *args):\n    self.orig_delete(*args)\n    self.event_generate('<<Change>>')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23722
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID (*ID )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,*ID )\n    ID .ID (*ID )\n    ID .ID (LIT )\n"
    },
    {
        "code": "def __init__(self, parent=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23723
        },
        "correct_code": "def ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,from =ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, master):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 23724
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ]):\n    pass \n"
    },
    {
        "code": "\ndef set_centre_status(self, fmt, *args):\n    self.centre_status.config(text=fmt % args)\n    self.centre_status.update_idletasks()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23725
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID .ID (ID =ID %ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (from ID ,ID ,*ID ):\n    ID .ID .ID (ID =ID %ID )\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef set_note_status(self, fmt, *args):\n    \"\"\" *.. .s. .sS\n        \"\"\"\n    self.note_status.config(text=fmt % args)\n    self.note_status.update_idletasks()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23726
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n    ID .ID .ID (ID =ID %ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    LIT \n    ID .ID .ID (ID =ID %ID )\n    ID .ID .ID ()None "
    },
    {
        "code": "\ndef set_note_status_color(self, status_idx):\n    \"\"\"\n        @param status_idx: 0 - saved and synced; 1 - saved; 2 - modified\n        \"\"\"\n\n    color_idx = self.NOTE_STATUS_LUT[status_idx]\n    self.note_status.config(background=self.NOTE_STATUS_COLORS[color_idx])\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23727
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n\n    ID =ID .ID [ID ]\n    ID .ID .ID (ID =ID .ID [ID ])\n",
        "wrong_code": "\ndef ID (ID ,ID ):    LIT \n\n    ID =ID .ID [ID ]\n    ID .ID .ID (ID =ID .ID [ID ])\n"
    },
    {
        "code": "\ndef set_status(self, fmt, *args):\n    self.status.config(text=fmt % args)\n    self.status.update_idletasks()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23728
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID .ID (ID =ID %ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ,*ID ):\n    ID .ID .ID (ID =ID %ID )\n    +.ID .ID ()\n"
    },
    {
        "code": "\ndef clear_status(self):\n    self.status.config(text=\"\")\n    self.status.update_idletasks()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 23729
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =LIT )\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =LIT )\n    ID .ID .ID async ()\n"
    },
    {
        "code": "\ndef __init__(self, master, font_family, font_size, config):\n    if bold_font.measure(' ') > f.measure(' '):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23730
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    if ID .ID (LIT )>ID .ID (LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID pass ID ,ID ):\n    if ID .ID (LIT )>ID .ID (LIT ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n# same deal as for pageup\n# we have to stop the text widget class event handler from firing\ndef cmd_up(e):\n    self.select_prev(silent=False)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 23731
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID .ID (ID =LIT )\n    return LIT \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID .ID for (ID =LIT )\n    return LIT \n"
    },
    {
        "code": "\n# for pageup, event handler needs to return \"break\" so that\n# Text widget's default class handler for pageup does not trigger.\ndef cmd_pageup(e):\n    self.select_prev(silent=False, delta=10)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23732
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT )\n    return LIT \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    ID [ID (ID =LIT ,ID =LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef cmd_down(e):\n    self.select_next(silent=False)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 23733
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT )\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ):\n    return LIT \n"
    },
    {
        "code": "\ndef cmd_pagedown(e):\n    self.select_next(silent=False, delta=10)\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23734
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =LIT )\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (ID =LIT ,ID =/)\n    return LIT \n"
    },
    {
        "code": "\ndef cmd_text_button1(self, event):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 23735
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n    else "
    },
    {
        "code": "\ndef clear(self):\n    # clear everything from the display\n    self.text.delete(1.0, tk.END)\n    # and make sure our backing store is in sync\n    del self.note_headers[:]\n    self.disable_text()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23736
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID .ID (LIT ,ID .ID )\n    #COMMENT\n\n    del ID .ID [:]\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID )\n#COMMENT\n\n    ID .ID .ID (LIT ,ID .ID )\n    #COMMENT\n\n    del ID .ID [:]\n    ID .ID ()\n"
    },
    {
        "code": "\ndef disable_text(self):\n    self.text.config(state=tk.DISABLED)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23737
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =.ID )\n"
    },
    {
        "code": "\ndef enable_text(self):\n    self.text.config(state=tk.NORMAL)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 23738
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (ID =ID .ID )\nawait "
    },
    {
        "code": "\ndef find_note_by_title(self, title):\n    for i, nh in enumerate(self.note_headers):\n        if t == title:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23739
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID (ID .ID ):\n        if ID ==ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ID in ID (ID .ID ):\n        if ID ==ID :\n            pass \n"
    },
    {
        "code": "\ndef get_number_of_notes(self):\n    # could also have used:\n    # return int(self.text.index('end-1c').split('.')[0])\n    # but we have the backing store!\n    return len(self.note_headers)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23740
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\nasync     return ID (ID .ID )\n"
    },
    {
        "code": "\ndef get_pinned(self, idx):\n    return self.note_headers[idx][NotesList.PINNED_COL]\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 23741
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID ][ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID def ID ][ID .ID ]\n"
    },
    {
        "code": "\ndef get_tags(self, idx):\n    \"\"\"\n        @returns: raw list of tag strings, e.g. ['work', 'howto']\n        \"\"\"\n    return self.note_headers[idx][NotesList.TAGS_COL]\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23742
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n",
        "wrong_code": "\ndef ID ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n"
    },
    {
        "code": "\ndef get_title(self, idx):\n    return self.note_headers[idx][NotesList.TITLE_COL]\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23743
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID ][ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID ][ID .ID ]\n    lambda "
    },
    {
        "code": "\ndef get_modifydate(self, idx):\n    \"\"\"\n        Return modifydate of idx'th note.\n\n        @returns: modifydate as a floating point timestamp.\n        \"\"\"\n    return self.note_headers[idx][NotesList.MODIFYDATE_COL]\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23744
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n",
        "wrong_code": "\ndef ID (None ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n"
    },
    {
        "code": "\ndef get_createdate(self, idx):\n    \"\"\"\n        Return createdate of idx'th note.\n\n        @returns: createdate as a floating point timestamp.\n        \"\"\"\n    return self.note_headers[idx][NotesList.CREATEDATE_COL]\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23745
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    return ID .ID [ID ][ID .ID ]\n"
    },
    {
        "code": "\ndef select_prev(self, silent=True, delta=1):\n    if new_idx >= 0 and new_idx <= self.get_number_of_notes():\n        pass\n\n    elif new_idx < 0:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23746
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if ID >=LIT and ID <=ID .ID ():\n        pass \n\n    elif ID <LIT :\n        pass \n",
        "wrong_code": "\ndef ID ((,ID =LIT ,ID =LIT ):\n    if ID >=LIT and ID <=ID .ID ():\n        pass \n\n    elif ID <LIT :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, master, case_sensitive, **kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23747
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,**ID ):\n    pass \n",
        "wrong_code": "del \ndef ID (ID ,ID ,ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef set_completion_list(self, completion_list):\n    self._hits = []\n    self._hit_index = 0\n    self.wstart = 0\n    self.position = 0\n    self.cycle = 0\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 23748
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =[]\n    ID .ID =LIT \n    ID .ID =LIT \n    ID .ID =LIT \n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =[]\n    ID .ID ID LIT \n    ID .ID =LIT \n    ID .ID =LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef __init__(self, config, notes_list_model):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23749
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID )\n    pass \n"
    },
    {
        "code": "\ndef askyesno(self, title, msg):\n    return tkMessageBox.askyesno(title, msg)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23750
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,,ID ):\n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef cmd_notes_list_select(self, evt=None):\n    sidx = self.notes_list.selected_idx\n    self.notify_observers('select:note', utils.KeyValueObject(sel=sidx))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23751
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID =ID .ID .ID \n    ID .ID (LIT ,ID .ID (ID =ID ))\n",
        "wrong_code": "\ndef ID (ID nonlocal ,ID =ID ):\n    ID =ID .ID .ID \n    ID .ID (LIT ,ID .ID (ID =ID ))\n"
    },
    {
        "code": "\ndef cmd_root_delete(self, evt=None):\n    sidx = self.notes_list.selected_idx\n    self.notify_observers('delete:note', utils.KeyValueObject(sel=sidx))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23752
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID =ID .ID .ID \n    ID .ID (LIT ,ID .ID (ID =ID ))\n",
        "wrong_code": "\nID (ID ,ID =ID ):\n    ID =ID .ID .ID \n    ID .ID (LIT ,ID .ID (ID =ID ))\n"
    },
    {
        "code": "\ndef cmd_root_new(self, evt=None):\n    # this'll get caught by a controller event handler\n    self.notify_observers('create:note', utils.KeyValueObject(title=self.get_search_entry_text()))\n    # the note will be created synchronously, so we can focus the text area already\n    self.text_note.focus()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23753
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID .ID (ID =ID .ID ()))\n    #COMMENT\n\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n#COMMENT\n\n    ID ID (LIT ,ID .ID (ID =ID .ID ()))\n    #COMMENT\n\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef cmd_select_all(self, evt=None):\n    self.text_note.tag_add(\"sel\", \"1.0\", \"end-1c\")\n    # we don't want the text bind_class() handler for Ctrl-A to be fired.\n    return \"break\"\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23754
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID .ID (LIT ,LIT ,LIT )\n    #COMMENT\n\n    return LIT \n",
        "wrong_code": "\ndef ID (ID lambda ,ID =ID ):\n    ID .ID .ID (LIT ,LIT ,LIT )\n    #COMMENT\n\n    return LIT \n"
    },
    {
        "code": "\ndef set_note_editing(self, enable=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23755
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef get_continuous_rendering(self):\n    return self.continuous_rendering.get()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23756
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID ()\n",
        "wrong_code": "\ndef ID import (ID ):\n    return ID .ID .ID ()\n"
    },
    {
        "code": "\ndef get_selected_text(self):\n    \"\"\"\n        Return note text that has been selected by user.\n        \"\"\"\n\n    try:\n        return self.text_note.selection_get()\n    except tk.TclError:\n        return ''\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 23757
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    try :\n        return ID .ID .ID ()\n    except ID .ID :\n        return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n\n    try :\n        continue return ID .ID .ID ()\n    except ID .ID :\n        return LIT \n"
    },
    {
        "code": "\ndef get_text(self):\n    # err, you have to specify 1.0 to END, and NOT 0 to END like I thought.\n    # also, see the comment by Bryan Oakley to\n    # http://stackoverflow.com/a/3137169\n    # we need to get rid of newline that text adds automatically\n    # at end.\n    return self.text_note.get(1.0, \"end-1c\")\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 23758
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    return ID .ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n    finally return ID .ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef get_search_entry_text(self):\n    return self.search_entry_var.get()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 23759
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    break ID .ID .ID ()\n"
    },
    {
        "code": "\ndef refresh_notes_list(self):\n    \"\"\"Trigger a complete refresh notes list by resetting search entry.\n        \"\"\"\n    # store cursor position first! returns e.g. 8.32\n    #cursor_pos = self.text_note.index(tk.INSERT)\n\n    # since 0.6, set_search_entry() tries to leave the currently selected\n    # note untouched if it still exists in the newly returned list\n    # so we don't have to do an explicit reselect.\n    self.set_search_entry_text(self.get_search_entry_text())\n\n    #self.text_note.mark_set(tk.INSERT, cursor_pos)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 111,
            "fix_type": "delete",
            "id": 23760
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (ID .ID ())\n\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (ID .[ID ())\n\n    #COMMENT\n\n"
    },
    {
        "code": "\ndef see_first_search_instance(self):\n    \"\"\"If there are instances of the search string in the current\n        note, ensure that the first one is visible.\n        \"\"\"\n\n    if self.text_tags_search:\n        self.text_note.see(self.text_tags_search[0] + '.first')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23761
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n\n    if ID .ID :\n        ID .ID .ID (ID .ID [LIT ]+LIT )\n",
        "wrong_code": "\ndef ID (ID nonlocal ):\n    LIT \n\n    if ID .ID :\n        ID .ID .ID (ID .ID [LIT ]+LIT )\n"
    },
    {
        "code": "\ndef select_note(self, idx, silent=False):\n    \"\"\"Programmatically select the note by idx\n\n        @param silent: If this is True, don't fire an event. VERY\n        IMPORTANT: if you use silent, the controller won't set the\n        selected_note_idx. You should make sure that it's in sync with\n        what you've just selected.\n        \"\"\"\n\n    self.notes_list.select(idx, silent)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 23762
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID (LIT ):\n    LIT \n\n    ID .ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef select_note_by_name(self, name):\n    idx = self.notes_list.find_note_by_title(name)\n    if idx >= 0:\n        self.select_note(idx, silent=False)\n\n    return idx\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23763
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID )\n    if ID >=LIT :\n        ID .ID (ID ,ID =LIT )\n\n    return ID \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    ID =ID .ID .ID (ID )\n    if ID >=LIT :\n        ID .ID (ID ,ID =LIT )\n\n    return ID \n"
    },
    {
        "code": "\ndef set_note_tally(self, filtered_notes, active_notes, total_notes):\n    self.statusbar.set_centre_status('Listing %d / %d active notes (%d total)' % (filtered_notes, active_notes, total_notes))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23764
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID .ID (LIT %(ID ,ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID .ID .(LIT %(ID ,ID ,ID ))\n"
    },
    {
        "code": "\ndef set_search_entry_text(self, text):\n    self.search_entry_var.set(text)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23765
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID class :\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef _bind_events(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23766
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef _create_menu(self):\n    pass\n\n    # END MENU ######################################################\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23767
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):\n    pass +\n    #COMMENT\n\n"
    },
    {
        "code": "\n# we'll use this method to create the different edit boxes\ndef create_scrolled_text(master):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 23768
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ):\n    pass \n    class "
    },
    {
        "code": "\ndef get_number_of_notes(self):\n    return self.notes_list.get_number_of_notes()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23769
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):pass     return ID .ID .ID ()\n"
    },
    {
        "code": "\ndef handler_close(self, evt=None):\n    \"\"\"Handler for exit menu command and close window event.\n        \"\"\"\n    self.notify_observers('close', None)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23770
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    ID .ID (LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    .ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef clear_note_ui(self, silent=True):\n\n    if silent:\n        pass\n\n    if silent:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 23771
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n\n    if ID :\n        pass \n\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n\n    if ID :\n        pass \n\n        lambda if ID :\n        pass \n"
    },
    {
        "code": "\ndef close(self):\n    \"\"\"Programmatically close application windows.\n\n        Called by controller.\n        \"\"\"\n    self.root.destroy()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23772
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID for :\n    LIT \n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef cmd_cut(self):\n    self.text_note.event_generate('<<Cut>>')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23773
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT else \n"
    },
    {
        "code": "\ndef cmd_copy(self):\n    self.text_note.event_generate('<<Copy>>')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 23774
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):+\n    ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef cmd_markdown(self, event=None):\n    self.notify_observers('command:markdown', None)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23775
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ID =ID ):\n    ID .ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef cmd_paste(self):\n    self.text_note.event_generate('<<Paste>>')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23776
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\n/ID (ID ):\n    ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef cmd_help_bindings(self):\n    h = HelpBindings()\n    self.root.wait_window(h)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23777
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID ID .ID (ID )\n"
    },
    {
        "code": "\ndef cmd_rest(self, event=None):\n    self.notify_observers('command:rest', None)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23778
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID )\n",
        "wrong_code": "while \ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef cmd_sync_current_note(self, event=None):\n    self.notify_observers('command:sync_current_note', None)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23779
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    ID elif ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef cmd_sync_full(self, event=None):\n    self.notify_observers('command:sync_full', None)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23780
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    raise .ID (LIT ,ID )\n"
    },
    {
        "code": "\ndef cmd_font_size(self, inc_size):\n    for f in self.fonts:\n        f.configure(size=f['size'] + inc_size)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 23781
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        ID .ID (ID =ID [LIT ]+ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        ID ].ID (ID =ID [LIT ]+ID )\n"
    },
    {
        "code": "\ndef handler_cs_checkbutton(self, *args):\n    self.notify_observers('change:cs',\n        utils.KeyValueObject(value=self.cs_checkbutton_var.get()))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23782
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n",
        "wrong_code": "\ndef ID elif ID ,*ID ):\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n"
    },
    {
        "code": "\ndef handler_pinned_checkbutton(self, *args):\n    self.notify_observers('change:pinned',\n        utils.KeyValueObject(value=self.pinned_checkbutton_var.get()))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23783
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))or "
    },
    {
        "code": "\ndef handler_search_enter(self, evt):\n    # user has pressed enter whilst searching\n    # 1. if a note is selected, focus that\n    # 2. if nothing is selected, create a new note with this title\n\n    if self.notes_list.selected_idx >= 0:\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23784
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n    if ID .ID .ID >=LIT :\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n    if ID ..ID >=LIT :\n        pass \n\n    else :\n        pass \n"
    },
    {
        "code": "\ndef handler_search_entry(self, *args):\n    self.notify_observers('change:entry',\n                          utils.KeyValueObject(value=self.search_entry_var.get()))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23785
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n"
    },
    {
        "code": "\ndef handler_search_mode(self, *args):\n    \"\"\"\n        Called when the user changes the search mode via the OptionMenu.\n\n        This will also be called even if the user reselects the same option.\n\n        @param args:\n        @return:\n        \"\"\"\n\n    self.notify_observers('change:search_mode',\n        utils.KeyValueObject(value=self.search_mode_var.get()))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 23786
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    LIT \n\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .ID ()))\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    LIT \n\n    ID .ID (LIT ,\n    ID .ID (ID =ID .ID .for ID ()))\n"
    },
    {
        "code": "\ndef handler_add_tags_to_selected_note(self, evt=None):\n    self.notify_observers('add:tag', utils.KeyValueObject(tags=self.tags_entry_var.get()))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23787
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID .ID (ID =ID .ID .ID ()))\n",
        "wrong_code": "\ncontinue ID (ID ,ID =ID ):\n    ID .ID (LIT ,ID .ID (ID =ID .ID .ID ()))\n"
    },
    {
        "code": "\ndef handler_click_link(self, link):\n    if link.startswith('[['):\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23788
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID (LIT ):\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID (LIT ):\n        pass \n\n    else :raise pass \n"
    },
    {
        "code": "\ndef activate_markdown_highlighting(self):\n    if mo:\n        pass\n\n    for mo in pat.finditer(content):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 23789
        },
        "correct_code": "\ndef ID (ID ):\n    if ID :\n        pass \n\n    for ID in ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID :\n        pass \n\n    for ID in ID .ID (ID )::\n        pass \n"
    },
    {
        "code": "\ndef handler_text_change(self, evt):\n    self.notify_observers('change:text', None)\n    # FIXME: consider having this called from the housekeeping\n    # handler, so that the poor regexp doesn't have to do every\n    # single keystroke.\n    self.activate_links()\n    self.activate_search_string_highlights()\n    self.activate_markdown_highlighting()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 109,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23790
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (LIT ,ID )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID ()\n    ID .ID ()\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (LIT ,ID )\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    ID .ID ()\n    ID .ID (]\n    ID .ID ()\n"
    },
    {
        "code": "\ndef observer_notes_list(self, notes_list_model, evt_type, evt):\n    if evt_type == 'set:list':\n        # re-render!\n        self.set_notes(notes_list_model.list)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 23791
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID ==LIT :\n    #COMMENT\n\n        ID .ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    if ID ==LIT :\n    #COMMENT\n\n        ID .ID (ID .=ID )\n"
    },
    {
        "code": "\ndef main_loop(self):\n    self.root.mainloop()\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 23792
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .def ID .ID ()\n"
    },
    {
        "code": "\ndef mute_note_data_changes(self):\n    self.mute('change:text')\n    self.mute('add:tag')\n    self.mute('delete:tag')\n    self.mute('change:pinned')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23793
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID :\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef search(self, e):\n    self.search_entry.focus()\n    self.search_entry.selection_range(0, tk.END)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23794
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID ()\n    ID .ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID .ID ()\n    ID .ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef set_cs(self, cs, silent=False):\n    if silent:\n        self.mute('change:cs')\n\n    self.cs_checkbutton_var.set(cs)\n\n    self.unmute('change:cs')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 97,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23795
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        ID .ID (LIT )\n\n    ID .ID .ID (ID )\n\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if ID :\n        ID .ID (LIT )\n\n    ID .ID .ID (ID )\n\n    ID .ID (and )\n"
    },
    {
        "code": "\ndef set_status_text(self, txt):\n    self.statusbar.set_status(txt)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23796
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ID ):\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef handler_delete_tag_from_selected_note(self,tag_name):\n    self.notify_observers('delete:tag', utils.KeyValueObject(tag=tag_name))\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23797
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (LIT ,ID .ID (ID =ID ))\n",
        "wrong_code": "while \ndef ID (ID ,ID ):\n    ID .ID (LIT ,ID .ID (ID =ID ))\n"
    },
    {
        "code": "\ndef show_error(self, title, msg):\n    tkMessageBox.showerror(title, msg)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 23798
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID with ):\n    ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef show_info(self, title, msg):\n    tkMessageBox.showinfo(title, msg, parent=self.root)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 23799
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID ,ID =ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID ,ID [=ID .ID )\n"
    },
    {
        "code": "\ndef show_warning(self, title, msg):\n    tkMessageBox.showwarning(title, msg)\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23800
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID ID ,ID )\n"
    },
    {
        "code": "\ndef unmute_note_data_changes(self):\n    self.unmute('change:text')\n    self.unmute('add:tag')\n    self.unmute('delete:tag')\n    self.unmute('change:pinned')\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23801
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n",
        "wrong_code": "\nfinally ID (ID ):\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef update_selected_note_data(self, note):\n\n    if new_content != current_content:\n        pass\n\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23802
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if ID !=ID :\n        pass \n\n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID )\n\n    if ID !=ID :\n        pass \n\n    else :\n        pass \n"
    },
    {
        "code": "\ndef word_count(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpbotha/nvpy/nvpy/view.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23803
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_round_precise_time(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/testing/interchange.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 23804
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    assert "
    },
    {
        "code": "\ndef test_constant_representation_rk(self):\n    pass\n\n    #  can't test Strava well this way, the upload and download formats are entirely different\n\n    #  can't test endomondo - upload data all constructed in upload function.. needs refactor?\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/testing/interchange.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23805
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n    #COMMENT\n\n\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ):(    pass \n\n    #COMMENT\n\n\n    #COMMENT\n\n"
    },
    {
        "code": "\n\ndef test_activity_specificity_resolution(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/testing/interchange.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23806
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef svc_id(svc):\n    return svc.Service.ID\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/web/views/sync.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23807
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return except .ID .ID \n"
    },
    {
        "code": "\ndef err_msg(err):\n    return err[\"Message\"]\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/web/views/sync.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23808
        },
        "correct_code": "\ndef ID (ID ):\n    return ID [LIT ]\n",
        "wrong_code": "\ndef ID ,ID ):\n    return ID [LIT ]\n"
    },
    {
        "code": "\ndef sync_recent_activity(req):\n    if not req.user:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/web/views/sync.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23809
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID :\n        pass \n",
        "wrong_code": "!def ID (ID ):\n    if not ID .ID :\n        pass \n"
    },
    {
        "code": "\n@csrf_exempt\n@require_POST\ndef sync_trigger_partial_sync_callback(req, service):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cpfair/tapiriik/tapiriik/web/views/sync.py",
            "fix_location": 10,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23810
        },
        "correct_code": "\n@ID \n@ID \ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID \n@ID def ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\n# --------------------------------------------------------------------------\n# amqlib\n# --------------------------------------------------------------------------\ndef patch_transport():\n    \"\"\"\n\tThis function path transport constructor to fix timeout in sockets\n\t\"\"\"\n\n    from amqp.transport import _AbstractTransport\n\n    _AbstractTransport.__init__ = new_transport_init\n",
        "metadata": {
            "file": "py150_files/data/cr0hn/enteletaor/enteletaor_lib/modules/brute/patch.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 23811
        },
        "correct_code": "\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID ():\n    LIT \n\n    from ID .ID import ID \n\n    ID .ID =ID \n",
        "wrong_code": "\n\nas #COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID ():\n    LIT \n\n    from ID .ID import ID \n\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef init_with_context(self, context):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/crate/dashboard/index.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23812
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\ntry     pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    # Removing unique constraint on 'Favorite', fields ['user', 'package']\n    db.delete_unique('favorites_favorite', ['user_id', 'package_id'])\n\n    # Deleting model 'Favorite'\n    db.delete_table('favorites_favorite')\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/favorites/migrations/0005_auto__del_favorite__del_unique_favorite_user_package.py",
            "fix_location": 82,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23813
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[LIT ,LIT ])\n\n    #COMMENT\n\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[LIT ,LIT ])\n\n    #COMMENT\n\n    ID .(LIT )\n"
    },
    {
        "code": "\ndef backwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/favorites/migrations/0005_auto__del_favorite__del_unique_favorite_user_package.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23814
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef lambda ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/packages/migrations/0001_initial.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23815
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef backwards(self, orm):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/packages/migrations/0001_initial.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23816
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": ")\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n    # Adding index on 'PyPIIndexPage', fields ['created']\n    db.create_index('pypi_pypiindexpage', ['created'])\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/pypi/migrations/0016_auto.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23817
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[LIT ]return \n"
    },
    {
        "code": "\ndef backwards(self, orm):\n    # Removing index on 'PyPIIndexPage', fields ['created']\n    db.delete_index('pypi_pypiindexpage', ['created'])\n",
        "metadata": {
            "file": "py150_files/data/crate-archive/crate-site/crateweb/apps/pypi/migrations/0016_auto.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23818
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[LIT ])\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID (LIT ,[=])\n"
    },
    {
        "code": "\ndef __init__(self, container_name, connection):\n    self.container_name = container_name\n    self.conn = connection\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 23819
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,await ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _compute_digest(self, f):\n    while True:\n        if not d:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23820
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while LIT :\n        if not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID )for \n    while LIT :\n        if not ID :\n            pass \n"
    },
    {
        "code": "\ndef put(self, f, digest=None):\n\n    if digest:\n        pass\n    else:\n        pass\n    if digest:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 23821
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):.\n\n    if ID :\n        pass \n    else :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef get(self, digest):\n    \"\"\"\n        Return the contents of a blob\n\n        :param digest: the hex digest of the blob to return\n        :return: generator returning chunks of data\n        \"\"\"\n    return self.conn.client.blob_get(self.container_name, digest)\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23822
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef .ID (ID ,ID ):\n    LIT \n    return ID .ID .ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef delete(self, digest):\n    \"\"\"\n        Delete a blob\n\n        :param digest: the hex digest of the blob to be deleted\n        :return: True if blob existed\n        \"\"\"\n    return self.conn.client.blob_del(self.container_name, digest)\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 23823
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID ./ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef exists(self, digest):\n    \"\"\"\n        Check if a blob exists\n\n        :param digest: Hex digest of the blob\n        :return: Boolean indicating existence of the blob\n        \"\"\"\n    return self.conn.client.blob_exists(self.container_name, digest)\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 23824
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID .ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID in .ID .ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<BlobContainer '{0}'>\".format(self.container_name)\n",
        "metadata": {
            "file": "py150_files/data/crate/crate-python/src/crate/client/blob.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 23825
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (ID .ID )\n",
        "wrong_code": "\n==def ID (ID ):\n    return LIT .ID (ID .ID )\n"
    },
    {
        "code": "\ndef init_with_context(self, context):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crateio/crate.web/crate/web/dashboard/index.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23826
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):for     pass \n"
    },
    {
        "code": "\n\ndef project_dir(*paths):\n    base = os.path.realpath(os.path.dirname(__file__))\n    return os.path.join(base, *paths)\n",
        "metadata": {
            "file": "py150_files/data/crccheck/django-object-actions/example_project/settings.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23827
        },
        "correct_code": "\n\ndef ID (*ID ):\n    ID =ID .ID .ID (ID .ID .ID (ID ))\n    return ID .ID .ID (ID ,*ID )\n",
        "wrong_code": "\n\ndef ID (*ID ):\n    ID =ID .ID .ID (ID .ID .ID ID ))\n    return ID .ID .ID (ID ,*ID )\n"
    },
    {
        "code": "\ndef __init__(self, name, host=None, port=None, user=None, password=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23828
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\nlambda ID (ID ,ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef connect(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23829
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (else ID ):\n    pass \n"
    },
    {
        "code": "\ndef close(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23830
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (while ID ):\n    pass \n"
    },
    {
        "code": "\ndef commit(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23831
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass LIT "
    },
    {
        "code": "\ndef rollback(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23832
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )None \n    pass \n"
    },
    {
        "code": "\ndef run_in_transaction(self, func, *args, **kw):\n    return datastore.RunInTransaction(func, *args, **kw)\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23833
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ,**ID ):\n    return ID .ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID *ID ,**ID ):\n    return ID .ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef schema_table(self, model):\n    for name, field in model.fields().items():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23834
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID ().ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .return ().ID ():\n        pass \n"
    },
    {
        "code": "\ndef exists_table(self, model):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 23835
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )except :\n    pass \n"
    },
    {
        "code": "\ndef create_table(self, model):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 23836
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):nonlocal \n    pass \n"
    },
    {
        "code": "\ndef alter_table(self, model, name=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23837
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef drop_table(self, model):\n    model.all().delete()\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23838
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ().ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ().ID ()yield "
    },
    {
        "code": "\ndef count(self, qset):\n    return len(list(self.fetch(qset, -1, 0)))\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 60,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23839
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID (ID .ID (ID ,-LIT ,LIT )))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID (ID .ID (ID ,-LIT ,LIT ))\n"
    },
    {
        "code": "def __init__(self, kind, filters, orderings=None):\n    super(Query, self).__init__(kind, filters)\n    if orderings:\n        self.Order(*orderings)\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23840
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID ,ID )\n    if ID :\n        ID .ID (*ID )\n",
        "wrong_code": "def ID (ID ID ,ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID ,ID )\n    if ID :\n        ID .ID (*ID )\n"
    },
    {
        "code": "\ndef IsKeysOnly(self):\n    return False\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 23841
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT try \n"
    },
    {
        "code": "\ndef __init__(self, kind, field, value, orderings=None):\n    self.field = field\n    self.value = value\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 23842
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,(ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef validate(self, value):\n    \"\"\"Validate the value and return True or False.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23843
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,]):\n    LIT \n    raise ID \n"
    },
    {
        "code": "def __init__(self, kind, field, value, orderings=None):\n    super(NotInQuery, self).__init__(kind, field, value, orderings)\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23844
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID ,ID ,ID ,ID )\n",
        "wrong_code": "def ID ((,ID ,ID ,ID ,ID =ID ):\n    ID (ID ,ID ).ID (ID ,ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef validate(self, value):\n    return value not in self.value\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23845
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID not in ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return not in ID .ID \n"
    },
    {
        "code": "def __init__(self, kind, field, value, orderings=None):\n    if not isinstance(value, basestring):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23846
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if not ID (ID ,ID ):\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,=ID ):\n    if not ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef validate(self, value):\n    return self.regex.match(value) is not None\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 23847
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID )is not ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    del return ID .ID .ID (ID )is not ID \n"
    },
    {
        "code": "\ndef IsKeysOnly(self):\n    return False\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23848
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID )from \n    return LIT \n"
    },
    {
        "code": "\ndef compare(a, b):\n    if how == 2:\n        pass\n    return cmp(a[name], b[name])\n",
        "metadata": {
            "file": "py150_files/data/cristatus/kalapy/kalapy/db/engines/gae/_database.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23849
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n    return ID (ID [ID ],ID [ID ])\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :await pass \n    return ID (ID [ID ],ID [ID ])\n"
    },
    {
        "code": "\n\ndef run():\n    testsuite = unittest.TestLoader().discover('.')\n    unittest.TextTestRunner(verbosity=1).run(testsuite)\n",
        "metadata": {
            "file": "py150_files/data/crm416/semantic/test.py",
            "fix_location": 62,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23850
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID ().ID (LIT )\n    ID .ID (ID =LIT ).ID (ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID .ID ().ID (LIT )\n    ID .ID (ID =LIT )ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self, url, realm, extra=None, serializers=None, ssl=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/asyncio/wamp.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23851
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef lambda ID (ID ,ID ,ID ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "# 1) factory for use ApplicationSession\ndef create():\n    try:\n        pass\n    except Exception:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/asyncio/wamp.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "except",
            "id": 23852
        },
        "correct_code": "#COMMENT\n\ndef ID ():\n    try :\n        pass \n    except ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "#COMMENT\n\ndef ID ():\n    try :\n        pass \n    =ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef is_method_or_function(f):\n    return inspect.ismethod(f) or inspect.isfunction(f)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 23853
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID (ID )or ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ):nonlocal \n    return ID .ID (ID )or ID .ID (ID )\n"
    },
    {
        "code": "\ndef __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23854
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "/def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef define(self, exception, error=None):\n    if error is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23855
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID !ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, config=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23856
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (+,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef set_keyring(self, keyring):\n    \"\"\"\n        \"\"\"\n    self._keyring = keyring\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23857
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ID ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef onOpen(self, transport):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23858
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass yield "
    },
    {
        "code": "\ndef onConnect(self):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.onConnect`\n        \"\"\"\n    self.join(self.config.realm)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23859
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    .ID (ID .ID .ID )\n"
    },
    {
        "code": "\ndef disconnect(self):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.disconnect`\n        \"\"\"\n    if self._transport:\n        self._transport.close()\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23860
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID .ID :\n        ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    in \n    if ID .ID :\n        ID .ID .ID ()\n"
    },
    {
        "code": "\ndef is_connected(self):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.is_connected`\n        \"\"\"\n    return self._transport is not None\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23861
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID is not ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .and is not ID \n"
    },
    {
        "code": "\ndef is_attached(self):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.is_attached`\n        \"\"\"\n    return self._session_id is not None\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23862
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID is not ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT await return ID .ID is not ID \n"
    },
    {
        "code": "\ndef onUserError(self, fail, msg):\n    if isinstance(fail.value, exception.ApplicationError):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23863
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID .ID ,ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID \n    ID .ID ,ID .ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _swallow_error(self, fail, msg):\n    try:\n        pass\n    except Exception:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 23864
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID if ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef success(arg):\n    # XXX also: handle async\n    self.fire('leave', self, details)\n    return arg\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23865
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (,ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef _error(e):\n    return self._swallow_error(e, \"While firing onLeave\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23866
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef success(arg):\n    # XXX also: handle async\n    self.fire('leave', self, details)\n    return arg\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23867
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,def ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef _error(e):\n    return self._swallow_error(e, \"While firing onLeave\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23868
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    del return ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef error(err):\n\n    def success(arg):\n        pass\n\n    def _error(e):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23869
        },
        "correct_code": "\ndef ID (ID ):\n\n    def ID (ID ):\n        pass \n\n    def ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID )continue :\n\n    def ID (ID ):\n        pass \n\n    def ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef success(arg):\n    # XXX also: handle async\n    self.fire('leave', self, details)\n    return arg\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 23870
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return ID break \n"
    },
    {
        "code": "\ndef _error(e):\n    errmsg = 'While firing onLeave for reason \"{0}\" and message \"{1}\"'.format(msg.reason, msg.message)\n    return self._swallow_error(e, errmsg)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 23871
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT .ID (ID .ID ,ID .ID )\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT .ID (ID .ID ,ID .ID )return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _error(e):\n    errmsg = 'While firing {0} subscribed under {1}.'.format(\n        handler.fn, msg.subscription)\n    return self._swallow_error(e, errmsg)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 23872
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT .ID (\n    ID .ID ,ID .ID )\n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID not LIT .ID (\n    ID .ID ,ID .ID )\n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef success(arg):\n    # XXX also: handle async\n    self.fire('leave', self, details)\n    return arg\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23873
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,ID ,ID )\n    return await \n"
    },
    {
        "code": "\ndef _error(e):\n    return self._swallow_error(e, \"While firing onLeave\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23874
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID (,LIT )\n"
    },
    {
        "code": "\ndef success(arg):\n    # XXX do we care about returning 'arg' properly?\n    return self.fire('disconnect', self, was_clean=wasClean)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23875
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID .ID (LIT ,ID ,ID =ID )\n",
        "wrong_code": "\ndef ID (ID nonlocal ):\n#COMMENT\n\n    return ID .ID (LIT ,ID ,ID =ID )\n"
    },
    {
        "code": "\ndef _error(e):\n    return self._swallow_error(e, \"While firing onDisconnect\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23876
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (ID ,LIT )\n",
        "wrong_code": "\n=ID (ID ):\n    return ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef onChallenge(self, challenge):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.onChallenge`\n        \"\"\"\n    raise Exception(\"received authentication challenge, but onChallenge not implemented\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23877
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID (LIT )\n",
        "wrong_code": "\ndef ID ID ,ID ):\n    LIT \n    raise ID (LIT )\n"
    },
    {
        "code": "\ndef onJoin(self, details):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.onJoin`\n        \"\"\"\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 23878
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n",
        "wrong_code": "\n==def ID (ID ,ID ):\n    LIT \n"
    },
    {
        "code": "\ndef onLeave(self, details):\n    if details.reason.startswith('wamp.error.'):\n        pass\n\n    if self._transport:\n        pass\n    # do we ever call onLeave with a valid transport?\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 23879
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID (LIT ):\n        pass \n\n    if ID .ID :\n        pass \n        #COMMENT\n\n",
        "wrong_code": "\nimport def ID (ID ,ID ):\n    if ID .ID .ID (LIT ):\n        pass \n\n    if ID .ID :\n        pass \n        #COMMENT\n\n"
    },
    {
        "code": "\ndef onDisconnect(self):\n    \"\"\"\n        Implements :func:`autobahn.wamp.interfaces.ISession.onDisconnect`\n        \"\"\"\n    pass  # return self.fire('disconnect', self, True)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23880
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    pass #COMMENT\n\n",
        "wrong_code": "\nID (ID ):\n    LIT \n    pass #COMMENT\n\n"
    },
    {
        "code": "\ndef _subscribe(obj, fn, topic, options):\n\n    if options:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 23881
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,:ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _unsubscribe(self, subscription):\n\n    if not self._transport:\n        pass\n\n    if scount == 0:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23882
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if not ID .ID :\n        pass \n\n    if ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID lambda ,ID ):\n\n    if not ID .ID :\n        pass \n\n    if ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _register(obj, fn, procedure, options):\n\n    if options:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23883
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):!=\n    if ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef _unregister(self, registration):\n\n    if not self._transport:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23884
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if not ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    if not ID .ID :]pass \n"
    },
    {
        "code": "\ndef __init__(self, config=None):\n    \"\"\"\n\n        :param config: The default component configuration.\n        :type config: instance of :class:`autobahn.wamp.types.ComponentConfig`\n        \"\"\"\n    self.config = config or types.ComponentConfig(realm=u\"default\")\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23885
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    ID .ID =ID or ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    ID .ID =ID or ID ..(ID =LIT )\n"
    },
    {
        "code": "\ndef __call__(self):\n    \"\"\"\n        Creates a new WAMP application session.\n\n        :returns: -- An instance of the WAMP application session class as\n                     given by `self.session`.\n        \"\"\"\n    session = self.session(self.config)\n    session.factory = self\n    return session\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/autobahn/wamp/protocol.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23886
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID .ID )\n    ID .ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =-.ID (ID .ID )\n    ID .ID =ID \n    return ID \n"
    },
    {
        "code": "\n@inlineCallbacks\ndef onJoin(self, details):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/app/dbus/bridge.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 23887
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):\n    pass del \n"
    },
    {
        "code": "\n@inlineCallbacks\n@wamp.subscribe(u'com.example.dbus.on_notify')\ndef onNotify(self, title, body, duration=2):\n\n    try:\n        pass\n\n    except Exception as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/app/dbus/bridge.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23888
        },
        "correct_code": "\n@ID \n@ID .ID (LIT )\ndef ID (ID ,ID ,ID ,ID =LIT ):\n\n    try :\n        pass \n\n    except ID as ID :\n        pass \n",
        "wrong_code": "\n@ID \n@ID .ID (LIT )\ndef ID ID ,ID ,ID ,ID =LIT ):\n\n    try :\n        pass \n\n    except ID as ID :\n        pass \n"
    },
    {
        "code": "@wamp.register(u'com.mathservice.add2')\ndef add2(self, x, y):\n    return x + y\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/rpc/decorators/backend.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23889
        },
        "correct_code": "@ID .ID (LIT )\ndef ID (ID ,ID ,ID ):\n    return ID +ID \n",
        "wrong_code": "@ID .ID (LIT )\ndef ID (ID finally ID ,ID ):\n    return ID +ID \n"
    },
    {
        "code": "\n@wamp.register(u'com.mathservice.mul2')\ndef mul2(self, x, y):\n    return x * y\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/rpc/decorators/backend.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 23890
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ,ID ):\n    return ID *ID \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,yield ID ,ID ):\n    return ID *ID \n"
    },
    {
        "code": "\n@inlineCallbacks\ndef onJoin(self, details):\n\n    for res in results:\n        if isinstance(res, Failure):\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/rpc/decorators/backend.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23891
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n\n    for ID in ID :\n        if ID (ID ,ID ):\n            pass \n        else :\n            pass \n",
        "wrong_code": ":\n@ID \ndef ID (ID ,ID ):\n\n    for ID in ID :\n        if ID (ID ,ID ):\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\n@wamp.register(u'com.mathservice.square2')\ndef square2(self, x, y):\n    return x * x + y * y\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/rpc/decorators/backend.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23892
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ,ID ):\n    return ID *ID +ID *ID \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID async ID ):\n    return ID *ID +ID *ID \n"
    },
    {
        "code": "\n@wamp.register(u'com.mathservice.div2')\ndef div2(self, x, y):\n    if y:\n        return float(x) / float(y)\n    else:\n        return 0\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/wamp/rpc/decorators/backend.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23893
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ,ID ):\n    if ID :\n        return ID (ID )/ID (ID )\n    else :\n        return LIT \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ,ID ):\n    if ID :nonlocal return ID (ID )/ID (ID )\n    else :\n        return LIT \n"
    },
    {
        "code": "\ndef onOpen(self):\n\n    if not authenticated:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/auth_persona/server.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23894
        },
        "correct_code": "\ndef ID (ID ):\n\n    if not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    if not ID :\n        pass \n        break else :\n        pass \n    "
    },
    {
        "code": "\ndef onClose(self, wasClean, code, reason):\n\n    # if list gets empty, possibly do something ..\n    if not self.factory._cookies[self._cbtid]['connections']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/auth_persona/server.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23895
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n#COMMENT\n\n    if not ID .ID .ID [ID .ID ][LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n\n#COMMENT\n\n    if not ID ID .ID [ID .ID ][LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef error(err):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/auth_persona/server.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23896
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID await (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, url):\n    WebSocketServerFactory.__init__(self, url, debug=False)\n\n    # map of cookies\n    self._cookies = {}\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/auth_persona/server.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 23897
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID ,ID ,ID =LIT )\n\n    #COMMENT\n\n    ID .ID ={}\n",
        "wrong_code": "\ndef ID (ID ,ID ):\nas     ID .ID (ID ,ID ,ID =LIT )\n\n    #COMMENT\n\n    ID .ID ={}\n"
    },
    {
        "code": "\ndef sendHello(self):\n    self.sendMessage(\"Hello, world!\".encode('utf8'))\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/echo_variants/client_with_proxy.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 23898
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (LIT .ID (LIT is ))\n"
    },
    {
        "code": "\ndef onOpen(self):\n    self.sendHello()\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/echo_variants/client_with_proxy.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 23899
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):,\n    ID .ID ()\n"
    },
    {
        "code": "\ndef onMessage(self, payload, isBinary):\n    if not isBinary:\n        print(\"Text message received: {}\".format(payload.decode('utf8')))\n    reactor.callLater(1, self.sendHello)\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/echo_variants/client_with_proxy.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 23900
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID :\n        ID (LIT .ID (ID .ID (LIT )))\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "\n,def ID (ID ,ID ,ID ):\n    if not ID :\n        ID (LIT .ID (ID .ID (LIT )))\n    ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef connectionMade(self):\n    print(\"connectionMade\")\n    self.transport.write('how are you?')\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/wrapping/server_endpoint.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 23901
        },
        "correct_code": "\ndef ID (ID ):\n    ID (LIT )\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (LIT )\n    ID .ID .async ID (LIT )\n"
    },
    {
        "code": "\ndef dataReceived(self, data):\n    print(\"dataReceived: {}\".format(data))\n",
        "metadata": {
            "file": "py150_files/data/crossbario/autobahn-python/examples/twisted/websocket/wrapping/server_endpoint.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 23902
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID (LIT .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID (and LIT .ID (ID ))\n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwds):\n    super(QuickLauncher, self).__init__(*args, **kwds)\n    self.init_gui()\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23903
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID .ID ()\n",
        "wrong_code": "\nID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef init_gui(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23904
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef accept(self):\n    text = self.lineEdit.text()\n    self.close()\n    if not lib.run_cmd(text):\n        lib.run_script(text)\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23905
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID ()\n    ID .ID ()\n    if not ID .ID (ID ):\n        ID .ID (ID )\n",
        "wrong_code": "\nID (ID ):\n    ID =ID .ID .ID ()\n    ID .ID ()\n    if not ID .ID (ID ):\n        ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef select_repo():\n    if repo:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23906
        },
        "correct_code": "\n\ndef ID ():\n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID :\n        pass \n    ."
    },
    {
        "code": "\n\ndef setup_hotkey():\n    hotkey_sequence = QtGui.QKeySequence(QtCore.Qt.Key_Tab)\n    hotkey_log = QtGui.QShortcut(hotkey_sequence, lib.get_parent())\n    hotkey_log.activated.connect(show)\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23907
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID (ID .ID .ID )\n    ID =ID .ID (ID ,ID .ID ())\n    ID .ID .ID (ID )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID .ID (ID .ID .ID )\n    ID =ID .ID (ID ,ID .ID ())\n    ID .global .ID (ID )\n"
    },
    {
        "code": "\n\ndef show():\n    if ql is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 23908
        },
        "correct_code": "\n\ndef ID ():\n    if ID is ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    and if ID is ID :\n        pass \n"
    },
    {
        "code": "\n\ndef position_window(window):\n    \"\"\"Position window to mouse cursor\"\"\"\n    pos = QtGui.QCursor.pos()\n    window.move(pos.x(), pos.y())\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 23909
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID ()\n    ID .ID (ID .ID (),ID .ID ())\n",
        "wrong_code": "\n\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID ()\n    ID .ID (ID .ID (),ID .ID ())\nclass "
    },
    {
        "code": "\n\ndef get_instance(parent, gui_class):\n    for children in parent.children():\n        if isinstance(children, gui_class):\n            return children\n    return None\n",
        "metadata": {
            "file": "py150_files/data/csaez/quicklauncher/quicklauncher/gui.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23910
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID ():\n        if ID (ID ,ID ):\n            return ID \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID :\n    for ID in ID .ID ():\n        if ID (ID ,ID ):\n            return ID \n    return ID \n"
    },
    {
        "code": "\ndef latest_post(request):\n    try:\n        pass\n    except BlogPost.DoesNotExist:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/ctrochalakis/django-threadedcomments/examples/tut1/blog/views.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23911
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID .ID :\n        pass \n",
        "wrong_code": "\ndef continue ID (ID ):\n    try :\n        pass \n    except ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef test_get_last_month_length(self):\n    march2012 = date(2012, 3, 1)\n    assert get_last_month_length(march2012) == -29\n",
        "metadata": {
            "file": "py150_files/data/cuducos/alchemydumps/tests/test_helpers_autoclean.py",
            "fix_location": 65,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23912
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT ,LIT )\n    assert ID (ID )==-LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT ,LIT )\n    assert ID (ID )==-\n"
    },
    {
        "code": "\ndef test_get_last_year_length(self):\n    march2013 = date(2013, 3, 1)\n    assert get_last_year_length(march2013) == -366\n",
        "metadata": {
            "file": "py150_files/data/cuducos/alchemydumps/tests/test_helpers_autoclean.py",
            "fix_location": 65,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23913
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT ,LIT )\n    assert ID (ID )==-LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (LIT ,LIT ,LIT )\n    assert ID (ID )==-\n\n"
    },
    {
        "code": "\ndef test_bw_lists(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cuducos/alchemydumps/tests/test_helpers_autoclean.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 23914
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass yield \n"
    },
    {
        "code": "\ndef test_filter_dates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/cuducos/alchemydumps/tests/test_helpers_autoclean.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 23915
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nglobal "
    },
    {
        "code": "\ndef __init__(self, unit='inch', id=None):\n    self.units = unit\n    self.id = uuid.uuid4().int if id is None else id\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 23916
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID .ID ().ID if ID is ID else ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):None \n    ID .ID =ID \n    ID .ID =ID .ID ().ID if ID is ID else ID \n"
    },
    {
        "code": "\ndef to_inch(self):\n    self.units = 'inch'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 23917
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID while =LIT \n"
    },
    {
        "code": "\ndef to_metric(self):\n    self.units = 'metric'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23918
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef (ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef offset(self, x_offset=0, y_offset=0):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 23919
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    def \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    return self.__dict__ == other.__dict__\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23920
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID ==ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "\n@classmethod\ndef from_dict(cls, settings, tool_dict):\n    \"\"\" Create an ExcellonTool from a dict.\n\n        Parameters\n        ----------\n        settings : FileSettings (dict-like)\n            Excellon File-wide settings\n\n        tool_dict : dict\n            Excellon tool parameters as a dict\n\n        Returns\n        -------\n        tool : ExcellonTool\n            An ExcellonTool initialized with the parameters in tool_dict.\n        \"\"\"\n    return cls(settings, **tool_dict)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 23921
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID else \ndef ID (ID ,ID ,ID ):\n    LIT \n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, settings, **kwargs):\n    if kwargs.get('id') is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23922
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    if ID .ID (LIT )is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,break ID ,**ID ):\n    if ID .ID (LIT )is not ID :\n        pass \n"
    },
    {
        "code": "\ndef to_inch(self):\n    if self.settings.units != 'inch':\n        if self.diameter is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23923
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID .ID !=LIT :\n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID [(ID ):\n    if ID .ID .ID !=LIT :\n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef to_metric(self):\n    if self.settings.units != 'metric':\n        if self.diameter is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 23924
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID .ID !=LIT :\n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID .ID !=LIT :\n        if ID ,.ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef _hit(self):\n    self.hit_count += 1\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23925
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID +=LIT \n",
        "wrong_code": "import \ndef ID (ID ):\n    ID .ID +=LIT \n"
    },
    {
        "code": "\ndef __repr__(self):\n    fmtstr = '<ExcellonTool %%02d: %%%d.%dg%%s dia.>' % self.settings.format\n    return fmtstr % (self.number, self.diameter, unit)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23926
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT %ID .ID .ID \n    return ID %(ID .ID ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT %ID .ID .ID \n    return ID %(ID .ID ,and .ID ,ID )\n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n\n    # up to 3 characters for tool number (Frizting uses that)\n    if len(line) <= 3:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23927
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n\n#COMMENT\n\n    if ID (ID )<=LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID assert def ID (ID ,ID ,**ID ):\n\n#COMMENT\n\n    if ID (ID )<=LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, tool, compensation_index=None, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23928
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    pass \n",
        "wrong_code": "with \ndef ID (ID ,ID ,ID =ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    stmt = 'T%02d' % self.tool\n    if self.compensation_index is not None:\n        stmt += '%02d' % self.compensation_index\n    return stmt\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23929
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID =LIT %ID .ID \n    if ID .ID is not ID :\n        ID +=LIT %ID .ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,=ID =ID ):\n    ID =LIT %ID .ID \n    if ID .ID is not ID :\n        ID +=LIT %ID .ID \n    return ID \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    \"\"\" Create a ZAxisInfeedRate from an excellon file line.\n\n        Parameters\n        ----------\n        line : string\n            Line from an Excellon file\n\n        Returns\n        -------\n        z_axis_infeed_rate : ToolSelectionStmt\n            ToolSelectionStmt representation of `line.`\n        \"\"\"\n    rate = int(line[1:])\n\n    return cls(rate, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 23930
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    LIT \n    ID =ID (ID [LIT :])\n\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    LIT \n    ID =ID (ID ==LIT :])\n\n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, rate, **kwargs):\n    super(ZAxisInfeedRateStmt, self).__init__(**kwargs)\n    self.rate = rate\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 23931
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    ID (ID ,ID )LIT ID (**ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'F%02d' % self.rate\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23932
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID )\n    return LIT %ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, x=None, y=None, **kwargs):\n    self.y = y\n    self.mode = None\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 65,
            "fix_type": "delete",
            "id": 23933
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =ID ,**ID ):\n    ID .ID =ID \n    ID .ID =break ID \n"
    },
    {
        "code": "\ndef to_inch(self):\n    if self.units == 'metric':\n        if self.x is not None:\n            pass\n        if self.y is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23934
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .[==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef to_metric(self):\n    if self.units == 'inch':\n        if self.x is not None:\n            pass\n        if self.y is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 100,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23935
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .is not ID :\n            pass \n"
    },
    {
        "code": "\ndef offset(self, x_offset=0, y_offset=0):\n    if self.x is not None:\n        pass\n    if self.y is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23936
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    if self.x is not None:\n        pass\n    if self.y is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "is",
            "id": 23937
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, settings, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 2,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23938
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@\ndef ID (ID ,ID ,ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, count, xdelta=0.0, ydelta=0.0, **kwargs):\n    self.ydelta = ydelta\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23939
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,**ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ,**ID )try \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef to_inch(self):\n    if self.units == 'metric':\n        if self.xdelta is not None:\n            pass\n        if self.ydelta is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 79,
            "fix_type": "delete",
            "id": 23940
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            global pass \n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef to_metric(self):\n    if self.units == 'inch':\n        if self.xdelta is not None:\n            pass\n        if self.ydelta is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 23941
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID ==:\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    return cls(line.lstrip(';'))\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23942
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    return ID (ID .ID (LIT ))\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    return break (ID .ID (LIT ))\n"
    },
    {
        "code": "\ndef __init__(self, comment, **kwargs):\n    super(CommentStmt, self).__init__(**kwargs)\n    self.comment = comment\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23943
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    ID ID ,ID ).ID (**ID )\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return ';%s' % self.comment\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 23944
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %ID ID \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(HeaderBeginStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23945
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID async ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M48'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 23946
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\nin     return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(HeaderEndStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23947
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "elif \ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M95'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 23948
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ID =ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(RewindStopStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23949
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return '%'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23950
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "=def ID (ID ,ID =ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(ZAxisRoutPositionStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 23951
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\nas ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M15'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 23952
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return and \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(RetractWithClampingStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 23953
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID assert **ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M16'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 23954
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID not ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(RetractWithoutClampingStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23955
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID :(ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M17'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 23956
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return =LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(CutterCompensationOffStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23957
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\nID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G40'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 23958
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID )!:\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(CutterCompensationLeftStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 23959
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\nas def ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G41'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 23960
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\nID (ID ,ID =ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(CutterCompensationRightStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23961
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID :\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G42'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23962
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID )!\n    return LIT \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, settings, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23963
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,finally ,**ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, x=None, y=None, **kwargs):\n    super(EndOfProgramStmt, self).__init__(**kwargs)\n    self.x = x\n    self.y = y\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 23964
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,finally ID =ID ,ID =ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    if self.x is not None:\n        pass\n    if self.y is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 84,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23965
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not nonlocal :\n        pass \n"
    },
    {
        "code": "\ndef to_inch(self):\n    if self.units == 'metric':\n        if self.x is not None:\n            pass\n        if self.y is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23966
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID ([):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef to_metric(self):\n    if self.units == 'inch':\n        if self.x is not None:\n            pass\n        if self.y is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 23967
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n",
        "wrong_code": "not \ndef ID (ID ):\n    if ID .ID ==LIT :\n        if ID .ID is not ID :\n            pass \n        if ID .ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef offset(self, x_offset=0, y_offset=0):\n    if self.x is not None:\n        pass\n    if self.y is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23968
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID global (ID ,ID =LIT ,ID =LIT ):\n    if ID .ID is not ID :\n        pass \n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    zeros = 'leading' if 'LZ' in line else 'trailing'\n    return cls(units, zeros, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 23969
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =LIT if LIT in ID else LIT \n    return ID (ID ,ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =LIT if LIT else in ID else LIT \n    return ID (ID ,ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, units='inch', zeros='leading', **kwargs):\n    self.units = units.lower()\n    self.zeros = zeros\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23970
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,**ID ):\n    ID .ID =ID .ID ()\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,**ID ):\n    ID .!==ID .ID ()\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    stmt = '%s,%s' % ('INCH' if self.units == 'inch' else 'METRIC',\n                      'LZ' if self.zeros == 'leading'\n                      else 'TZ')\n    return stmt\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 97,
            "fix_type": "modify",
            "fix_token": "else",
            "id": 23971
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    ID =LIT %(LIT if ID .ID ==LIT else LIT ,\n    LIT if ID .ID ==LIT \n    else LIT )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    ID =LIT %(LIT if ID .ID ==LIT else LIT ,\n    LIT if ID .ID ==LIT \n    ,LIT )\n    return ID \n"
    },
    {
        "code": "\ndef to_inch(self):\n    self.units = 'inch'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 23972
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID )ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef to_metric(self):\n    self.units = 'metric'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23973
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "nonlocal def ID (ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    return cls('off', **kwargs) if 'OFF' in line else cls('on', **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 88,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23974
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    return ID (LIT ,**ID )if LIT in ID else ID (LIT ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    return ID (LIT ,**ID )if LIT in ID else ID (LIT ,**ID \n"
    },
    {
        "code": "\ndef __init__(self, mode='off', **kwargs):\n    if mode.lower() not in ['on', 'off']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 34,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 23975
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    if ID .ID ()not in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    [ID .ID ()not in [LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'ICI,%s' % ('OFF' if self.mode == 'off' else 'ON')\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23976
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %(LIT if ID .ID ==LIT else LIT )\n",
        "wrong_code": "\ndef ID ,(ID ,ID =ID ):\n    return LIT %(LIT if ID .ID ==LIT else LIT )\n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    version = int(line.split(',')[1])\n    return cls(version, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 23977
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =ID (ID .ID (LIT )[LIT ])\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =ID (ID .ID (LIT )[LIT ])\n    return ID (ID ,**ID None )\n"
    },
    {
        "code": "\ndef __init__(self, version=1, **kwargs):\n    if version not in [1, 2]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 23978
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    if ID not in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    if ID not as in [LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'VER,%d' % self.version\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 23979
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %for ID .ID \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    fmt = int(line.split(',')[1])\n    return cls(fmt, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 23980
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =ID (ID .ID (LIT )[LIT ])\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =ID (ID .ID (LIT )[LIT ])\n    return ID (ID try ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, format=1, **kwargs):\n    if format not in [1, 2]:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 23981
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    if ID not in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID (-ID ,ID =LIT ,**ID ):\n    if ID not in [LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'FMAT,%d' % self.format\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 23982
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID class =ID ):\n    return LIT %ID .ID \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    linked = [int(tool) for tool in line.split('/')]\n    return cls(linked, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 23983
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    ID =[ID (ID )for ID in ID .ID (LIT )]\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID )def :\n    ID =[ID (ID )for ID in ID .ID (LIT )]\n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, linked_tools, **kwargs):\n    super(LinkToolStmt, self).__init__(**kwargs)\n    self.linked_tools = [int(x) for x in linked_tools]\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23984
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =[ID (ID )for ID in ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID class :\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =[ID (ID )for ID in ID ]\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return '/'.join([str(x) for x in self.linked_tools])\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 23985
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT .ID ([ID (ID )for ID in ID .ID ])\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    return LIT .ID (async [ID (ID )for ID in ID .ID ])\n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    if not ('M71' in line or 'M72' in line):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 23986
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    if not (LIT in ID or LIT in ID ):\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    if not (LIT in ID or LIT in ID ):\n        pass except "
    },
    {
        "code": "\ndef __init__(self, units='inch', **kwargs):\n    if units not in ['inch', 'metric']:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 23987
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,**ID ):\n    if ID not in [LIT ,LIT ]:\n        pass \n",
        "wrong_code": "\ndef ID for (ID ,ID =LIT ,**ID ):\n    if ID not in [LIT ,LIT ]:\n        pass \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'M72' if self.units == 'inch' else 'M71'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 23988
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT if ID .ID ==LIT else LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID )import \n    return LIT if ID .ID ==LIT else LIT \n"
    },
    {
        "code": "\ndef to_inch(self):\n    self.units = 'inch'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 23989
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID async ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef to_metric(self):\n    self.units = 'metric'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 23990
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID ID ):\n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(RouteModeStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 23991
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID )\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G00'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 23992
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =while ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(LinearModeStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 23993
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID is \n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G01'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 23994
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID :\n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(DrillModeStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 23995
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (,**ID ):\n    ID (ID ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G05'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 23996
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    finally return LIT \n"
    },
    {
        "code": "\ndef __init__(self, **kwargs):\n    super(AbsoluteModeStmt, self).__init__(**kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23997
        },
        "correct_code": "\ndef ID (ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n",
        "wrong_code": "\ndef ID (ID ,**ID ):\n    ID (for ,ID ).ID (**ID )\n"
    },
    {
        "code": "\ndef to_excellon(self, settings=None):\n    return 'G90'\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 23998
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID =*):\n    return LIT \n"
    },
    {
        "code": "\n@classmethod\ndef from_excellon(cls, line, **kwargs):\n    return cls(line, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 23999
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,**ID ):\n    return ID (ID ,**ID )\n",
        "wrong_code": "\n@ID \ndef while ID (ID ,ID ,**ID ):\n    return ID (ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, stmt, **kwargs):\n    super(UnknownStmt, self).__init__(**kwargs)\n    self.stmt = stmt\n",
        "metadata": {
            "file": "py150_files/data/curtacircuitos/pcb-tools/gerber/excellon_statements.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 24000
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef (ID ,ID ,**ID ):\n    ID (ID ,ID ).ID (**ID )\n    ID .ID =ID \n"
    }
]