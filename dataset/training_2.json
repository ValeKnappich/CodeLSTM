[
    {
        "code": "\ndef test_to_field(self):\n    self.assertQuerysetEqual(\n        self.car.drivers.all(),\n        [\"<Driver: Ryan Briscoe>\"]\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1001
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID .ID .ID (),\n    [LIT ]\n    )\n",
        "wrong_code": "\ndef ID =ID ):\n    ID .ID (\n    ID .ID .ID .ID (),\n    [LIT ]\n    )\n"
    },
    {
        "code": "\ndef test_to_field_reverse(self):\n    self.assertQuerysetEqual(\n        self.driver.car_set.all(),\n        [\"<Car: Toyota>\"]\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1002
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    ID .ID .ID .ID (),\n    [LIT ]\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n    ID ..ID .ID (),\n    [LIT ]\n    )\n"
    },
    {
        "code": "\ndef test_to_field_clear_reverse(self):\n    self.driver.car_set.clear()\n    self.assertQuerysetEqual(\n        self.driver.car_set.all(),[])\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1003
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID .ID ()\n    ID .ID (\n    ID .ID .ID .ID (),[])\n",
        "wrong_code": "\ndef ID (ID :\n    ID .ID .ID .ID ()\n    ID .ID (\n    ID .ID .ID .ID (),[])\n"
    },
    {
        "code": "\ndef test_to_field_clear(self):\n    self.car.drivers.clear()\n    self.assertQuerysetEqual(\n        self.car.drivers.all(),[])\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1004
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID .ID ()\n    ID .ID (\n    ID .ID .ID .ID (),[])\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .==.ID ()\n    ID .ID (\n    ID .ID .ID .ID (),[])\n"
    },
    {
        "code": "\n# Low level tests for _add_items and _remove_items. We test these methods\n# because .add/.remove aren't available for m2m fields with through, but\n# through is the only way to set to_field currently. We do want to make\n# sure these methods are ready if the ability to use .add or .remove with\n# to_field relations is added some day.\ndef test_add(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 1005
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\ndef ID (ID yield ):\n    pass \n"
    },
    {
        "code": "\ndef test_add_null(self):\n    with self.assertRaises(ValueError):\n        nullcar.drivers._add_items('car', 'driver', self.unused_driver)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 1006
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID (LIT ,LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):/\n        ID .ID .ID (LIT ,LIT ,ID .ID )\n"
    },
    {
        "code": "\ndef test_add_related_null(self):\n    with self.assertRaises(ValueError):\n        self.car.drivers._add_items('car', 'driver', nulldriver)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1007
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID .ID (LIT ,LIT ,ID )\n",
        "wrong_code": "\nID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID .ID (LIT ,LIT ,ID )\n"
    },
    {
        "code": "\ndef test_add_reverse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1008
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID :(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_add_null_reverse(self):\n    with self.assertRaises(ValueError):\n        self.driver.car_set._add_items('driver', 'car', nullcar)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1009
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID .ID (LIT ,LIT ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID .ID (LIT ,and ,ID )\n"
    },
    {
        "code": "\ndef test_add_null_reverse_related(self):\n    with self.assertRaises(ValueError):\n        nulldriver.car_set._add_items('driver', 'car', self.car)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1010
        },
        "correct_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID (LIT ,LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    with ID .ID (ID ):\n        ID .ID .ID (LIT ,LIT ]ID .ID )\n"
    },
    {
        "code": "\ndef test_remove(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1011
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )not \n    pass \n"
    },
    {
        "code": "\ndef test_remove_reverse(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 1012
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef test_sequence_creation(self):\n    management.call_command(\"dumpdata\", \"m2m_through_regress\", format=\"json\", stdout=out)\n    self.assertEqual(out.getvalue().strip(), \"\"\"[{\"pk\": 1, \"model\": \"m2m_through_regress.usermembership\", \"fields\": {\"price\": 100, \"group\": 1, \"user\": 1}}, {\"pk\": 1, \"model\": \"m2m_through_regress.person\", \"fields\": {\"name\": \"Guido\"}}, {\"pk\": 1, \"model\": \"m2m_through_regress.group\", \"fields\": {\"name\": \"Python Core Group\"}}]\"\"\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/m2m_through_regress/tests.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1013
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT ,ID =LIT ,ID =ID )\n    ID .ID (ID .ID ().ID (),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID del ID (LIT ,LIT ,ID =LIT ,ID =ID )\n    ID .ID (ID .ID ().ID (),LIT )\n"
    },
    {
        "code": "def has_perm(self, perm):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 1014
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID ):\n    return LIT \n    with "
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1015
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ("
    },
    {
        "code": "\n# form/fields/fieldsets interaction ##############################\n\ndef test_default_fields(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 1016
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID ):(\n    pass \n"
    },
    {
        "code": "\ndef test_default_fieldsets(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1017
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID async ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_field_arguments(self):\n    # If we specify the fields argument, fieldsets_add and fielsets_change should\n    # just stick the fields into a formsets structure and return it.\n    class BandAdmin(ModelAdmin):\n         pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 1018
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    class ID (ID ):\n         pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    class ID (ID ):\n    LIT pass \n"
    },
    {
        "code": "\ndef get_form(self, request, obj=None, **kwargs):\n    kwargs['exclude'] = ['bio']\n    return super(BandAdmin, self).get_form(request, obj, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 81,
            "fix_type": "delete",
            "id": 1019
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    ID [LIT ]=[LIT ]\n    return ID (ID ,ID ).ID (ID ,ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    ID [LIT ]=[LIT ]\n    return ID (ID ,ID ).ID return (ID ,ID ,**ID )\n"
    },
    {
        "code": "\ndef get_formset(self, request, obj=None, **kwargs):\n    kwargs['exclude'] = ['opening_band']\n    return super(ConcertInline, self).get_formset(request, obj, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1020
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    ID [LIT ]=[LIT ]\n    return ID (ID ,ID ).ID (ID ,ID ,**ID )\n",
        "wrong_code": "\nfinally def ID (ID ,ID ,ID =ID ,**ID ):\n    ID [LIT ]=[LIT ]\n    return ID (ID ,ID ).ID (ID ,ID ,**ID )\n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1021
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass finally "
    },
    {
        "code": "\ndef get_formset(self, request, obj=None, **kwargs):\n    if obj:\n        pass\n    return super(ConcertInline, self).get_formset(request, obj, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 81,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1022
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    if ID :\n        pass \n    return ID (ID ,ID ).ID (ID ,ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,**ID ):\n    if ID :\n        pass \n    return ID (ID ,ID .ID (ID ,ID ,**ID )\n"
    },
    {
        "code": "\n# radio_fields behavior ###########################################\n\ndef test_default_foreign_key_widget(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1023
        },
        "correct_code": "\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n#COMMENT\n\n\ndef ID (ID +):\n    pass \n"
    },
    {
        "code": "def test_validation_only_runs_in_debug(self):\n    # Ensure validation only runs when DEBUG = True\n    try:\n\n        class ValidationTestModelAdmin(ModelAdmin):\n            pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1024
        },
        "correct_code": "def ID (ID ):\n#COMMENT\n\n    try :\n\n        class ID (ID ):\n            pass \n    finally :\n        pass \n",
        "wrong_code": "def ID (ID ):\n#COMMENT\n\n    try :\n\n        class ID ID ):\n            pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef test_form_validation(self):\n\n    class FakeForm(object):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1025
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n        global class ID (ID ):\n        pass \n    "
    },
    {
        "code": "\ndef a_callable(obj):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1026
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID elif (ID ):\n    pass \n"
    },
    {
        "code": "def a_method(self, obj):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1027
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    pass \n    def "
    },
    {
        "code": "\ndef a_callable(obj):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1028
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID raise ID ):\n    pass \n"
    },
    {
        "code": "def a_method(self, obj):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1029
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,raise ):\n    pass \n"
    },
    {
        "code": "def get_title(self):\n    return 'awesomeness'\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 1030
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    return LIT \n    while "
    },
    {
        "code": "def get_choices(self, request):\n    return (('bit', 'A bit awesome'), ('very', 'Very awesome'), )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 1031
        },
        "correct_code": "def ID (ID ,ID ):\n    return ((LIT ,LIT ),(LIT ,LIT ),)\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ((LIT ,LIT ),(global LIT ,LIT ),)\n"
    },
    {
        "code": "def get_query_set(self, cl, qs):\n    return qs\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 1032
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n(    return ID \n"
    },
    {
        "code": "\ndef test_list_per_page_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1033
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID yield (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_max_show_all_allowed_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1034
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef not (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_search_fields_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        search_fields = 10\n\n    self.assertRaisesRegexp(\n        ImproperlyConfigured,\n        \"'ValidationTestModelAdmin.search_fields' must be a list or tuple.\",\n        validate,\n        ValidationTestModelAdmin,\n        ValidationTestModel,\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 93,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1035
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        ID =LIT \n\n    ID .ID (\n    ID ,\n    LIT ,\n    ID ,\n    ID ,\n    ID ,\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        ID =LIT \n\n    ID .ID (\n    ID ,\n    LIT ,\n    ID \n    ID ,\n    ID ,\n    )\n"
    },
    {
        "code": "\ndef test_date_hierarchy_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1036
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID is :\n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_list_select_related_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 1037
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class ID (ID ):def \n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_save_as_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1038
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "ID def ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\ndef test_save_on_top_validation(self):\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n\n    class ValidationTestModelAdmin(ModelAdmin):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/modeladmin/tests.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1039
        },
        "correct_code": "\ndef ID (ID ):\n\n    class ID (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    class (ID ):\n        pass \n\n    class ID (ID ):\n        pass \n"
    },
    {
        "code": "\n@register.filter\n@stringfilter\ndef trim(value, num):\n    return value[:num]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1040
        },
        "correct_code": "\n@ID .ID \n@ID \ndef ID (ID ,ID ):\n    return ID [:ID ]\n",
        "wrong_code": ",\n@ID .ID \n@ID \ndef ID (ID ,ID ):\n    return ID [:ID ]\n"
    },
    {
        "code": "\n@register.simple_tag\ndef no_params():\n    \"\"\"Expected no_params __doc__\"\"\"\n    return \"no_params - Expected result\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1041
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    LIT \n    return LIT \n",
        "wrong_code": "\n@ID .ID \ndef ID yield ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\n@register.simple_tag\ndef one_param(arg):\n    \"\"\"Expected one_param __doc__\"\"\"\n    return \"one_param - Expected result: %s\" % arg\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1042
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ):\n    LIT \n    return LIT %ID \n",
        "wrong_code": "\n@import .ID \ndef ID (ID ):\n    LIT \n    return LIT %ID \n"
    },
    {
        "code": "\n@register.simple_tag(takes_context=False)\ndef explicit_no_context(arg):\n    \"\"\"Expected explicit_no_context __doc__\"\"\"\n    return \"explicit_no_context - Expected result: %s\" % arg\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1043
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID \n",
        "wrong_code": "\n@ID ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID \n"
    },
    {
        "code": "\n@register.simple_tag(takes_context=True)\ndef no_params_with_context(context):\n    \"\"\"Expected no_params_with_context __doc__\"\"\"\n    return \"no_params_with_context - Expected result (context value: %s)\" % context['value']\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1044
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID [LIT ]\n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID [LIT ]in "
    },
    {
        "code": "\n@register.simple_tag(takes_context=True)\ndef params_and_context(context, arg):\n    \"\"\"Expected params_and_context __doc__\"\"\"\n    return \"params_and_context - Expected result (context value: %s): %s\" % (context['value'], arg)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 72,
            "fix_type": "delete",
            "id": 1045
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID [LIT ],ID )\n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID [LIT import ],ID )\n"
    },
    {
        "code": "\n@register.simple_tag\ndef simple_two_params(one, two):\n    \"\"\"Expected simple_two_params __doc__\"\"\"\n    return \"simple_two_params - Expected result: %s, %s\" % (one, two)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 1046
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID ,ID )\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):import \n    LIT \n    return LIT %(ID ,ID )\n"
    },
    {
        "code": "\n@register.simple_tag\ndef simple_one_default(one, two='hi'):\n    \"\"\"Expected simple_one_default __doc__\"\"\"\n    return \"simple_one_default - Expected result: %s, %s\" % (one, two)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1047
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ):\n    LIT \n    return LIT %(ID ,ID )\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ):\n    LIT \n    return LIT %(ID ,await )\n"
    },
    {
        "code": "\n@register.simple_tag\ndef simple_unlimited_args(one, two='hi', *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1048
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID \ndef global (ID ,ID =LIT ,*ID ):\n    pass \n"
    },
    {
        "code": "\n@register.simple_tag\ndef simple_only_unlimited_args(*args):\n    \"\"\"Expected simple_only_unlimited_args __doc__\"\"\"\n    return \"simple_only_unlimited_args - Expected result: %s\" % ', '.join([unicode(arg) for arg in args])\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 1049
        },
        "correct_code": "\n@ID .ID \ndef ID (*ID ):\n    LIT \n    return LIT %LIT .ID ([ID (ID )for ID in ID ])\n",
        "wrong_code": "\n@ID .ID \ndef ID (elif *ID ):\n    LIT \n    return LIT %LIT .ID ([ID (ID )for ID in ID ])\n"
    },
    {
        "code": "\n@register.simple_tag\ndef simple_unlimited_args_kwargs(one, two='hi', *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1050
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID **ID ):\n    pass \n"
    },
    {
        "code": "\n@register.simple_tag(takes_context=True)\ndef simple_tag_without_context_parameter(arg):\n    \"\"\"Expected simple_tag_without_context_parameter __doc__\"\"\"\n    return \"Expected result\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1051
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\n@ID .ID (ID =LIT )\nglobal ID (ID ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\n@register.simple_tag(takes_context=True)\ndef current_app(context):\n    return \"%s\" % context.current_app\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1052
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    return return %ID .ID \n"
    },
    {
        "code": "\n@register.simple_tag(takes_context=True)\ndef use_l10n(context):\n    return \"%s\" % context.use_l10n\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1053
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    return LIT %ID .ID \n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID )finally \n    return LIT %ID .ID \n"
    },
    {
        "code": "\n@register.simple_tag(name='minustwo')\ndef minustwo_overridden_name(value):\n    return value - 2\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1054
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    return ID -LIT \n",
        "wrong_code": "\n@ID \n.ID (ID =LIT )\ndef ID (ID ):\n    return ID -LIT \n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_no_params():\n    \"\"\"Expected inclusion_no_params __doc__\"\"\"\n    return {\"result\" : \"inclusion_no_params - Expected result\"}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 1055
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID ():\n    LIT \n    return {LIT :LIT }\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID ():\n    LIT \n    return {LIT :LIT !}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_no_params_from_template():\n    \"\"\"Expected inclusion_no_params_from_template __doc__\"\"\"\n    return {\"result\" : \"inclusion_no_params_from_template - Expected result\"}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1056
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID ():\n    LIT \n    return {LIT :LIT }\n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID ()continue :\n    LIT \n    return {LIT :LIT }\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_one_param(arg):\n    \"\"\"Expected inclusion_one_param __doc__\"\"\"\n    return {\"result\" : \"inclusion_one_param - Expected result: %s\" % arg}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 56,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1057
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID }\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :%ID }\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_one_param_from_template(arg):\n    \"\"\"Expected inclusion_one_param_from_template __doc__\"\"\"\n    return {\"result\" : \"inclusion_one_param_from_template - Expected result: %s\" % arg}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1058
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID }\n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ):\n    LIT \n    return {LIT :%ID }\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html', takes_context=False)\ndef inclusion_explicit_no_context(arg):\n    \"\"\"Expected inclusion_explicit_no_context __doc__\"\"\"\n    return {\"result\" : \"inclusion_explicit_no_context - Expected result: %s\" % arg}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 64,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1059
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID }\n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {LIT LIT %ID }\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'), takes_context=False)\ndef inclusion_explicit_no_context_from_template(arg):\n    \"\"\"Expected inclusion_explicit_no_context_from_template __doc__\"\"\"\n    return {\"result\" : \"inclusion_explicit_no_context_from_template - Expected result: %s\" % arg}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 1060
        },
        "correct_code": "\n@ID .ID (ID (LIT ),ID =LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID }\n",
        "wrong_code": "\n@ID .ID (ID (LIT ),ID =LIT )def ID (ID ):\n    LIT \n    return {LIT :LIT %ID }\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html', takes_context=True)\ndef inclusion_no_params_with_context(context):\n    \"\"\"Expected inclusion_no_params_with_context __doc__\"\"\"\n    return {\"result\" : \"inclusion_no_params_with_context - Expected result (context value: %s)\" % context['value']}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 1061
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID [LIT ]}\n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    if {LIT :LIT %ID [LIT ]}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'), takes_context=True)\ndef inclusion_no_params_with_context_from_template(context):\n    \"\"\"Expected inclusion_no_params_with_context_from_template __doc__\"\"\"\n    return {\"result\" : \"inclusion_no_params_with_context_from_template - Expected result (context value: %s)\" % context['value']}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 1062
        },
        "correct_code": "\n@ID .ID (ID (LIT ),ID =LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID [LIT ]}\n",
        "wrong_code": "\n@ID .ID (ID (LIT ),ID while LIT )\ndef ID (ID ):\n    LIT \n    return {LIT :LIT %ID [LIT ]}\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html', takes_context=True)\ndef inclusion_params_and_context(context, arg):\n    \"\"\"Expected inclusion_params_and_context __doc__\"\"\"\n    return {\"result\" : \"inclusion_params_and_context - Expected result (context value: %s): %s\" % (context['value'], arg)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1063
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID [LIT ],ID )}\n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :(%(ID [LIT ],ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'), takes_context=True)\ndef inclusion_params_and_context_from_template(context, arg):\n    \"\"\"Expected inclusion_params_and_context_from_template __doc__\"\"\"\n    return {\"result\" : \"inclusion_params_and_context_from_template - Expected result (context value: %s): %s\" % (context['value'], arg)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1064
        },
        "correct_code": "\n@ID .ID (ID (LIT ),ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID [LIT ],ID )}\n",
        "wrong_code": "\n@is .ID (ID (LIT ),ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID [LIT ],ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_two_params(one, two):\n    \"\"\"Expected inclusion_two_params __doc__\"\"\"\n    return {\"result\": \"inclusion_two_params - Expected result: %s, %s\" % (one, two)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1065
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n",
        "wrong_code": "\n@ID .ID (LIT \ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_two_params_from_template(one, two):\n    \"\"\"Expected inclusion_two_params_from_template __doc__\"\"\"\n    return {\"result\": \"inclusion_two_params_from_template - Expected result: %s, %s\" % (one, two)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 1066
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ,ID ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ,ID del ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_one_default(one, two='hi'):\n    \"\"\"Expected inclusion_one_default __doc__\"\"\"\n    return {\"result\": \"inclusion_one_default - Expected result: %s, %s\" % (one, two)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1067
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID =LIT ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID =):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_one_default_from_template(one, two='hi'):\n    \"\"\"Expected inclusion_one_default_from_template __doc__\"\"\"\n    return {\"result\": \"inclusion_one_default_from_template - Expected result: %s, %s\" % (one, two)}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1068
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ,ID =LIT ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID (def ,ID =LIT ):\n    LIT \n    return {LIT :LIT %(ID ,ID )}\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_unlimited_args(one, two='hi', *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "*",
            "id": 1069
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID =LIT ,*ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID =LIT ,ID ):\n    pass \n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_unlimited_args_from_template(one, two='hi', *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 1070
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ,ID =LIT ,*ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID (ID ,ID =LIT ,*ID )]:\n    pass \n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_only_unlimited_args(*args):\n    \"\"\"Expected inclusion_only_unlimited_args __doc__\"\"\"\n    return {\"result\": \"inclusion_only_unlimited_args - Expected result: %s\" % (', '.join([unicode(arg) for arg in args]))}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 96,
            "fix_type": "delete",
            "id": 1071
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (*ID ):\n    LIT \n    return {LIT :LIT %(LIT .ID ([ID (ID )for ID in ID ]))}\n",
        "wrong_code": "\n@ID .ID (LIT )\ndef ID (*ID ):\n    LIT \n    return {LIT :LIT %(LIT .ID ([ID (ID )for ID in ID ])break )}\n"
    },
    {
        "code": "\n@register.inclusion_tag(get_template('inclusion.html'))\ndef inclusion_only_unlimited_args_from_template(*args):\n    return {\"result\": \"inclusion_only_unlimited_args_from_template - Expected result: %s\" % (', '.join([unicode(arg) for arg in args]))}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1072
        },
        "correct_code": "\n@ID .ID (ID (LIT ))\ndef ID (*ID ):\n    return {LIT :LIT %(LIT .ID ([ID (ID )for ID in ID ]))}\n",
        "wrong_code": "\n@ID .ID (ID (LIT ))\ndef ID *ID ):\n    return {LIT :LIT %(LIT .ID ([ID (ID )for ID in ID ]))}\n"
    },
    {
        "code": "\n@register.inclusion_tag('test_incl_tag_current_app.html', takes_context=True)\ndef inclusion_tag_current_app(context):\n    \"\"\"Expected inclusion_tag_current_app __doc__\"\"\"\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1073
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {}\n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef return ID (ID ):\n    LIT \n    return {}\n"
    },
    {
        "code": "\n@register.inclusion_tag('test_incl_tag_use_l10n.html', takes_context=True)\ndef inclusion_tag_use_l10n(context):\n    \"\"\"Expected inclusion_tag_use_l10n __doc__\"\"\"\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 19,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1074
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {}\n",
        "wrong_code": "\n@ID .ID (LIT ,ID =)\ndef ID (ID ):\n    LIT \n    return {}\n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html')\ndef inclusion_unlimited_args_kwargs(one, two='hi', *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1075
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID =LIT ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef (ID ,ID =LIT ,*ID ,**ID ):\n    pass \n"
    },
    {
        "code": "\n@register.inclusion_tag('inclusion.html', takes_context=True)\ndef inclusion_tag_without_context_parameter(arg):\n    \"\"\"Expected inclusion_tag_without_context_parameter __doc__\"\"\"\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1076
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {}\n",
        "wrong_code": "*\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    LIT \n    return {}\n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_no_params():\n    \"\"\"Expected assignment_no_params __doc__\"\"\"\n    return \"assignment_no_params - Expected result\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1077
        },
        "correct_code": "\n@ID .ID \ndef ID ():\n    LIT \n    return LIT \n",
        "wrong_code": "\nlambda @ID .ID \ndef ID ():\n    LIT \n    return LIT \n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_one_param(arg):\n    \"\"\"Expected assignment_one_param __doc__\"\"\"\n    return \"assignment_one_param - Expected result: %s\" % arg\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1078
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ):\n    LIT \n    return LIT %ID \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID )del \n    LIT \n    return LIT %ID \n"
    },
    {
        "code": "\n@register.assignment_tag(takes_context=False)\ndef assignment_explicit_no_context(arg):\n    \"\"\"Expected assignment_explicit_no_context __doc__\"\"\"\n    return \"assignment_explicit_no_context - Expected result: %s\" % arg\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1079
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID \n",
        "wrong_code": "\n@ID .finally (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID \n"
    },
    {
        "code": "\n@register.assignment_tag(takes_context=True)\ndef assignment_no_params_with_context(context):\n    \"\"\"Expected assignment_no_params_with_context __doc__\"\"\"\n    return \"assignment_no_params_with_context - Expected result (context value: %s)\" % context['value']\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1080
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT %ID [LIT ]\n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return for %ID [LIT ]\n"
    },
    {
        "code": "\n@register.assignment_tag(takes_context=True)\ndef assignment_params_and_context(context, arg):\n    \"\"\"Expected assignment_params_and_context __doc__\"\"\"\n    return \"assignment_params_and_context - Expected result (context value: %s): %s\" % (context['value'], arg)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 78,
            "fix_type": "delete",
            "id": 1081
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID [LIT ],ID )\n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID [LIT ],ID )global \n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_two_params(one, two):\n    \"\"\"Expected assignment_two_params __doc__\"\"\"\n    return \"assignment_two_params - Expected result: %s, %s\" % (one, two)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 1082
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return LIT %(ID ,ID )\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\nelif     LIT \n    return LIT %(ID ,ID )\n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_one_default(one, two='hi'):\n    \"\"\"Expected assignment_one_default __doc__\"\"\"\n    return \"assignment_one_default - Expected result: %s, %s\" % (one, two)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1083
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ):\n    LIT \n    return LIT %(ID ,ID )\n",
        "wrong_code": "\n@ID .ID \ntry ID (ID ,ID =LIT ):\n    LIT \n    return LIT %(ID ,ID )\n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_unlimited_args(one, two='hi', *args):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1084
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID ):\n    pass \n",
        "wrong_code": "\n@ID .lambda \ndef ID (ID ,ID =LIT ,*ID ):\n    pass \n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_only_unlimited_args(*args):\n    \"\"\"Expected assignment_only_unlimited_args __doc__\"\"\"\n    return \"assignment_only_unlimited_args - Expected result: %s\" % ', '.join([unicode(arg) for arg in args])\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1085
        },
        "correct_code": "\n@ID .ID \ndef ID (*ID ):\n    LIT \n    return LIT %LIT .ID ([ID (ID )for ID in ID ])\n",
        "wrong_code": "\n@ID .ID \ndef ID (*ID ):\n    LIT \n    return LIT %.ID ([ID (ID )for ID in ID ])\n"
    },
    {
        "code": "\n@register.assignment_tag\ndef assignment_unlimited_args_kwargs(one, two='hi', *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 1086
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID =LIT ,*ID ,raise **ID ):\n    pass \n"
    },
    {
        "code": "\n@register.assignment_tag(takes_context=True)\ndef assignment_tag_without_context_parameter(arg):\n    \"\"\"Expected assignment_tag_without_context_parameter __doc__\"\"\"\n    return \"Expected result\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.4/tests/regressiontests/templates/templatetags/custom.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1087
        },
        "correct_code": "\n@ID .ID (ID =LIT )\ndef ID (ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\n@ID .ID (ID =LIT )\ndef ID (raise ):\n    LIT \n    return LIT \n"
    },
    {
        "code": "\ndef __init__(self, request, params, model, model_admin):\n    if self.title is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1088
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    if ID .ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ID ,ID ):\n    if ID .ID is ID :\n        pass \n"
    },
    {
        "code": "\ndef has_output(self):\n    \"\"\"\n        Returns True if some choices would be output for this filter.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1089
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ):is     LIT \n    raise ID \n"
    },
    {
        "code": "\ndef choices(self, cl):\n    \"\"\"\n        Returns choices ready to be output in the template.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1090
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID in ID ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef queryset(self, request, queryset):\n    \"\"\"\n        Returns the filtered queryset.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1091
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ID ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    \"\"\"\n        Returns the list of parameter names that are expected from the\n        request's query string and that will be used by this filter.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1092
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "as \ndef ID (ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef has_output(self):\n    return len(self.lookup_choices) > 0\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1093
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )>LIT \n",
        "wrong_code": "\ndef ID (ID ):import     return ID (ID .ID )>LIT \n"
    },
    {
        "code": "\ndef value(self):\n    \"\"\"\n        Returns the value (in string format) provided in the request's\n        query string for this filter, if any. If the value wasn't provided then\n        returns None.\n        \"\"\"\n    return self.used_parameters.get(self.parameter_name, None)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1094
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT yield \n    return ID .ID .ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef lookups(self, request, model_admin):\n    \"\"\"\n        Must be overriden to return a list of tuples (value, verbose value)\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1095
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID not ,ID ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.parameter_name]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1096
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ]\n",
        "wrong_code": "\ndef await (ID ):\n    return [ID .ID ]\n"
    },
    {
        "code": "\ndef choices(self, cl):\n    for lookup, title in self.lookup_choices:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1097
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):is     for ID ,ID in ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, field, request, params, model, model_admin, field_path):\n    for p in self.expected_parameters():\n        if p in params:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1098
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    for ID in ID .ID ():\n        if ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,del ID ,ID ):\n    for ID in ID .ID ():\n        if ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef has_output(self):\n    return True\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1099
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ID :\n    return LIT \n"
    },
    {
        "code": "\ndef queryset(self, request, queryset):\n    try:\n        return queryset.filter(**self.used_parameters)\n    except ValidationError as e:\n        raise IncorrectLookupParameters(e)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 1100
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        return ID .ID (**ID .ID )\n    except ID as ID :\n        raise ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        return ID .ID (**ID ..ID )\n    except ID as ID :\n        raise ID (ID )\n"
    },
    {
        "code": "\n@classmethod\ndef register(cls, test, list_filter_class, take_priority=False):\n    if take_priority:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1101
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID =LIT ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ,ID ,ID =LIT ):\n    if ID and \n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1102
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID ]\n",
        "wrong_code": "\ndef (ID ):\n    return [ID .ID ,ID .ID ]\n"
    },
    {
        "code": "def __init__(self, field, request, params, model, model_admin, field_path):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1103
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,==,ID ,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.lookup_kwarg, self.lookup_kwarg2]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 1104
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return [ID .return ID ,ID .ID ]\n"
    },
    {
        "code": "def __init__(self, field, request, params, model, model_admin, field_path):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1105
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,,ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.lookup_kwarg]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "[",
            "id": 1106
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return pass ID .ID ]\n"
    },
    {
        "code": "\ndef choices(self, cl):\n    for lookup, title in self.field.flatchoices:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1107
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in .ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.lookup_kwarg_since, self.lookup_kwarg_until]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 1108
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID ]\n="
    },
    {
        "code": "\ndef choices(self, cl):\n    for title, param_dict in self.links:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "for",
            "id": 1109
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ,ID in ID .ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, field, request, params, model, model_admin, field_path):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 1110
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID and ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef expected_parameters(self):\n    return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 1111
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return [ID .ID ,ID .ID try \n"
    },
    {
        "code": "\ndef choices(self, cl):\n    for val in self.lookup_choices:\n        if val is None:\n            pass\n    if include_none:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/admin/filters.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1112
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID .ID :\n        if ID is ID :\n            pass \n    if ID :\n        pass \n",
        "wrong_code": "\nLIT def ID (ID ,ID ):\n    for ID in ID .ID :\n        if ID is ID :\n            pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\n\ndef _get_permission_codename(action, opts):\n    return '%s_%s' % (action, opts.object_name.lower())\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/auth/management/__init__.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 1113
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    return LIT %(ID ,ID .ID .ID ())\n",
        "wrong_code": "\n\ndef ID (ID ,ID )import :\n    return LIT %(ID ,ID .ID .ID ())\n"
    },
    {
        "code": "\n\ndef _get_all_permissions(opts, ctype):\n    \"\"\"\n    Returns (codename, name) for all permissions in the given opts.\n    \"\"\"\n    builtin = _get_builtin_permissions(opts)\n    custom = list(opts.permissions)\n    _check_permission_clashing(custom, builtin, ctype)\n    return builtin + custom\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/auth/management/__init__.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 1114
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    ID =ID (ID .ID )\n    ID (ID ,ID ,ID )\n    return ID +ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    ID =ID (ID .ID )\n    ID (ID ,ID ,ID )\n    not return ID +ID \n"
    },
    {
        "code": "\ndef _get_builtin_permissions(opts):\n    for action in ('add', 'change', 'delete'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/auth/management/__init__.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1115
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in (LIT ,LIT ,LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (==):\n    for ID in (LIT ,LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\ndef _check_permission_clashing(custom, builtin, ctype):\n    for codename, _name in custom:\n        if codename in pool:\n            pass\n        elif codename in builtin_codenames:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/auth/management/__init__.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 1116
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID ,ID in ID :\n        if ID in ID :\n            pass \n        elif ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    for ID ,ID in ID :\n        if ID in is ID :\n            pass \n        elif ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef __call__(self, request, *args, **kwargs):\n    self.site = get_current_site(request)\n    return super(LatestCommentFeed, self).__call__(request, *args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1117
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ,**ID ):\n    ID .ID =ID (ID )\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n",
        "wrong_code": "\ndef ID (=,ID ,*ID ,**ID ):\n    ID .ID =ID (ID )\n    return ID (ID ,ID ).ID (ID ,*ID ,**ID )\n"
    },
    {
        "code": "\ndef title(self):\n    return _(\"%(site_name)s comments\") % dict(site_name=self.site.name)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1118
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT )%ID (ID =ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT )%(ID =ID .ID .ID )\n"
    },
    {
        "code": "\ndef link(self):\n    return \"http://%s/\" % (self.site.domain)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1119
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %await ID .ID .ID )\n"
    },
    {
        "code": "\ndef description(self):\n    return _(\"Latest comments on %(site_name)s\") % dict(site_name=self.site.name)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1120
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (LIT )%ID (ID =ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (LIT )%ID (ID =ID .ID .ID \n"
    },
    {
        "code": "\ndef items(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 1121
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n"
    },
    {
        "code": "\ndef item_pubdate(self, item):\n    return item.submit_date\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/comments/feeds.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1122
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID else ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef test_view_flatpage(self):\n    \"A flatpage can be served through a view\"\n    response = self.client.get('/flatpage_root/flatpage/')\n    self.assertEqual(response.status_code, 200)\n    self.assertContains(response, \"<p>Isn't it flat!</p>\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 1123
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n    ID .ID elif (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_view_non_existent_flatpage(self):\n    \"A non-existent flatpage raises 404 when served through a view\"\n    response = self.client.get('/flatpage_root/no_such_flatpage/')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1124
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (not )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_view_authenticated_flatpage(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1125
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID as :\n    pass \n"
    },
    {
        "code": "\ndef test_fallback_flatpage(self):\n    \"A fallback flatpage won't be served if the middleware is disabled\"\n    response = self.client.get('/flatpage/')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1126
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):yield     LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_fallback_non_existent_flatpage(self):\n    \"A non-existent flatpage won't be served if the fallback middlware is disabled\"\n    response = self.client.get('/no_such_flatpage/')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1127
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID from LIT )\n"
    },
    {
        "code": "\ndef test_view_flatpage_special_chars(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1128
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef del (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_redirect_view_flatpage(self):\n    \"A flatpage can be served through a view and should add a slash\"\n    response = self.client.get('/flatpage_root/flatpage')\n    self.assertRedirects(response, '/flatpage_root/flatpage/', status_code=301)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 1129
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .as ID (ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef test_redirect_view_non_existent_flatpage(self):\n    \"A non-existent flatpage raises 404 when served through a view and should not add a slash\"\n    response = self.client.get('/flatpage_root/no_such_flatpage')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 40,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1130
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .[(LIT )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_redirect_fallback_flatpage(self):\n    \"A fallback flatpage won't be served if the middleware is disabled and should not add a slash\"\n    response = self.client.get('/flatpage')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 49,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1131
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )return ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_redirect_fallback_non_existent_flatpage(self):\n    \"A non-existent flatpage won't be served if the fallback middlware is disabled and should not add a slash\"\n    response = self.client.get('/no_such_flatpage')\n    self.assertEqual(response.status_code, 404)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1132
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\nasync ID (ID ):\n    LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef test_redirect_view_flatpage_special_chars(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/flatpages/tests/views.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1133
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (is ID ):\n    pass \n"
    },
    {
        "code": "\n### Generation routines specific to this module ###\ndef env_func(f, argtypes):\n    \"For getting OGREnvelopes.\"\n    f.argtypes = argtypes\n    f.restype = None\n    f.errcheck = check_envelope\n    return f\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/gdal/prototypes/geom.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1134
        },
        "correct_code": "\n#COMMENT\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    return ID \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (ID ,ID :\n    LIT \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    return ID \n"
    },
    {
        "code": "\ndef pnt_func(f):\n    \"For accessing point information.\"\n    return double_output(f, [c_void_p, c_int])\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/gdal/prototypes/geom.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1135
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID ,[ID ,ID ])\n",
        "wrong_code": "\nID (ID ):\n    LIT \n    return ID (ID ,[ID ,ID ])\n"
    },
    {
        "code": "\ndef topology_func(f):\n    f.argtypes = [c_void_p, c_void_p]\n    f.restype = c_int\n    f.errchck = check_bool\n    return f\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/gdal/prototypes/geom.py",
            "fix_location": 80,
            "fix_type": "delete",
            "id": 1136
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =[ID ,ID ]\n    ID .ID =ID \n    ID .ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =[ID ,ID ]\n    ID .ID =ID \n    ID .ID =ID \n    return =ID \n"
    },
    {
        "code": "\ndef test01_wktreader(self):\n\n    for geom in (g1, g2):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/geos/tests/test_io.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 1137
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    for ID in (ID =,ID ):\n        pass \n"
    },
    {
        "code": "\ndef test02_wktwriter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/geos/tests/test_io.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1138
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID from ID ):\n    pass \n"
    },
    {
        "code": "\ndef test03_wkbreader(self):\n    for geom in (g1, g2):\n        pass\n    for bad_wkb in bad_input:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/geos/tests/test_io.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 1139
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in (ID ,ID ):\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in (ID ,ID ):\n        pass assert \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef suite():\n    s = unittest.TestSuite()\n    s.addTest(unittest.makeSuite(GEOSIOTest))\n    return s\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/geos/tests/test_io.py",
            "fix_location": 60,
            "fix_type": "modify",
            "fix_token": "return",
            "id": 1140
        },
        "correct_code": "\ndef ID ():\n    ID =ID .ID ()\n    ID .ID (ID .ID (ID ))\n    return ID \n",
        "wrong_code": "\ndef ID ():\n    ID =ID .ID ()\n    ID .ID (ID .ID (ID ))\n    )ID \n"
    },
    {
        "code": "\ndef run(verbosity=2):\n    unittest.TextTestRunner(verbosity=verbosity).run(suite())\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/geos/tests/test_io.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1141
        },
        "correct_code": "\ndef ID (ID =LIT ):\n    ID .ID (ID =ID ).ID (ID ())\n",
        "wrong_code": "\ndef return ID (ID =LIT ):\n    ID .ID (ID =ID ).ID (ID ())\n"
    },
    {
        "code": "\n# function that will pass a test.\ndef pass_test(*args): return\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 1142
        },
        "correct_code": "\n#COMMENT\n\ndef ID (*ID ):return \n",
        "wrong_code": "\n#COMMENT\n\ndef ID (await *ID ):return \n"
    },
    {
        "code": "\ndef no_backend(test_func, backend):\n    if settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[-1] == backend:\n        return pass_test\n    else:\n        return test_func\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 61,
            "fix_type": "insert",
            "fix_token": "==",
            "id": 1143
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID [ID ][LIT ].ID (LIT )[-LIT ]==ID :\n        return ID \n    else :\n        return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID [ID ][LIT ].ID (LIT )[-LIT ]ID :\n        return ID \n    else :\n        return ID \n"
    },
    {
        "code": "\n# Decorators to disable entire test functions for specific\n# spatial backends.\ndef no_oracle(func): return no_backend(func, 'oracle')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1144
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (ID ):return ID (ID ,LIT )\n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\ndef ID (]ID ):return ID (ID ,LIT )\n"
    },
    {
        "code": "def no_postgis(func): return no_backend(func, 'postgis')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 1145
        },
        "correct_code": "def ID (ID ):return ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID import ):return ID (ID ,LIT )\n"
    },
    {
        "code": "def no_mysql(func): return no_backend(func, 'mysql')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 1146
        },
        "correct_code": "def ID (ID ):return ID (ID ,LIT )\n",
        "wrong_code": "def ID (ID ):return ID (ID ,LIT )for \n"
    },
    {
        "code": "def no_spatialite(func): return no_backend(func, 'spatialite')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/gis/tests/utils.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1147
        },
        "correct_code": "def ID (ID ):return ID (ID ,LIT )\n",
        "wrong_code": "ID (ID ):return ID (ID ,LIT )\n"
    },
    {
        "code": "\n\ndef set_session_data(storage, messages):\n    \"\"\"\n    Sets the messages into the backend request's session and remove the\n    backend's loaded data cache.\n    \"\"\"\n    storage.request.session[storage.session_key] = messages\n    if hasattr(storage, '_loaded_data'):\n        del storage._loaded_data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1148
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID [ID .ID ]=ID \n    if ID (ID ,LIT ):\n        del ID .ID \n",
        "wrong_code": "\n\nasync ID (ID ,ID ):\n    LIT \n    ID .ID .ID [ID .ID ]=ID \n    if ID (ID ,LIT ):\n        del ID .ID \n"
    },
    {
        "code": "\n\ndef stored_session_messages_count(storage):\n    data = storage.request.session.get(storage.session_key, [])\n    return len(data)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 49,
            "fix_type": "delete",
            "id": 1149
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID .ID ,[])\n    return ID (ID )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID .ID ,[try ])\n    return ID (ID )\n"
    },
    {
        "code": "\ndef get_request(self):\n    self.session = {}\n    request = super(SessionTest, self).get_request()\n    request.session = self.session\n    return request\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 54,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1150
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n    ID =ID (ID ,ID ).ID ()\n    ID .ID =ID .ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ={}\n    ID =ID (ID ,ID ).ID )\n    ID .ID =ID .ID \n    return ID \n"
    },
    {
        "code": "\ndef stored_messages_count(self, storage, response):\n    return stored_session_messages_count(storage)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1151
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    return ID (ID )\n",
        "wrong_code": "\ndef ID is (ID ,ID ,ID ):\n    return ID (ID )\n"
    },
    {
        "code": "\ndef test_get(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1152
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef and (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_safedata(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/messages/tests/session.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1153
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_handler(self, *args, **options):\n    if use_static_handler and (settings.DEBUG or insecure_serving):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/contrib/staticfiles/management/commands/runserver.py",
            "fix_location": 14,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1154
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID and (ID .ID or ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,*,**ID ):\n    if ID and (ID .ID or ID ):\n        pass \n"
    },
    {
        "code": "\ndef start_serialization(self):\n    \"\"\"\n        Called when serializing of the queryset starts.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1155
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT :\n    raise ID \n"
    },
    {
        "code": "\ndef end_serialization(self):\n    \"\"\"\n        Called when serializing of the queryset ends.\n        \"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1156
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    pass \n",
        "wrong_code": "\nelif def ID (ID ):\n    LIT \n    pass \n"
    },
    {
        "code": "\ndef start_object(self, obj):\n    \"\"\"\n        Called when serializing of an object starts.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1157
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID return ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef end_object(self, obj):\n    \"\"\"\n        Called when serializing of an object ends.\n        \"\"\"\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 37,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1158
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    pass ]"
    },
    {
        "code": "\ndef handle_field(self, obj, field):\n    \"\"\"\n        Called to handle each individual (non-relational) field on an object.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 1159
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    def LIT \n    raise ID \n"
    },
    {
        "code": "\ndef handle_fk_field(self, obj, field):\n    \"\"\"\n        Called to handle a ForeignKey field.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1160
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (,ID ,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef handle_m2m_field(self, obj, field):\n    \"\"\"\n        Called to handle a ManyToManyField.\n        \"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1161
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ,,ID ):\n    LIT \n    raise ID \n"
    },
    {
        "code": "\ndef getvalue(self):\n    \"\"\"\n        Return the fully serialized queryset (or None if the output stream is\n        not seekable).\n        \"\"\"\n    if callable(getattr(self.stream, 'getvalue', None)):\n        return self.stream.getvalue()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1162
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID (ID (ID .ID ,LIT ,ID )):\n        return ID .ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    if ID (ID (ID .ID ,LIT ID )):\n        return ID .ID .ID ()\n"
    },
    {
        "code": "\ndef __init__(self, stream_or_string, **options):\n    if isinstance(stream_or_string, six.string_types):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 39,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1163
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    if ID (ID ,ID .ID ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    if ID (ID ID .ID ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __iter__(self):\n    return self\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1164
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID while ):\n    return ID \n"
    },
    {
        "code": "\ndef __next__(self):\n    \"\"\"Iteration iterface -- return the next item in the stream\"\"\"\n    raise NotImplementedError\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 1165
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    raise ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    raise assert ID \n"
    },
    {
        "code": "\ndef __init__(self, obj, m2m_data=None):\n    self.object = obj\n    self.m2m_data = m2m_data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 1166
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID as \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<DeserializedObject: %s.%s(pk=%s)>\" % (\n        self.object._meta.app_label, self.object._meta.object_name, self.object.pk)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 64,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1167
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(\n    ID .ID .ID .ID ,ID .ID .ID .ID ,ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(\n    ID .ID .ID .ID ,ID .ID .ID ID ,ID .ID .ID )\n"
    },
    {
        "code": "\ndef save(self, save_m2m=True, using=None):\n    if self.m2m_data and save_m2m:\n        for accessor_name, object_list in self.m2m_data.items():\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/core/serializers/base.py",
            "fix_location": 63,
            "fix_type": "modify",
            "fix_token": "for",
            "id": 1168
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID .ID and ID :\n        for ID ,ID in ID .ID .ID ():\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =ID ):\n    if ID .ID and ID :\n        -ID ,ID in ID .ID .ID ():\n            pass \n"
    },
    {
        "code": "\ndef get_field_size(name):\n    \"\"\" Extract the size number from a \"varchar(11)\" type name \"\"\"\n    m = field_size_re.search(name)\n    return int(m.group(1)) if m else None\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1169
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID (ID )\n    return ID (ID .ID (LIT ))if ID else ID \n",
        "wrong_code": "\nnot def ID (ID ):\n    LIT \n    ID =ID .ID (ID )\n    return ID (ID .ID (LIT ))if ID else ID \n"
    },
    {
        "code": "\ndef __getitem__(self, key):\n    try:\n        pass\n    except KeyError:\n        if size is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "except",
            "id": 1170
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    class ID :\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef get_table_list(self, cursor):\n    \"Returns a list of table names in the current database.\"\n    # Skip the sqlite_sequence system table used for autoincrement key\n    # generation.\n    cursor.execute(\"\"\"\n            SELECT name FROM sqlite_master\n            WHERE type='table' AND NOT name='sqlite_sequence'\n            ORDER BY name\"\"\")\n    return [row[0] for row in cursor.fetchall()]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1171
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (LIT )\n    return [ID [LIT ]for ID in ID .ID ()]\n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    #COMMENT\n\n    #COMMENT\n\n    ID .ID (LIT )\n    return [ID [LIT ]for ID in ID .ID ()]\n"
    },
    {
        "code": "\ndef get_table_description(self, cursor, table_name):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1172
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef get_primary_key_column(self, cursor, table_name):\n    for field_desc in results.split(','):\n        if m:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 1173
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in ID .ID (LIT ):\n        if ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ],ID ):\n    for ID in ID .ID (LIT ):\n        if ID :\n            pass \n"
    },
    {
        "code": "\ndef _table_info(self, cursor, name):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/db/backends/sqlite3/introspection.py",
            "fix_location": 21,
            "fix_type": "delete",
            "id": 1174
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ).:\n    pass \n"
    },
    {
        "code": "\ndef __new__( cls, target, onDelete=None, *arguments,**named ):\n    if current is not None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1175
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,*ID ,**ID ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =global ,*ID ,**ID ):\n    if ID is not ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef calculateKey( cls, target ):\n    \"\"\"Calculate the reference key for this reference\n\n        Currently this is a two-tuple of the id()'s of the\n        target object and the target function respectively.\n        \"\"\"\n    return (id(target.__self__),id(target.__func__))\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1176
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return (ID (ID .ID ),ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT !return (ID (ID .ID ),ID (ID .ID ))\n"
    },
    {
        "code": "\ndef __str__(self):\n    \"\"\"Give a friendly representation of the object\"\"\"\n    return \"\"\"%s( %s.%s )\"\"\"%(\n        self.__class__.__name__,\n        self.selfName,\n        self.funcName,\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 1177
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return LIT %(\n    ID .ID .ID ,\n    ID .ID ,\n    ID .ID ,\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return LIT pass %(\n    ID .ID .ID ,\n    ID .ID ,\n    ID .ID ,\n    )\n"
    },
    {
        "code": "\ndef __hash__(self):\n    return hash(self.key)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 1178
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID .ID elif )\n"
    },
    {
        "code": "\ndef __bool__( self ):\n    \"\"\"Whether we are still a valid reference\"\"\"\n    return self() is not None\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 50,
            "fix_type": "delete",
            "id": 1179
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID ()is not ID \n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID ()is not ID finally \n"
    },
    {
        "code": "\ndef __nonzero__(self):      # Python 2 compatibility\n    return type(self).__bool__(self)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1180
        },
        "correct_code": "\ndef ID (ID ):#COMMENT\n\n    return ID (ID ).ID (ID )\n",
        "wrong_code": "\ndef ID (as ID ):#COMMENT\n\n    return ID (ID ).ID (ID )\n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    \"\"\"Compare with another reference\"\"\"\n    if not isinstance(other, self.__class__):\n        return self.__class__ == type(other)\n    return self.key == other.key\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 84,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1181
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID .ID ):\n        return ID .ID ==ID (ID )\n    return ID .ID ==ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    if not ID (ID ,ID .ID ):\n        return ID .ID ==ID ID )\n    return ID .ID ==ID .ID \n"
    },
    {
        "code": "\ndef __call__(self):\n    if target is not None:\n        if function is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1182
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is not ID :\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):except     if ID is not ID :\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "def __init__(self, target, onDelete=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1183
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    pass \n",
        "wrong_code": "def ID (ID yield ID ,ID =ID ):\n    pass \n"
    },
    {
        "code": "\ndef __call__(self):\n    if target is not None:\n        if function is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1184
        },
        "correct_code": "\ndef ID (ID ):\n    if ID is not ID :\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID is not ID :\n        if import is not ID :\n            pass \n"
    },
    {
        "code": "\ndef get_bound_method_weakref(target, onDelete):\n    if hasattr(target, '__get__'):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/dispatch/saferef.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1185
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    elif if ID (ID ,LIT ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def __init__(self, setting, nodelist):\n    self.setting, self.nodelist = setting, nodelist\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1186
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID ,ID .ID =ID ,ID \n",
        "wrong_code": "def ID (ID ,ID *ID ):\n    ID .ID ,ID .ID =ID ,ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    if self.setting:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1187
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID )]\n    if ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "def render(self, context):\n    return ''\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 1188
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ,ID LIT ):\n    return LIT \n"
    },
    {
        "code": "def __init__(self, cyclevars, variable_name=None, silent=False):\n    self.cyclevars = cyclevars\n    self.variable_name = variable_name\n    self.silent = silent\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1189
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (else ID ,ID ,ID =ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    if self not in context.render_context:\n        pass\n    if self.variable_name:\n        pass\n    if self.silent:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 1190
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID not in ID .ID :\n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID not ID .ID :\n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "def render(self, context):\n    return ''.join(output)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1191
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT .ID (ID )\n",
        "wrong_code": "def ID (ID ,ID try :\n    return LIT .ID (ID )\n"
    },
    {
        "code": "def __init__(self, filter_expr, nodelist):\n    self.filter_expr, self.nodelist = filter_expr, nodelist\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1192
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID ,ID .ID =ID ,ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID ,ID .ID =async ,ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    return filtered\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1193
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "def __init__(self, vars):\n    self.vars = vars\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 1194
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID async .ID =ID \n"
    },
    {
        "code": "\ndef __init__(self, loopvars, sequence, is_reversed, nodelist_loop, nodelist_empty=None):\n    if nodelist_empty is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1195
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,[ID =ID ):\n    if ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __iter__(self):\n    for node in self.nodelist_loop:\n        yield node\n    for node in self.nodelist_empty:\n        yield node\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 101,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1196
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n    for ID in ID .ID :\n        yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        yield ID \n    for ID in ID .ID :\n        yield ID \n    if "
    },
    {
        "code": "\ndef __init__(self, nodelist_true, nodelist_false, *varlist):\n    self._id = str(id(self))\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 27,
            "fix_type": "delete",
            "id": 1197
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,*ID ):\n    ID .ID =ID (ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,*ID ):from \n    ID .ID =ID (ID (ID ))\n"
    },
    {
        "code": "\ndef __init__(self, var1, var2, nodelist_true, nodelist_false, negate):\n    self.nodelist_true, self.nodelist_false = nodelist_true, nodelist_false\n    self.negate = negate\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 1198
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    ID .ID ,ID .ID =ID ,ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ,ID ):\n    ID +.ID ,ID .ID =ID ,ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<IfEqualNode>\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 1199
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):except \n    return LIT \n"
    },
    {
        "code": "\ndef render(self, context):\n    if (self.negate and val1 != val2) or (not self.negate and val1 == val2):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 69,
            "fix_type": "modify",
            "fix_token": "==",
            "id": 1200
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if (ID .ID and ID !=ID )or (not ID .ID and ID ==ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if (ID .ID and ID !=ID )or (not ID .ID and ID del ID ):\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, conditions_nodelists):\n    self.conditions_nodelists = conditions_nodelists\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 1201
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):return \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<IfNode>\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 1202
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    return else LIT \n"
    },
    {
        "code": "\ndef __iter__(self):\n    for _, nodelist in self.conditions_nodelists:\n        for node in nodelist:\n            yield node\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 1203
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID :\n        for ID in ID :\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID :\n        for ID in ID :\n            yield ID \n        await "
    },
    {
        "code": "\n@property\ndef nodelist(self):\n    return NodeList(node for _, nodelist in self.conditions_nodelists for node in nodelist)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1204
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID (ID for ID ,ID in ID .ID for ID in ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    return ID (ID for ID ,ID in .ID for ID in ID )\n"
    },
    {
        "code": "def __init__(self, target, expression, var_name):\n    self.target, self.expression = target, expression\n    self.var_name = var_name\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 61,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1205
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID ,ID .ID =ID ,ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID ,ID .ID =ID ,ID \n    ID pass ID =ID \n"
    },
    {
        "code": "\ndef resolve_expression(self, obj, context):\n    # This method is called for each object in self.target. See regroup()\n    # for the reason why we temporarily put the object in the context.\n    context[self.var_name] = obj\n    return self.expression.resolve(context, True)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1206
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    ID [ID .ID ]=ID \n    return ID .ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    ID [ID .ID ]=ID \n    return ID with ID .ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef render(self, context):\n    if obj_list == None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 1207
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID ==ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):)\n    if ID ==ID :\n        pass \n"
    },
    {
        "code": "\ndef include_is_allowed(filepath):\n    for root in settings.ALLOWED_INCLUDE_ROOTS:\n        if filepath.startswith(root):\n            return True\n    return False\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 1208
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        if ID .ID (ID ):\n            return LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :if ID .ID (ID ):\n            return LIT \n    return LIT \n"
    },
    {
        "code": "def __init__(self, filepath, parsed):\n    self.filepath = filepath\n    self.parsed = parsed\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 1209
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID del ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def render(self, context):\n    return ''\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1210
        },
        "correct_code": "def ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "ID (ID ,ID ):\n    return LIT \n"
    },
    {
        "code": "def __init__(self, format_string):\n    self.format_string = format_string\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 1211
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .or ID =ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    tzinfo = timezone.get_current_timezone() if settings.USE_TZ else None\n    return date(datetime.now(tz=tzinfo), self.format_string)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1212
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID ()if ID .ID else ID \n    return ID (ID .ID (ID =ID ),ID .ID )\n",
        "wrong_code": "\ndef ID (elif ,ID ):\n    ID =ID .ID ()if ID .ID else ID \n    return ID (ID .ID (ID =ID ),ID .ID )\n"
    },
    {
        "code": "def __init__(self, nodelist):\n    self.nodelist = nodelist\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 1213
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID :=ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    from django.utils.html import strip_spaces_between_tags\n    return strip_spaces_between_tags(self.nodelist.render(context).strip())\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1214
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    from ID .ID .ID import ID \n    return ID (ID .ID .ID (ID ).ID ())\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    from ID -ID .ID import ID \n    return ID (ID .ID .ID (ID ).ID ())\n"
    },
    {
        "code": "\ndef __init__(self, tagtype):\n    self.tagtype = tagtype\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1215
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    return self.mapping.get(self.tagtype, '')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1216
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ID ):\n    return ID .ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "def __init__(self, view_name, args, kwargs, asvar):\n    self.view_name = view_name\n    self.args = args\n    self.kwargs = kwargs\n    self.asvar = asvar\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1217
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID def ID =ID \n"
    },
    {
        "code": "def __init__(self, content):\n    self.content = content\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1218
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =del ID \n"
    },
    {
        "code": "\ndef render(self, context):\n    return self.content\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1219
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\n.ID (ID ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "def __init__(self, val_expr, max_expr, max_width):\n    self.val_expr = val_expr\n    self.max_expr = max_expr\n    self.max_width = max_width\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1220
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n    .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, var, name, nodelist, extra_context=None):\n    if name:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1221
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID =ID ):\n    if ID :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,=ID ):\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return \"<WithNode>\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1222
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (,ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef render(self, context):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1223
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n@register.tag\ndef autoescape(parser, token):\n    if len(args) != 2:\n        pass\n    if arg not in ('on', 'off'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 1224
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID not in (LIT ,LIT ):\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID with ):\n    if ID (ID )!=LIT :\n        pass \n    if ID not in (LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\n@register.tag\ndef comment(parser, token):\n    \"\"\"\n    Ignores everything between ``{% comment %}`` and ``{% endcomment %}``.\n    \"\"\"\n    parser.skip_past('endcomment')\n    return CommentNode()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1225
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT )\n    return ID ()\n",
        "wrong_code": "\n@ID .ID LIT \ndef ID (ID ,ID ):\n    LIT \n    ID .ID (LIT )\n    return ID ()\n"
    },
    {
        "code": "\n@register.tag\ndef csrf_token(parser, token):\n    return CsrfTokenNode()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 1226
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    return ID ()\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    return ID (import )\n"
    },
    {
        "code": "\n@register.tag\ndef debug(parser, token):\n    \"\"\"\n    Outputs a whole load of debugging information, including the current\n    context and imported modules.\n\n    Sample usage::\n\n        <pre>\n            {% debug %}\n        </pre>\n    \"\"\"\n    return DebugNode()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 1227
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID ()\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID (])\n"
    },
    {
        "code": "\n@register.tag\ndef firstof(parser, token):\n    if len(bits) < 1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1228
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )<LIT :\n        pass \n",
        "wrong_code": "\n]@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )<LIT :\n        pass \n"
    },
    {
        "code": "\ndef do_ifequal(parser, token, negate):\n    if len(bits) != 3:\n        pass\n    if token.contents == 'else':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 121,
            "fix_type": "delete",
            "id": 1229
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n="
    },
    {
        "code": "\n@register.tag\ndef ifequal(parser, token):\n    \"\"\"\n    Outputs the contents of the block if the two arguments equal each other.\n\n    Examples::\n\n        {% ifequal user.id comment.user_id %}\n            ...\n        {% endifequal %}\n\n        {% ifnotequal user.id comment.user_id %}\n            ...\n        {% else %}\n            ...\n        {% endifnotequal %}\n    \"\"\"\n    return do_ifequal(parser, token, False)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1230
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ,LIT )\n",
        "wrong_code": "\n@ID .ID global def ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ,LIT )\n"
    },
    {
        "code": "\n@register.tag\ndef ifnotequal(parser, token):\n    \"\"\"\n    Outputs the contents of the block if the two arguments are not equal.\n    See ifequal.\n    \"\"\"\n    return do_ifequal(parser, token, True)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1231
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ,LIT )\n",
        "wrong_code": "\n@ID .ID \nnot ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ,LIT )\n"
    },
    {
        "code": "def __init__(self, value, text):\n    self.value = value\n    self.text = text # for better error messages\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1232
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID #COMMENT\n\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .except =ID \n    ID .ID =ID #COMMENT\n\n"
    },
    {
        "code": "\ndef display(self):\n    return self.text\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1233
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\nID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef eval(self, context):\n    return self.value.resolve(context, ignore_failures=True)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 1234
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID .return ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef __init__(self, parser, *args, **kwargs):\n    self.template_parser = parser\n    super(TemplateIfParser, self).__init__(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1235
        },
        "correct_code": "\ndef ID (ID ,ID ,*ID ,**ID ):\n    ID .ID =ID \n    ID (ID ,ID ).ID (*ID ,**ID )\n",
        "wrong_code": "\nID (ID ,ID ,*ID ,**ID ):\n    ID .ID =ID \n    ID (ID ,ID ).ID (*ID ,**ID )\n"
    },
    {
        "code": "\ndef create_var(self, value):\n    return TemplateLiteral(self.template_parser.compile_filter(value), value)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1236
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID .ID (ID ),ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID .ID (ID ),ID /\n"
    },
    {
        "code": "\n\n@register.tag\ndef ifchanged(parser, token):\n    if token.contents == 'else':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1237
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID ,ID ):\n    if ID .ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID ,ID ):\n    if ID .ID ==LIT :\n        pass \n        )else :\n        pass \n    "
    },
    {
        "code": "\n@register.tag\ndef now(parser, token):\n    if len(bits) != 2:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 1238
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID not (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n"
    },
    {
        "code": "\n@register.tag\ndef spaceless(parser, token):\n    \"\"\"\n    Removes whitespace between HTML tags, including tab and newline characters.\n\n    Example usage::\n\n        {% spaceless %}\n            <p>\n                <a href=\"foo/\">Foo</a>\n            </p>\n        {% endspaceless %}\n\n    This example would return this HTML::\n\n        <p><a href=\"foo/\">Foo</a></p>\n\n    Only space between *tags* is normalized -- not space between tags and text.\n    In this example, the space around ``Hello`` won't be stripped::\n\n        {% spaceless %}\n            <strong>\n                Hello\n            </strong>\n        {% endspaceless %}\n    \"\"\"\n    nodelist = parser.parse(('endspaceless',))\n    parser.delete_first_token()\n    return SpacelessNode(nodelist)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1239
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID ((LIT ,))\n    ID .ID ()\n    return ID (ID )\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ID ):\n    LIT \n    ID =ID .ID ((LIT ,))\n    ID .ID ()\n    return ID (ID )\n"
    },
    {
        "code": "\n@register.tag\ndef templatetag(parser, token):\n    if len(bits) != 2:\n        pass\n    if tag not in TemplateTagNode.mapping:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 1240
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID not in ID .ID :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if break ID (ID )!=LIT :\n        pass \n    if ID not in ID .ID :\n        pass \n"
    },
    {
        "code": "\n@register.tag\ndef verbatim(parser, token):\n    nodelist = parser.parse(('endverbatim',))\n    parser.delete_first_token()\n    return VerbatimNode(nodelist.render(Context()))\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 51,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1241
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    ID =ID .ID ((LIT ,))\n    ID .ID ()\n    return ID (ID .ID (ID ()))\n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    ID =ID .ID ((LIT ,)\n    ID .ID ()\n    return ID (ID .ID (ID ()))\n"
    },
    {
        "code": "\n@register.tag\ndef widthratio(parser, token):\n    if len(bits) != 4:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 1242
        },
        "correct_code": "\n@ID .ID \ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n",
        "wrong_code": "\n@ID .ID \ndef ID (ID ,ID )await :\n    if ID (ID )!=LIT :\n        pass \n"
    },
    {
        "code": "\n@register.tag('with')\ndef do_with(parser, token):\n    if not extra_context:\n        pass\n    if remaining_bits:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/template/defaulttags.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1243
        },
        "correct_code": "\n@ID .ID (LIT )\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\n@ID .ID (LIT )\ndef (ID ,ID ):\n    if not ID :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef timeuntil(d, now=None):\n    \"\"\"\n    Like timesince, but returns a string measuring the time until\n    the given time.\n    \"\"\"\n    return timesince(d, now, reversed=True)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/django/utils/timesince.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 1244
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    LIT \n    return ID (ID ,ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):for \n    LIT \n    return ID (ID ,ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef _tx_resource_for_name(name):\n    \"\"\" Return the Transifex resource name \"\"\"\n    if name == 'core':\n        return \"django.core\"\n    else:\n        return \"django.contrib-%s\" % name\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/scripts/manage_translations.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1245
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    if ID ==LIT :\n        return LIT \n    else :\n        return LIT %ID \n",
        "wrong_code": "\ndef ID (ID )else :\n    LIT \n    if ID ==LIT :\n        return LIT \n    else :\n        return LIT %ID \n"
    },
    {
        "code": "\ndef _check_diff(cat_name, base_path):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/scripts/manage_translations.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1246
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return force_text(self.name)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/field_subclassing/models.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1247
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (nonlocal .ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.title\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/many_to_many/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1248
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID del ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.headline\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/many_to_many/models.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1249
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID try (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __init__(self, *args, **kwargs):\n    super(Person, self).__init__(*args, **kwargs)\n    self.data = []\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/save_delete_hooks/models.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 1250
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ,**ID )\n    ID .ID =[]\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID (ID ,ID ).ID (*ID ),**ID )\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef __str__(self):\n    return \"%s %s\" % (self.first_name, self.last_name)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/save_delete_hooks/models.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1251
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .,ID .ID )\n"
    },
    {
        "code": "\ndef save(self, *args, **kwargs):\n    self.data.append(\"After save\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/save_delete_hooks/models.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1252
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    ID def ID .ID (LIT )\n"
    },
    {
        "code": "\ndef delete(self):\n    self.data.append(\"Before deletion\")\n    # Call the \"real\" delete() method\n    super(Person, self).delete()\n    self.data.append(\"After deletion\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/save_delete_hooks/models.py",
            "fix_location": 67,
            "fix_type": "delete",
            "id": 1253
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n    #COMMENT\n\n    ID (ID ,ID ).ID ()\n    ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (LIT )\n    #COMMENT\n\n    ID (ID ,ID )is .ID ()\n    ID .ID .ID (LIT )\n"
    },
    {
        "code": "def test_unique_fields_get_collected(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1254
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID yield :\n    pass \n"
    },
    {
        "code": "\ndef test_unique_together_gets_picked_up_and_converted_to_tuple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1255
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef global (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_primary_key_is_considered_unique(self):\n    m = CustomPKModel()\n    self.assertEqual(([(CustomPKModel, ('my_pk_field',))], []), m._get_unique_checks())\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 1256
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID (([(ID ,(LIT ,))],[]),ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID ()\n    ID .ID ((][(ID ,(LIT ,))],[]),ID .ID ())\n"
    },
    {
        "code": "\ndef test_unique_for_date_gets_picked_up(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1257
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):]    pass \n"
    },
    {
        "code": "\ndef test_unique_for_date_exclusion(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1258
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )=\n    pass \n"
    },
    {
        "code": "def test_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified(self):\n    # Regression test for #12560\n    with self.assertNumQueries(0):\n        mtv.full_clean()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1259
        },
        "correct_code": "def ID (ID ):\n#COMMENT\n\n    with ID .ID (LIT ):\n        ID .ID ()\n",
        "wrong_code": "def ID ID ):\n#COMMENT\n\n    with ID .ID (LIT ):\n        ID .ID ()\n"
    },
    {
        "code": "\ndef test_primary_key_unique_check_performed_when_adding_and_pk_specified(self):\n    # Regression test for #12560\n    with self.assertNumQueries(1):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1260
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    with ID .ID (LIT ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    with ID .ID (LIT )\n        pass \n"
    },
    {
        "code": "\ndef test_primary_key_unique_check_not_performed_when_not_adding(self):\n    # Regression test for #12132\n    with self.assertNumQueries(0):\n        mtv = ModelToValidate(number=10, name='Some Name')\n        mtv.full_clean()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/modeltests/validation/test_unique.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1261
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    with ID .ID (LIT ):\n        ID =ID (ID =LIT ,ID =LIT )\n        ID .ID ()\n",
        "wrong_code": "\ndef (ID ):\n#COMMENT\n\n    with ID .ID (LIT ):\n        ID =ID (ID =LIT ,ID =LIT )\n        ID .ID ()\n"
    },
    {
        "code": "\n\ndef callable_year(dt_value):\n    try:\n        return dt_value.year\n    except AttributeError:\n        return None\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1262
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        return ID .ID \n    except ID :\n        return ID \n",
        "wrong_code": "\n\ndef ID (ID :\n    try :\n        return ID .ID \n    except ID :\n        return ID \n"
    },
    {
        "code": "\ndef changelist_view(self, request):\n    \"Test that extra_context works\"\n    return super(ArticleAdmin, self).changelist_view(\n        request, extra_context={\n            'extra_var': 'Hello!'\n        }\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 1263
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ).ID (\n    ID ,ID ={\n    LIT :LIT \n    }\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ],ID ).ID (\n    ID ,ID ={\n    LIT :LIT \n    }\n    )\n"
    },
    {
        "code": "\ndef modeladmin_year(self, obj):\n    return obj.date.year\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1264
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID lambda "
    },
    {
        "code": "\ndef delete_model(self, request, obj):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1265
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,def ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef save_model(self, request, obj, form, change=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1266
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef (ID ,ID ,ID ,ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "def has_change_permission(self, request, obj=None):\n    \"\"\" Only allow changing objects with even id number \"\"\"\n    return request.user.is_staff and (obj is not None) and (obj.id % 2 == 0)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 46,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1267
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    LIT \n    return ID .ID .ID and (ID is not ID )and (ID .ID %LIT ==LIT )\n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    LIT \n    return .ID .ID and (ID is not ID )and (ID .ID %LIT ==LIT )\n"
    },
    {
        "code": "\ndef changelist_view(self, request):\n    \"Test that extra_context works\"\n    return super(CustomArticleAdmin, self).changelist_view(\n        request, extra_context={\n            'extra_var': 'Hello!'\n        }\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 85,
            "fix_type": "insert",
            "fix_token": "}",
            "id": 1268
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ).ID (\n    ID ,ID ={\n    LIT :LIT \n    }\n    )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID (ID ,ID ).ID (\n    ID ,ID ={\n    LIT :LIT \n\n    )\n"
    },
    {
        "code": "def clean(self):\n    for person_dict in self.cleaned_data:\n        if person and alive and person.name == \"Grace Hopper\":\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 1269
        },
        "correct_code": "def ID (ID ):\n    for ID in ID .ID :\n        if ID and ID and ID .ID ==LIT :\n            pass \n",
        "wrong_code": "def ID (ID ):\n    for ID in ID .ID :\n        if ID and ID and ID .ID ==elif LIT :\n            pass \n"
    },
    {
        "code": "\ndef get_changelist_formset(self, request, **kwargs):\n    return super(PersonAdmin, self).get_changelist_formset(request,\n        formset=BasePersonModelFormSet, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1270
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    return ID (ID ,ID ).ID (ID ,\n    ID =ID ,**ID )\n",
        "wrong_code": "\ndef ID (ID ,ID else **ID ):\n    return ID (ID ,ID ).ID (ID ,\n    ID =ID ,**ID )\n"
    },
    {
        "code": "\ndef queryset(self, request):\n    # Order by a field that isn't in list display, to be able to test\n    # whether ordering is preserved.\n    return super(PersonAdmin, self).queryset(request).order_by('age')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 1271
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n#COMMENT\n\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\nglobal \n\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef mail_admin(self, request, selected):\n    EmailMessage(\n        'Greetings from a ModelAdmin action',\n        'This is the test email from a admin action',\n        'from@example.com',\n        ['to@example.com']\n    ).send()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1272
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    [LIT ]\n    ).ID ()\n",
        "wrong_code": "\ndef ID (else ,ID ,ID ):\n    ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    [LIT ]\n    ).ID ()\n"
    },
    {
        "code": "\n\ndef external_mail(modeladmin, request, selected):\n    EmailMessage(\n        'Greetings from a function action',\n        'This is the test email from a function action',\n        'from@example.com',\n        ['to@example.com']\n    ).send()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 79,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1273
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    [LIT ]\n    ).ID ()\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    ID (\n    LIT ,\n    LIT ,\n    LIT ,\n    [LIT ]\n    )await ID ()\n"
    },
    {
        "code": "\n\ndef redirect_to(modeladmin, request, selected):\n    from django.http import HttpResponseRedirect\n    return HttpResponseRedirect('/some-where-else/')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 66,
            "fix_type": "delete",
            "id": 1274
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    from ID .ID import ID \n    return ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    from ID .ID import ID \n    return ID (while LIT )\n"
    },
    {
        "code": "def queryset(self, request):\n    return super(EmptyModelAdmin, self).queryset(request).filter(pk__gt=1)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1275
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (ID =LIT )\n",
        "wrong_code": "def ID (,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (ID =LIT )\n"
    },
    {
        "code": "\ndef multiline(self, instance):\n    return \"InlineMultiline\\ntest\\nstring\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1276
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,==ID ):\n    return LIT \n"
    },
    {
        "code": "\ndef get_readonly_fields(self, request, obj=None):\n    if obj and obj.published:\n        return ('subslug',)\n    return self.readonly_fields\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 1277
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        return (LIT ,)\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID LIT and ID .ID :\n        return (LIT ,)\n    return ID .ID \n"
    },
    {
        "code": "\ndef get_prepopulated_fields(self, request, obj=None):\n    if obj and obj.published:\n        return {}\n    return self.prepopulated_fields\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 1278
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        return {}\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        if return {}\n    return ID .ID \n"
    },
    {
        "code": "\ndef get_readonly_fields(self, request, obj=None):\n    if obj and obj.published:\n        return ('slug',)\n    return self.readonly_fields\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 1279
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        return (LIT ,)\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        return (LIT ,)\n    return ID .ID \n*"
    },
    {
        "code": "\ndef get_prepopulated_fields(self, request, obj=None):\n    if obj and obj.published:\n        return {}\n    return self.prepopulated_fields\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1280
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if ID and ID .ID :\n        return {}\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ):\n    if and ID .ID :\n        return {}\n    return ID .ID \n"
    },
    {
        "code": "\ndef coolness(self, instance):\n    if instance.pk:\n        return \"%d amount of cool.\" % instance.pk\n    else:\n        return \"Unkown coolness.\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1281
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        return LIT %ID .ID \n    else :\n        return LIT \n",
        "wrong_code": "\nas ID (ID ,ID ):\n    if ID .ID :\n        return LIT %ID .ID \n    else :\n        return LIT \n"
    },
    {
        "code": "\ndef value(self, instance):\n    return 1000\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1282
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return or LIT \n"
    },
    {
        "code": "\ndef multiline(self, instance):\n    return \"Multiline\\ntest\\nstring\"\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1283
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID for :\n    return LIT \n"
    },
    {
        "code": "def get_query_set(self, request):\n    return self.root_query_set.filter(pk=9999) # Does not exist\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 15,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1284
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID .ID (ID =LIT )#COMMENT\n\n",
        "wrong_code": "def ID (ID ,ID :\n    return ID .ID .ID (ID =LIT )#COMMENT\n\n"
    },
    {
        "code": "def get_changelist(self, request, **kwargs):\n    return CustomChangeList\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 1285
        },
        "correct_code": "def ID (ID ,ID ,**ID ):\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ,elif **ID ):\n    return ID \n"
    },
    {
        "code": "\ndef queryset(self, request):\n    return super(CoverLetterAdmin, self).queryset(request).defer('date_written')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1286
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,class ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef queryset(self, request):\n    return super(PaperAdmin, self).queryset(request).only('title')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1287
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (+ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef queryset(self, request):\n    return super(ShortMessageAdmin, self).queryset(request).defer('timestamp')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 56,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1288
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (break )\n"
    },
    {
        "code": "\ndef queryset(self, request):\n    return super(TelegramAdmin, self).queryset(request).only('title')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1289
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID def :\n    return ID (ID ,ID ).ID (ID ).ID (LIT )\n"
    },
    {
        "code": "\ndef colored_name(self, obj):\n    return '<span style=\"color: #%s;\">%s</span>' % ('ff00ff', obj.name)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1290
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT %(LIT ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return LIT %(is ,ID .ID )\n"
    },
    {
        "code": "def some_admin_order(self, obj):\n    return obj.order\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 7,
            "fix_type": "delete",
            "id": 1291
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "def ID ==(ID ,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef admin_ordered_callable(obj):\n    return obj.order\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 1292
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID )\n"
    },
    {
        "code": "def extra(self, request):\n    return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1293
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID ()\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID )\n"
    },
    {
        "code": "\ndef get_urls(self):\n    # Corner case: Don't call parent implementation\n    return patterns('',\n        url(r'^extra/$',\n            self.extra,\n            name='cable_extra'),\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 77,
            "fix_type": "delete",
            "id": 1294
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID (LIT ,\n    ID (LIT ,\n    ID .ID ,\n    ID =LIT ),\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    return ID (LIT ,\n    ID (LIT ,\n    ID .ID ,\n    except ID =LIT ),\n    )\n"
    },
    {
        "code": "def change_view(self, *args, **kwargs):\n    kwargs['extra_context'] = {'show_delete': False}\n    return super(UndeletableObjectAdmin, self).change_view(*args, **kwargs)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1295
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    ID [LIT ]={LIT :LIT }\n    return ID (ID ,ID ).ID (*ID ,**ID )\n",
        "wrong_code": "def ID (ID ,*ID ,**ID ):\n    ID [LIT ]={LIT ]LIT }\n    return ID (ID ,ID ).ID (*ID ,**ID )\n"
    },
    {
        "code": "\n\ndef callable_on_unknown(obj):\n    return obj.unknown\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1296
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\n\ndef ID (ID ::\n    return ID .ID \n"
    },
    {
        "code": "\ndef message_debug(self, request, selected):\n    self.message_user(request, \"Test debug\", level=\"debug\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1297
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID !=.ID (ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef message_info(self, request, selected):\n    self.message_user(request, \"Test info\", level=\"info\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1298
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID None .ID (ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef message_success(self, request, selected):\n    self.message_user(request, \"Test success\", level=\"success\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1299
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID finally .ID (ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef message_warning(self, request, selected):\n    self.message_user(request, \"Test warning\", level=\"warning\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 1300
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT =)\n"
    },
    {
        "code": "\ndef message_error(self, request, selected):\n    self.message_user(request, \"Test error\", level=\"error\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 1301
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID try LIT )\n"
    },
    {
        "code": "\ndef message_extra_tags(self, request, selected):\n    self.message_user(request, \"Test tags\", extra_tags=\"extra_tag\")\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/admin_views/admin.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1302
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID def ID ):\n    ID .ID (ID ,LIT ,ID =LIT )\n"
    },
    {
        "code": "\ndef assertFullResponse(self, response, check_last_modified=True, check_etag=True):\n    if check_last_modified:\n        pass\n    if check_etag:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1303
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =LIT ):\n    if ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID return ,ID ,ID =LIT ,ID =LIT ):\n    if ID :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef assertNotModified(self, response):\n    self.assertEqual(response.status_code, 304)\n    self.assertEqual(response.content, b'')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1304
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID .ID ,LIT )\n    ID .ID (ID .ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID (ID .ID ,lambda )\n    ID .ID (ID .ID ,LIT )\n"
    },
    {
        "code": "\ndef testWithoutConditions(self):\n    response = self.client.get('/condition/')\n    self.assertFullResponse(response)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 1305
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (LIT )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID (if LIT )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef testIfModifiedSince(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 1306
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):try \n    pass \n"
    },
    {
        "code": "\ndef testIfNoneMatch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1307
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "class \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testIfMatch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1308
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nwith def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testBothHeaders(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1309
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef *(ID ):\n    pass \n"
    },
    {
        "code": "\ndef testSingleCondition1(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1310
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    is "
    },
    {
        "code": "\ndef testSingleCondition2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1311
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )!\n    pass \n"
    },
    {
        "code": "\ndef testSingleCondition3(self):\n    self.client.defaults['HTTP_IF_MODIFIED_SINCE'] = EXPIRED_LAST_MODIFIED_STR\n    response = self.client.get('/condition/last_modified/')\n    self.assertFullResponse(response, check_etag=False)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1312
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=ID \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=ID \n    =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef testSingleCondition4(self):\n    self.client.defaults['HTTP_IF_NONE_MATCH'] = '\"%s\"' % EXPIRED_ETAG\n    response = self.client.get('/condition/etag/')\n    self.assertFullResponse(response, check_last_modified=False)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 1313
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=LIT %ID \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=LIT %elif ID \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef testSingleCondition5(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1314
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef else (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testSingleCondition6(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1315
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID with (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testInvalidETag(self):\n    self.client.defaults['HTTP_IF_NONE_MATCH'] = r'\"\\\"'\n    response = self.client.get('/condition/etag/')\n    self.assertFullResponse(response, check_last_modified=False)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/conditional_processing/models.py",
            "fix_location": 98,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1316
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID [LIT ]=LIT \n    ID =ID .ID .ID (LIT )\n    ID .ID (ID ,ID =LIT )\n    try "
    },
    {
        "code": "def get_query_set(self):\n    return super(OnlyFred, self).get_query_set().filter(name='fred')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1317
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n",
        "wrong_code": "def ID (ID if :\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n"
    },
    {
        "code": "def get_query_set(self):\n    return super(OnlyBarney, self).get_query_set().filter(name='barney')\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1318
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n",
        "wrong_code": "def ID (ID ):\n    return ID for ID ,ID ).ID ().ID (ID =LIT )\n"
    },
    {
        "code": "def get_query_set(self):\n    return super(Value42, self).get_query_set().filter(value=42)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 1319
        },
        "correct_code": "def ID (ID ):\n    return ID (ID ,ID ).ID ().ID (ID =LIT )\n",
        "wrong_code": "def ID (ID ):\n    return ID (ID ,(ID ).ID ().ID (ID =LIT )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1320
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID )\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1321
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID )import :\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1322
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (del ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1323
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\nID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 1324
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return =ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/managers_regress/models.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1325
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\nID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return 'Article titled: %s' % (self.title, )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/null_fk_ordering/models.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1326
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID ,)\n",
        "wrong_code": "\ndef ID (ID ):\n    return %(ID .ID ,)\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.title\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/null_fk_ordering/models.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1327
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .\n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.comment_text\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/null_fk_ordering/models.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1328
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (def ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef xview(request):\n    return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/special_headers/views.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1329
        },
        "correct_code": "\ndef ID (ID ):\n    return ID ()\n",
        "wrong_code": "\ndef (ID ):\n    return ID ()\n"
    },
    {
        "code": "\ndef xview_xheaders(request, object_id):\n    response = HttpResponse()\n    populate_xheaders(request, response, Article, 1)\n    return response\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/special_headers/views.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1330
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID ()\n    ID (ID ,ID ,ID ,LIT )\n    return ID \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    ID =ID ()\n    ID (ID ,ID ,ID ,LIT )\n    return ID \n"
    },
    {
        "code": "def get(self, request):\n    return HttpResponse()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/django-1.5/tests/regressiontests/special_headers/views.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 1331
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID ()\n",
        "wrong_code": "def import ID (ID ,ID ):\n    return ID ()\n"
    },
    {
        "code": "\ndef __init__(self, filename):\n    self._filename = filename\n    self._lock = threading.Lock()\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/google-api-python-client/apiclient/ext/file.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1332
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,[ID ):\n    ID .ID =ID \n    ID .ID =ID .ID ()\n"
    },
    {
        "code": "\ndef get(self):\n    try:\n        pass\n    except:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/google-api-python-client/apiclient/ext/file.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1333
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass except except :\n        pass \n"
    },
    {
        "code": "\ndef put(self, credentials):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/google-api-python-client/apiclient/ext/file.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 1334
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\nawait     pass \n"
    },
    {
        "code": "\ndef __init__(self, *args, **kw):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/cmdline.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1335
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID )with \n    pass \n"
    },
    {
        "code": "\ndef print_help(self, out=sys.stderr):\n    if self.epilogue:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/cmdline.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1336
        },
        "correct_code": "\ndef ID (ID ,ID =ID .ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "==\ndef ID (ID ,ID =ID .ID ):\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef die_with_usage(self, msg=None, exit_code=2):\n    if msg != None:\n        pass\n    self.print_help(sys.stderr)\n    sys.exit(exit_code)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/cmdline.py",
            "fix_location": 78,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1337
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,ID =LIT ):\n    if ID !=ID :\n        pass \n    ID .ID (ID .ID )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,ID =LIT ):\n    if ID !=ID :\n        pass \n    ID .ID (ID ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef error(self, msg):\n    \"\"\"\n        Overrides parent ``OptionParser`` class's ``error()`` method and\n        forces the full usage message on error.\n        \"\"\"\n    sys.stderr.write(\"%s: error: %s\\n\" % (self.get_prog_name(), msg))\n    self.die_with_usage(msg)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/cmdline.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1338
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID .ID (LIT %(ID .ID (),ID ))\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (class ,ID ):\n    LIT \n    ID .ID .ID (LIT %(ID .ID (),ID ))\n    ID .ID (ID )\n"
    },
    {
        "code": "def __init__(self, file, *exceptions):\n    Forwarder.__init__(self, file, exceptions)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/test/TestProxy.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1339
        },
        "correct_code": "def ID (ID ,ID ,*ID ):\n    ID .ID (ID ,ID ,ID )\n",
        "wrong_code": "def ID (ID ,ID ,*ID ):\n    ID .ID (ID ,ID ,ID )\n    global "
    },
    {
        "code": "\ndef _create_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/grizzled/grizzled/test/TestProxy.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1340
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID [(ID ):\n    pass \n"
    },
    {
        "code": "def finalize_options(self):\n    if 'data_files' in self.__dict__: del self.__dict__['data_files']\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1341
        },
        "correct_code": "def ID (ID ):\n    if LIT in ID .ID :del ID .ID [LIT ]\n",
        "wrong_code": "def ID (ID ):\n    if LIT in ID .ID :del .ID [LIT ]\n"
    },
    {
        "code": "\ndef run(self):\n    if not self.py_modules and not self.packages:\n        pass\n\n    if self.py_modules:\n        pass\n\n    if self.packages:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1342
        },
        "correct_code": "\ndef ID (ID ):\n    if not ID .ID and not ID .ID :\n        pass \n\n    if ID .ID :\n        pass \n\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID ID ):\n    if not ID .ID and not ID .ID :\n        pass \n\n    if ID .ID :\n        pass \n\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef __getattr__(self,attr):\n    if attr=='data_files':  # lazily compute data files\n        self.data_files = files = self._get_data_files(); return files\n    return _build_py.__getattr__(self,attr)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 1343
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :#COMMENT\n\n        ID .ID =ID =ID .ID ();return ID \n    return ID .ID (ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :#COMMENT\n\n        ID .ID =ID =ID .class ID ();return ID \n    return ID .ID (ID ,ID )\n"
    },
    {
        "code": "\ndef _get_data_files(self):\n    for package in self.packages or ():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1344
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID or ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID or ()\n        pass \n"
    },
    {
        "code": "\ndef find_data_files(self, package, src_dir):\n    for pattern in globs:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1345
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID pass :\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef build_package_data(self):\n    for package, src_dir, build_dir, filenames in self.data_files:\n        for filename in filenames:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1346
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID ,ID ,ID in ID .ID :\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ,ID ,ID ,ID in ID .ID :\n        for ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef get_data_files(self): pass  # kludge 2.4 for lazy computation\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1347
        },
        "correct_code": "\ndef ID (ID ):pass #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID for :pass #COMMENT\n\n"
    },
    {
        "code": "def get_outputs(self, include_bytecode=1):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 1348
        },
        "correct_code": "def ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID =LIT ):\n    pass None \n"
    },
    {
        "code": "\ndef initialize_options(self):\n    self.packages_checked={}\n    _build_py.initialize_options(self)\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1349
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ={}\n    ID .ID (ID )\n",
        "wrong_code": "\ndef async (ID ):\n    ID .ID ={}\n    ID .ID (ID )\n"
    },
    {
        "code": "\n\n\n\n\n\n\ndef exclude_data_files(self, package, src_dir, files):\n    for pattern in globs:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1350
        },
        "correct_code": "\n\n\n\n\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\n\n\n\n\n\n\ndef ID (ID ,ID ,ID ,ID ):\n    for ==in ID :\n        pass \n"
    },
    {
        "code": "\n\ndef assert_relative(path):\n    if not os.path.isabs(path):\n        return path\n    from distutils.errors import DistutilsSetupError\n    raise DistutilsSetupError(\n\"\"\"Error: setup script specifies an absolute path:\n\n    %s\n\nsetup() arguments must *always* be /-separated paths relative to the\nsetup.py directory, *never* absolute paths.\n\"\"\" % path\n    )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/setuptools-0.6c11/setuptools/command/build_py.py",
            "fix_location": 104,
            "fix_type": "delete",
            "id": 1351
        },
        "correct_code": "\n\ndef ID (ID ):\n    if not ID .ID .ID (ID ):\n        return ID \n    from ID .ID import ID \n    raise ID (\n    LIT %ID \n    )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    if not ID .ID .ID (ID ):\n        return ID \n    from ID .ID import ID \n    raise ID ,(\n    LIT %ID \n    )\n"
    },
    {
        "code": "\ndef header_docstring(header, rfc_section):\n    if header.isupper():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob-1.1.1/webob/util.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 1352
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID ():\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID ():\n        import \n"
    },
    {
        "code": "\ndef warn_deprecation(text, version, stacklevel):\n    # version specifies when to start raising exceptions instead of warnings\n    if version == '1.2':\n        pass\n    elif version == '1.3':\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob-1.1.1/webob/util.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1353
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "async \ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, environ):\n    self.environ = environ\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1354
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .=ID \n"
    },
    {
        "code": "\ndef _trans_name(self, name):\n    if key == 'HTTP_CONTENT_LENGTH':\n        pass\n    elif key == 'HTTP_CONTENT_TYPE':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 1355
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n    elif ID :==LIT :\n        pass \n"
    },
    {
        "code": "def __getitem__(self, item):\n    return self.environ[self._trans_name(item)]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1356
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID [ID .ID (ID )]\n",
        "wrong_code": "finally def ID (ID ,ID ):\n    return ID .ID [ID .ID (ID )]\n"
    },
    {
        "code": "\ndef __setitem__(self, item, value):\n    self.environ[self._trans_name(item)] = value\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 1357
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID [ID .ID (ID )]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,None ID ):\n    ID .ID [ID .ID (ID )]=ID \n"
    },
    {
        "code": "\ndef __delitem__(self, item):\n    del self.environ[self._trans_name(item)]\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1358
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    del ID .ID [ID .ID (ID )]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    del ID .ID [ID .ID (ID )]\n    while "
    },
    {
        "code": "\ndef __iter__(self):\n    for key in self.environ:\n        name = self._trans_key(key)\n        if name is not None:\n            yield name\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 57,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1359
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        ID =ID .ID (ID )\n        if ID is not ID :\n            yield ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        ID =ID .ID LIT ID )\n        if ID is not ID :\n            yield ID \n"
    },
    {
        "code": "\ndef keys(self):\n    return list(iter(self))\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 40,
            "fix_type": "delete",
            "id": 1360
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID (ID ))\n:"
    },
    {
        "code": "\ndef __contains__(self, item):\n    return self._trans_name(item) in self.environ\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/webob_0_9/webob/datastruct.py",
            "fix_location": 38,
            "fix_type": "delete",
            "id": 1361
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID )in ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID .ID (yield ID )in ID .ID \n"
    },
    {
        "code": "def __init__(self, start_mark, end_mark):\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1362
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID as :\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __repr__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1363
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    pass ]\n"
    },
    {
        "code": "def __init__(self, name, value, start_mark, end_mark):\n    self.name = name\n    self.value = value\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 1364
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .yield ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, start_mark=None, end_mark=None,\n        encoding=None):\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n    self.encoding = encoding\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 1365
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ,\nID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID =ID ,ID =ID ,\nID =ID ):\n    ID .ID =ID \n    with ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, value, start_mark, end_mark):\n    self.value = value\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1366
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID )\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, value, start_mark, end_mark):\n    self.value = value\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 1367
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n    ID *.ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, value, start_mark, end_mark):\n    self.value = value\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 1368
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def for ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, value, plain, start_mark, end_mark, style=None):\n    self.start_mark = start_mark\n    self.end_mark = end_mark\n    self.style = style\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/AppServer/lib/yaml-3.10/yaml/tokens.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1369
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID =ID )\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, registered):\n    self.registered = registered\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1370
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "def deployment_id_exists(self):\n    return self.registered\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1371
        },
        "correct_code": "def ID (ID ):\n    return ID .ID \n",
        "wrong_code": "!def ID (ID ):\n    return ID .ID \n"
    },
    {
        "code": "def get_deployment_id(self):\n    return 'fake_id'\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1372
        },
        "correct_code": "def ID (ID ):\n    return LIT \n",
        "wrong_code": "def ID (ID ):\n    return LIT \nclass "
    },
    {
        "code": "def fetch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 1373
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID break ):\n    pass \n"
    },
    {
        "code": "def fetch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 1374
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    assert \n"
    },
    {
        "code": "def __init__(self, wrapped_class):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1375
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,ID ):\n    pass \nassert "
    },
    {
        "code": "def acquire(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1376
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "==def ID (ID ):\n    pass \n"
    },
    {
        "code": "def release(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1377
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID )\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    self.url = fake_url\n    self.body = fake_data\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1378
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (continue ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "def __init__(self, request, code):\n    self.request = request\n    self.code = code\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1379
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =\n"
    },
    {
        "code": "\ndef test_create_request(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1380
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef /(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_urlfetch(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1381
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef del ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_urlfetch_async(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1382
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_br_service_url(self):\n    fake_url = 'http://host:{0}{1}'.format(hermes_constants.BR_SERVICE_PORT,\n      hermes_constants.BR_SERVICE_PATH)\n    self.assertEquals(fake_url, helper.get_br_service_url('host'))\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1383
        },
        "correct_code": "\ndef ID (ID ):\n    ID =LIT .ID (ID .ID ,\n    ID .ID )\n    ID .ID (ID ,ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =LIT .ID (ID .ID ,\n    ID .ID )ID ID .ID (ID ,ID .ID (LIT ))\n"
    },
    {
        "code": "\ndef test_get_deployment_id(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1384
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):else     pass \n"
    },
    {
        "code": "\ndef test_get_node_info(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1385
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (global ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_br_json_data(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1386
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef None ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_delete_task_from_mem(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 1387
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_report_status(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1388
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nin "
    },
    {
        "code": "\ndef test_send_remote_request(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/Hermes/test/unit/test_helper.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1389
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )yield \n    pass \n"
    },
    {
        "code": "\ndef initialize(self, search_service):\n    \"\"\" Class for initializing search service web handler. \"\"\"\n    self.search_service = search_service\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/SearchService/search_server.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1390
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\n@tornado.web.asynchronous\ndef post(self):\n    if pb_type == \"Request\":\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/SearchService/search_server.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 1391
        },
        "correct_code": "\n@ID .ID .ID \ndef ID (ID ):\n    if ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID .ID .ID \ndef ID (ID as ):\n    if ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef get_application():\n    \"\"\" Retrieves the application to feed into tornado. \"\"\"\n    return tornado.web.Application([\n      (r\"/?\", MainHandler, dict(search_service=SearchService())),\n      ], )\n",
        "metadata": {
            "file": "py150_files/data/AppScale/appscale/SearchService/search_server.py",
            "fix_location": 61,
            "fix_type": "delete",
            "id": 1392
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    return ID .ID .ID ([\n    (LIT ,ID ,ID (ID =ID ())),\n    ],)\n",
        "wrong_code": "\n\ndef ID ():\n    LIT \n    return ID .ID .ID ([\n    (LIT ,ID ,,ID (ID =ID ())),\n    ],)\n"
    },
    {
        "code": "def __init__(self):\n    self.args =  (\"custom function not available\",)\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/FunctionCustom.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 1393
        },
        "correct_code": "def ID (ID ):\n    ID .ID =(LIT ,)\n",
        "wrong_code": "def ID (ID ):\n    ID .ID =(LIT ,\n"
    },
    {
        "code": "def __repr__(self):\n    return self.args[0]\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/FunctionCustom.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1394
        },
        "correct_code": "def ID (ID ):\n    return ID .ID [LIT ]\n",
        "wrong_code": "def (ID ):\n    return ID .ID [LIT ]\n"
    },
    {
        "code": "\ndef validate(modelXbrl, inferDecimals=False):\n    ValidateXbrlCalcs(modelXbrl, inferDecimals).validate()\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ValidateXbrlCalcs.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1395
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    ID (ID ,ID ).ID ()\n\n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    ID (ID ,ID ).ID )\n\n"
    },
    {
        "code": "def __init__(self, modelXbrl, inferDecimals=False):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ValidateXbrlCalcs.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1396
        },
        "correct_code": "def ID (ID ,ID ,ID =LIT ):\n    pass \n\n",
        "wrong_code": "def ID (ID ,ID ,ID =LIT ):\n    pass for \n"
    },
    {
        "code": "\n\ndef wrappedFactWithWeight(fact, weight, roundedValue):\n    return ObjectPropertyViewWrapper(fact, ( (\"weight\", weight), (\"roundedValue\", roundedValue)) )\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ValidateXbrlCalcs.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 1397
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    return ID (ID ,((LIT ,ID ),(LIT ,ID )))\n",
        "wrong_code": "\n\ndef ID (ID ID ,ID ):\n    return ID (ID ,((LIT ,ID ),(LIT ,ID )))\n"
    },
    {
        "code": "\ndef wrappedSummationAndItems(fact, roundedSum, boundSummationItems):\n    # items hash: sort by qname so we don't care about reordering of summation terms in linkbase updates\n    for b in sorted(boundSummationItems, key=lambda b: b.modelObject.qname):\n        pass\n                    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ValidateXbrlCalcs.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 1398
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\n    for ID in ID (ID ,ID =lambda ID :ID .ID .ID ):\n        pass \n\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n#COMMENT\n\ncontinue     for ID in ID (ID ,ID =lambda ID :ID .ID .ID ):\n        pass \n\n"
    },
    {
        "code": "def close(self):\n    if self in self.modelXbrl.views:\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1399
        },
        "correct_code": "def ID (ID ):\n    if ID in ID .ID .ID :\n        pass \n\n",
        "wrong_code": "def ID (ID ):\n    if ID in elif .ID .ID :\n        pass \n\n"
    },
    {
        "code": "def select(self):\n    self.tabWin.select(self.viewFrame)\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1400
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID (ID .ID )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID ID (ID .ID )\n"
    },
    {
        "code": "\ndef onClick(self, *args):\n    if self.modelXbrl:\n        self.modelXbrl.modelManager.cntlr.currentView = self\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1401
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    if ID .ID :\n        ID .ID .ID .ID .ID =ID \n\n",
        "wrong_code": "\ndef for ID (ID ,*ID ):\n    if ID .ID :\n        ID .ID .ID .ID .ID =ID \n\n"
    },
    {
        "code": "def leave(self, *args):\n    self.toolTipColId = None\n    self.toolTipRowId = None\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1402
        },
        "correct_code": "def ID (ID ,*ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,*ID ):\n    ID ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef motion(self, *args):\n    pass\n            \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1403
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    pass \n\n",
        "wrong_code": "\ndef ID (ID ,*ID try :\n    pass \n\n"
    },
    {
        "code": "\ndef contextMenu(self):\n    try:\n        return self.menu\n    except AttributeError:\n        self.menu = Menu( self.viewFrame, tearoff = 0 )\n        return self.menu\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 75,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1404
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        return ID .ID \n    except ID :\n        ID .ID =ID (ID .ID ,ID =LIT )\n        return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        return ID .ID \n    except ID :\n        ID ID =ID (ID .ID ,ID =LIT )\n        return ID .ID \n"
    },
    {
        "code": "\ndef bindContextMenu(self, widget):\n    if not widget.bind(self.contextMenuClick): \n        widget.bind( self.contextMenuClick, self.popUpMenu )\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1405
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if not ID .ID (ID .ID ):\n        ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if not as .ID (ID .ID ):\n        ID .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef popUpMenu(self, event):\n    self.menu.post( event.x_root, event.y_root )\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1406
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID ,ID .ID )\n",
        "wrong_code": "==\ndef ID (ID ,ID ):\n    ID .ID .ID (ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef menuAddLangs(self):\n    for lang in sorted(self.modelXbrl.langs):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1407
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID ID ID ):\n    for ID in ID (ID .ID .ID ):\n        pass \n"
    },
    {
        "code": "\ndef setLang(self, lang):\n    self.lang = lang\n    self.view()\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/ViewWinPane.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 1408
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):as \n    ID .ID =ID \n    ID .ID ()\n"
    },
    {
        "code": "def __init__(self, longName, shortName, htmlFileName):\n    self.longName = longName\n    self.shortName = shortName\n    self.htmlFileName = htmlFileName\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/SaveTableToExelle.py",
            "fix_location": 73,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1409
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID and "
    },
    {
        "code": "def __repr__(self):\n    return (\"report(longName='{}', shortName='{}', htmlFileName='{}')\"\n            .format(self.longName, self.shortName, self.htmlFileName))\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/SaveTableToExelle.py",
            "fix_location": 60,
            "fix_type": "delete",
            "id": 1410
        },
        "correct_code": "def ID (ID ):\n    return (LIT \n    .ID (ID .ID ,ID .ID ,ID .ID ))\n\n",
        "wrong_code": "def ID (ID ):\n    return (LIT \n    .ID (ID .ID ,ID .ID ,ID ./ID ))\n\n"
    },
    {
        "code": "def intCol(elt, attrName, default=None):\n    try:\n        return int(elt.get(attrName, default))\n    except (TypeError, ValueError):\n        return default\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/SaveTableToExelle.py",
            "fix_location": 94,
            "fix_type": "delete",
            "id": 1411
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    try :\n        return ID (ID .ID (ID ,ID ))\n    except (ID ,ID ):\n        return ID \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    try :\n        return ID (ID .ID (ID ,ID ))\n    except (ID ,ID ):/\n        return ID \n"
    },
    {
        "code": "def setTableInfosetOption(*args):\n    cntlr.config[\"generateTableInfoset\"] = cntlr.modelManager.generateTableInfoset = generateTableInfoset.get()\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/plugin/validateTableInfoset.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 1412
        },
        "correct_code": "def ID (*ID ):\n    ID .ID [LIT ]=ID .ID .ID =ID .ID ()\n",
        "wrong_code": "def ID (*ID ):\n    ID .ID [LIT ]=ID .ID .ID =ID .ID ([)\n"
    },
    {
        "code": "\ndef validateTableInfosetMenuEntender(cntlr, validateMenu):\n    def setTableInfosetOption(*args):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/plugin/validateTableInfoset.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 1413
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    def ID (*ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID )ID ):\n    def ID (*ID ):\n        pass \n"
    },
    {
        "code": "\ndef validateTableInfosetCommandLineOptionExtender(parser):\n    # extend command line options with a save DTS option\n    parser.add_option(\"--generate-table-infoset\", \n                      action=\"store_true\", \n                      dest=\"generateTableInfoset\", \n                      help=_(\"Generate table instance infosets (instead of diffing them).\"))\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/plugin/validateTableInfoset.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 1414
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,\n    ID =LIT ,\n    ID =LIT ,\n    ID =ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n#COMMENT\n\n    ID .ID (LIT ,\n    ID =LIT ,\n    ID =LIT ,pass \n    ID =ID (LIT ))\n"
    },
    {
        "code": "\ndef validateTableInfosetCommandLineXbrlLoaded(cntlr, options, modelXbrl, *args):\n    cntlr.modelManager.generateTableInfoset = getattr(options, \"generateTableInfoset\", False)\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/plugin/validateTableInfoset.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1415
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,*ID ):\n    ID .ID .ID =ID (ID ,LIT ,LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,*ID ):\n    ID .ID .ID =ID (,LIT ,LIT )\n"
    },
    {
        "code": "\ndef validateTableInfoset(modelXbrl, resultTableUri):\n    return True # blocks standard behavior in validate.py\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/examples/plugin/validateTableInfoset.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1416
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return LIT #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ,ID async :\n    return LIT #COMMENT\n\n"
    },
    {
        "code": "def __init__(self, node, code, message, **kwargs ):\n    self.args = ( self.__repr__(), )\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 1417
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,**ID ):\n    ID .ID =(ID .ID (),)\n",
        "wrong_code": "def ID (ID ,ID ,ID ,ID ,**ID ):\n    ID .ID =ID .ID (),)\n"
    },
    {
        "code": "def __repr__(self):\n    return _('[{0}] exception: {1} at {2}').format(self.code, self.message % self.kwargs, self.node.sourceFileLine)\n        \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1418
        },
        "correct_code": "def ID (ID ):\n    return ID (LIT ).ID (ID .ID ,ID .ID %ID .ID ,ID .ID .ID )\n\n",
        "wrong_code": "!=def ID (ID ):\n    return ID (LIT ).ID (ID .ID ,ID .ID %ID .ID ,ID .ID .ID )\n\n"
    },
    {
        "code": "def __init__(self, name):\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1419
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (global ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "def __repr__(self):\n    return self.name\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1420
        },
        "correct_code": "def ID (ID ):\n    return ID .ID \n",
        "wrong_code": "def for (ID ):\n    return ID .ID \n"
    },
    {
        "code": "def clearEvaluation(sphinxContext):\n    sphinxContext.tags.clear()\n    sphinxContext.localVariables.clear()\n    while sphinxContext.hyperspaceBindings:\n        sphinxContext.hyperspaceBindings.close() # resets sphinxContext.hyperspaceBindings to parent bindings\n        \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 84,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 1421
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID ()\n    ID .ID .ID ()\n    while ID .ID :\n        ID .ID .ID ()#COMMENT\n\n\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID ()\n    ID .ID .ID ()\n    while ID .ID :\n        ID .ID assert ID ()#COMMENT\n\n\n"
    },
    {
        "code": "\ndef evaluateAnnotationDeclaration(node, sphinxContext):\n    return None\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1422
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID )except \n    return ID \n"
    },
    {
        "code": "\ndef evaluateConstant(node, sphinxContext):\n    if node.value is None: # first time\n        if sphinxContext.formulaOptions.traceVariableSetExpressionEvaluation:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 72,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1423
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :#COMMENT\n\n        if ID .ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :#COMMENT\n\n        if ID .ID .ID \n            pass \n"
    },
    {
        "code": "\ndef evaluateFor(node, sphinxContext):\n    return evaluate(node.expr, sphinxContext)\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 1424
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID ,ID )\n    ,"
    },
    {
        "code": "\ndef clearFunctionArgs():\n    for name in argDict.keys():\n        del sphinxContext.localVariables[name]\n    sphinxContext.localVariables.update(overriddenVariables)\n    overriddenVariables.clear()\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 1425
        },
        "correct_code": "\ndef ID ():\n    for ID in ID .ID ():\n        del ID .ID [ID ]\n    ID .ID .ID (ID )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID ():\n    for ID in ID ID ():\n        del ID .ID [ID ]\n    ID .ID .ID (ID )\n    ID .ID ()\n"
    },
    {
        "code": "\ndef evaluateHyperspaceExpression(node, sphinxContext):\n    # add a hyperspaceBinding to sphinxContext for this node\n    hsBindings = sphinxContext.hyperspaceBindings\n    nodeBinding = hsBindings.nodeBinding(node)\n    return nodeBinding\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1426
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =ID .ID \n    ID =ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID =ID .\n    ID =ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef evaluateIf(node, sphinxContext):\n    if condition:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 1427
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID :\n        pass else :\n        pass \n"
    },
    {
        "code": "def evaluateTagExpr(tagExpr, modifier):\n    if modifier == \"value\":\n        pass\n    elif modifier == \"context\":\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1428
        },
        "correct_code": "def ID (ID ,ID ):\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ,ID ):.if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef evaluateMethodReference(node, sphinxContext):\n    for i, nodeArg in enumerate(node.args):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 1429
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID in ID (ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID with ):\n    for ID ,ID in ID (ID .ID ):\n        pass \n"
    },
    {
        "code": "\ndef evaluateNoOp(node, sphinxContext):\n    return None\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 1430
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    return ID \n"
    },
    {
        "code": "\ndef evaluateNumericLiteral(node, sphinxContext):\n    return node.value\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 1431
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID continue ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef evaluatePreconditionDeclaration(node, sphinxContext):\n    hsBindings = HyperspaceBindings(sphinxContext)\n    result = evaluate(node.expr, sphinxContext, value=True)\n    hsBindings.close()\n    return result\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1432
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID )\n    ID =ID (ID .ID ,ID ,ID =LIT )\n    ID .ID ()\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =in (ID )\n    ID =ID (ID .ID ,ID ,ID =LIT )\n    ID .ID ()\n    return ID \n"
    },
    {
        "code": "\ndef evaluateQnameLiteral(node, sphinxContext):\n    return node.value\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1433
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (,ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef evaluateReportRule(node, sphinxContext):\n    return None\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1434
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\nnot ID (ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\ndef evaluateRuleBasePrecondition(node, sphinxContext):\n    if node.precondition:\n        return evaluate(node.precondition, sphinxContext, value=True)\n    return True\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1435
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        return ID (ID .ID ,ID ,ID =LIT )\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if try .ID :\n        return ID (ID .ID ,ID ,ID =LIT )\n    return LIT \n"
    },
    {
        "code": "\ndef evaluateStringLiteral(node, sphinxContext):\n    return node.text\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1436
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ,=ID ):\n    return ID .ID \n"
    },
    {
        "code": "\ndef evaluateTagAssignment(node, sphinxContext):\n    result = evaluate(node.expr, sphinxContext, value=True)\n    sphinxContext.tags[node.tagName] = result\n    return result\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 47,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 1437
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID ,ID ,ID =LIT )\n    ID .ID [ID .ID ]=ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID ,ID ,ID =pass )\n    ID .ID [ID .ID ]=ID \n    return ID \n"
    },
    {
        "code": "\ndef evaluateTagReference(node, sphinxContext):\n    try:\n        pass\n    except KeyError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 42,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 1438
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass except ID :\n        pass \n"
    },
    {
        "code": "\ndef noop(arg):\n    return arg\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1439
        },
        "correct_code": "\ndef ID (ID ):\n    return ID \n",
        "wrong_code": "\ndef ID (ID )::    return ID \n"
    },
    {
        "code": "\ndef evaluateValuesIteration(node, sphinxContext):\n    if hsBindings.aggregationNode is None:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 1440
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID is ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ID ):\n    if ID .ID is ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef evaluateVariableAssignment(node, sphinxContext):\n    if node.tagName:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1441
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID .]:\n        pass \n"
    },
    {
        "code": "\ndef evaluateVariableReference(node, sphinxContext):\n    try:\n        pass\n    except KeyError:\n        if node.variableName in sphinxContext.constants:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 1442
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    except ID :\n        if ID .ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        pass \n    is except ID :\n        if ID .ID in ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef evaluateWith(node, sphinxContext):\n    try:\n        for varAssignNode in node.variableAssignments:\n            pass\n    except Exception as ex:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 37,
            "fix_type": "delete",
            "id": 1443
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        for ID in ID .ID :\n            pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        (for ID in ID .ID :\n            pass \n    except ID as ID :\n        pass \n"
    },
    {
        "code": "\ndef contextView(sphinxContext, fact=None):\n    if isinstance(fact, ModelFact):\n        pass\n    else:\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1444
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID (ID ,ID ):\n        pass \n    else :\n        pass \n\n",
        "wrong_code": "\ndef ID (ID ,ID =ID ):\n    if ID (ID ,ID ):global pass \n    else :\n        pass \n\n"
    },
    {
        "code": "def aspectName(aspect):\n    if isinstance(aspect, QName):\n        pass\n    if aspect in Aspect.label:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/sphinx/SphinxEvaluator.py",
            "fix_location": 94,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1445
        },
        "correct_code": "def ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    if ID in ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "def ID (ID ):\n    if ID (ID ,ID ):\n        pass \n    if ID in ID .ID :\n        pass \n    else async \n        pass \n"
    },
    {
        "code": "def enterConnectionString():\n    if db:\n        pass\n    else:  # deleted\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Arelle/Arelle/arelle/plugin/xbrlDB/DialogRssWatchExtender.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 1446
        },
        "correct_code": "def ID ():\n    if ID :\n        pass \n    else :#COMMENT\n\n        pass \n",
        "wrong_code": "def ID ():\n    if ID :\n        with pass \n    else :#COMMENT\n\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, preparer):\n    # The class that will prepare the features\n    self.preparer = preparer\n    # Flag to indicate if we have encountered the first element yet\n    self.first_elm = True\n    self.feat = None\n    self.recording = False\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 1447
        },
        "correct_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n    #COMMENT\n\n    ID .ID =LIT \n    ID .ID =ID \n    ID .ID =LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n#COMMENT\n\n    ID .ID =ID \n    #COMMENT\n\n    ID .ID =LIT \n    ID .ID ID =ID \n    ID .ID =LIT \n"
    },
    {
        "code": "\ndef characters(self, ch):\n    if len(ch.strip()) > 0:\n        if self.recording:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1448
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID (ID .ID ())>LIT :\n        if ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID (ID .ID ())>LIT :\n        if ID .ID :return pass \n        else :\n            pass \n"
    },
    {
        "code": "\n\ndef output(str):\n    try:\n        pass\n    except UnicodeEncodeError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1449
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):]    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, inputfile):\n    self.feat_types = []\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 1450
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =[]\n",
        "wrong_code": "\n[ID (ID ,ID ):\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef get_feat_types(self):\n    return self.feat_types\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1451
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ..\n"
    },
    {
        "code": "\ndef prepare_feature(self, feat_str):\n    return feat_str\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1452
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID \n",
        "wrong_code": "\n(def ID (ID ,ID ):\n    return ID \n"
    },
    {
        "code": "\n\ndef get_preparer(prep_class):\n    if len(parts) > 1:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/AstunTechnology/Loader/python/prepgml4ogr.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 1453
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID )>LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID (ID )>LIT :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, players, interactions, with_morality=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 1454
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef or ID (ID ,ID ,ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef build_all(self, with_morality):\n\n    if with_morality:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1455
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    if ID :\n        pass \n",
        "wrong_code": "not \ndef ID (ID ,ID ):\n\n    if ID :\n        pass \n"
    },
    {
        "code": "\n@property\ndef _null_results_matrix(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 1456
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID and (ID ):\n    pass \n"
    },
    {
        "code": "\ndef build_ranked_names(self):\n    \"\"\"\n        Returns:\n        --------\n            Returns the ranked names. A list of names as calculated by\n            self.ranking.\n        \"\"\"\n    return [str(self.players[i]) for i in self.ranking]\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 1457
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return [ID (ID .ID [ID ])for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return [ID (ID .ID [ID ])for ID in ID .ID finally \n"
    },
    {
        "code": "\ndef build_ranking(self):\n    \"\"\"\n        Returns:\n        --------\n\n            The ranking. List of the form:\n\n            [R1, R2, R3..., Rn]\n\n            Where n is the number of players and Rj is the rank of the jth player\n            (based on median normalised score).\n        \"\"\"\n    return sorted(range(self.nplayers),\n                  key=lambda i: -nanmedian(self.normalised_scores[i]))\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1458
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID (ID .ID ),\n    ID =lambda ID :-ID (ID .ID [ID ]))\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID (ID .ID ),\n    ID =lambda ID :-ID (ID .ID [/]))\n"
    },
    {
        "code": "\ndef build_payoff_matrix(self):\n\n    for player in plist:\n        for opponent in plist:\n\n            if utilities:\n                pass\n            else:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 117,
            "fix_type": "insert",
            "fix_token": "",
            "id": 1459
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID :\n        for ID in ID :\n\n            if ID :\n                pass \n            else :\n                pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    for ID in ID :\n        for ID in ID :\n\n            if ID :\n                pass \n                else :\n                pass \n    "
    },
    {
        "code": "\ndef build_payoff_stddevs(self):\n\n    for player in plist:\n        for opponent in plist:\n\n            if utilities:\n                pass\n            else:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 141,
            "fix_type": "delete",
            "id": 1460
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID :\n        for ID in ID :\n\n            if ID :\n                pass \n            else :\n                pass \n",
        "wrong_code": "\ndef ID (ID ):\n\n    for ID in ID :\n        for ID in ID :\n\n            if ID :\n                pass \n            else :\n                pass return \n"
    },
    {
        "code": "\ndef build_vengeful_cooperation(self):\n    \"\"\"\n        Returns:\n        --------\n\n            The vengeful cooperation matrix derived from the\n            normalised cooperation matrix:\n\n                Dij = 2(Cij - 0.5)\n        \"\"\"\n    return [[2 * (element - 0.5) for element in row]\n            for row in self.normalised_cooperation]\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 88,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 1461
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return [[LIT *(ID -LIT )for ID in ID ]\n    for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return [[LIT *(ID -LIT )for ID in ID ]\n    for ID in ID .ID \n"
    },
    {
        "code": "\ndef build_cooperating_rating(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 1462
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    not \n"
    },
    {
        "code": "\ndef build_good_partner_rating(self):\n\n    for player_index in plist:\n        for rep in self.interactions:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1463
        },
        "correct_code": "\ndef ID (ID ):\n\n    for ID in ID :\n        for ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):)\n    for ID in ID :\n        for ID in ID .ID :\n            pass \n"
    },
    {
        "code": "\ndef build_eigenjesus_rating(self):\n    \"\"\"\n        Returns:\n        --------\n\n        The eigenjesus rating as defined in:\n        http://www.scottaaronson.com/morality.pdf\n        \"\"\"\n    eigenvector, eigenvalue = eigen.principal_eigenvector(\n            self.normalised_cooperation)\n    return eigenvector.tolist()\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 1464
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID (\n    ID .ID )\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    global ID ,ID =ID .ID (\n    ID .ID )\n    return ID .ID ()\n"
    },
    {
        "code": "\ndef build_eigenmoses_rating(self):\n    \"\"\"\n        Returns:\n        --------\n\n        The eigenmoses rating as defined in:\n        http://www.scottaaronson.com/morality.pdf\n        \"\"\"\n    eigenvector, eigenvalue = eigen.principal_eigenvector(\n            self.vengeful_cooperation)\n    return eigenvector.tolist()\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 1465
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID (\n    ID .ID )\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID )import \n    LIT \n    ID ,ID =ID .ID (\n    ID .ID )\n    return ID .ID ()\n"
    },
    {
        "code": "\ndef csv(self):\n    for irep in range(self.nrepetitions):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 1466
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID (ID .ID ):\n\n"
    },
    {
        "code": "\ndef __init__(self, filename, with_morality=True):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "LIT",
            "id": 1467
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =):\n    pass \n"
    },
    {
        "code": "\ndef _string_to_interactions(self, string):\n    \"\"\"\n        Converts a compact string representation of an interaction to an\n        interaction:\n\n        'CDCDDD' -> [('C', 'D'), ('C', 'D'), ('D', 'D')]\n        \"\"\"\n    return iu.string_to_interactions(string)\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/result_set.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 1468
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT return ID .ID (ID )\n"
    },
    {
        "code": "\n@staticmethod\ndef strategy(opponent):\n    \"\"\"\n        Alters the opponents strategy method to be a lambda function which\n        always returns C. This player will then always return D to take\n        advantage of this\n        \"\"\"\n\n    opponent.strategy = lambda opponent: C\n    return D\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/strategies/mindcontrol.py",
            "fix_location": 41,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 1469
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n\n    ID .ID =lambda ID :ID \n    return ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n\n    ID .ID lambda ID :ID \n    return ID \n"
    },
    {
        "code": "\ndef __setattr__(self, name, val):\n    if name == 'strategy':\n        pass\n    else:\n        self.__dict__[name] = val\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/strategies/mindcontrol.py",
            "fix_location": 82,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1470
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID ==LIT :\n        pass \n    else :\n        ID .ID [ID ]=ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID ==LIT :\n        pass \n    else :\n        ID .ID [=]=ID \n"
    },
    {
        "code": "\n@staticmethod\ndef strategy(opponent):\n    opponent.strategy = lambda opponent: C\n    return D\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/strategies/mindcontrol.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 1471
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    ID .ID =lambda ID :ID \n    return ID \n",
        "wrong_code": "\n@assert ID \ndef ID (ID ):\n    ID .ID =lambda ID :ID \n    return ID \n"
    },
    {
        "code": "\n@staticmethod\ndef strategy(opponent):\n    opponent.__dict__['strategy'] = lambda opponent: C\n    return D\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/strategies/mindcontrol.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 1472
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    ID .ID [LIT ]=lambda ID :ID \n    return ID \n",
        "wrong_code": "\n==ID \ndef ID (ID ):\n    ID .ID [LIT ]=lambda ID :ID \n    return ID \n"
    },
    {
        "code": "\n@classmethod\ndef setUpClass(cls):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_ecosystem.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 1473
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    pass \ntry "
    },
    {
        "code": "\ndef test_init(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_ecosystem.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1474
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "from \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_cooperators(self):\n    for p in pops:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_ecosystem.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 1475
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for continue ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef test_defector_wins(self):\n    for p in pops:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_ecosystem.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 1476
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID :\n        del pass \n"
    },
    {
        "code": "\ndef test_payoff_matrix(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 1477
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nlambda def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_qs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1478
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    not "
    },
    {
        "code": "\ndef test_vs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 1479
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID +:\n    pass \n"
    },
    {
        "code": "\ndef test_prev_state_updates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 1480
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):is \n    pass \n"
    },
    {
        "code": "\ndef test_strategy(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1481
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass is "
    },
    {
        "code": "\ndef test_reset_method(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 1482
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID and ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_qs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1483
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    not "
    },
    {
        "code": "\ndef test_vs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1484
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass LIT "
    },
    {
        "code": "\ndef test_prev_state_updates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 1485
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    :\n"
    },
    {
        "code": "\ndef test_strategy(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1486
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):ID     pass \n"
    },
    {
        "code": "\ndef test_reset_method(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1487
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    ="
    },
    {
        "code": "\ndef test_qs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 1488
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \ndef "
    },
    {
        "code": "\ndef test_vs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 1489
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "-\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_prev_state_updates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 1490
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nimport     pass \n"
    },
    {
        "code": "\ndef test_strategy(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1491
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "as def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_reset_method(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1492
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):del     pass \n"
    },
    {
        "code": "\ndef test_qs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 1493
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):in     pass \n"
    },
    {
        "code": "\ndef test_vs_update(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 1494
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID and (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_prev_state_updates(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 1495
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_strategy(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 1496
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass yield \n"
    },
    {
        "code": "\ndef test_reset_method(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/Axelrod-Python/Axelrod/axelrod/tests/unit/test_qlearner.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 1497
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef import (ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, service_endpoint, access_token):\n    self._service_endpoint = service_endpoint\n    self._access_token = access_token\n",
        "metadata": {
            "file": "py150_files/data/Azure/Azure-MachineLearning-ClientLibrary-Python/azureml/http.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 1498
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (=ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get_experiments(self, workspace_id):\n    \"\"\"Runs HTTP GET request to retrieve the list of experiments.\"\"\"\n    api_path = self.EXPERIMENTS_URI_FMT.format(workspace_id)\n    return self._send_get_req(api_path)\n",
        "metadata": {
            "file": "py150_files/data/Azure/Azure-MachineLearning-ClientLibrary-Python/azureml/http.py",
            "fix_location": 76,
            "fix_type": "delete",
            "id": 1499
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )yield \n"
    },
    {
        "code": "\ndef get_datasets(self, workspace_id):\n    \"\"\"Runs HTTP GET request to retrieve the list of datasets.\"\"\"\n    api_path = self.DATASOURCES_URI_FMT.format(workspace_id)\n    return self._send_get_req(api_path)\n",
        "metadata": {
            "file": "py150_files/data/Azure/Azure-MachineLearning-ClientLibrary-Python/azureml/http.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 1500
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID from ,ID ):\n    LIT \n    ID =ID .ID .ID (ID )\n    return ID .ID (ID )\n"
    }
]