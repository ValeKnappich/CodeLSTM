[
    {
        "code": "\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_coords.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39001
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "class \ndef ID ():\n    pass \n"
    },
    {
        "code": "\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_fluent.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39002
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\nID ():\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    super(BackgroundLayer, self).__init__()\n    self.img = pyglet.resource.image('background_image.png')\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_move_corner_down.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39003
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):+\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef draw( self ):\n    self.transform()\n    self.img.blit(0,0)\n    gl.glPopMatrix()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_move_corner_down.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39004
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT :\n    ID .ID ()\n"
    },
    {
        "code": "\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_move_corner_down.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39005
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "class \ndef ID ():\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    super(BackgroundLayer, self).__init__()\n    self.img = pyglet.resource.image('background_image.png')\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_reverse_time.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39006
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID (ID ,ID ).ID (\n    ID .ID =ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef draw( self ):\n    self.transform()\n    self.img.blit(0,0)\n    gl.glPopMatrix()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_reverse_time.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39007
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT raise \n    ID .ID ()\n"
    },
    {
        "code": "\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_reverse_time.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39008
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():nonlocal \n    pass \n"
    },
    {
        "code": "\ndef load_texture(fname):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39009
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):assert     pass \n"
    },
    {
        "code": "\ndef __init__(self, textures, available_programs, base_color):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39010
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "!\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef on_enter(self):\n    super(TestLayer, self).on_enter()\n    self.start_time = time.time()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 57,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39011
        },
        "correct_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID )\n"
    },
    {
        "code": "\ndef draw(self):\n\n    if self.shader_program:\n        pass\n    else:\n        pass\n\n    if self.shader_program:\n        pass\n    else:\n        pass\n    \n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39012
        },
        "correct_code": "\ndef ID (ID ):\n\n    if ID .ID :\n        pass \n    else :\n        pass \n\n    if ID .ID :\n        pass \n    else :\n        pass \n\n",
        "wrong_code": "\ndef ID ID ):\n\n    if ID .ID :\n        pass \n    else :\n        pass \n\n    if ID .ID :\n        pass \n    else :\n        pass \n\n"
    },
    {
        "code": "\ndef update(self, dt):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39013
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\nglobal ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('yellow', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39014
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@None ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39015
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID ID ()\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39016
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID :\n    ID .ID ()\n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('prog_color', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 59,
            "fix_type": "delete",
            "id": 39017
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )!=\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n    self.uset4F('color', *provider.color)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 48,
            "fix_type": "delete",
            "id": 39018
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,*ID .ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT is ,*ID .ID )\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39019
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID class ID ()\n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('gradient', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39020
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID (ID )break :\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39021
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID ID ,ID ):\n    ID .ID ()\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39022
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    .ID ()\n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('texture_only', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 58,
            "fix_type": "delete",
            "id": 39023
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID try )\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n    self.usetTex('tex', 0, GL_TEXTURE_2D, provider.texture.id)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 3,
            "fix_type": "delete",
            "id": 39024
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT ,ID ,ID .ID .ID )\n",
        "wrong_code": "def !ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT ,ID ,ID .ID .ID )\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39025
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID )in \n    ID .ID ()\n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('texture_tinted', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39026
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n    self.usetTex('tex', 0, GL_TEXTURE_2D, provider.texture.id)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 53,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 39027
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT ,ID ,ID .ID .ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT \n    ID ,ID .ID .ID )\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39028
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "==def ID (ID ):\n    ID .ID ()\n"
    },
    {
        "code": "@classmethod\ndef create(cls):\n    return cls.simple_program('texture_tinted_darkened', cls.vertex_code, cls.fragment_code)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39029
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID (None ):\n    return ID .ID (LIT ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "def set_state(self, provider):\n    self.install()\n    self.usetTex('tex', 0, GL_TEXTURE_2D, provider.texture.id)\n    self.uset1F('blackness', provider.blackness)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 70,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39030
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT ,ID ,ID .ID .ID )\n    ID .ID (LIT ,ID .ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID ()\n    ID .ID (LIT ,LIT ,ID ,ID .ID .ID )ID .ID (LIT ,ID .ID )\n"
    },
    {
        "code": "def unset_state(self):\n    self.uninstall()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39031
        },
        "correct_code": "def ID (ID ):\n    ID .ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .ID (except \n"
    },
    {
        "code": "\n\ndef get_available_programs():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 39032
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef lambda ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_shader_examples.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39033
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_togglevisibility.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39034
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef main():\n    director.init()\n    test_layer = TestLayer ()\n    main_scene = cocos.scene.Scene (test_layer)\n    director.run (main_scene)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_togglevisibility.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39035
        },
        "correct_code": "\ndef ID ():\n    ID .ID ()\n    ID =ID ()\n    ID =ID .ID .ID (ID )\n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID ():\n    ID .ID )\n    ID =ID ()\n    ID =ID .ID .ID (ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "def __init__(self):\n    super(BackgroundLayer, self).__init__()\n    self.img = pyglet.resource.image('background_image.png')\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_wavestiles3d_fullscreen.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39036
        },
        "correct_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    ID .ID =ID .ID .ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID (ID ,ID ).ID ()\n    yield .ID =ID .ID .ID (LIT )\n"
    },
    {
        "code": "\ndef draw( self ):\n    self.transform()\n    self.img.blit(0,0)\n    gl.glPopMatrix()\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_wavestiles3d_fullscreen.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39037
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT )\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ()\n    ID .ID .ID (LIT ,LIT )\n    ID .ID ()\nnot "
    },
    {
        "code": "\ndef toggle_fullscreen():\n    director.window.set_fullscreen( not director.window.fullscreen )\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_wavestiles3d_fullscreen.py",
            "fix_location": 35,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39038
        },
        "correct_code": "\ndef ID ():\n    ID .ID .ID (not ID .ID .ID )\n",
        "wrong_code": "\ndef ID ():\n    ID .ID .ID (not ID else ID .ID )\n"
    },
    {
        "code": "\ndef main():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/test/test_wavestiles3d_fullscreen.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39039
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\nwith def ID ():\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    self.event = None\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/pyglet_mockup1/pyglet/app/__init__.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39040
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ):\n    ID ID =ID \n"
    },
    {
        "code": "def run(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/pyglet_mockup1/pyglet/app/__init__.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39041
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID ):\n    pass \n    await "
    },
    {
        "code": "\ndef pytest_generate_tests(metafunc):\n    for v in values:\n        pass\n    for k in scenarios:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 32,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39042
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        pass \n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID \n        pass \n    for ID in ID :\n        pass \n"
    },
    {
        "code": "def init(self, name, duration):\n    rec.append((name, 'init'))\n    self.duration = duration\n    self.name = name\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 39043
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID ((ID ,LIT ))\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID ((ID ,LIT ))\n    ID .ID =ID \n    ID finally .ID =ID \n"
    },
    {
        "code": "\ndef start(self):\n    rec.append((self.name, 'start'))\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39044
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((ID .ID ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\nif     ID .ID ((ID .ID ,LIT ))\n"
    },
    {
        "code": "\ndef step(self, dt):\n    rec.append((self.name, 'step', dt))\n    super(UIntervalAction, self).step(dt)\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39045
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ((ID .ID ,LIT ,ID ))\n    ID (ID ,ID ).ID (ID )\n",
        "wrong_code": "\n-ID (ID ,ID ):\n    ID .ID ((ID .ID ,LIT ,ID ))\n    ID (ID ,ID ).ID (ID )\n"
    },
    {
        "code": "\ndef update(self, fraction):\n    rec.append((self.name, 'update', fraction))\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39046
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID ((ID .ID ,LIT ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID ((ID .ID ,LIT ,ID ))\n    global "
    },
    {
        "code": "\ndef stop(self):\n    rec.append((self.name, 'stop'))\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 39047
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ((ID .ID ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ((ID .ID ,LIT ))\n    with "
    },
    {
        "code": "def test_instantiation(self, duration1, duration2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 7,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39048
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID ID ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_start(self, duration1, duration2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39049
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,del ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_target_set(self, duration1, duration2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39050
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):==    pass \n"
    },
    {
        "code": "\ndef test_update_crossing_min_not_max_at_1st_step(self, duration1, duration2):\n    if not need_test:\n        pass\n    if duration1 < duration2:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 92,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39051
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID :\n        pass \n    if ID <ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID :\n        pass \n    if ID <ID :\n        pass \n    else -\n        pass \n"
    },
    {
        "code": "\ndef test_update_crossing_max_at_1st_step(self, duration1, duration2):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39052
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (as ,ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef update_crossing_max_from_below_min(self, duration1, duration2):\n    try:\n        pass\n    except ZeroDivisionError:\n        pass\n    if not need_test:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 39053
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n    if not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n    global not ID :\n        pass \n"
    },
    {
        "code": "\ndef test_update_crossing_max_from_above_min(self, duration1, duration2):\n    if not need_test:\n        pass\n    # expected: no call from action with min duration, two calls from the\n    # action with max duration: .update(1) and .stop() in that order\n    if duration1 < duration2:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/los-cocos/cocos/utest/test_p_ba_Spawn_IntervalAction.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 39054
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if not ID :\n        pass \n        #COMMENT\n\n        #COMMENT\n\n    if ID <ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    None not ID :\n        pass \n        #COMMENT\n\n        #COMMENT\n\n    if ID <ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef objects():\n    \n    for i in range(200):\n        if i % 7:\n            pass\n    \n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/docs/tutorials/matrix_tutorial/fixtures/demo.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39055
        },
        "correct_code": "\ndef ID ():\n\n    for ID in ID (LIT ):\n        if ID %LIT :\n            pass \n\n",
        "wrong_code": "\ndef ID (except ):\n\n    for ID in ID (LIT ):\n        if ID %LIT :\n            pass \n\n"
    },
    {
        "code": "\n\ndef runserver(settings_module, func, driver=None):\n\n    # print(\"Started subprocess {0}\".format(server.pid))\n\n    if driver is None:\n        pass\n\n    try:\n        pass\n    finally:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 59,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 39056
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n\n#COMMENT\n\n\n    if ID is ID :\n        pass \n\n    try :\n        pass \n    finally :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n\n#COMMENT\n\n\n    if ID is ID :\n\n\n    try :\n        pass \n    finally :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, driver, root=None, title=\"Screenshots\",\n             ref=None, intro=None):\n\n    if root is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 58,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 39057
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,\nID =ID ,ID =ID ):\n\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,\nID =ID ,ID =ID ):\n\n    ID is not ID :\n        pass \n"
    },
    {
        "code": "\ndef checktitle(self, title):\n    if self.driver.title != title:\n        sys.exit(-1)\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39058
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID !=ID :\n        ID .ID (-LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID )elif \n    if ID .ID .ID !=ID :\n        ID .ID (-LIT )\n"
    },
    {
        "code": "\ndef screenshot(self, name, caption, before='', after=''):\n    if not self.driver.get_screenshot_as_file(filename):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 92,
            "fix_type": "delete",
            "id": 39059
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ):\n    if not ID .ID .ID (ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID =LIT ,ID =LIT ):\n    if not ID .ID .ID (ID ):\n        pass \n        assert "
    },
    {
        "code": "\ndef error(self, msg):\n    raise Exception(msg)\n    # print(msg)\n    # sys.exit(-1)\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39060
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    raise ID (ID )\n    #COMMENT\n\n    #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ID ):\n    raise ID (ID )\n    #COMMENT\n\n    #COMMENT\n\n"
    },
    {
        "code": "\ndef doubleclick(self, elem):\n    self.actionChains.double_click(elem).perform()\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39061
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID ).ID ()\n",
        "wrong_code": "finally def ID (ID ,ID ):\n    ID .ID .ID (ID ).ID ()\n"
    },
    {
        "code": "\ndef hover(self, elem):\n    self.actionChains.move_to_element(elem).perform()\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39062
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID .ID (ID ).ID ()\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID .ID (ID ).ID ()\n"
    },
    {
        "code": "\ndef stabilize(self):\n    pass\n        \n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/api/selenium.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39063
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n\n",
        "wrong_code": "\ndef ID (ID )import \n    pass \n\n"
    },
    {
        "code": "\ndef has_required_roles(self, required_roles):\n    \"\"\"Return `True` if this role satisfies the specified roles.\n\n        The specified arguments are the set of role requirements\n        (class objects).  This role (an instance) must satisfy *every*\n        specified requirement.  Every requirement is either a class\n        object (subclass of :class:`<UserRole>`) or a tuple thereof.\n\n        \"\"\"\n    check_required_roles(required_roles, \"code\")\n    for rr in required_roles:\n        if not isinstance(self, rr):\n            return False\n    return True\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/core/roles.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 39064
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,LIT )\n    for ID in ID :\n        if not ID (ID ,ID ):\n            return LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):with \n    LIT \n    ID (ID ,LIT )\n    for ID in ID :\n        if not ID (ID ,ID ):\n            return LIT \n    return LIT \n"
    },
    {
        "code": "\n@classmethod\ndef get_user_profiles(cls):\n    for p in UserProfiles.items():\n        if p.has_required_roles([cls]):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/core/roles.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 39065
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID in ID .ID ():\n        if ID .ID ([ID ]):\n            pass \n",
        "wrong_code": "\n@with ID \ndef ID (ID ):\n    for ID in ID .ID ():\n        if ID .ID ([ID ]):\n            pass \n"
    },
    {
        "code": "\n\ndef login_required(*args):\n    \"\"\"An API shortcut available in :mod:`lino.api.dd`. See\n    :meth:`lino.modlib.users.choicelists.UserProfile.has_required_role`\n\n    \"\"\"\n    if len(args):\n        return set(args)\n    return set([SiteUser])\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/core/roles.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39066
        },
        "correct_code": "\n\ndef ID (*ID ):\n    LIT \n    if ID (ID ):\n        return ID (ID )\n    return ID ([ID ])\n",
        "wrong_code": "\n\ndef ID *ID ):\n    LIT \n    if ID (ID ):\n        return ID (ID )\n    return ID ([ID ])\n"
    },
    {
        "code": "\n\ndef check_role(rr, actor):\n    if not issubclass(rr, UserRole):\n        raise Exception(\n            \"{0} (required on {1}) is not a UserRole\".format(rr, actor))\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/core/roles.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39067
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID (ID ,ID ):\n        raise ID (\n        LIT .ID (ID ,ID ))\n",
        "wrong_code": "\n\ndef ID lambda (ID ,ID ):\n    if not ID (ID ,ID ):\n        raise ID (\n        LIT .ID (ID ,ID ))\n"
    },
    {
        "code": "\ndef get_used_libs(self, html=None):\n    if html:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/awesomeuploader/__init__.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39068
        },
        "correct_code": "\ndef ID (ID ,ID =ID ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef not (ID ,ID =ID ):\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef get_css_includes(self, site):\n    yield self.build_media_url('AwesomeUploader.css')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/awesomeuploader/__init__.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39069
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    yield ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    yield ID .ID (LIT =\n"
    },
    {
        "code": "\ndef get_js_includes(self, settings, language):\n    yield self.build_media_url('swfupload.swfobjectjs')\n    yield self.build_media_url('AwesomeUploader.js')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/awesomeuploader/__init__.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39070
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    yield ID .ID (LIT )\n    yield ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,),ID ):\n    yield ID .ID (LIT )\n    yield ID .ID (LIT )\n"
    },
    {
        "code": "\ndef setup_main_menu(config, site, profile, m):\n    mg = site.plugins.office\n    m = m.add_menu(mg.app_label, mg.verbose_name)\n    m.add_action('awesomeuploader.UploaderPanel')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/awesomeuploader/__init__.py",
            "fix_location": 84,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39071
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID .ID \n    ID =ID .ID (ID .ID ,ID .ID )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID .ID \n    ID =ID .ID (ID .ID ,ID .ID )\n    try .ID (LIT )\n"
    },
    {
        "code": "\n\ndef _test():\n    import doctest\n    doctest.testmod()\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/contacts/utils.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39072
        },
        "correct_code": "\n\ndef ID ():\n    import ID \n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID ()or :\n    import ID \n    ID .ID ()\n"
    },
    {
        "code": "\n\ndef sepjoin(items, sep=', '):\n    for i in items:\n        if len(rv):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 39073
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    for ID in ID :\n        if ID (ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ):\n    for ID in ID :\n        if for ID (ID ):\n            pass \n"
    },
    {
        "code": "\ndef EventsByType(self, year=None, **kw):\n\n    if year is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 46,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39074
        },
        "correct_code": "\ndef ID (ID ,ID =ID ,**ID ):\n\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =ID ,**ID ):\n\n    if ID is ID LIT \n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return str(self.city)\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 38,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39075
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID .ID )or "
    },
    {
        "code": "\ndef get_siblings(self):\n    return self.event.stages.order_by('seqno')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39076
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID .ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID .ID .ID (LIT )\nimport "
    },
    {
        "code": "\n@dd.displayfield(string_concat(_(\"When\"), \"?\"))\ndef when(self, obj, ar):\n    if obj.url:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 87,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39077
        },
        "correct_code": "\n@ID .ID (ID (ID (LIT ),LIT ))\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\n@ID .ID (ID (ID (LIT ),LIT ))\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n    or "
    },
    {
        "code": "\n@dd.displayfield(string_concat(_(\"Where\"), \"?\"))\ndef where(self, obj, ar):\n    if obj.place is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 28,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39078
        },
        "correct_code": "\n@ID .ID (ID (ID (LIT ),LIT ))\ndef ID (ID ,ID ,ID ):\n    if ID .ID is not ID :\n        pass \n",
        "wrong_code": "\n@ID .ID (ID (ID (LIT ),LIT )\ndef ID (ID ,ID ,ID ):\n    if ID .ID is not ID :\n        pass \n"
    },
    {
        "code": "\n@dd.displayfield(string_concat(_(\"What\"), \"?\"))\ndef what(self, obj, ar):\n    if obj.name:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39079
        },
        "correct_code": "\n@ID .ID (ID (ID (LIT ),LIT ))\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n",
        "wrong_code": "\n@ID .ID (ID (ID (LIT )else ,LIT ))\ndef ID (ID ,ID ,ID ):\n    if ID .ID :\n        pass \n"
    },
    {
        "code": "#~ column_names = \"when what where\"\n\n@classmethod\ndef get_column_names(self, ar):\n    return ar.master_instance.events_column_names\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 39080
        },
        "correct_code": "#COMMENT\n\n\n@ID \ndef ID (ID ,ID ):\n    return ID .ID .ID \n",
        "wrong_code": "#COMMENT\n\n\n@ID \ndef ID (ID ,ID ):\n    return ID .ID .ID ]\n"
    },
    {
        "code": "\n@classmethod\ndef get_handle_name(self, ar):\n    hname = _handle_attr_name\n    #~ hname = super(PrintEntriesByBudget,self).get_handle_name(ar)\n    hname += ar.master_instance.events_column_names.replace(\" \", \"_\")\n    return hname\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/events/models.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39081
        },
        "correct_code": "\n@ID \ndef ID (ID ,ID ):\n    ID =ID \n    #COMMENT\n\n    ID +=ID .ID .ID .ID (LIT ,LIT )\n    return ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ,ID ):\n    ID =ID \n    #COMMENT\n\n    ID +=ID .ID ID .ID (LIT ,LIT )\n    return ID \n"
    },
    {
        "code": "\ndef on_site_startup(self, site):\n    \"\"\"Set :attr:`responsible_user` to ``\"'robin'`` if this is a demo site\n        (:attr:`is_demo_site <lino.core.site.Site.is_demo_site>`).\n\n        \"\"\"\n    super(Plugin, self).on_site_startup(site)\n    if site.is_demo_site:\n        self.configure(responsible_user='robin')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/plausibility/__init__.py",
            "fix_location": 5,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39082
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (ID )\n    if ID .ID :\n        ID .ID (ID =LIT )\n",
        "wrong_code": "\ndef (ID ,ID ):\n    LIT \n    ID (ID ,ID ).ID (ID )\n    if ID .ID :\n        ID .ID (ID =LIT )\n"
    },
    {
        "code": "\ndef setup_main_menu(self, site, profile, m):\n    g = site.plugins.office\n    m = m.add_menu(g.app_label, g.verbose_name)\n    m.add_action('plausibility.MyProblems')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/plausibility/__init__.py",
            "fix_location": 16,
            "fix_type": "delete",
            "id": 39083
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID .ID .ID \n    ID =ID .ID (ID .ID ,ID .ID )\n    ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID with ,ID ,ID ):\n    ID =ID .ID .ID \n    ID =ID .ID (ID .ID ,ID .ID )\n    ID .ID (LIT )\n"
    },
    {
        "code": "\ndef setup_explorer_menu(config, site, profile, m):\n    pass\n    # m.add_action('plausibility.Severities')\n    # m.add_action('plausibility.Feedbacks')\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/modlib/plausibility/__init__.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39084
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    pass \n    #COMMENT\n\n    #COMMENT\n\n",
        "wrong_code": "in def ID (ID ,ID ,ID ,ID ):\n    pass \n    #COMMENT\n\n    #COMMENT\n\n"
    },
    {
        "code": "\ndef get_installed_apps(self):\n    yield super(Site, self).get_installed_apps()\n    yield 'lino.modlib.system'\n    yield 'lino.projects.babel_tutorial'\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/projects/babel_tutorial/settings.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39085
        },
        "correct_code": "\ndef ID (ID ):\n    yield ID (ID ,ID ).ID ()\n    yield LIT \n    yield LIT \n",
        "wrong_code": "\ndef ID (ID )\n    yield ID (ID ,ID ).ID ()\n    yield LIT \n    yield LIT \n"
    },
    {
        "code": "\ndef setup_menu(self, profile, main):\n    m = main.add_menu(\"products\", \"Products\")\n    m.add_action(self.modules.babel_tutorial.Products)\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/projects/babel_tutorial/settings.py",
            "fix_location": 62,
            "fix_type": "delete",
            "id": 39086
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .ID (ID .ID .ID .ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    ID =ID .ID (LIT ,LIT )\n    ID .ID ([ID .ID .ID .ID )\n"
    },
    {
        "code": "\n\ndef merge_pdfs(pdfs, output_name):\n\n    for input_name in pdfs:\n        #~ print \"%s has %s pages.\" % (input_name, input.getNumPages())\n        for page in input.pages:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/lsaffre/lino/lino/utils/pdf.py",
            "fix_location": 98,
            "fix_type": "delete",
            "id": 39087
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n    for ID in ID :\n    #COMMENT\n\n        for ID in ID .ID :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n\n    for ID in ID :\n    #COMMENT\n\n        for ID in ID .ID :\n            pass *\n"
    },
    {
        "code": "def __init__(self, default_backend=None, install_global=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39088
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "def ID (ID ,pass =ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\n@property\ndef default_backend(self):\n    '''The default backend for this :class:`Router`. This is used when\ncalling the :meth:`register` method without explicitly passing a backend.'''\n    return self._default_backend\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39089
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "\n@ID \ndef ID (ID ==):\n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\n@property\ndef registered_models(self):\n    '''List of registered :class:`Model`.'''\n    return list(self._registered_models)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39090
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID ,ID .ID )\n"
    },
    {
        "code": "\n@property\ndef search_engine(self):\n    '''The :class:`SearchEngine` for this :class:`Router`. This\nmust be created by users. Check :ref:`full text search <tutorial-search>`\ntutorial for information.'''\n    return self._search_engine\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39091
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID \n",
        "wrong_code": "class @ID \ndef ID (ID ):\n    LIT \n    return ID .ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '%s %s' % (self.__class__.__name.__, self._registered_models)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 39092
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID .ID ,ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT %(ID .ID .ID .ID ,ID .except ID )\n"
    },
    {
        "code": "\ndef __str__(self):\n    return str(self._registered_models)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 39093
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID ID (ID ):\n    return ID (ID .ID )\n"
    },
    {
        "code": "\ndef __contains__(self, model):\n    return model in self._registered_models\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39094
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID in ID .ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return in ID .ID \n"
    },
    {
        "code": "\ndef __getitem__(self, model):\n    return self._registered_models[model]\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39095
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return .ID [ID ]\n"
    },
    {
        "code": "\ndef __getattr__(self, name):\n    if name in self._registered_names:\n        return self._registered_names[name]\n    raise AttributeError('No model named \"%s\"' % name)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 32,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39096
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID in ID .ID :\n        return ID .ID [ID ]\n    raise ID (LIT %ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if ID in yield .ID :\n        return ID .ID [ID ]\n    raise ID (LIT %ID )\n"
    },
    {
        "code": "\ndef structure(self, model):\n    return self._structures.get(model)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39097
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return .ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_search_engine(self, engine):\n    '''Set the search ``engine`` for this :class:`Router`.'''\n    self._search_engine = engine\n    self._search_engine.set_router(self)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39098
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID =ID \n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID )global :\n    LIT \n    ID .ID =ID \n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef register_applications(self, applications, models=None, backends=None):\n    '''A higher level registration functions for group of models located\non application modules.\nIt uses the :func:`model_iterator` function to iterate\nthrough all :class:`Model` models available in ``applications``\nand register them using the :func:`register` low level method.\n\n:parameter applications: A String or a list of strings representing\n    python dotted paths where models are implemented.\n:parameter models: Optional list of models to include. If not provided\n    all models found in *applications* will be included.\n:parameter backends: optional dictionary which map a model or an\n    application to a backend :ref:`connection string <connection-string>`.\n:rtype: A list of registered :class:`Model`.\n\nFor example::\n\n\n    mapper.register_application_models('mylib.myapp')\n    mapper.register_application_models(['mylib.myapp', 'another.path'])\n    mapper.register_application_models(pythonmodule)\n    mapper.register_application_models(['mylib.myapp',pythonmodule])\n\n'''\n    return list(self._register_applications(applications, models,\n                                            backends))\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39099
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    LIT \n    return ID (ID .ID (ID ,ID ,\n    ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =ID ,ID =ID ):\n    LIT ]return ID (ID .ID (ID ,ID ,\n    ID ))\n"
    },
    {
        "code": "\ndef session(self):\n    '''Obatain a new :class:`Session` for this ``Router``.'''\n    return Session(self)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39100
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID )if "
    },
    {
        "code": "\ndef create_all(self):\n    '''Loop though :attr:`registered_models` and issue the\n:meth:`Manager.create_all` method.'''\n    for manager in self._registered_models.values():\n        manager.create_all()\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 51,
            "fix_type": "delete",
            "id": 39101
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID .ID ():\n        ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID .ID ()LIT :\n        ID .ID ()\n"
    },
    {
        "code": "\ndef add(self, instance):\n    '''Add an ``instance`` to its backend database. This is a shurtcut\nmethod for::\n\n    self.session().add(instance)\n'''\n    return self.session().add(instance)\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/stdnet/odm/mapper.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39102
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID ().ID (ID )\n",
        "wrong_code": "\ndef ID (=ID ,ID ):\n    LIT \n    return ID .ID ().ID (ID )\n"
    },
    {
        "code": "\n@classmethod\ndef after_setup(cls):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39103
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):from     pass \n"
    },
    {
        "code": "\ndef test_info_simple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 39104
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    /\n"
    },
    {
        "code": "\ndef test_istats(self):\n    for field in ('a','b','c','d','f','g'):\n        pass\n        \n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39105
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in (LIT ,LIT ,LIT ,LIT ,LIT ,LIT ):\n        pass \n\n",
        "wrong_code": "]def ID (ID ):\n    for ID in (LIT ,LIT ,LIT ,LIT ,LIT ,LIT ):\n        pass \n\n"
    },
    {
        "code": "def test_stats(self):\n    for field in ('a','b','c','d','f','g'):\n        pass\n        \n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 39106
        },
        "correct_code": "def ID (ID ):\n    for ID in (LIT ,LIT ,LIT ,LIT ,LIT ,LIT ):\n        pass \n\n",
        "wrong_code": "def ID (ID ):\n    for ID as in (LIT ,LIT ,LIT ,LIT ,LIT ,LIT ):\n        pass \n\n"
    },
    {
        "code": "def testSimpleMultiStats(self):\n    pass\n    \n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39107
        },
        "correct_code": "def ID (ID ):\n    pass \n\n",
        "wrong_code": "def ID (ID ):or \n    pass \n\n"
    },
    {
        "code": "def __test(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lsbardel/python-stdnet/tests/all/apps/columnts/readonly.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39108
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "raise def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef process(self):\n    sublime.active_window().show_input_panel('Variable name', '', self.obtain_old_name, None, None)\n",
        "metadata": {
            "file": "py150_files/data/lucacri/PhpSimpleRefactor/PhpSimpleRefactorRenameLocalVariable.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 39109
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID ().ID (LIT ,LIT ,ID .ID ,ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID ().ID (LIT ,LIT !=,ID .ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef obtain_old_name(self, name):\n    self.old_name = name;\n    sublime.active_window().show_input_panel('New name', '', self.obtain_new_name, None, None)\n",
        "metadata": {
            "file": "py150_files/data/lucacri/PhpSimpleRefactor/PhpSimpleRefactorRenameLocalVariable.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39110
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID ;\n    ID .ID ().ID (LIT ,LIT ,ID .ID ,ID ,ID )\n",
        "wrong_code": ".\ndef ID (ID ,ID ):\n    ID .ID =ID ;\n    ID .ID ().ID (LIT ,LIT ,ID .ID ,ID ,ID )\n"
    },
    {
        "code": "\ndef obtain_new_name(self, name):\n    self.new_name = name;\n    self.on_filled_info()\n",
        "metadata": {
            "file": "py150_files/data/lucacri/PhpSimpleRefactor/PhpSimpleRefactorRenameLocalVariable.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39111
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID ;\n    ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ,import ID ):\n    ID .ID =ID ;\n    ID .ID ()\n"
    },
    {
        "code": "\ndef get_command(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lucacri/PhpSimpleRefactor/PhpSimpleRefactorRenameLocalVariable.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 39112
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    del \n"
    },
    {
        "code": "def init(shape, fan):\n    return _np.full(shape, value, dtype=dtype)\n",
        "metadata": {
            "file": "py150_files/data/lucasb-eyer/DeepFried2/DeepFried2/init/Const.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 39113
        },
        "correct_code": "def ID (ID ,ID ):\n    return ID .ID (ID ,ID ,ID =ID )\n",
        "wrong_code": "def ID (ID ,ID ):\n    return ID .ID def (ID ,ID ,ID =ID )\n"
    },
    {
        "code": "\n\ndef const(value):\n    def init(shape, fan):\n        pass\n    return init\n",
        "metadata": {
            "file": "py150_files/data/lucasb-eyer/DeepFried2/DeepFried2/init/Const.py",
            "fix_location": 28,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39114
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ):\n    def ID (def ,ID ):\n        pass \n    return ID \n"
    },
    {
        "code": "def init(shape, fan):\n    a = _np.array(value, copy=True)\n    assert a.shape == shape, \"Shape mismatch in initializer: provided {}, requested {}\".format(a.shape, shape)\n    return a\n",
        "metadata": {
            "file": "py150_files/data/lucasb-eyer/DeepFried2/DeepFried2/init/Const.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "==",
            "id": 39115
        },
        "correct_code": "def ID (ID ,ID ):\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID .ID ==ID ,LIT .ID (ID .ID ,ID )\n    return ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID =ID .ID (ID ,ID =LIT )\n    assert ID .ID lambda ID ,LIT .ID (ID .ID ,ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef array(value):\n    def init(shape, fan):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lucasb-eyer/DeepFried2/DeepFried2/init/Const.py",
            "fix_location": 20,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39116
        },
        "correct_code": "\n\ndef ID (ID ):\n    def ID (ID ,ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID (ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef validate(dataset_x, dataset_y, model, epoch, batch_size):\n    for j in range((dataset_x.shape[0] + batch_size - 1) // batch_size):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lucasb-eyer/DeepFried2/examples/MNIST/test.py",
            "fix_location": 53,
            "fix_type": "delete",
            "id": 39117
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    for ID in ID ((ID .ID [LIT ]+ID -LIT )//ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID ):\n    for ID in ID ((ID raise .ID [LIT ]+ID -LIT )//ID ):\n        pass \n"
    },
    {
        "code": "\n\n@manager.command\ndef new(path='.', template=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Clay/clay/manage.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39118
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID =LIT ,ID =ID ):\n    pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID =LIT ,ID =ID ):\n    pass \n    is "
    },
    {
        "code": "\n\n@manager.command\ndef run(host=DEFAULT_HOST, port=DEFAULT_PORT, path='.'):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Clay/clay/manage.py",
            "fix_location": 60,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39119
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID =ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID =ID ,ID =ID ,ID =LIT ):\n    pass \n    ."
    },
    {
        "code": "\n\n@manager.command\ndef version():\n    \"\"\"Returns the current Clay version\n    \"\"\"\n    from clay import __version__\n    print(__version__)\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Clay/clay/manage.py",
            "fix_location": 6,
            "fix_type": "delete",
            "id": 39120
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    LIT \n    from ID import ID \n    ID (ID )\n",
        "wrong_code": "\n\n@ID for .ID \ndef ID ():\n    LIT \n    from ID import ID \n    ID (ID )\n"
    },
    {
        "code": "\n\ndef main():\n    manager.run()\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Clay/clay/manage.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39121
        },
        "correct_code": "\n\ndef ID ():\n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID ():\n    ID .ID global )\n"
    },
    {
        "code": "\n\n@manager.command\ndef new(app_path='.', skeleton=APP_SKELETON, **options):\n\n    if not pretend:\n        pass\n\n    if not quiet:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Shake/shake/cli/__init__.py",
            "fix_location": 106,
            "fix_type": "delete",
            "id": 39122
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID =LIT ,ID =ID ,**ID ):\n\n    if not ID :\n        pass \n\n    if not ID :\n        pass \n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID =LIT ,ID =ID ,**ID ):\n\n    if not ID :\n        pass \n\n    if not ID :\n        pass \nexcept "
    },
    {
        "code": "\n\n@manager.command\ndef version():\n    \"\"\"Print the Shake current version.\"\"\"\n    import shake\n    print(shake.__version__)\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Shake/shake/cli/__init__.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39123
        },
        "correct_code": "\n\n@ID .ID \ndef ID ():\n    LIT \n    import ID \n    ID (ID .ID )\n",
        "wrong_code": "\n!=\n@ID .ID \ndef ID ():\n    LIT \n    import ID \n    ID (ID .ID )\n"
    },
    {
        "code": "\n\ndef main():\n    ok = manager.run()\n    if not ok:\n        print(format_title('GENERAL OPTIONS') + \"\"\"\n    -h, [--help]     # Show help\n    -p, [--pretend]  # Run but do not make any changes\n    -f, [--force]    # Overwrite files that already exist\n    -s, [--skip]     # Skip files that already exist\n    -q, [--quiet]    # Suppress status output\n    \"\"\")\n",
        "metadata": {
            "file": "py150_files/data/lucuma/Shake/shake/cli/__init__.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39124
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID ()\n    if not ID :\n        ID (ID (LIT )+LIT )\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID def ID ()\n    if not ID :\n        ID (ID (LIT )+LIT )\n"
    },
    {
        "code": "\n\ndef datetime_factory(**kwargs):\n    if second is not None:\n        pass\n    try:\n        pass\n    except ValueError as e:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 113,
            "fix_type": "delete",
            "id": 39125
        },
        "correct_code": "\n\ndef ID (**ID ):\n    if ID is not ID :\n        pass \n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (**ID ):\n    if ID is not ID :\n        pass \n    try :\n        pass \n    except ID as ID :\n        pass (\n"
    },
    {
        "code": "\n\ndef datetime_delta_factory(hours, minutes):\n    return datetime.timedelta(hours=hours, minutes=minutes)\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39126
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    return ID .ID (ID =ID ,ID =ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID )\n    return ID .ID (ID =ID ,ID =ID )\n"
    },
    {
        "code": "\n@staticmethod\ndef from_date(dt_obj):\n    # Python datetime objects may include timezone information\n    if hasattr(dt_obj, 'tzinfo') and dt_obj.tzinfo:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 39127
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n#COMMENT\n\n    if ID (ID ,LIT )and ID .ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n#COMMENT\n\n    if ID (global ID ,LIT )and ID .ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n@property\ndef microsecond(self):\n    return self._dt_obj.microsecond\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39128
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    return ID .ID .ID \n",
        "wrong_code": "\n@ID \nif ID (ID ):\n    return ID .ID .ID \n"
    },
    {
        "code": "\ndef __repr__(self):\n    return repr(self._dt_obj)\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39129
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID :\n    return ID (ID .ID )\n"
    },
    {
        "code": "\n@python_2_unicode_compatible\ndef __str__(self):\n    \"\"\" Serialize a datetime object in the format required\n        by Solr. See http://wiki.apache.org/solr/IndexingDates\n        \"\"\"\n    return \"%sZ\" % (self._dt_obj.isoformat(), )\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 39130
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return LIT %(ID .ID .ID (),)\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return LIT (%(ID .ID .ID (),)\n"
    },
    {
        "code": "\ndef __lt__(self, other):\n    try:\n        other = other._dt_obj\n    except AttributeError:\n        pass\n    return self._dt_obj < other\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39131
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        ID =ID .ID \n    except ID :\n        pass \n    return ID .ID <ID \n",
        "wrong_code": "\ndef ID and ID ,ID ):\n    try :\n        ID =ID .ID \n    except ID :\n        pass \n    return ID .ID <ID \n"
    },
    {
        "code": "\ndef __eq__(self, other):\n    try:\n        other = other._dt_obj\n    except AttributeError:\n        pass\n    return self._dt_obj == other\n",
        "metadata": {
            "file": "py150_files/data/lugensa/scorched/scorched/dates.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "except",
            "id": 39132
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    try :\n        ID =ID .ID \n    except ID :\n        pass \n    return ID .ID ==ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    try :\n        ID =ID .ID \n    ID :\n        pass \n    return ID .ID ==ID \n"
    },
    {
        "code": "\n\ndef lr_model(clf, X):\n    return 1.0 / (1.0 + np.exp(-(clf.intercept_ + clf.coef_ * X)))\n",
        "metadata": {
            "file": "py150_files/data/luispedro/BuildingMachineLearningSystemsWithPython/ch05/log_reg_example.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39133
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    return LIT /(LIT +ID .ID (-(ID .ID +ID .ID *ID )))\n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    return LIT /(LIT +ID .ID (-(ID .ID +ID .]*ID )))\n"
    },
    {
        "code": "\n\ndef lin_model(clf, X):\n    return clf.intercept_ + clf.coef_ * X\n",
        "metadata": {
            "file": "py150_files/data/luispedro/BuildingMachineLearningSystemsWithPython/ch05/log_reg_example.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 39134
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    return ID .ID +ID .ID *ID \n",
        "wrong_code": "\n\n(def ID (ID ,ID ):\n    return ID .ID +ID .ID *ID \n"
    },
    {
        "code": "def load():\n\n    if not path.exists('data/ml-100k/u.data'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/BuildingMachineLearningSystemsWithPython/ch08/load_ml100k.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39135
        },
        "correct_code": "def ID ():\n\n    if not ID .ID (LIT ):\n        pass \n",
        "wrong_code": "def ID ():\n\nas     if not ID .ID (LIT ):\n        pass \n"
    },
    {
        "code": "\ndef get_train_test(reviews=None, random_state=None):\n\n    if reviews is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/BuildingMachineLearningSystemsWithPython/ch08/load_ml100k.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 39136
        },
        "correct_code": "\ndef ID (ID =ID ,ID =ID ):\n\n    if ID is ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID =ID ,ID =ID ):\n\n    if ID is [ID :\n        pass \n"
    },
    {
        "code": "\ndef surf(f, nr_octaves=4, nr_scales=6, initial_step_size=1, threshold=0.1, max_points=1024, descriptor_only=False):\n    if descriptor_only:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/features/surf.py",
            "fix_location": 76,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39137
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    if ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ,ID =LIT ):\n    if :\n        pass \n"
    },
    {
        "code": "\ndef dense(f, spacing, scale=None, is_integral=False, include_interest_point=False):\n    if scale is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/features/surf.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39138
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =ID ,ID =LIT ,ID =LIT ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\nID (ID ,ID ,ID =ID ,ID =LIT ,ID =LIT ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "def rotate(y,x, a):\n    ca = np.cos(a)\n    return (ca*x-sa*y, sa*x+ca*y)\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/features/surf.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 39139
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID =ID .ID (ID )\n    return (ID *ID -ID *ID ,ID *ID +ID *ID )\n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID =ID .ID (ID )and \n    return (ID *ID -ID *ID ,ID *ID +ID *ID )\n"
    },
    {
        "code": "def rotate_around(p, c, a):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/features/surf.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39140
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "def ID (ID ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_close_holes_simple():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_close_holes.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39141
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():global \n    pass \n"
    },
    {
        "code": "\ndef test_polygon():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39142
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass import "
    },
    {
        "code": "\n\ndef test_convex():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39143
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID (*:\n    pass \n"
    },
    {
        "code": "\ndef test_convex3():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 39144
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID await ():\n    pass \n"
    },
    {
        "code": "\ndef test_fill3():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 39145
        },
        "correct_code": "\ndef ID ():\n    pass \n",
        "wrong_code": "\ndef ID ():\n    pass \n("
    },
    {
        "code": "\ndef test_line():\n    for p0,p1 in zip(polygon[:-1], polygon[1:]):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39146
        },
        "correct_code": "\ndef ID ():\n    for ID ,ID in ID (ID [:-LIT ],ID [LIT :]):\n        pass \n",
        "wrong_code": "\ndef ID (in ):\n    for ID ,ID in ID (ID [:-LIT ],ID [LIT :]):\n        pass \n"
    },
    {
        "code": "\ndef test_line_non_square():\n    mahotas.polygon.line((0,0),(127,63), A)\n    assert A.sum()\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39147
        },
        "correct_code": "\ndef ID ():\n    ID .ID .ID ((LIT ,LIT ),(LIT ,LIT ),ID )\n    assert ID .ID ()\n",
        "wrong_code": "\ndef ID return ):\n    ID .ID .ID ((LIT ,LIT ),(LIT ,LIT ),ID )\n    assert ID .ID ()\n"
    },
    {
        "code": "\n\n\ndef test_fill_line():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39148
        },
        "correct_code": "\n\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\n\ndef ID ():with \n    pass \n"
    },
    {
        "code": "\n@raises(ValueError)\ndef test_convex_in_3d():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39149
        },
        "correct_code": "\n@ID (ID )\ndef ID ():\n    pass \n",
        "wrong_code": "\n@ID (ID )\nNone def ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef test_border():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/luispedro/mahotas/mahotas/tests/test_polygon.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 39150
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    pass +\n"
    },
    {
        "code": "\ndef clean_projectname(self):\n    if getattr(self, 'request', None) is not None:\n        try:\n            pass\n        except Project.DoesNotExist:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/forks/github.py",
            "fix_location": 106,
            "fix_type": "delete",
            "id": 39151
        },
        "correct_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ,ID )is not ID :\n        try :\n            pass \n        except ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID (ID ,LIT ,ID )is not ID :\n        try :\n            pass \n        except ID .ID :=\n            pass \n"
    },
    {
        "code": "\ndef fork(self):\n    try:\n        pass\n    except VCSError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/forks/github.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39152
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\ndel     try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef get_url(self):\n    if self.cleaned_data.get('use_https', False):\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/forks/github.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39153
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID .ID (LIT ,LIT ):\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID if ):\n    if ID .ID .ID (LIT ,LIT ):\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\ndef render(template, context):\n    \"\"\"\n    Returns rendered ``template`` with ``context``, which are given as string\n    and dict respectively.\n    \"\"\"\n    t = Template(template)\n    return t.render(Context(context))\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39154
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID .ID (ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID )\n    return ID .ID ID (ID ))\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.sub = get_config_value('HIDDEN_EMAIL_SUBSTITUTION')\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 39155
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID LIT (LIT )\n"
    },
    {
        "code": "\ndef test_simple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39156
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "except def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_with_parameter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39157
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID nonlocal :\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_simple(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 39158
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID as (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_with_parameter(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/django-projector/projector/tests/test_templatetags.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39159
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\n\ndef get_version():\n    \"\"\"\n    Returns shorter version (digit parts only) as string.\n    \"\"\"\n    return '.'.join((str(each) for each in VERSION[:4]))\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/vimmock/vimmock/__init__.py",
            "fix_location": 66,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 39160
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    return LIT .ID ((ID (ID )for ID in ID [:LIT ]))\n",
        "wrong_code": "\n\ndef ID ():\n    LIT \n    return LIT .ID ((ID (ID )for ID in ID [:and ]))\n"
    },
    {
        "code": "\n\ndef patch_vim():\n    \"\"\"\n    Sets new ``VimMock`` instance under ``vim`` key within ``sys.modules``.\n    \"\"\"\n    sys.modules['vim'] = VimMock()\n",
        "metadata": {
            "file": "py150_files/data/lukaszb/vimmock/vimmock/__init__.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 39161
        },
        "correct_code": "\n\ndef ID ():\n    LIT \n    ID .ID [LIT ]=ID ()\n",
        "wrong_code": "\n\ndef ID ():\n    LIT \n    ID .ID )[LIT ]=ID ()\n"
    },
    {
        "code": "\n\ndef setup(app):\n    app.add_directive('versionadded', NewInVersionDirective)\n    app.add_directive('versionmodified', ChangedInVersionDirective)\n    app.add_config_value('next_version', '1.5', True)\n",
        "metadata": {
            "file": "py150_files/data/lukesneeringer/django-pgfields/docs/_ext/pgfields_docs.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39162
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID (LIT ,ID )\n    ID .ID (LIT ,ID )\n    ID .ID (LIT ,LIT ,LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID del .ID (LIT ,ID )\n    ID .ID (LIT ,ID )\n    ID .ID (LIT ,LIT ,LIT )\n"
    },
    {
        "code": "\ndef test_document_error_sets_correct_fields(self):\n    self.assertEqual(\n        DocumentError(),\n        {\n            'error_code': 10,\n            'error_type': 'DocumentError',\n            'error_message': 'DocumentError',\n        }\n    )\n",
        "metadata": {
            "file": "py150_files/data/lvieirajr/mongorest/tests/errors/document_error.py",
            "fix_location": 100,
            "fix_type": "delete",
            "id": 39163
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (\n    ID (),\n    {\n    LIT :LIT ,\n    LIT :LIT ,\n    LIT :LIT ,\n    }\n    )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID (\n    ID (),\n    {\n    LIT :LIT ,\n    LIT :LIT ,\n    LIT :LIT ,\n    }\n    continue )\n"
    },
    {
        "code": "\n\ndef bool_env(var_name, default=False):\n    # Explicitly check for 'False', 'false', and '0' since all non-empty\n    # string are normally coerced to True.\n    if test_val in ('False', 'false', '0'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lyft/confidant/confidant/settings.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39164
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n#COMMENT\n\n#COMMENT\n\n    if ID in (LIT ,LIT ,LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT :\n#COMMENT\n\n#COMMENT\n\n    if ID in (LIT ,LIT ,LIT ):\n        pass \n"
    },
    {
        "code": "\n\ndef float_env(var_name, default=0.0):\n    \"\"\"\n    Get an environment variable coerced to a float value.\n    This has the same arguments as bool_env. If a value cannot be coerced to a\n    float, a ValueError will be raised.\n    \"\"\"\n    return float(getenv(var_name, default))\n",
        "metadata": {
            "file": "py150_files/data/lyft/confidant/confidant/settings.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 39165
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID (ID (ID ,ID ))\n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ):\n    elif LIT \n    return ID (ID (ID ,ID ))\n"
    },
    {
        "code": "\n\ndef int_env(var_name, default=0):\n    \"\"\"\n    Get an environment variable coerced to an integer value.\n    This has the same arguments as bool_env. If a value cannot be coerced to an\n    integer, a ValueError will be raised.\n    \"\"\"\n    return int(getenv(var_name, default))\n",
        "metadata": {
            "file": "py150_files/data/lyft/confidant/confidant/settings.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 39166
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID (ID (ID ,ID ))\n",
        "wrong_code": "\n\ndef ID (ID ,-ID =LIT ):\n    LIT \n    return ID (ID (ID ,ID ))\n"
    },
    {
        "code": "\n\ndef str_env(var_name, default=''):\n    \"\"\"\n    Get an environment variable as a string.\n    This has the same arguments as bool_env.\n    \"\"\"\n    return getenv(var_name, default)\n",
        "metadata": {
            "file": "py150_files/data/lyft/confidant/confidant/settings.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 39167
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    LIT \n    return ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,or ID =LIT ):\n    LIT \n    return ID (ID ,ID )\n"
    },
    {
        "code": "\n# gevent configuration\n\n# Note that it's important to set this environment variable, even though it\n# isn't exposed in app.config.\n# See: https://github.com/surfly/gevent/issues/468\n#\n# GEVENT_RESOLVER='ares'\n\n\ndef get(name, default=None):\n    return globals().get(name, default)\n",
        "metadata": {
            "file": "py150_files/data/lyft/confidant/confidant/settings.py",
            "fix_location": 97,
            "fix_type": "delete",
            "id": 39168
        },
        "correct_code": "\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n\ndef ID (ID ,ID =ID ):\n    return ID ().ID (ID ,ID )\n",
        "wrong_code": "\n#COMMENT\n\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n\n\ndef ID (ID ,ID =ID ):\n    return lambda ID ().ID (ID ,ID )\n"
    },
    {
        "code": "\n\n@app.route(\"/\")\ndef index():\n    if 'token' not in session:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lysol/moves/examples/oauth.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39169
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    if LIT not in ID :\n        pass \n",
        "wrong_code": "\n\n@ID in ID (LIT )\ndef ID ():\n    if LIT not in ID :\n        pass \n"
    },
    {
        "code": "\n\n@app.route(\"/oauth_return\")\ndef oauth_return():\n    if error is not None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/lysol/moves/examples/oauth.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39170
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    if ID is not ID :\n        pass \n",
        "wrong_code": "\nfrom \n@ID .ID (LIT )\ndef ID ():\n    if ID is not ID :\n        pass \n"
    },
    {
        "code": "\n\n@app.route('/logout')\ndef logout():\n    if 'token' in session:\n        del(session['token'])\n    return redirect(url_for('index'))\n",
        "metadata": {
            "file": "py150_files/data/lysol/moves/examples/oauth.py",
            "fix_location": 70,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39171
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    if LIT in ID :\n        del (ID [LIT ])\n    return ID (ID (LIT ))\n",
        "wrong_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    if LIT in ID :\n        del (ID [LIT ])def return ID (ID (LIT ))\n"
    },
    {
        "code": "\n\n@app.route(\"/info\")\ndef show_info():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/lysol/moves/examples/oauth.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39172
        },
        "correct_code": "\n\n@ID .ID (LIT )\ndef ID ():\n    pass \n",
        "wrong_code": "\n\n@ID .ID try LIT )\ndef ID ():\n    pass \n"
    },
    {
        "code": "def __init__(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/examples/basic/psync.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39173
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,*ID ,**ID pass :\n    pass \n"
    },
    {
        "code": "@staticmethod\ndef lower(dr):\n    return XilinxMultiRegImpl(dr.i, dr.o, dr.odomain, dr.n)\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/examples/basic/psync.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39174
        },
        "correct_code": "@ID \ndef ID (ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "@ID \ndef ID (except ID ):\n    return ID (ID .ID ,ID .ID ,ID .ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __init__(self, toolchain=\"vivado\", programmer=\"xc3sprog\"):\n    if toolchain == \"ise\":\n        pass\n    elif toolchain == \"vivado\":\n        pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/build/platforms/kc705.py",
            "fix_location": 98,
            "fix_type": "delete",
            "id": 39175
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ,ID =LIT ):\n    if ID ==LIT :\n        pass \n    elif ID ==LIT :\n        pass :\n"
    },
    {
        "code": "\n\ndef log2_int(n, need_pow2=True):\n    while l < n:\n        pass\n    if need_pow2 and l != n:\n        pass\n    return r\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/fhdl/bitcontainer.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "while",
            "id": 39176
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    while ID <ID :\n        pass \n    if ID and ID !=ID :\n        pass \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT ):\n    ID <ID :\n        pass \n    if ID and ID !=ID :\n        pass \n    return ID \n"
    },
    {
        "code": "\n\ndef bits_for(n, require_sign_bit=False):\n    if n > 0:\n        pass\n    else:\n        pass\n    if require_sign_bit:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/fhdl/bitcontainer.py",
            "fix_location": 22,
            "fix_type": "delete",
            "id": 39177
        },
        "correct_code": "\n\ndef ID (ID ,ID =LIT ):\n    if ID >LIT :\n        pass \n    else :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =LIT +):\n    if ID >LIT :\n        pass \n    else :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "def __init__(self):\n    self.submodules.dut = Encoder(8)\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 39178
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID =ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID ID (LIT )\n"
    },
    {
        "code": "\ndef test_sizes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 39179
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef and ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    self.submodules.dut = PriorityEncoder(8)\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39180
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID =ID (LIT )\n",
        "wrong_code": "def ID (ID )lambda \n    ID .ID .ID =ID (LIT )\n"
    },
    {
        "code": "\ndef test_sizes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 5,
            "fix_type": "delete",
            "id": 39181
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef if ID (ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    self.submodules.dut = Decoder(8)\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39182
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID =ID (LIT )\n",
        "wrong_code": "LIT def ID (ID ):\n    ID .ID .ID =ID (LIT )\n"
    },
    {
        "code": "\ndef test_sizes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39183
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self):\n    self.submodules.dut = PriorityEncoder(1)\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 39184
        },
        "correct_code": "def ID (ID ):\n    ID .ID .ID =ID (LIT )\n",
        "wrong_code": "def ID (ID ):\n    ID .ID .ID def ID (LIT )\n"
    },
    {
        "code": "\ndef test_sizes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/m-labs/migen/migen/test/test_coding.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39185
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID global :\n    pass \n"
    },
    {
        "code": "\n\ndef create_user_token(user, repo=None):\n    if repo:\n        pass\n    return token\n",
        "metadata": {
            "file": "py150_files/data/m-vdb/github-buildservice-boilerplate/buildservice/utils/testing.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39186
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ):\n    if ID :\n        pass \n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID =ID )raise \n    if ID :\n        pass \n    return ID \n"
    },
    {
        "code": "\n\ndef json_pretty(data):\n    return json.dumps(data,\n                      sort_keys=True,\n                      indent=4,\n                      separators=(',', ': '))\n",
        "metadata": {
            "file": "py150_files/data/m110/grafcli/grafcli/utils.py",
            "fix_location": 75,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 39187
        },
        "correct_code": "\n\ndef ID (ID ):\n    return ID .ID (ID ,\n    ID =LIT ,\n    ID =LIT ,\n    ID =(LIT ,LIT ))\n",
        "wrong_code": "\n\ndef ID (ID ):\n    return ID .ID (ID ,\n    ID =LIT ,\n    ID =LIT ,\n    ID as (LIT ,LIT ))\n"
    },
    {
        "code": "\n\ndef confirm_prompt(question):\n    if config['grafcli'].getboolean('force'):\n        pass\n\n    if answer not in ('y', 'Y', 'yes', 'YES'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/m110/grafcli/grafcli/utils.py",
            "fix_location": 96,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39188
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID [LIT ].ID (LIT ):\n        pass \n\n    if ID not in (LIT ,LIT ,LIT ,LIT ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    if ID [LIT ].ID (LIT ):\n        pass \n\n    if ID not in (LIT ,LIT ,LIT ,LIT continue :\n        pass \n"
    },
    {
        "code": "def test_special(self):\n    response = self.api.specials(self.default_specialid, params={'venueId': self.default_special_venueid})\n    assert 'special' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "}",
            "id": 39189
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID .ID (ID .ID ,ID ={LIT :ID .ID })\n    assert LIT in ID \n",
        "wrong_code": "def ID (ID ):\n    ID =ID .ID .ID (ID .ID ,ID ={LIT :ID .ID import )\n    assert LIT in ID \n"
    },
    {
        "code": "\ndef test_search(self):\n    response = self.api.specials.search(params={'ll': self.default_geo})\n    assert 'specials' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39190
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID })\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID })\n    assert LIT in ID \n    ["
    },
    {
        "code": "\ndef test_search_limit(self):\n    response = self.api.specials.search(params={'ll': self.default_geo, 'limit': 10})\n    assert 'specials' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 39191
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID ,LIT :LIT })\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID (ID ):\n    return ID =ID .ID .ID .ID (ID ={LIT :ID .ID ,LIT :LIT })\n    assert LIT in ID \n"
    },
    {
        "code": "def test_special(self):\n    response = self.api.specials(self.default_specialid, params={'venueId': self.default_special_venueid})\n    assert 'special' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 25,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39192
        },
        "correct_code": "def ID (ID ):\n    ID =ID .ID .ID (ID .ID ,ID ={LIT :ID .ID })\n    assert LIT in ID \n",
        "wrong_code": "def ID (ID ):\n    ID =ID ID .ID (ID .ID ,ID ={LIT :ID .ID })\n    assert LIT in ID \n"
    },
    {
        "code": "\ndef test_search(self):\n    response = self.api.specials.search(params={'ll': self.default_geo})\n    assert 'specials' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 31,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39193
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID })\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID ..ID (ID ={LIT :ID .ID })\n    assert LIT in ID \n"
    },
    {
        "code": "\ndef test_search_limit(self):\n    response = self.api.specials.search(params={'ll': self.default_geo, 'limit': 10})\n    assert 'specials' in response\n",
        "metadata": {
            "file": "py150_files/data/mLewisLogic/foursquare/foursquare/tests/test_specials.py",
            "fix_location": 84,
            "fix_type": "modify",
            "fix_token": "in",
            "id": 39194
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID ,LIT :LIT })\n    assert LIT in ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID .ID .ID .ID (ID ={LIT :ID .ID ,LIT :LIT })\n    assert LIT assert ID \n"
    },
    {
        "code": "\n\n@rule(True)\ndef born_date_in_parenthesis(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 39195
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\nassert     pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef born_two_dates_in_parenthesis(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 39196
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    if pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef born_date_and_death_in_parenthesis(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39197
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )-def ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef born_date_and_place_in_parenthesis(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 45,
            "fix_type": "delete",
            "id": 39198
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n    )"
    },
    {
        "code": "\n\n@rule(True)\ndef was_born_explicit_mention(Subject, Object):\n    anything = Star(Any())\n    return anything + Subject + Token(\"was born\") + Pos(\"IN\") + Object + anything\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 39199
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    ID =ID (ID ())\n    return ID +ID +ID (LIT )+ID (LIT )+ID +ID \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID lambda ID ):\n    ID =ID (ID ())\n    return ID +ID +ID (LIT )+ID (LIT )+ID +ID \n"
    },
    {
        "code": "\n\n@rule(True)\ndef is_born_in(Subject, Object):\n    \"\"\"\n    Ex: Xu is born in 1902 or 1903 in a family of farmers in Hubei (China RRB)\n    \"\"\"\n    anything = Star(Any())\n    return Subject + Token(\"is born in\") + Object + anything\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 70,
            "fix_type": "delete",
            "id": 39200
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ())\n    return ID +ID (LIT )+ID +ID \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ())\n    return and ID +ID (LIT )+ID +ID \n"
    },
    {
        "code": "\n\n@rule(True)\ndef mentions_real_name(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 24,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39201
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ID ):\n    pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef was_born_and_mentions_place(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39202
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (,ID ):\n    pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef was_born_and_mentions_place_2(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39203
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n@ID (LIT )\ndef for ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\n\n@rule(True)\ndef just_born(Subject, Object):\n    \"\"\"\n    Ex: Lyle Eugene Hollister, born 6 July 1923 in Sioux Falls, South Dakota, enlisted in the Navy....\n    \"\"\"\n    anything = Star(Any())\n    return Subject + Token(\", born\") + Object + anything\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 87,
            "fix_type": "delete",
            "id": 39204
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ())\n    return ID +ID (LIT )+ID +ID \n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    LIT \n    ID =ID (ID ())\n    return ID +ID (LIT )+ID import +ID \n"
    },
    {
        "code": "\n\n## NEGATIVE RULES ##\n\n@rule(False, priority=1)\ndef incorrect_labeling_of_place_as_person(Subject, Object):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/examples/birthdate/was_born_rules_sample.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39205
        },
        "correct_code": "\n\n#COMMENT\n\n\n@ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\n\n#COMMENT\n\n\n.@ID (LIT ,ID =LIT )\ndef ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self):\n    self.gazette_items = list(GazetteItem.objects.all())\n    self._cache_per_kind = defaultdict(list)\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39206
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID (ID .ID .ID ())\n    ID .ID =ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =class (ID .ID .ID ())\n    ID .ID =ID (ID )\n"
    },
    {
        "code": "\ndef escape_text(self, text):\n    text = \" \".join(\"\\Q{}\\E\".format(x) for x in text.split())\n    return text\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39207
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =LIT .ID (LIT .ID (ID )for ID in ID .ID ())\n    return ID \n",
        "wrong_code": "\ndef ID (:,ID ):\n    ID =LIT .ID (LIT .ID (ID )for ID in ID .ID ())\n    return ID \n"
    },
    {
        "code": "\ndef strip_kind(self, prefixed_kind):\n    return prefixed_kind.split(self._PREFIX, 1)[-1]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39208
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID .ID (ID .ID ,LIT )[-LIT ]\n",
        "wrong_code": "\ndef ID (ID ID ):\n    return ID .ID (ID .ID ,LIT )[-LIT ]\n"
    },
    {
        "code": "\ndef was_entry_created_by_gazette(self, alias, kind):\n    if kind.startswith(self._PREFIX):\n        return True\n    return alias in self._cache_per_kind[kind]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 46,
            "fix_type": "delete",
            "id": 39209
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID (ID .ID ):\n        return LIT \n    return ID in ID .ID [ID ]\n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ):\n    if ID .ID (ID .ID )and :\n        return LIT \n    return ID in ID .ID [ID ]\n"
    },
    {
        "code": "\ndef __init__(self, increment_ner=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39210
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "\nID (ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef lemmatization_only(self, document):\n    if document.tokens != tokens:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 26,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39211
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID !=ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    if \n    .ID !=ID :\n        pass \n"
    },
    {
        "code": "\ndef syntactic_parsing_only(self, document):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39212
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID .:\n    pass \n"
    },
    {
        "code": "\ndef increment_ner_only(self, document):\n\n    # Coreference resolution\n    for coref in analysis.get_coreferences():\n        try:\n            pass\n        except CoreferenceError as e:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39213
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        try :\n            pass \n        except ID as ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,-):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        try :\n            pass \n        except ID as ID :\n            pass \n"
    },
    {
        "code": "\ndef run_everything(self, document):\n\n    # Coreference resolution\n    for coref in analysis.get_coreferences():\n        try:\n            pass\n        except CoreferenceError as e:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 131,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39214
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        try :\n            pass \n        except ID as ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    for ID in ID .ID ():\n        try :\n            pass \n        except ID as ID :\n            pass \ntry "
    },
    {
        "code": "\ndef __init__(self, data):\n    self._data = data\n    self.sentences = self.get_sentences()\n    self._raw_tokens = list(chain.from_iterable(self.sentences))\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 39215
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID .ID ()\n    ID .ID =ID (ID .ID (ID .ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID return \n    ID .ID =ID .ID ()\n    ID .ID =ID (ID .ID (ID .ID ))\n"
    },
    {
        "code": "\ndef _get(self, *args):\n    return _dict_path(self._data, *args)\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 47,
            "fix_type": "delete",
            "id": 39216
        },
        "correct_code": "\ndef ID (ID ,*ID ):\n    return ID (ID .ID ,*ID )\n",
        "wrong_code": "\ndef ID (ID ,*ID ):\n    return ID (ID .ID ,*ID -)\n"
    },
    {
        "code": "\ndef get_sentences(self):\n    for sentence in raw_sentences:\n        for t in tokens:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 39217
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID :\n        for ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID :\n        for ID in ID :for \n            pass \n"
    },
    {
        "code": "\ndef get_sentence_boundaries(self):\n    for x in self.sentences:\n        y = ys[-1] + len(x)\n        ys.append(y)\n    return ys\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 36,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39218
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID :\n        ID =ID [-LIT ]+ID (ID )\n        ID .ID (ID )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID continue \n        ID =ID [-LIT ]+ID (ID )\n        ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\ndef get_parse_trees(self):\n    result = [x[\"parse\"] for x in self._get(\"sentences\", \"sentence\")]\n    return result\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 47,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39219
        },
        "correct_code": "\ndef ID (ID ):\n    ID =[ID [LIT ]for ID in ID .ID (LIT ,LIT )]\n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID =[ID [LIT ]for ID in ID .(LIT ,LIT )]\n    return ID \n"
    },
    {
        "code": "\ndef get_tokens(self):\n    return [x[\"word\"] for x in self._raw_tokens]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 39220
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID [LIT ]for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return [ID [LIT ]for ID in ID .ID \n"
    },
    {
        "code": "\ndef get_lemmas(self):\n    return [x[\"lemma\"] for x in self._raw_tokens]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 31,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 39221
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID [LIT ]for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (ID ):\n    return [ID [-]for ID in ID .ID ]\n"
    },
    {
        "code": "\ndef get_token_offsets(self):\n    return [int(x[\"CharacterOffsetBegin\"]) for x in self._raw_tokens]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39222
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID (ID [LIT ])for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (import ):\n    return [ID (ID [LIT ])for ID in ID .ID ]\n"
    },
    {
        "code": "\ndef get_pos(self):\n    return [x[\"POS\"] for x in self._raw_tokens]\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39223
        },
        "correct_code": "\ndef ID (ID ):\n    return [ID [LIT ]for ID in ID .ID ]\n",
        "wrong_code": "\ndef ID (!):\n    return [ID [LIT ]for ID in ID .ID ]\n"
    },
    {
        "code": "\n\ndef issues_merging_entities(document, entities):\n    if len(kinds) != 1:\n        pass\n    if len(gazettes) > 1:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/iepy/preprocess/stanford_preprocess.py",
            "fix_location": 78,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39224
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID (ID )>LIT :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if ID (ID )!=LIT :\n        pass \n    if ID (ID )>LIT :assert pass \n"
    },
    {
        "code": "\n# We are doing something not very clever, but fast enough (of coding):\n#   Emulate the django test runner. The downside is that all the environment\n#   and database stuff is setup once per TestCase (instead as it should, once\n#   per run)\n@classmethod\ndef setUpClass(cls):\n    # Creating Manager instance (if requested)\n    if hasattr(cls, 'ManagerClass'):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/tests/manager_case.py",
            "fix_location": 74,
            "fix_type": "modify",
            "fix_token": "if",
            "id": 39225
        },
        "correct_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n@ID \ndef ID (ID ):\n#COMMENT\n\n    if ID (ID ,LIT ):\n        pass \n",
        "wrong_code": "\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n#COMMENT\n\n@ID \ndef ID (ID ):\n#COMMENT\n\n    assert ID (ID ,LIT ):\n        pass \n"
    },
    {
        "code": "\n@classmethod\ndef tearDownClass(cls):\n    cls.dj_runner.teardown_databases(cls.old_config)\n    cls.dj_runner.teardown_test_environment()\n",
        "metadata": {
            "file": "py150_files/data/machinalis/iepy/tests/manager_case.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39226
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    ID .ID .ID (ID .ID )\n    ID .ID .ID ()\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    ID .ID .ID (.ID )\n    ID .ID .ID ()\n"
    },
    {
        "code": "\ndef interpret(self, match):\n    name = match.words.tokens\n    return IsMovie() + HasName(name)\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 39227
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )\n    ["
    },
    {
        "code": "\ndef interpret(self, match):\n    name = match.words.tokens\n    return IsPerson() + HasKeyword(name)\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39228
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )\n",
        "wrong_code": "finally \ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )\n"
    },
    {
        "code": "\ndef interpret(self, match):\n    name = match.words.tokens\n    return IsPerson() + HasKeyword(name)\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39229
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID \n    return ID ()+ID (ID )ID "
    },
    {
        "code": "\ndef interpret(self, match):\n    movie = IsMovie()\n    name = NameOf(movie)\n    return name, \"enum\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39230
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID ()\n    ID =ID (ID )\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID class :\n    ID =ID ()\n    ID =ID (ID )\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    movie = IsMovie() + DirectedBy(match.director)\n    movie_name = LabelOf(movie)\n\n    return movie_name, \"enum\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 39231
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID ()+ID (ID .ID )\n    ID =ID (ID )\n\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID ()+elif ID (ID .ID )\n    ID =ID (ID )\n\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    duration = DurationOf(match.movie)\n    return duration, (\"literal\", \"{} minutes long\")\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39232
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID )\n    return ID ,(LIT ,LIT )\n",
        "wrong_code": "\ndef ID ((,ID ):\n    ID =ID (ID .ID )\n    return ID ,(LIT ,LIT )\n"
    },
    {
        "code": "\ndef interpret(self, match):\n    movie = IsMovie() + HasActor(match.actor)\n    movie_name = NameOf(movie)\n    return movie_name, \"enum\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 50,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39233
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID ()+ID (ID .ID )\n    ID =ID (ID )\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID ()+ID (ID .ID )\n    =ID (ID )\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    release_date = ReleaseDateOf(match.movie)\n    return release_date, \"literal\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39234
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID )\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID )class return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    director = IsPerson() + DirectorOf(match.movie)\n    director_name = NameOf(director)\n    return director_name, \"literal\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 26,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 39235
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID ()+ID (ID .ID )\n    ID =ID (ID )\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID ID ()+ID (ID .ID )\n    ID =ID (ID )\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    actor = NameOf(IsPerson() + StarsIn(match.movie))\n    return actor, \"enum\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 22,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39236
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ()+ID (ID .ID ))\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):    ID =ID (ID ()+ID (ID .ID ))\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef interpret(self, match):\n    definition = DefinitionOf(match.movie)\n    return definition, \"define\"\n",
        "metadata": {
            "file": "py150_files/data/machinalis/quepy/examples/dbpedia/dbpedia/movies.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39237
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID .ID )\n    return ID ,LIT \n",
        "wrong_code": "\ndef ID (,ID ):\n    ID =ID (ID .ID )\n    return ID ,LIT \n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39238
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (elif ID ):\n    pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    settings.ACCOUNT_ACTIVATION_DAYS = self.old_activation\n    settings.REGISTRATION_DEFAULT_FROM_EMAIL = self.old_reg_email\n    settings.REGISTRATION_EMAIL_HTML = self.old_email_html\n    settings.DEFAULT_FROM_EMAIL = self.old_django_email\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 83,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39239
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID .ID \n    ID .ID =ID .ID \n    ID .ID =ID .ID \n    ID .ID =ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID .ID \n    ID .ID =ID .ID \n    ID .ID =ID .ID \n    ID .=ID .ID \n"
    },
    {
        "code": "\ndef test_profile_creation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 39240
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID )(ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_activation_email(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39241
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n!def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_activation_email_uses_registration_default_from_email(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39242
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef pass (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_activation_email_falls_back_to_django_default_from_email(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 39243
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    !="
    },
    {
        "code": "\ndef test_activation_email_is_html_by_default(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39244
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):try     pass \n"
    },
    {
        "code": "\ndef test_activation_email_is_plain_text_if_html_disabled(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39245
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_user_creation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39246
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ncontinue ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_user_creation_email(self):\n    RegistrationProfile.objects.create_inactive_user(\n        site=Site.objects.get_current(), **self.user_info)\n    self.assertEqual(len(mail.outbox), 1)\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 95,
            "fix_type": "delete",
            "id": 39247
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID (\n    ID =ID .ID .ID (),**ID .ID )\n    ID .ID (ID (ID .ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID (\n    ID =ID .ID .ID (),**ID .ID )\n    ID .ID (ID (ID .ID ),LIT )await \n"
    },
    {
        "code": "\ndef test_user_creation_no_email(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39248
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_unexpired_account(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39249
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID yield ):\n    pass \n"
    },
    {
        "code": "\ndef test_expired_account(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39250
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (continue ):\n    pass \n"
    },
    {
        "code": "\ndef test_valid_activation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39251
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \ndef "
    },
    {
        "code": "\ndef test_expired_activation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39252
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID :\n    pass \n"
    },
    {
        "code": "\ndef test_activation_invalid_key(self):\n    \"\"\"\n        Attempting to activate with a key which is not a SHA1 hash\n        fails.\n\n        \"\"\"\n    self.failIf(RegistrationProfile.objects.activate_user('foo'))\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39253
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID .ID (ID .ID .ID (LIT ))\n",
        "wrong_code": "\ndef ID (ID nonlocal ):\n    LIT \n    ID .ID (ID .ID .ID (LIT ))\n"
    },
    {
        "code": "\ndef test_activation_already_activated(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39254
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\nfor     pass \n"
    },
    {
        "code": "\ndef test_activation_deactivated(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 39255
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass :\n"
    },
    {
        "code": "\ndef test_activation_nonexistent_key(self):\n    # Due to the way activation keys are constructed during\n    # registration, this will never be a valid key.\n    invalid_key = hashlib.sha1(six.b('foo')).hexdigest()\n    self.failIf(RegistrationProfile.objects.activate_user(invalid_key))\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "#COMMENT",
            "id": 39256
        },
        "correct_code": "\ndef ID (ID ):\n#COMMENT\n\n#COMMENT\n\n    ID =ID .ID (ID .ID (LIT )).ID ()\n    ID .ID (ID .ID .ID (ID ))\n",
        "wrong_code": "\ndef ID (ID ):\nin \n\n#COMMENT\n\n    ID =ID .ID (ID .ID (LIT )).ID ()\n    ID .ID (ID .ID .ID (ID ))\n"
    },
    {
        "code": "\ndef test_expired_user_deletion(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39257
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n[    pass \n"
    },
    {
        "code": "\ndef test_management_command(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 39258
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nassert "
    },
    {
        "code": "\ndef test_resend_activation_email(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39259
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nlambda ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_resend_activation_email_nonexistent_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39260
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_resend_activation_email_activated_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39261
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": ".\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_resend_activation_email_expired_user(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/macropin/django-registration/registration/tests/models.py",
            "fix_location": 25,
            "fix_type": "delete",
            "id": 39262
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nlambda "
    },
    {
        "code": "\n\n@register.filter()\ndef getvalue(dictionary, item):\n    \"\"\"Equivalent to dict.get(item), provided for convenience\"\"\"\n    return dictionary.get(item)\n",
        "metadata": {
            "file": "py150_files/data/magopian/django-data-exports/data_exports/templatetags/getter_tags.py",
            "fix_location": 54,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39263
        },
        "correct_code": "\n\n@ID .ID ()\ndef ID (ID ,ID ):\n    LIT \n    return ID .ID (ID )\n",
        "wrong_code": "\n\n@ID .ID ()\ndef ID (ID ,ID ):\n    LIT \n    return ID class ID (ID )\n"
    },
    {
        "code": "\n\n@register.filter()\ndef nice_display(item):\n    if hasattr(item, 'all'):  # RelatedManager: display a list\n        pass\n",
        "metadata": {
            "file": "py150_files/data/magopian/django-data-exports/data_exports/templatetags/getter_tags.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39264
        },
        "correct_code": "\n\n@ID .ID ()\ndef ID (ID ):\n    if ID (ID ,LIT ):#COMMENT\n\n        pass \n",
        "wrong_code": "\n\n@ID or ID ()\ndef ID (ID ):\n    if ID (ID ,LIT ):#COMMENT\n\n        pass \n"
    },
    {
        "code": "\n\ndef construct_format_field_str(fname, fspec, conv):\n    if fname is None:\n        pass\n    if conv:\n        pass\n    if fspec:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 39265
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass \n    if ID :\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    if ID is ID :\n        pass is \n    if ID :\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "\n\ndef split_format_str(fstr):\n\n    for lit, fname, fspec, conv in Formatter().parse(fstr):\n        if fname is None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 39266
        },
        "correct_code": "\n\ndef ID (ID ):\n\n    for ID ,ID ,ID ,ID in ID ().ID (ID ):\n        if ID is ID :\n            pass \n",
        "wrong_code": "\n\n!=def ID (ID ):\n\n    for ID ,ID ,ID ,ID in ID ().ID (ID ):\n        if ID is ID :\n            pass \n"
    },
    {
        "code": "\n\ndef infer_positional_format_args(fstr):\n    for match in _pos_farg_re.finditer(fstr):\n        if prev_end < start:\n            pass\n        if group == '{{' or group == '}}':\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39267
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID (ID ):\n        if ID <ID :\n            pass \n        if ID ==LIT or ID ==LIT :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    for ID in ID ID (ID ):\n        if ID <ID :\n            pass \n        if ID ==LIT or ID ==LIT :\n            pass \n"
    },
    {
        "code": "\ndef _add_arg(argname, type_char='s'):\n    if argname not in _dedup:\n        try:\n            pass\n        except ValueError:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39268
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    if ID not in ID :\n        try :\n            pass \n        except ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID =LIT ):\n    if ID not in ID :try :\n            pass \n        except ID :\n            pass \n"
    },
    {
        "code": "def __init__(self, fname, fspec='', conv=None):\n    self.set_fname(fname)\n    self.set_fspec(fspec)\n    self.set_conv(conv)\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39269
        },
        "correct_code": "def ID (ID ,ID ,ID =LIT ,ID =ID ):\n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n",
        "wrong_code": "def ID (ID None ,ID ,ID =LIT ,ID =ID ):\n    ID .ID (ID )\n    ID .ID (ID )\n    ID .ID (ID )\n"
    },
    {
        "code": "\ndef set_fname(self, fname):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 33,
            "fix_type": "delete",
            "id": 39270
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    pass \n    lambda "
    },
    {
        "code": "\ndef set_fspec(self, fspec):\n    for sublit, subfname, _, _ in Formatter().parse(fspec):\n        if subfname is not None:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 39271
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID ,ID ,ID ,ID in ID ().ID (ID ):\n        if ID is not ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\nin     for ID ,ID ,ID ,ID in ID ().ID (ID ):\n        if ID is not ID :\n            pass \n"
    },
    {
        "code": "\ndef set_conv(self, conv):\n    \"\"\"There are only two built-in converters: ``s`` and ``r``. They are\n        somewhat rare and appearlike ``\"{ref!r}\"``.\"\"\"\n    # TODO\n    self.conv = conv\n    self.conv_func = None  # TODO\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 66,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39272
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    #COMMENT\n\n    ID .ID =ID \n    ID .ID =ID #COMMENT\n\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    #COMMENT\n\n    ID .ID =ID \n    ID .=ID #COMMENT\n\n"
    },
    {
        "code": "\n@property\ndef fstr(self):\n    \"The current state of the field in string format.\"\n    return construct_format_field_str(self.fname, self.fspec, self.conv)\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 55,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39273
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID ,ID .ID ,ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID ,ID ID ,ID .ID )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    if self.conv is not None:\n        pass\n    elif self.fspec != '':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 64,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39274
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n    elif ID .ID !=LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is not ID :\n        pass \n    elif global .ID !=LIT :\n        pass \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.fstr\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 39275
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID ):\n    is return ID .ID \n"
    },
    {
        "code": "def __init__(self, func, cache_value=True):\n    self.func = func\n    self.cache_value = True\n    self._value = _UNSET\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 4,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39276
        },
        "correct_code": "def ID (ID ,ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =ID \n",
        "wrong_code": "def from (ID ,ID ,ID =LIT ):\n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get_value(self):\n    if self._value is _UNSET or not self.cache_value:\n        pass\n    if self.cache_value:\n        self._value = value\n    return value\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 96,
            "fix_type": "delete",
            "id": 39277
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID is ID or not ID .ID :\n        pass \n    if ID .ID :\n        ID .ID =ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID is ID or not ID .ID :\n        pass \n    if ID .ID :\n        ID .ID ID =ID \n    return ID \n"
    },
    {
        "code": "\ndef __int__(self):\n    return int(self.get_value())\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39278
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (global .ID ())\n"
    },
    {
        "code": "\ndef __float__(self):\n    return float(self.get_value())\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39279
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\n",
        "wrong_code": "\ndef ID ]ID ):\n    return ID (ID .ID ())\n"
    },
    {
        "code": "\ndef __str__(self):\n    return str(self.get_value())\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39280
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\n",
        "wrong_code": "\nID (ID ):\n    return ID (ID .ID ())\n"
    },
    {
        "code": "\ndef __unicode__(self):\n    return unicode(self.get_value())\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39281
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\n",
        "wrong_code": "]def ID (ID ):\n    return ID (ID .ID ())\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return repr(self.get_value())\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 41,
            "fix_type": "delete",
            "id": 39282
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID (ID .ID ())\nand "
    },
    {
        "code": "\ndef __format__(self, fmt):\n\n    try:\n        pass\n    except (ValueError, TypeError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/boltons/formatutils.py",
            "fix_location": 88,
            "fix_type": "delete",
            "id": 39283
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n    try :\n        pass \n    except (ID ,ID ):\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n    try :\n        pass \n    except (ID ,ID ):\n        pass \n        else "
    },
    {
        "code": "def __init__(self, greeting):\n    self.greeting = greeting\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39284
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ):\n    ID .ID =\n"
    },
    {
        "code": "\ndef greet(self, excitement='.'):\n    return self.greeting.capitalize() + excitement\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39285
        },
        "correct_code": "\ndef ID (ID ,ID =LIT ):\n    return ID .ID .ID ()+ID \n",
        "wrong_code": "\ndef ID (ID ID =LIT ):\n    return ID .ID .ID ()+ID \n"
    },
    {
        "code": "\ndef native_greet(self):\n    return self.greet(';')\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39286
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID .ID for LIT )\n"
    },
    {
        "code": "\n\ndef test_partials():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39287
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID (pass :\n    pass \n"
    },
    {
        "code": "def callee():\n    return 1\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39288
        },
        "correct_code": "def ID ():\n    return LIT \n",
        "wrong_code": "def ID (:\n    return LIT \n"
    },
    {
        "code": "\n\ndef test_copy_function():\n    def callee():\n        return 1\n    callee_copy = copy_function(callee)\n    assert callee is not callee_copy\n    assert callee() == callee_copy()\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/boltons/tests/test_funcutils.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39289
        },
        "correct_code": "\n\ndef ID ():\n    def ID ():\n        return LIT \n    ID =ID (ID )\n    assert ID is not ID \n    assert ID ()==ID ()\n",
        "wrong_code": "\n\ndef ID ():\n    =ID ():\n        return LIT \n    ID =ID (ID )\n    assert ID is not ID \n    assert ID ()==ID ()\n"
    },
    {
        "code": "def __init__(self, required=None, defaults=None, overwrite=False):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/middleware/context.py",
            "fix_location": 11,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 39290
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ,ID =LIT ):\n    pass \n",
        "wrong_code": "def ID (ID assert ID =ID ,ID =ID ,ID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef __repr__(self):\n    if self.required:\n        pass\n    if self.defaults:\n        pass\n    if self.overwrite:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/middleware/context.py",
            "fix_location": 30,
            "fix_type": "delete",
            "id": 39291
        },
        "correct_code": "\ndef ID (ID ):\n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID .ID :assert \n        pass \n    if ID .ID :\n        pass \n    if ID .ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/middleware/context.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39292
        },
        "correct_code": "def ID (ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "def ID (ID ,*ID ,or **ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_mako():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/tests/test_mako_render.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39293
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef assert ():\n    pass \n"
    },
    {
        "code": "\n\n@raises(mako.exceptions.TopLevelLookupException)\ndef test_mako_missing_template():\n    tmpl = 'missing_template.html'\n    return Application([('/', hello_world_ctx, tmpl)],\n                       render_factory=mako_render)\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/tests/test_mako_render.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39294
        },
        "correct_code": "\n\n@ID (ID .ID .ID )\ndef ID ():\n    ID =LIT \n    return ID ([(LIT ,ID ,ID )],\n    ID =ID )\n",
        "wrong_code": "else \n@ID (ID .ID .ID )\ndef ID ():\n    ID =LIT \n    return ID ([(LIT ,ID ,ID )],\n    ID =ID )\n"
    },
    {
        "code": "\n\ndef test_mako_broken_template():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/tests/test_mako_render.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39295
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_mako_mixed():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mahmoud/clastic/clastic/tests/test_mako_render.py",
            "fix_location": 10,
            "fix_type": "delete",
            "id": 39296
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID (is ):\n    pass \n"
    },
    {
        "code": "\ndef set_dns_lookup(dlookup):\n    global dns_lookup\n    dns_lookup = dlookup\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/addresslib/__init__.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39297
        },
        "correct_code": "\ndef ID (ID ):\n    global ID \n    ID =ID \n",
        "wrong_code": "\ndef ID (ID ):\n    global ID \n    =ID \n"
    },
    {
        "code": "\ndef set_mx_cache(mcache):\n    global mx_cache\n    mx_cache = mcache\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/addresslib/__init__.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39298
        },
        "correct_code": "\ndef ID (ID ):\n    global ID \n    ID =ID \n",
        "wrong_code": "\n=ID (ID ):\n    global ID \n    ID =ID \n"
    },
    {
        "code": "\n\ndef to_mime(key, value):\n    if not value:\n        pass\n\n    if type(value) == list:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 68,
            "fix_type": "delete",
            "id": 39299
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n\n    if ID (ID )==ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    if not ID :\n        pass \n\n    if ID (ID )==try ID :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef encode_address_header(name, value):\n    for addr in flanker.addresslib.address.parse_list(value):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 24,
            "fix_type": "modify",
            "fix_token": "for",
            "id": 39300
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    for ID in ID .ID .ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    del ID in ID .ID .ID .ID (ID ):\n        pass \n"
    },
    {
        "code": "\n\ndef encode_parametrized(key, value, params):\n    if params:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 39301
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    if ID :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    if ID is :\n        pass \n    else :\n        pass \n"
    },
    {
        "code": "\n\ndef encode_param(key, name, value):\n    try:\n        pass\n    except Exception:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 63,
            "fix_type": "delete",
            "id": 39302
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID ):\n    try :\n        pass \n    except ID :del \n        pass \n"
    },
    {
        "code": "\n\ndef encode_string(name, value, maxlinelen=None):\n    try:\n        pass\n    except UnicodeEncodeError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 21,
            "fix_type": "modify",
            "fix_token": "=",
            "id": 39303
        },
        "correct_code": "\n\ndef ID (ID ,ID ,ID =ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ,ID None ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\n\ndef is_address_header(key, val):\n    return key in ADDRESS_HEADERS and '@' in val\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/flanker/mime/message/headers/encoding.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "and",
            "id": 39304
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    return ID in ID and LIT in ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    return ID in ID LIT in ID \n"
    },
    {
        "code": "\n\ndef test_bounce_analyzer_on_bounce():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/tests/mime/bounce_tests.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39305
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ==):\n    pass \n"
    },
    {
        "code": "\n\ndef test_bounce_analyzer_on_regular():\n    bm = create.from_string(SIGNED)\n    assert_false(bm.is_bounce())\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/tests/mime/bounce_tests.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39306
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID (ID )\n    ID (ID .ID ())\n",
        "wrong_code": "\n\ndef ID ():\n    =ID .ID (ID )\n    ID (ID .ID ())\n"
    },
    {
        "code": "\n\ndef test_bounce_no_headers_error_message():\n    msg = create.from_string(\"Nothing\")\n    assert_false(msg.is_bounce())\n",
        "metadata": {
            "file": "py150_files/data/mailgun/flanker/tests/mime/bounce_tests.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 39307
        },
        "correct_code": "\n\ndef ID ():\n    ID =ID .ID (LIT )\n    ID (ID .ID ())\n",
        "wrong_code": "\n\ndef ID ():\n    ID =ID .ID nonlocal (LIT )\n    ID (ID .ID ())\n"
    },
    {
        "code": "\n\n@route('/')\ndef index(db):\n    contacts = db.query(Contact).all()\n    return template('contacts.html', contacts=contacts, form=None)\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 74,
            "fix_type": "delete",
            "id": 39308
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ):\n    ID =ID .ID (ID ).ID ()\n    return ID (LIT ,ID =ID ,ID =ID )\n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID (ID ):\n    ID =ID .ID (ID ).ID ()\n    return ID (LIT ,for ID =ID ,ID =ID )\n"
    },
    {
        "code": "\n\n@post('/')\ndef new_contact(db):\n    if _validate_contact_data(first_name, last_name, phone_number):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39309
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ):\n    if ID (ID ,ID ,ID ):\n        pass \n",
        "wrong_code": "\n\n@ID nonlocal LIT )\ndef ID (ID ):\n    if ID (ID ,ID ,ID ):\n        pass \n"
    },
    {
        "code": "\ndef _save_contact(db, first_name, last_name, phone_number):\n    contact = Contact()\n    contact.first_name = first_name\n    contact.last_name = last_name\n    contact.phone_number = phone_number\n    db.add(contact)\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39310
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    ID =ID ()\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID (ID )\n",
        "wrong_code": "\ndef ID (/ID ,ID ,ID ,ID ):\n    ID =ID ()\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n    ID .ID (ID )\n"
    },
    {
        "code": "\n\n@route('/delete/<id>')\ndef delete(id, db):\n    if contact is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39311
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\n\n@ID (LIT )yield \ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\n\n@route('/call/<id>')\ndef call(id, db):\n    if contact is None:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 11,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39312
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n",
        "wrong_code": "\n\n@ID (LIT \ndef ID (ID ,ID ):\n    if ID is ID :\n        pass \n"
    },
    {
        "code": "\n\n@route('/conference-twiml')\ndef conference_twiml():\n    twiml_response = twiml.Response()\n    twiml_response.dial().conference('pycontacts')\n    return Response(str(twiml_response))\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 41,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39313
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID ():\n    ID =ID .ID ()\n    ID .ID ().ID (LIT )\n    return ID (ID (ID ))\n",
        "wrong_code": "\n\n@ID (LIT )\ndef ID ():\n    ID =ID .ID ()assert ID .ID ().ID (LIT )\n    return ID (ID (ID ))\n"
    },
    {
        "code": "\n\n\n@route('/static/css/<filename>')\ndef server_static_css(filename):\n    return static_file(filename, root='./static/css')\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 39314
        },
        "correct_code": "\n\n\n@ID (LIT )\ndef ID (ID ):\n    return ID (ID ,ID =LIT )\n",
        "wrong_code": "\n\n\n@ID (LIT )\ndef ID (ID ):\n    return ID (ID ,ID =LIT )yield \n"
    },
    {
        "code": "\n\n@route('/static/js/<filename>')\ndef server_static_css(filename):\n    return static_file(filename, root='./static/js')\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39315
        },
        "correct_code": "\n\n@ID (LIT )\ndef ID (ID ):\n    return ID (ID ,ID =LIT )\n",
        "wrong_code": "\n\n@ID (LIT )nonlocal def ID (ID ):\n    return ID (ID ,ID =LIT )\n"
    },
    {
        "code": "\ndef __repr__(self):\n    return '<Contact {0} {1}: {2}>'.format(self.first_name,\n                                           self.last_name,\n                                           self.phone_number)\n",
        "metadata": {
            "file": "py150_files/data/makaimc/compare-python-web-frameworks/bottle_jinja_sqlalchemy/app.py",
            "fix_location": 55,
            "fix_type": "delete",
            "id": 39316
        },
        "correct_code": "\ndef ID (ID ):\n    return LIT .ID (ID .ID ,\n    ID .ID ,\n    ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    return LIT .ID (ID .ID ,\n    ID .ID except ,\n    ID .ID )\n"
    },
    {
        "code": "\ndef handle(self, *args, **options):\n    if len(args) < 3:\n        pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makaimc/underwear/underwear/management/commands/deploy.py",
            "fix_location": 71,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39317
        },
        "correct_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID (ID )<LIT :\n        pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,*ID ,**ID ):\n    if ID (ID )<LIT :\n        pass \n    else \n        pass \n"
    },
    {
        "code": "def _settings():\n    locationsData = __salt__['mc_utils.defaults'](\n        'makina-states.localsettings.locations',\n        copy.deepcopy(default_locs))\n    return locationsData\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_locations.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39318
        },
        "correct_code": "def ID ():\n    ID =ID [LIT ](\n    LIT ,\n    ID .ID (ID ))\n    return ID \n",
        "wrong_code": "def ID ():\n    ID =ID [LIT ](\n    LIT ,\n    ..ID (ID ))\n    return ID \n"
    },
    {
        "code": "\n\ndef settings(cached=True):\n    def _settings():\n        pass\n    if cached:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_locations.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39319
        },
        "correct_code": "\n\ndef ID (ID =LIT ):\n    def ID ():\n        pass \n    if ID :\n        pass \n",
        "wrong_code": "[\n\ndef ID (ID =LIT ):\n    def ID ():\n        pass \n    if ID :\n        pass \n"
    },
    {
        "code": "@mc_states.api.lazy_subregistry_get(__salt__, __name)\ndef _settings():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_psad.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 39320
        },
        "correct_code": "@ID .ID .ID (ID ,ID )\ndef ID ():\n    pass \n",
        "wrong_code": "@ID .ID .ID (ID continue ID )\ndef ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef settings():\n    @mc_states.api.lazy_subregistry_get(__salt__, __name)\n    def _settings():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_psad.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39321
        },
        "correct_code": "\n\ndef ID ():\n    @ID .ID .ID (ID ,ID )\n    def ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    @ID .ID .ID (,ID )\n    def ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef get_default_groups():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_usergroup.py",
            "fix_location": 17,
            "fix_type": "modify",
            "fix_token": "pass",
            "id": 39322
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n    import \n"
    },
    {
        "code": "\n\ndef get_default_users():\n    for k in [a for a in users]:\n        if '.' in k:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_usergroup.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39323
        },
        "correct_code": "\n\ndef ID ():\n    for ID in [ID for ID in ID ]:\n        if LIT in ID :\n            pass \n",
        "wrong_code": "class \n\ndef ID ():\n    for ID in [ID for ID in ID ]:\n        if LIT in ID :\n            pass \n"
    },
    {
        "code": "\n\ndef get_default_sysadmins():\n    if grains['os'] in ['Ubuntu']:\n        pass\n    if saltmods['mc_macros.is_item_active'](\n        'nodetypes', 'vagrantvm'\n    ):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/doc/mc_states/modules/mc_usergroup.py",
            "fix_location": 37,
            "fix_type": "insert",
            "fix_token": "]",
            "id": 39324
        },
        "correct_code": "\n\ndef ID ():\n    if ID [LIT ]in [LIT ]:\n        pass \n    if ID [LIT ](\n    LIT ,LIT \n    ):\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID [LIT ]in [LIT :\n        pass \n    if ID [LIT ](\n    LIT ,LIT \n    ):\n        pass \n"
    },
    {
        "code": "\n\ndef _is_travis():\n    if val in ['y', 't', 'o', 'true', '1']:\n        pass\n    elif val:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 72,
            "fix_type": "modify",
            "fix_token": "elif",
            "id": 39325
        },
        "correct_code": "\n\ndef ID ():\n    if ID in [LIT ,LIT ,LIT ,LIT ,LIT ]:\n        pass \n    elif ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    if ID in [LIT ,LIT ,LIT ,LIT ,LIT ]:\n        pass \n    await ID :\n        pass \n"
    },
    {
        "code": "\n\ndef _is_container():\n    return _is_docker() or _is_lxc()\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39326
        },
        "correct_code": "\n\ndef ID ():\n    return ID ()or ID ()\n",
        "wrong_code": "\n\ndef ID is ):\n    return ID ()or ID ()\n"
    },
    {
        "code": "\n\ndef _devhost_num():\n    return ''\n    # devhost will be removed from makina-states sooner or later\n    # if os.path.exists('/root/vagrant/provision_settings.sh'):\n    #     num = subprocess.Popen(\n    #         'bash -c \"'\n    #         '. /root/vagrant/provision_settings.sh;'\n    #         'echo \\$DEVHOST_NUM\"',\n    #         shell=True, stdout=subprocess.PIPE\n    #     ).stdout.read().strip()\n    # if not num:\n    #     num = '0'\n    # return num\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 186,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39327
        },
        "correct_code": "\n\ndef ID ():\n    return LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n",
        "wrong_code": "\n\ndef ID ():\n    return LIT \n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n\n    #COMMENT\n    *"
    },
    {
        "code": "\n\ndef _is_vm():\n    ret = False\n    if _is_container():\n        ret = True\n    return ret\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 39328
        },
        "correct_code": "\n\ndef ID ():\n    ID =LIT \n    if ID ():\n        ID =LIT \n    return ID \n",
        "wrong_code": "\n\ndef ID ():\n    ID =LIT \n    if ID ():\n    del ID =LIT \n    return ID \n"
    },
    {
        "code": "\n\ndef _is_devhost():\n    return _devhost_num() != ''\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 27,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39329
        },
        "correct_code": "\n\ndef ID ():\n    return ID ()!=LIT \n",
        "wrong_code": "\n\ndef ID ():\n    return ID )!=LIT \n"
    },
    {
        "code": "\n\ndef _is_upstart():\n    if os.path.exists('/var/log/upstart'):\n        return True\n    return False\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 74,
            "fix_type": "delete",
            "id": 39330
        },
        "correct_code": "\n\ndef ID ():\n    if ID .ID .ID (LIT ):\n        return LIT \n    return LIT \n",
        "wrong_code": "\n\ndef ID ():\n    if ID .ID .ID (LIT ):\n        return LIT \n    return LIT def \n"
    },
    {
        "code": "\n\ndef get_makina_grains():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/makinacorpus/makina-states.pack1/mc_states/grains/makina_grains.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39331
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ID ():\n/    pass \n"
    },
    {
        "code": "def setUp(self):\n\n    # Intentionally not using get_or_create_by_full_name() here, since\n    # that's one of the things needing testing.\n    for node in nodes:\n        for piece in pieces[1:]:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 0,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39332
        },
        "correct_code": "def ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID :\n        for ID in ID [LIT :]:\n            pass \n",
        "wrong_code": "ID (ID ):\n\n#COMMENT\n\n#COMMENT\n\n    for ID in ID :\n        for ID in ID [LIT :]:\n            pass \n"
    },
    {
        "code": "\ndef tearDown(self):\n    self.signals = []\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39333
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =[]\n",
        "wrong_code": "\nID def ID (ID ):\n    ID .ID =[]\n"
    },
    {
        "code": "\ndef signal_catcher(self, sender, **kwargs):\n    \"\"\"\n        Used to record the emission of any signal(s) during the test.\n        \"\"\"\n    self.signals.append((sender, kwargs))\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39334
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    LIT \n    ID .ID .ID ((ID ,ID ))\n",
        "wrong_code": "\ndef ID (ID ,ID ,**ID ):\n    LIT \n    ID .ID .ID ((ID ,break ))\n"
    },
    {
        "code": "\n\ndef test_bad_full_name(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 6,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39335
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef assert (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_get_by_full_name1(self):\n    \"\"\"\n        Tests that we can correctly retrieve a node given its full name. This\n        tests the simple case (where the final portion of the full name is\n        unique).\n        \"\"\"\n    node = models.Topic.objects.get_by_full_name(\"c/b/d\")\n    self.assertEquals(unicode(node), u\"c/b/d\")\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39336
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID .ID (LIT )\n    ID .ID (ID (ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID ID (LIT )\n    ID .ID (ID (ID ),LIT )\n"
    },
    {
        "code": "\ndef test_get_by_full_name2(self):\n    \"\"\"\n        Tests that we can correctly retrieve a node given its full name. This\n        version looks for a node whose final component matches more than one\n        topic, so some extra computation is required in the implementation.\n        \"\"\"\n    node = models.Topic.objects.get_by_full_name(\"a/b/c\")\n    self.assertEquals(unicode(node), u\"a/b/c\")\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 52,
            "fix_type": "delete",
            "id": 39337
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID .ID (LIT )\n    ID .ID (ID (ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID .ID (LIT with )\n    ID .ID (ID (ID ),LIT )\n"
    },
    {
        "code": "\ndef test_get_by_full_name3(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39338
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nand "
    },
    {
        "code": "\ndef test_get_subtree(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39339
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n(ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_name_normalisation(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39340
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\ntry     pass \n"
    },
    {
        "code": "\ndef test_unicode(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39341
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_change_parent(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39342
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nfinally ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_simple_merge_nodes(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39343
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID global ):\n    pass \n"
    },
    {
        "code": "\ndef test_multiple_merge_nodes(self):\n    try:\n        pass\n    except models.Topic.DoesNotExist:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 39344
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID .ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    try :\n        pass \n    ]except ID .ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef test_merge_without_overlap(self):\n    try:\n        pass\n    except models.Topic.DoesNotExist:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "try",
            "id": 39345
        },
        "correct_code": "\ndef ID (ID ):\n    try :\n        pass \n    except ID .ID .ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass :\n        pass \n    except ID .ID .ID :\n        pass \n"
    },
    {
        "code": "\ndef test_move_is_not_merge(self):\n    self.assertRaises(db.IntegrityError, node.move_to, target)\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 23,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39346
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (ID .ID ,ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .](ID .ID ,ID .ID ,ID )\n"
    },
    {
        "code": "\ndef test_create_by_full_name1(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39347
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID and :\n    pass \n"
    },
    {
        "code": "\ndef test_create_by_full_name2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 1,
            "fix_type": "insert",
            "fix_token": "def",
            "id": 39348
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_create_by_full_name3(self):\n    \"\"\"\n        Tests that attempting to create a new node using a full name that\n        already exists works as expected (the pre-existing node is returned and\n        nothing new is created).\n        \"\"\"\n    _, created = models.Topic.objects.get_or_create_by_full_name(\"c/b/d\")\n    self.assertEqual(created, False)\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 62,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39349
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID .ID .ID (LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID .ID .ID (LIT )\n    ,.ID (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_create_by_full_name4(self):\n    node, created = models.Topic.objects.get_or_create_by_full_name(\n            \"a///b/e//\")\n    self.assertEqual(created, True)\n    self.assertEqual(unicode(node), u\"a/b/e\")\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 53,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39350
        },
        "correct_code": "\ndef ID (ID ):\n    ID ,ID =ID .ID .ID .ID (\n    LIT )\n    ID .ID (ID ,LIT )\n    ID .ID (ID (ID ),LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID ,ID =ID .ID .ID .ID (\n    LIT )ID .ID (ID ,LIT )\n    ID .ID (ID (ID ),LIT )\n"
    },
    {
        "code": "\ndef test_create_by_full_name5(self):\n    \"\"\"\n        Tests that creating a new node with a new root works as expected.\n        \"\"\"\n    _, created = models.Topic.objects.get_or_create_by_full_name(\"j/k/l\")\n    self.assertEqual(created, True)\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 69,
            "fix_type": "delete",
            "id": 39351
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID .ID .ID (LIT )\n    ID .ID (ID ,LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID ,ID =ID .ID .ID .ID (LIT )\n    ID .ID yield (ID ,LIT )\n"
    },
    {
        "code": "\ndef test_create_duplicate_entry(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/malcolmt/django-acacia/acacia/tests/test_models.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39352
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nyield ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef recon(self):\n    for s in self.dvm.get_strings():\n        if s.startswith('get.php'):\n            self.gate = s\n            return True\n",
        "metadata": {
            "file": "py150_files/data/maldroid/maldrolyzer/plugins/marcher.py",
            "fix_location": 126,
            "fix_type": "delete",
            "id": 39353
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID ():\n        if ID .ID (LIT ):\n            ID .ID =ID \n            return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID .ID ():\n        if ID .ID (LIT ):\n            ID .ID =ID \n            return LIT \n        or "
    },
    {
        "code": "def __init__(self, ctx):\n    self.ctx = ctx\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 39354
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def /ID (ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef get(self, name, create=False):\n    if not validate_chan(name):\n        pass\n    if ch or not create:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 48,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39355
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if not ID (ID ):\n        pass \n    if ID or not ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ):\n    if not ID (ID ):del pass \n    if ID or not ID :\n        pass \n"
    },
    {
        "code": "def __init__(self, client, channel):\n    self.client = client\n    self.channel = channel\n    self.props = CaseInsensitiveDict()\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 19,
            "fix_type": "delete",
            "id": 39356
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ,ID ,ID None ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID ()\n"
    },
    {
        "code": "\n@property\ndef name(self):\n    for prop, flag in member_property_items.items():\n        if self.props.get(prop, False):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 67,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39357
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "\n@property\ndef hostmask(self):\n    for prop, flag in member_property_items.items():\n        if self.props.get(prop, False):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 39358
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\nID ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "\n@property\ndef who_status(self):\n    for prop, flag in member_property_items.items():\n        if self.props.get(prop, False):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39359
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "=@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "\n@property\ndef channel_name(self):\n    for prop, flag in member_property_items.items():\n        if self.props.get(prop, False):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 48,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39360
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID .ID .ID (ID ,LIT ):\n            pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    for ID ,ID in ID .ID ():if ID .ID .ID (ID ,LIT ):\n            pass \n"
    },
    {
        "code": "def __init__(self, name):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39361
        },
        "correct_code": "def ID (ID ,ID ):\n    pass \n",
        "wrong_code": "def def ID (ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef join(self, client):\n    m = ChannelMembership(client, self)\n    self.members.append(m)\n    client.channels.append(m)\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39362
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID )\n    ID .ID .ID (ID )\n    ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID ,ID \n    ID .ID .ID (ID )\n    ID .ID .ID (ID )\n"
    },
    {
        "code": "\ndef part(self, client):\n    for m in filter(lambda x: x.client == client, self.members):\n        if m in client.channels:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 91,
            "fix_type": "delete",
            "id": 39363
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    for ID in ID (lambda ID :ID .ID ==ID ,ID .ID ):\n        if ID in ID .ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    for ID in ID (lambda ID :ID .ID ==ID ,ID .ID ):\n        if ID in ID ,.ID :\n            pass \n"
    },
    {
        "code": "\ndef has_member(self, client):\n    matches = tuple(filter(lambda x: x.client == client, self.members))\n    return len(matches) > 0\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 67,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39364
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID (lambda ID :ID .ID ==ID ,ID .ID ))\n    return ID (ID )>LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID (lambda ID :ID .ID ==ID ,ID .ID )import \n    return ID (ID )>LIT \n"
    },
    {
        "code": "\ndef get_member(self, client):\n    matches = tuple(filter(lambda x: x.client == client, self.members))\n    return len(matches) > 0 and matches[0]\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39365
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID (lambda ID :ID .ID ==ID ,ID .ID ))\n    return ID (ID )>LIT and ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    =ID (ID (lambda ID :ID .ID ==ID ,ID .ID ))\n    return ID (ID )>LIT and ID [LIT ]\n"
    },
    {
        "code": "\ndef find_member(self, nickname):\n    matches = tuple(filter(lambda x: x.client.nickname == nickname, self.members))\n    return len(matches) > 0 and matches[0]\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 71,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39366
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID (lambda ID :ID .ID .ID ==ID ,ID .ID ))\n    return ID (ID )>LIT and ID [LIT ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID (ID (lambda ID :ID .ID .ID ==ID ,ID .ID )+\n    return ID (ID )>LIT and ID [LIT ]\n"
    },
    {
        "code": "\ndef can_display(self, client):\n    if self.props.get('secret', False):\n        return self.has_member(client)\n    return True\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39367
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID (LIT ,LIT ):\n        return ID .ID (ID )\n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID pass :\n    if ID .ID .ID (LIT ,LIT ):\n        return ID .ID (ID )\n    return LIT \n"
    },
    {
        "code": "\n@property\ndef classification(self):\n    if not 'secret' in self.props:\n        return '='\n    return '@'\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 38,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39368
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    if not LIT in ID .ID :\n        return LIT \n    return LIT \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    if not LIT in .ID :\n        return LIT \n    return LIT \n"
    },
    {
        "code": "\n@eventmgr_core.handler('channel join', priority=1)\ndef m_join_channel(info):\n\n    if cli.servername != ctx.conf.name:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 44,
            "fix_type": "insert",
            "fix_token": "if",
            "id": 39369
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n\n    if ID .ID !=ID .ID .ID :\n        pass \n",
        "wrong_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n\n    ID .ID !=ID .ID .ID :\n        pass \n"
    },
    {
        "code": "\n@eventmgr_core.handler('channel part', priority=1)\ndef m_part_channel(info):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mammon-ircd/mammon/mammon/channel.py",
            "fix_location": 10,
            "fix_type": "modify",
            "fix_token": "LIT",
            "id": 39370
        },
        "correct_code": "\n@ID .ID (LIT ,ID =LIT )\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID .ID (if ,ID =LIT )\ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "@functools.wraps(fnIN)\ndef wrap_func(*args, **kwargs):\n    # Save and delete the following line and use it in your own code\n    # fnIN(*args,**kwargs)\n    try:\n        pass\n    except Exception as err:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/manahl/PythonTrainingExercises/Advanced/ExceptionDecorator/solution/Decorators.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 39371
        },
        "correct_code": "@ID .ID (ID )\ndef ID (*ID ,**ID ):\n#COMMENT\n\n#COMMENT\n\n    try :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "@ID .ID (ID )\ndef elif ID (*ID ,**ID ):\n#COMMENT\n\n#COMMENT\n\n    try :\n        pass \n    except ID as ID :\n        pass \n"
    },
    {
        "code": "\n\n@raises(RightException)\ndef functionOne():\n    \"\"\"Documentation for functionOne, this may raise an WrongException.\"\"\"\n    raise WrongException('Raising an WrongException (originally)')\n",
        "metadata": {
            "file": "py150_files/data/manahl/PythonTrainingExercises/Advanced/ExceptionDecorator/solution/Decorators.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39372
        },
        "correct_code": "\n\n@ID (ID )\ndef ID ():\n    LIT \n    raise ID (LIT )\n",
        "wrong_code": "\n\n@ID (ID )\ndef ID ():\nID     LIT \n    raise ID (LIT )\n"
    },
    {
        "code": "\n\ndef main():\n    try:\n        pass\n    except RightException as err:\n        pass\n    except WrongException as err:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/manahl/PythonTrainingExercises/Advanced/ExceptionDecorator/solution/Decorators.py",
            "fix_location": 36,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39373
        },
        "correct_code": "\n\ndef ID ():\n    try :\n        pass \n    except ID as ID :\n        pass \n    except ID as ID :\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    try :\n        pass except ID as ID :\n        pass \n    except ID as ID :\n        pass \n"
    },
    {
        "code": "\n@evalnode\ndef B():\n    if A():\n        return True\n    raise TestException(\"A not set\")\n",
        "metadata": {
            "file": "py150_files/data/manahl/mdf/mdf/tests/test_exceptions.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39374
        },
        "correct_code": "\n@ID \ndef ID ():\n    if ID ():\n        return LIT \n    raise ID (LIT )\n",
        "wrong_code": "\n@ID \ndef ID ():\n    if ID ():\n        return LIT \n        !raise ID (LIT )\n    "
    },
    {
        "code": "\n@evalnode\ndef C():\n    if now() < datetime(2001, 1, 1):\n        raise TestException(\"Prior to 2001\")\n    return True\n",
        "metadata": {
            "file": "py150_files/data/manahl/mdf/mdf/tests/test_exceptions.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39375
        },
        "correct_code": "\n@ID \ndef ID ():\n    if ID ()<ID (LIT ,LIT ,LIT ):\n        raise ID (LIT )\n    return LIT \n",
        "wrong_code": "\n@ID \ndef ID ():\n    if ID LIT )<ID (LIT ,LIT ,LIT ):\n        raise ID (LIT )\n    return LIT \n"
    },
    {
        "code": "def setUp(self):\n    self.ctx = MDFContext()\n",
        "metadata": {
            "file": "py150_files/data/manahl/mdf/mdf/tests/test_exceptions.py",
            "fix_location": 22,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39376
        },
        "correct_code": "def ID (ID ):\n    ID .ID =ID ()\n",
        "wrong_code": "def ID (ID ):\n    ID .yield =ID ()\n"
    },
    {
        "code": "\ndef test_exception_1(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/manahl/mdf/mdf/tests/test_exceptions.py",
            "fix_location": 15,
            "fix_type": "delete",
            "id": 39377
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n,    pass \n"
    },
    {
        "code": "\ndef test_exception_2(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/manahl/mdf/mdf/tests/test_exceptions.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39378
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n,"
    },
    {
        "code": "def fn(value):\n    try:\n        if date is not None:\n            pass\n        else:\n            pass\n    except ValueError:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/manjitkumar/drf-url-filters/filters/validations.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39379
        },
        "correct_code": "def ID (ID ):\n    try :\n        if ID is not ID :\n            pass \n        else :\n            pass \n    except ID :\n        pass \n",
        "wrong_code": "def ID (ID ):\n    try :\n        if is not ID :\n            pass \n        else :\n            pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\n\ndef get_data_window(arr, nodata=None):\n    \"\"\"Return a window for the non-nodata pixels within the input array.\n\n    Parameters\n    ----------\n    arr: numpy ndarray, <= 3 dimensions\n    nodata: number\n        If None, will either return a full window if arr is not a masked\n        array, or will use the mask to determine non-nodata pixels.\n        If provided, it must be a number within the valid range of the dtype\n        of the input array.\n\n    Returns\n    -------\n    ((row_start, row_stop), (col_start, col_stop))\n\n    \"\"\"\n    from rasterio._io import get_data_window\n    return get_data_window(arr, nodata)\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/rasterio/windows.py",
            "fix_location": 71,
            "fix_type": "delete",
            "id": 39380
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ):\n    LIT \n    from ID .ID import ID \n    return ID (ID ,ID )\n",
        "wrong_code": "\n\ndef ID (ID ,ID =ID ):\n    LIT \n    from ID .ID import ID \n    return break ID (ID ,ID )\n"
    },
    {
        "code": "\n\n@iter_args\ndef union(*windows):\n    \"\"\"Union windows and return the outermost extent they cover.\n\n    Parameters\n    ----------\n    windows: list-like of window objects\n        ((row_start, row_stop), (col_start, col_stop))\n\n    Returns\n    -------\n    ((row_start, row_stop), (col_start, col_stop))\n    \"\"\"\n    from rasterio._io import window_union\n    return window_union(windows)\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/rasterio/windows.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 39381
        },
        "correct_code": "\n\n@ID \ndef ID (*ID ):\n    LIT \n    from ID .ID import ID \n    return ID (ID )\n",
        "wrong_code": "\n\n@ID \ndef ID (*ID )for :\n    LIT \n    from ID .ID import ID \n    return ID (ID )\n"
    },
    {
        "code": "\n\n@iter_args\ndef intersection(*windows):\n    \"\"\"Intersect windows and return the innermost extent they cover.\n\n    Will raise ValueError if windows do not intersect.\n\n    Parameters\n    ----------\n    windows: list-like of window objects\n        ((row_start, row_stop), (col_start, col_stop))\n\n    Returns\n    -------\n    ((row_start, row_stop), (col_start, col_stop))\n    \"\"\"\n    from rasterio._io import window_intersection\n    return window_intersection(windows)\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/rasterio/windows.py",
            "fix_location": 43,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39382
        },
        "correct_code": "\n\n@ID \ndef ID (*ID ):\n    LIT \n    from ID .ID import ID \n    return ID (ID )\n",
        "wrong_code": "\n\n@ID \ndef ID (*ID ):\n    LIT \n    from ID ID import ID \n    return ID (ID )\n"
    },
    {
        "code": "\n\n@iter_args\ndef intersect(*windows):\n    \"\"\"Test if windows intersect.\n\n    Parameters\n    ----------\n    windows: list-like of window objects\n        ((row_start, row_stop), (col_start, col_stop))\n\n    Returns\n    -------\n    boolean:\n        True if all windows intersect.\n    \"\"\"\n    from rasterio._io import windows_intersect\n    return windows_intersect(windows)\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/rasterio/windows.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39383
        },
        "correct_code": "\n\n@ID \ndef ID (*ID ):\n    LIT \n    from ID .ID import ID \n    return ID (ID )\n",
        "wrong_code": "\n\n@ID \ndef ID (*ID ):\n    LIT \n    from ID .pass import ID \n    return ID (ID )\n"
    },
    {
        "code": "def __init__(self, left, bottom, right, top, width, height, src_crs,\n             dst_crs):\n\n    with Env():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 8,
            "fix_type": "delete",
            "id": 39384
        },
        "correct_code": "def ID (ID ,ID ,ID ,ID ,ID ,ID ,ID ,ID ,\nID ):\n\n    with ID ():\n        pass \n",
        "wrong_code": "def ID (del ID ,ID ,ID ,ID ,ID ,ID ,ID ,ID ,\nID ):\n\n    with ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef default_reproject_params():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39385
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "del \n\ndef ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef test_transform():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 2,
            "fix_type": "delete",
            "id": 39386
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\nelse def ID ():\n    pass \n"
    },
    {
        "code": "\n\ndef test_transform_bounds_densify():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 6,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39387
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "\n\ndef ():\n    pass \n"
    },
    {
        "code": "\n\ndef test_transform_bounds_densify_out_of_bounds():\n    with pytest.raises(ValueError):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 30,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39388
        },
        "correct_code": "\n\ndef ID ():\n    with ID .ID (ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n    with ID .ID (return ):\n        pass \n"
    },
    {
        "code": "\n\ndef test_reproject_nodata():\n\n    with Env():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39389
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID ):\n\n    with ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef test_reproject_nodata_nan():\n\n    with Env():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39390
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID ():LIT \n    with ID ():\n        pass \n"
    },
    {
        "code": "\n\ndef test_reproject_dst_nodata_default():\n\n    with Env():\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 44,
            "fix_type": "delete",
            "id": 39391
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n        pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    with ID ():\n        pass \n=="
    },
    {
        "code": "\n\ndef test_reproject_invalid_dst_nodata():\n\n    with Env():\n\n        with pytest.raises(ValueError):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 88,
            "fix_type": "delete",
            "id": 39392
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n\n        with ID .ID (ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    with ID ():\n\n        with ID .ID (ID ):\n            pass \n            await "
    },
    {
        "code": "\n\ndef test_reproject_missing_src_nodata():\n\n    with Env():\n\n        with pytest.raises(ValueError):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39393
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n\n        with ID .ID (ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID not ():\n\n    with ID ():\n\n        with ID .ID (ID ):\n            pass \n"
    },
    {
        "code": "\n\ndef test_reproject_invalid_src_nodata():\n\n    with Env():\n\n        with pytest.raises(ValueError):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "with",
            "id": 39394
        },
        "correct_code": "\n\ndef ID ():\n\n    with ID ():\n\n        with ID .ID (ID ):\n            pass \n",
        "wrong_code": "\n\ndef ID ():\n\n    [ID ():\n\n        with ID .ID (ID ):\n            pass \n"
    },
    {
        "code": "\n\ndef test_transform_geom():\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mapbox/rasterio/tests/test_warp.py",
            "fix_location": 0,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39395
        },
        "correct_code": "\n\ndef ID ():\n    pass \n",
        "wrong_code": "]\ndef ID ():\n    pass \n"
    },
    {
        "code": "def int_to_bytes(v):\n    while v > 0:\n        pass\n    l.reverse()\n    return bytes(l)\n",
        "metadata": {
            "file": "py150_files/data/maraoz/proofofexistence/pycoin/tx/script/tools.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39396
        },
        "correct_code": "def ID (ID ):\n    while ID >LIT :\n        pass \n    ID .ID ()\n    return ID (ID )\n",
        "wrong_code": "def ID ()):\n    while ID >LIT :\n        pass \n    ID .ID ()\n    return ID (ID )\n"
    },
    {
        "code": "def bytes_to_int(s):\n    v = 0\n    b = 0\n    for c in bytes_to_ints(s):\n        v += (c << b)\n        b += 8\n    return v\n",
        "metadata": {
            "file": "py150_files/data/maraoz/proofofexistence/pycoin/tx/script/tools.py",
            "fix_location": 58,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39397
        },
        "correct_code": "def ID (ID ):\n    ID =LIT \n    ID =LIT \n    for ID in ID (ID ):\n        ID +=(ID <<ID )\n        ID +=LIT \n    return ID \n",
        "wrong_code": "def ID (ID ):\n    ID =LIT \n    ID =LIT \n    for ID in ID (try ):\n        ID +=(ID <<ID )\n        ID +=LIT \n    return ID \n"
    },
    {
        "code": "\ndef compile(s):\n    for t in s.split():\n        if t in OPCODE_TO_INT:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/maraoz/proofofexistence/pycoin/tx/script/tools.py",
            "fix_location": 39,
            "fix_type": "delete",
            "id": 39398
        },
        "correct_code": "\ndef ID (ID ):\n    for ID in ID .ID ():\n        if ID in ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID in ID .ID ():(\n        if ID in ID :\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef disassemble(script):\n    while pc < len(script):\n        if len(data) > 0:\n            pass\n        if not opcode in INT_TO_OPCODE:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/maraoz/proofofexistence/pycoin/tx/script/tools.py",
            "fix_location": 33,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39399
        },
        "correct_code": "\ndef ID (ID ):\n    while ID <ID (ID ):\n        if ID (ID )>LIT :\n            pass \n        if not ID in ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ):\n    while ID <ID ([):\n        if ID (ID )>LIT :\n            pass \n        if not ID in ID :\n            pass \n"
    },
    {
        "code": "\ndef delete_subscript(script, subscript):\n    while pc < len(script):\n        if script[pc:pc+size] == subscript:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/maraoz/proofofexistence/pycoin/tx/script/tools.py",
            "fix_location": 42,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39400
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while ID <ID (ID ):\n        if ID [ID :ID +ID ]==ID :\n            pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    while ID <ID (ID ):=if ID [ID :ID +ID ]==ID :\n            pass \n"
    },
    {
        "code": "\ndef __init__(self, email, key, zone, ttl=1,\n             url='https://www.cloudflare.com/api_json.html'):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39401
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =LIT ,\nID =LIT ):\n    pass \n",
        "wrong_code": "\ndef and (ID ,ID ,ID ,ID ,ID =LIT ,\nID =LIT ):\n    pass \n"
    },
    {
        "code": "\ndef _do_request(self, data={}):\n\n    # If result is not successful, raise error\n    if response_data.get('result') != 'success':\n        pass\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": ":",
            "id": 39402
        },
        "correct_code": "\ndef ID (ID ,ID ={}):\n\n#COMMENT\n\n    if ID .ID (LIT )!=LIT :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ={}):\n\n#COMMENT\n\n    if ID .ID (LIT )!=LIT -\n        pass \n"
    },
    {
        "code": "\ndef _hostname(self, fqdn):\n    \"\"\"\n        Asserts that the given FQDN belong to the configured zone and\n        returns the hostname.\n\n        # Params:\n\n        - `fqdn`: full qualified domain name to retrieve the hostname from.\n        \"\"\"\n    zone = '.' + self.zone\n    assert fqdn.endswith(zone)\n    return fqdn[:-len(zone)]\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 63,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39403
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =LIT +ID .ID \n    assert ID .ID (ID )\n    return ID [:-ID (ID )]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID =LIT +ID .ID \n    assert ID ID (ID )\n    return ID [:-ID (ID )]\n"
    },
    {
        "code": "\n@property\ndef _records(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 39404
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    pass =\n"
    },
    {
        "code": "\ndef get_a_records(self, fqdn):\n    return [record.get('content')\n            for record in self._records\n            if record.get('name') == fqdn and record.get('type') == 'A']\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 81,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39405
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return [ID .ID (LIT )\n    for ID in ID .ID \n    if ID .ID (LIT )==ID and ID .ID (LIT )==LIT ]\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return [ID .ID (LIT )\n    for ID in ID .ID \n    if ID .ID global LIT )==ID and ID .ID (LIT )==LIT ]\n"
    },
    {
        "code": "\ndef add_a_record(self, fqdn, ip):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marccerrato/python-dns-failover/dns_failover/backends.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39406
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,assert ID ,ID ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, board, side, position,  movesMade=0):\n    super(Knight, self).__init__(board, side, position)\n    self.movesMade = movesMade\n",
        "metadata": {
            "file": "py150_files/data/marcusbuffett/command-line-chess/build/lib/chess/Knight.py",
            "fix_location": 85,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39407
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =LIT ):\n    ID (ID ,ID ).ID (ID ,ID ,ID )\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ,ID =LIT ):\n    ID (ID ,ID ).ID (ID ,ID ,ID )\n    ID .ID =ID ."
    },
    {
        "code": "def __init__(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marcusmoller/pyorpg-server/src/gui.py",
            "fix_location": 12,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39408
        },
        "correct_code": "def ID (ID ):\n    pass \n",
        "wrong_code": "def ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef createModel(self):\n    store = gtk.ListStore(str, str)\n\n    store.append(['test', 'mon det virker'])\n\n    return store\n",
        "metadata": {
            "file": "py150_files/data/marcusmoller/pyorpg-server/src/gui.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39409
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID .ID (ID ,ID )\n\n    ID .ID ([LIT ,LIT ])\n\n    return ID \n",
        "wrong_code": "\ndef ID ==ID ):\n    ID =ID .ID (ID ,ID )\n\n    ID .ID ([LIT ,LIT ])\n\n    return ID \n"
    },
    {
        "code": "\n\ndef unicode_csv_reader(utf8_data, dialect=csv.excel, **kwargs):\n    for row in csv_reader:\n        if is_python2():\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/marcwebbie/passpie/passpie/importers/csv_importer.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": ",",
            "id": 39410
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID .ID ,**ID ):\n    for ID in ID :\n        if ID ():\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =ID .ID yield **ID ):\n    for ID in ID :\n        if ID ():\n            pass \n        else :\n            pass \n"
    },
    {
        "code": "\ndef match(self, filepath):\n    \"\"\"Dont match this importer\"\"\"\n    return False\n",
        "metadata": {
            "file": "py150_files/data/marcwebbie/passpie/passpie/importers/csv_importer.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39411
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):[    LIT \n    return LIT \n"
    },
    {
        "code": "\n\ndef parse_rest(rest):\n    try:\n        pass\n    except SystemMessage:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mardiros/pyshop/pyshop/helpers/restxt.py",
            "fix_location": 2,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39412
        },
        "correct_code": "\n\ndef ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n",
        "wrong_code": "\n\n.ID (ID ):\n    try :\n        pass \n    except ID :\n        pass \n"
    },
    {
        "code": "\ndef get_file_name(filename):\n    \"\"\"\n    Return the filename without the path\n    :param filename:\n    :return: str\n    \"\"\"\n    return os.path.basename(filename)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 43,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39413
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .return (ID )\n"
    },
    {
        "code": "\ndef get_file_extension(filename):\n    \"\"\"\n    Return a file extension\n    :param filename:\n    :return: str\n    \"\"\"\n    return os.path.splitext(filename)[1][1:].lower()\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 28,
            "fix_type": "delete",
            "id": 39414
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID .ID .ID (ID )[LIT ][LIT :].ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    except return ID .ID .ID (ID )[LIT ][LIT :].ID ()\n"
    },
    {
        "code": "\ndef get_file_extension_type(filename):\n    if ext:\n        for name, group in EXTENSIONS.items():\n            if ext in group:\n                pass\n    return \"OTHER\"\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 124,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39415
        },
        "correct_code": "\ndef ID (ID ):\n    if ID :\n        for ID ,ID in ID .ID ():\n            if ID in ID :\n                pass \n    return LIT \n",
        "wrong_code": "\ndef ID (ID ):\n    if ID :\n        for ID ,ID in ID .ID ():\n            if ID in ID :\n                pass \n    return LIT \nor "
    },
    {
        "code": "\ndef get_driver_class(provider):\n    if \".\" in provider:\n        if not hasattr(module, kls):\n            pass\n    else:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 93,
            "fix_type": "delete",
            "id": 39416
        },
        "correct_code": "\ndef ID (ID ):\n    if LIT in ID :\n        if not ID (ID ,ID ):\n            pass \n    else :\n        pass \n",
        "wrong_code": "\ndef ID (ID ):\n    if LIT in ID :\n        if not ID (ID ,ID ):\n            pass \n            async else :\n        pass \n"
    },
    {
        "code": "\ndef get_provider_name(driver):\n    for d, prop in DRIVERS.items():\n        if prop[1] == kls:\n            return d\n    return None\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 42,
            "fix_type": "delete",
            "id": 39417
        },
        "correct_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID ():\n        if ID [LIT ]==ID :\n            return ID \n    return ID \n",
        "wrong_code": "\ndef ID (ID ):\n    for ID ,ID in ID .ID ()None :\n        if ID [LIT ]==ID :\n            return ID \n    return ID \n"
    },
    {
        "code": "\ndef __iter__(self):\n    \"\"\"\n        ie: `for item in storage`\n        Iterate over all the objects in the container\n        :return: generator\n        \"\"\"\n    for obj in self.container.iterate_objects():\n        yield Object(obj=obj)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "in",
            "id": 39418
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    for ID in ID .ID .ID ():\n        yield ID (ID =ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    for ID ID .ID .ID ():\n        yield ID (ID =ID )\n"
    },
    {
        "code": "\ndef __len__(self):\n    \"\"\"\n        ie: `len(storage)`\n        Return the total objects in the container\n        :return: int\n        \"\"\"\n    return len(self.container.list_objects())\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39419
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (ID .ID .ID ())\n",
        "wrong_code": "\ndef ID (ID )\n    LIT \n    return ID (ID .ID .ID ())\n"
    },
    {
        "code": "\ndef __contains__(self, object_name):\n    \"\"\"\n        ie: `if name in storage` or `if name not in storage`\n        Test if object exists\n        :param object_name: the object name\n        :return bool:\n        \"\"\"\n    try:\n        self.driver.get_object(self.container.name, object_name)\n        return True\n    except ObjectDoesNotExistError:\n        return False\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 110,
            "fix_type": "delete",
            "id": 39420
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    try :\n        ID .ID .ID (ID .ID .ID ,ID )\n        return LIT \n    except ID :\n        return LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    try :\n        ID .ID .ID (ID .ID .ID ,ID )\n        return LIT \n    except ID :LIT \n        return LIT \n"
    },
    {
        "code": "\ndef get(self, object_name):\n    \"\"\"\n        Return an object or None if it doesn't exist\n        :param object_name:\n        :return: Object\n        \"\"\"\n    if object_name in self:\n        return Object(obj=self.container.get_object(object_name))\n    return None\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39421
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    if ID in ID :\n        return ID (ID =ID .ID .ID (ID ))\n    return ID \n",
        "wrong_code": "\n(def ID (ID ,ID ):\n    LIT \n    if ID in ID :\n        return ID (ID =ID .ID .ID (ID ))\n    return ID \n"
    },
    {
        "code": "\ndef create(self, object_name, size=0, hash=None, extra=None, meta_data=None):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 45,
            "fix_type": "insert",
            "fix_token": "=",
            "id": 39422
        },
        "correct_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ,ID =ID ,ID =ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID =LIT ,ID =ID ,ID =ID ,ID ID ):\n    pass \n"
    },
    {
        "code": "\ndef _safe_object_name(self, object_name):\n    while object_name in self:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 17,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39423
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    while ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID )\n    while ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef __init__(self, obj, **kwargs):\n    self._obj = obj\n    self._kwargs = kwargs\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 5,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39424
        },
        "correct_code": "\ndef ID (ID ,ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "\ndef =(ID ,ID ,**ID ):\n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __getattr__(self, item):\n    return getattr(self._obj, item)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39425
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return ID (ID .ID ,ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    and return ID (ID .ID ,ID )\n"
    },
    {
        "code": "\ndef __len__(self):\n    return self.size\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 12,
            "fix_type": "delete",
            "id": 39426
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID .):\n    return ID .ID \n"
    },
    {
        "code": "\n@property\ndef url(self):\n    \"\"\"\n        Returns the url of the object.\n        For Local it will return it without the domain name\n        :return: str\n        \"\"\"\n    return self.get_url()\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 50,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39427
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID ()\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID ()\nlambda "
    },
    {
        "code": "\n@property\ndef full_url(self):\n    \"\"\"\n        Returns the full url with the domain, specially for Local storage\n        :return: str\n        \"\"\"\n    return self.get_url(longurl=True)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 14,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39428
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID (ID =LIT )\n",
        "wrong_code": "\n@ID \ndef ID (del ):\n    LIT \n    return ID .ID (ID =LIT )\n"
    },
    {
        "code": "\n\n@property\ndef secure_url(self):\n    \"\"\"\n        Return the full url with https\n        :return:\n        \"\"\"\n    return self.get_url(secure=True, longurl=True)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 14,
            "fix_type": "delete",
            "id": 39429
        },
        "correct_code": "\n\n@ID \ndef ID (ID ):\n    LIT \n    return ID .ID (ID =LIT ,ID =LIT )\n",
        "wrong_code": "\n\n@ID \ndef ID with (ID ):\n    LIT \n    return ID .ID (ID =LIT ,ID =LIT )\n"
    },
    {
        "code": "\n@property\ndef extension(self):\n    \"\"\"\n        Return the extension of the object\n        :return:\n        \"\"\"\n    return get_file_extension(self.name)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 18,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39430
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID )\n    LIT \n    return ID (ID .ID )\n"
    },
    {
        "code": "\n@property\ndef type(self):\n    \"\"\"\n        Return the object type (IMAGE, AUDIO,...) or OTHER\n        :return:\n        \"\"\"\n    return get_file_extension_type(self.name)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 23,
            "fix_type": "insert",
            "fix_token": "\n",
            "id": 39431
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):    LIT \n    return ID (ID .ID )\n"
    },
    {
        "code": "\n@property\ndef provider_name(self):\n    \"\"\"\n        Return the provider name\n        :return: str\n        \"\"\"\n    return get_provider_name(self.driver)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 52,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39432
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return ID (ID .ID )lambda "
    },
    {
        "code": "\n@property\ndef path(self):\n    \"\"\"\n        Return the object path\n        :return: str\n        \"\"\"\n    return \"%s/%s\" % (self.container.name, self.name)\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 44,
            "fix_type": "modify",
            "fix_token": "%",
            "id": 39433
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return LIT %(ID .ID .ID ,ID .ID )\n",
        "wrong_code": "\n@ID \ndef ID (ID ):\n    LIT \n    return LIT yield (ID .ID .ID ,ID .ID )\n"
    },
    {
        "code": "\n@property\ndef short_url(self):\n    \"\"\"\n        DEPRECATED\n\n        Returns the url of the object\n        For local it will return it WITHOUT the domain name\n        :return:\n        \"\"\"\n    warnings.warn(\"DEPRECATED: flask_cloudy.Object.short_url has been deprecated, use flask_cloudy.Object.url or flask_cloudy.Object.full_url\")\n    return self.get_url()\n",
        "metadata": {
            "file": "py150_files/data/mardix/flask-cloudy/flask_cloudy.py",
            "fix_location": 1,
            "fix_type": "modify",
            "fix_token": "@",
            "id": 39434
        },
        "correct_code": "\n@ID \ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    return ID .ID ()\n",
        "wrong_code": "\n==ID \ndef ID (ID ):\n    LIT \n    ID .ID (LIT )\n    return ID .ID ()\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/mariano/snakefire/tests/snakefire_test.py",
            "fix_location": 29,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39435
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \n    =="
    },
    {
        "code": "\ndef testSanity(self):\n    self.assertEqual(0, 0)\n",
        "metadata": {
            "file": "py150_files/data/mariano/snakefire/tests/snakefire_test.py",
            "fix_location": 8,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39436
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID (LIT ,LIT )\n",
        "wrong_code": "\ndef ID ]ID ):\n    ID .ID (LIT ,LIT )\n"
    },
    {
        "code": "\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39437
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "assert \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef testNagcatMerlin(self):\n    nagcatMerlin = NagcatMerlinDummy(\n        merlin_db_info=self._merlin_db_info)\n    self.assertEquals(nagcatMerlin.get_peer_id_num_peers(),\n        (0,2))\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 89,
            "fix_type": "delete",
            "id": 39438
        },
        "correct_code": "\ndef ID (ID ):\n    ID =ID (\n    ID =ID .ID )\n    ID .ID (ID .ID (),\n    (LIT ,LIT ))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID =ID (\n    ID =ID .ID )\n    ID .ID (ID .ID (),\n    (LIT ,LIT ))\n    :"
    },
    {
        "code": "\ndef tearDown(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 9,
            "fix_type": "delete",
            "id": 39439
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (class ID ):\n    pass \n"
    },
    {
        "code": "def __init__(self, merlin_db_info={}):\n    self._merlin_db_info = merlin_db_info\n    scheduler.Scheduler.__init__(self)\n    self._peer_id = None\n    self._num_rows = None\n    self._peer_id_timestamp = None\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 39440
        },
        "correct_code": "def ID (ID ,ID ={}):\n    ID .ID =ID \n    ID .ID .ID (ID )\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def continue ID (ID ,ID ={}):\n    ID .ID =ID \n    ID .ID .ID (ID )\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =ID \n"
    },
    {
        "code": "\ndef build_tests(self, config):\n    return []\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39441
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return []\n",
        "wrong_code": "\ndef ID ID ,ID ):\n    return []\n"
    },
    {
        "code": "\ndef nagios_status(self):\n    return simple.ObjectDummy()\n",
        "metadata": {
            "file": "py150_files/data/marineam/nagcat/python/nagcat/unittests/test_merlin.py",
            "fix_location": 29,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39442
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID ()\n",
        "wrong_code": "\ndef ID (ID ):\n    return ID ID ()\n"
    },
    {
        "code": "def __init__(self, model=None, searchConfig = None):\n    self.model = model\n    from . import gp\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 4,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39443
        },
        "correct_code": "def ID (ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    from .import ID \n",
        "wrong_code": "def (ID ,ID =ID ,ID =ID ):\n    ID .ID =ID \n    from .import ID \n"
    },
    {
        "code": "\ndef findMin(self, x, y, numIters):\n    '''\n        Find minimal value based on negative-log-marginal-likelihood.\n        optimalHyp, funcValue = findMin(x, y, numIters)\n\n        where funcValue is the minimal negative-log-marginal-likelihood during optimization,\n        and optimalHyp is a flattened numpy array\n        (in sequence of meanfunc.hyp, covfunc.hyp, likfunc.hyp)\n        of the hyparameters to achieve such value.\n\n        You can achieve advanced search strategy by initializing Optimizer with searchConfig,\n        which is an instance of pyGPs.Optimization.conf.\n        See more in pyGPs.Optimization.conf and pyGPs.Core.gp.GP.setOptimizer,\n        as well as in online documentation of section Optimizers.\n        '''\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 35,
            "fix_type": "delete",
            "id": 39444
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT \n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,ID ):\n    LIT as \n    pass \n"
    },
    {
        "code": "\ndef _nlml(self, hypInArray):\n    '''Find negative-log-marginal-likelihood'''\n    self._apply_in_objects(hypInArray)\n    nlZ, dnlZ = self.model.getPosterior(der=False)\n    return nlZ\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 94,
            "fix_type": "delete",
            "id": 39445
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID )\n    ID ,ID =ID .ID .ID (ID =LIT )\n    return ID \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    LIT \n    ID .ID (ID )\n    ID ,ID =ID .ID .ID (ID =LIT )\n    return ID \nimport "
    },
    {
        "code": "\ndef _dnlml(self, hypInArray):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 16,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39446
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID :\n    pass \n"
    },
    {
        "code": "\ndef _nlzAnddnlz(self, hypInArray):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 17,
            "fix_type": "delete",
            "id": 39447
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID )pass :\n    pass \n"
    },
    {
        "code": "\ndef _convert_to_array(self):\n    '''Convert all hyparameters in the model to an array'''\n    hyplist = self.model.meanfunc.hyp + self.model.covfunc.hyp + self.model.likfunc.hyp\n    return np.array(hyplist)\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 68,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39448
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID .ID +ID .ID .ID .ID +ID .ID .ID .ID \n    return ID .ID (ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT \n    ID =ID .ID .ID .ID +ID .ID .ID .ID +ID .try .ID .ID \n    return ID .ID (ID )\n"
    },
    {
        "code": "\ndef _apply_in_objects(self, hypInArray):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39449
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    raise pass \n"
    },
    {
        "code": "def __init__(self, model, searchConfig = None):\n    self.model = model\n    self.searchConfig = searchConfig\n    self.trailsCounter = 0\n    self.errorCounter = 0\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 20,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39450
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n",
        "wrong_code": "def ID (ID ,ID ,ID =*):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "def __init__(self, model, searchConfig = None):\n    self.model = model\n    self.searchConfig = searchConfig\n    self.trailsCounter = 0\n    self.errorCounter = 0\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 4,
            "fix_type": "delete",
            "id": 39451
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n",
        "wrong_code": "def -ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "def __init__(self, model, searchConfig = None):\n    self.model = model\n    self.searchConfig = searchConfig\n    self.trailsCounter = 0\n    self.errorCounter = 0\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 34,
            "fix_type": "delete",
            "id": 39452
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n",
        "wrong_code": "def ID (ID ,ID ,ID =ID ):\n    ID .+ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "def __init__(self, model, searchConfig = None):\n    self.model = model\n    self.searchConfig = searchConfig\n    self.trailsCounter = 0\n    self.errorCounter = 0\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Core/opt.py",
            "fix_location": 11,
            "fix_type": "delete",
            "id": 39453
        },
        "correct_code": "def ID (ID ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n",
        "wrong_code": "def ID (ID if ,ID ,ID =ID ):\n    ID .ID =ID \n    ID .ID =ID \n    ID .ID =LIT \n    ID .ID =LIT \n"
    },
    {
        "code": "# here focus on testing inference function.\n# therefore only use one example set of covariance/mean functions\n\ndef setUp(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 32,
            "fix_type": "delete",
            "id": 39454
        },
        "correct_code": "#COMMENT\n\n#COMMENT\n\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "#COMMENT\n\n#COMMENT\n\n\ndef ID (ID and ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_infExact(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39455
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\nin \ndef ID (ID ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_infFITC_Exact(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 13,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39456
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID pass :\n    pass \n"
    },
    {
        "code": "\n\ndef test_infEP(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 13,
            "fix_type": "delete",
            "id": 39457
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID raise ):\n    pass \n"
    },
    {
        "code": "\n\ndef test_infFITC_EP(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 20,
            "fix_type": "delete",
            "id": 39458
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    raise pass \n"
    },
    {
        "code": "\n\ndef test_infLaplace(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 39459
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):\n    pass \nglobal "
    },
    {
        "code": "\n\ndef test_infFITC_Laplace(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marionmari/pyGPs/pyGPs/Testing/unit_test_inf.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39460
        },
        "correct_code": "\n\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n\ndef ID (ID ):lambda     pass \n"
    },
    {
        "code": "def __init__(self, markup, props):\n    self.markup = markup\n    self.props = props\n",
        "metadata": {
            "file": "py150_files/data/markfinger/python-react/react/render_server.py",
            "fix_location": 34,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39461
        },
        "correct_code": "def ID (ID ,ID ,ID ):\n    ID .ID =ID \n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ,ID ):\n    ID .ID =\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef __str__(self):\n    return self.markup\n",
        "metadata": {
            "file": "py150_files/data/markfinger/python-react/react/render_server.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39462
        },
        "correct_code": "\ndef ID (ID ):\n    return ID .ID \n",
        "wrong_code": "\ndef ID (ID )\n    return ID .ID \n"
    },
    {
        "code": "\ndef __unicode__(self):\n    return unicode(self.markup)\n",
        "metadata": {
            "file": "py150_files/data/markfinger/python-react/react/render_server.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39463
        },
        "correct_code": "\ndef ID (ID ):\n    return ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID )\n    return ID (ID .ID )\n"
    },
    {
        "code": "\n\ndef webpack(config_file, context=None, settings=None, manifest=manifest_reader, compiler=build_server):\n\n    # Allow the USE_MANIFEST setting to be overridden when populating the manifest\n    if settings:\n        pass\n\n    if use_manifest:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/markfinger/python-webpack/webpack/compiler.py",
            "fix_location": 21,
            "fix_type": "insert",
            "fix_token": ",",
            "id": 39464
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ,ID =ID ,ID =ID ,ID =ID ):\n\n#COMMENT\n\n    if ID :\n        pass \n\n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =ID ID =ID ,ID =ID ,ID =ID ):\n\n#COMMENT\n\n    if ID :\n        pass \n\n    if ID :\n        pass \n"
    },
    {
        "code": "\ndef check_dependencies(self):\n    \"\"\"\n        See if pep8 is on the PATH\n        \"\"\"\n    return in_path('pep8')\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/lintreview/tools/pep8.py",
            "fix_location": 23,
            "fix_type": "delete",
            "id": 39465
        },
        "correct_code": "\ndef ID (ID ):\n    LIT \n    return ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ):\n    LIT try \n    return ID (LIT )\n"
    },
    {
        "code": "\ndef match_file(self, filename):\n    base = os.path.basename(filename)\n    name, ext = os.path.splitext(base)\n    return ext == '.py'\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/lintreview/tools/pep8.py",
            "fix_location": 35,
            "fix_type": "insert",
            "fix_token": "ID",
            "id": 39466
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .ID (ID )\n    ID ,ID =ID .ID .ID (ID )\n    return ID ==LIT \n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    ID =ID .ID .(ID )\n    ID ,ID =ID .ID .ID (ID )\n    return ID ==LIT \n"
    },
    {
        "code": "\ndef process_files(self, files):\n    if self.options.get('ignore'):\n        pass\n    if not output:\n        pass\n\n    for line in output:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/lintreview/tools/pep8.py",
            "fix_location": 18,
            "fix_type": "delete",
            "id": 39467
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    if ID .ID .ID (LIT ):\n        pass \n    if not ID :\n        pass \n\n    for ID in ID :\n        pass \n",
        "wrong_code": "\ndef ID (ID ,ID ):assert \n    if ID .ID .ID (LIT ):\n        pass \n    if not ID :\n        pass \n\n    for ID in ID :\n        pass \n"
    },
    {
        "code": "\ndef _parse_line(self, line):\n    return (parts[0], int(parts[1]), message)\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/lintreview/tools/pep8.py",
            "fix_location": 39,
            "fix_type": "modify",
            "fix_token": "]",
            "id": 39468
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    return (ID [LIT ],ID (ID [LIT ]),ID )\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n    return (ID [LIT for ,ID (ID [LIT ]),ID )\n"
    },
    {
        "code": "\ndef setUp(self):\n    self.problems = Problems()\n    self.tool = Jsonlint(self.problems)\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/tests/tools/test_jsonlint.py",
            "fix_location": 52,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39469
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =ID (ID .ID )\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID =ID ()\n    ID .ID =ID (ID ID )\n"
    },
    {
        "code": "\ndef test_match_file(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/tests/tools/test_jsonlint.py",
            "fix_location": 1,
            "fix_type": "delete",
            "id": 39470
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\n.def ID (ID ):\n    pass \n"
    },
    {
        "code": "\ndef test_process_files__one_file_pass(self):\n    self.tool.process_files([self.fixtures[0]])\n    eq_([], self.problems.all(self.fixtures[0]))\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/tests/tools/test_jsonlint.py",
            "fix_location": 56,
            "fix_type": "delete",
            "id": 39471
        },
        "correct_code": "\ndef ID (ID ):\n    ID .ID .ID ([ID .ID [LIT ]])\n    ID ([],ID .ID .ID (ID .ID [LIT ]))\n",
        "wrong_code": "\ndef ID (ID ):\n    ID .ID .ID ([ID .ID [LIT ]])\n    ID (,[],ID .ID .ID (ID .ID [LIT ]))\n"
    },
    {
        "code": "\ndef test_process_files__one_file_fail(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/tests/tools/test_jsonlint.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39472
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID )\n    pass \n"
    },
    {
        "code": "\ndef test_process_files_three_files(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/markstory/lint-review/tests/tools/test_jsonlint.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39473
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (None ):\n    pass \n"
    },
    {
        "code": "\ndef __init__(self, config):\n    self.user = config.get('user')\n    self.key = config.get('key')\n",
        "metadata": {
            "file": "py150_files/data/marrow/mailer/marrow/mailer/transport/sendgrid.py",
            "fix_location": 16,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39474
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID .ID (LIT )\n",
        "wrong_code": "\ndef ID (ID ,ID =:\n    ID .ID =ID .ID (LIT )\n    ID .ID =ID .ID (LIT )\n"
    },
    {
        "code": "\ndef startup(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marrow/mailer/marrow/mailer/transport/sendgrid.py",
            "fix_location": 25,
            "fix_type": "modify",
            "fix_token": "",
            "id": 39475
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass \nwith "
    },
    {
        "code": "    \ndef shutdown(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/marrow/mailer/marrow/mailer/transport/sendgrid.py",
            "fix_location": 12,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39476
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID finally :\n    pass \n"
    },
    {
        "code": "\n\n\ndef execute(obj): # pragma: no cover\n    sys.exit(Parser(obj)(sys.argv[1:]))\n",
        "metadata": {
            "file": "py150_files/data/marrow/script/marrow/script/__init__.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39477
        },
        "correct_code": "\n\n\ndef ID (ID ):#COMMENT\n\n    ID .ID (ID (ID )(ID .ID [LIT :]))\n",
        "wrong_code": "del \n\n\ndef ID (ID ):#COMMENT\n\n    ID .ID (ID (ID )(ID .ID [LIT :]))\n"
    },
    {
        "code": "def inner(fn):\n    if not hasattr(fn, attr):\n        pass\n    \n    fn.__dict__[attr].update(kw)\n    \n    return fn\n",
        "metadata": {
            "file": "py150_files/data/marrow/script/marrow/script/__init__.py",
            "fix_location": 40,
            "fix_type": "insert",
            "fix_token": "pass",
            "id": 39478
        },
        "correct_code": "def ID (ID ):\n    if not ID (ID ,ID ):\n        pass \n\n    ID .ID [ID ].ID (ID )\n\n    return ID \n",
        "wrong_code": "def ID (ID ):\n    if not ID (ID ,ID ):\n\n\n    ID .ID [ID ].ID (ID )\n\n    return ID \n"
    },
    {
        "code": "def decorator(**kw):\n    def inner(fn):\n        if not hasattr(fn, attr):\n            pass\n",
        "metadata": {
            "file": "py150_files/data/marrow/script/marrow/script/__init__.py",
            "fix_location": 31,
            "fix_type": "delete",
            "id": 39479
        },
        "correct_code": "def ID (**ID ):\n    def ID (ID ):\n        if not ID (ID ,ID ):\n            pass \n",
        "wrong_code": "def ID (**ID ):\n    def ID (ID return ):\n        if not ID (ID ,ID ):\n            pass \n"
    },
    {
        "code": "\n\n\ndef base(attr):\n    def decorator(**kw):\n        def inner(fn):\n            if not hasattr(fn, attr):\n                pass\n",
        "metadata": {
            "file": "py150_files/data/marrow/script/marrow/script/__init__.py",
            "fix_location": 45,
            "fix_type": "modify",
            "fix_token": "def",
            "id": 39480
        },
        "correct_code": "\n\n\ndef ID (ID ):\n    def ID (**ID ):\n        def ID (ID ):\n            if not ID (ID ,ID ):\n                pass \n",
        "wrong_code": "\n\n\ndef ID (ID ):\n    def ID (**ID ):\n        /ID (ID ):\n            if not ID (ID ,ID ):\n                pass \n"
    },
    {
        "code": "\n\ndef setup(init_run=False):\n\n    if init_run:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/marteinn/AtomicPress/atomicpress/app.py",
            "fix_location": 26,
            "fix_type": "delete",
            "id": 39481
        },
        "correct_code": "\n\ndef ID (ID =LIT ):\n\n    if ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID =LIT ):\n\n    try if ID :\n        pass \n"
    },
    {
        "code": "\n\ndef activate_extensions():\n    for extension_module in app.config[\"EXTENSIONS\"]:\n        extension = importlib.import_module(extension_module)\n        extension.setup()\n",
        "metadata": {
            "file": "py150_files/data/marteinn/AtomicPress/atomicpress/app.py",
            "fix_location": 30,
            "fix_type": "insert",
            "fix_token": ".",
            "id": 39482
        },
        "correct_code": "\n\ndef ID ():\n    for ID in ID .ID [LIT ]:\n        ID =ID .ID (ID )\n        ID .ID ()\n",
        "wrong_code": "\n\ndef ID ():\n    for ID in ID ID [LIT ]:\n        ID =ID .ID (ID )\n        ID .ID ()\n"
    },
    {
        "code": "\n\ndef activate_theme(theme):\n    app.register_blueprint(theme, url_prefix=\"\")\n",
        "metadata": {
            "file": "py150_files/data/marteinn/AtomicPress/atomicpress/app.py",
            "fix_location": 27,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39483
        },
        "correct_code": "\n\ndef ID (ID ):\n    ID .ID (ID ,ID =LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):\n    ID .ID if ID ,ID =LIT )\n"
    },
    {
        "code": "\n\ndef run():\n    manager.run()\n",
        "metadata": {
            "file": "py150_files/data/marteinn/AtomicPress/atomicpress/app.py",
            "fix_location": 9,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39484
        },
        "correct_code": "\n\ndef ID ():\n    ID .ID ()\n",
        "wrong_code": "\n\ndef ID ):\n    ID .ID ()\n"
    },
    {
        "code": "\ndef test_pick(self):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/martinogden/django-banner-rotator/banner_rotator/tests.py",
            "fix_location": 24,
            "fix_type": "delete",
            "id": 39485
        },
        "correct_code": "\ndef ID (ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ):\n    pass LIT \n"
    },
    {
        "code": "\n\ndef from_key(api_key, session=None, **kwargs):\n    if not session:\n        pass\n",
        "metadata": {
            "file": "py150_files/data/martyzz1/heroku3.py/heroku3/core.py",
            "fix_location": 29,
            "fix_type": "delete",
            "id": 39486
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ,**ID ):\n    if not ID :\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =ID ,**ID ):is \n    if not ID :\n        pass \n"
    },
    {
        "code": "\n\ndef get_links_for(obj, is_external=None):\n\n    if not (is_external is None):\n        pass\n",
        "metadata": {
            "file": "py150_files/data/matagus/django-generic-links/generic_links/utils.py",
            "fix_location": 18,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39487
        },
        "correct_code": "\n\ndef ID (ID ,ID =ID ):\n\n    if not (ID is ID ):\n        pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID =.):\n\n    if not (ID is ID ):\n        pass \n"
    },
    {
        "code": "\ndef forwards(self, orm):\n\n    # Changing field 'Post.guid'\n    db.alter_column(u'planet_post', 'guid', self.gf('django.db.models.fields.CharField')(max_length=32))\n",
        "metadata": {
            "file": "py150_files/data/matagus/django-planet/planet/south_migrations/0009_auto__chg_field_post_guid.py",
            "fix_location": 55,
            "fix_type": "modify",
            "fix_token": ".",
            "id": 39488
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )(ID =LIT ))\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID ID ID (LIT )(ID =LIT ))\n"
    },
    {
        "code": "\ndef backwards(self, orm):\n\n    # Changing field 'Post.guid'\n    db.alter_column(u'planet_post', 'guid', self.gf('django.db.models.fields.TextField')())\n",
        "metadata": {
            "file": "py150_files/data/matagus/django-planet/planet/south_migrations/0009_auto__chg_field_post_guid.py",
            "fix_location": 59,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39489
        },
        "correct_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID (LIT )())\n",
        "wrong_code": "\ndef ID (ID ,ID ):\n\n#COMMENT\n\n    ID .ID (LIT ,LIT ,ID .ID break LIT )())\n"
    },
    {
        "code": "\n\n@contextlib.contextmanager\ndef pushd(directory):\n    try:\n        yield prevdir\n    finally:\n        os.chdir(prevdir)\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/git_hooks/hook.py",
            "fix_location": 33,
            "fix_type": "insert",
            "fix_token": ":",
            "id": 39490
        },
        "correct_code": "\n\n@ID .ID \ndef ID (ID ):\n    try :\n        yield ID \n    finally :\n        ID .ID (ID )\n",
        "wrong_code": "\n\n@ID .ID \ndef ID (ID ):\n    try \n        yield ID \n    finally :\n        ID .ID (ID )\n"
    },
    {
        "code": "\n\ndef check_output(cmd):\n    if hasattr(subprocess, 'check_output'):\n        pass\n    else:\n        if proc.returncode != 0:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/git_hooks/hook.py",
            "fix_location": 9,
            "fix_type": "modify",
            "fix_token": "(",
            "id": 39491
        },
        "correct_code": "\n\ndef ID (ID ):\n    if ID (ID ,LIT ):\n        pass \n    else :\n        if ID .ID !=LIT :\n            pass \n",
        "wrong_code": "\n\ndef ID or ID ):\n    if ID (ID ,LIT ):\n        pass \n    else :\n        if ID .ID !=LIT :\n            pass \n"
    },
    {
        "code": "\n\ndef copy_index(tmpdir):\n    for line in output.splitlines():\n        with pushd(path):\n            if untar.returncode != 0:\n                pass\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/git_hooks/hook.py",
            "fix_location": 13,
            "fix_type": "insert",
            "fix_token": ")",
            "id": 39492
        },
        "correct_code": "\n\ndef ID (ID ):\n    for ID in ID .ID ():\n        with ID (ID ):\n            if ID .ID !=LIT :\n                pass \n",
        "wrong_code": "\n\ndef ID (ID :\n    for ID in ID .ID ():\n        with ID (ID ):\n            if ID .ID !=LIT :\n                pass \n"
    },
    {
        "code": "\n\ndef packages_to_dict(request, packages):\n    \"\"\" Convert a list of packages to a dict used by the template \"\"\"\n    pkgs = {}\n    for package in packages:\n        pkgs[package.filename] = package.get_url(request)\n    return pkgs\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/pypicloud/views/simple.py",
            "fix_location": 36,
            "fix_type": "delete",
            "id": 39493
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID ={}\n    for ID in ID :\n        ID [ID .ID ]=ID .ID (ID )\n    return ID \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID if ={}\n    for ID in ID :\n        ID [ID .ID ]=ID .ID (ID )\n    return ID \n"
    },
    {
        "code": "\n\ndef _pkg_response(pkgs):\n    \"\"\" Take a package mapping and return either a dict for jinja or a 404 \"\"\"\n    if pkgs:\n        return {'pkgs': pkgs}\n    else:\n        return HTTPNotFound(\"No packages found\")\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/pypicloud/views/simple.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": "\n",
            "id": 39494
        },
        "correct_code": "\n\ndef ID (ID ):\n    LIT \n    if ID :\n        return {LIT :ID }\n    else :\n        return ID (LIT )\n",
        "wrong_code": "\n\ndef ID (ID ):,    LIT \n    if ID :\n        return {LIT :ID }\n    else :\n        return ID (LIT )\n"
    },
    {
        "code": "\n\ndef _redirect(context, request):\n    \"\"\" Return a 302 to the fallback url for this package \"\"\"\n    redirect_url = \"%s/%s/\" % (\n        request.registry.fallback_url.rstrip('/'), context.name)\n    return HTTPFound(location=redirect_url)\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/pypicloud/views/simple.py",
            "fix_location": 0,
            "fix_type": "delete",
            "id": 39495
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n    LIT \n    ID =LIT %(\n    ID .ID .ID .ID (LIT ),ID .ID )\n    return ID (ID =ID )\n",
        "wrong_code": ")\n\ndef ID (ID ,ID ):\n    LIT \n    ID =LIT %(\n    ID .ID .ID .ID (LIT ),ID .ID )\n    return ID (ID =ID )\n"
    },
    {
        "code": "\n\ndef _simple_serve(context, request):\n\n    if not request.access.has_permission(normalized_name, 'read'):\n        if request.is_logged_in:\n            pass\n        else:\n            pass\n",
        "metadata": {
            "file": "py150_files/data/mathcamp/pypicloud/pypicloud/views/simple.py",
            "fix_location": 101,
            "fix_type": "modify",
            "fix_token": "else",
            "id": 39496
        },
        "correct_code": "\n\ndef ID (ID ,ID ):\n\n    if not ID .ID .ID (ID ,LIT ):\n        if ID .ID :\n            pass \n        else :\n            pass \n",
        "wrong_code": "\n\ndef ID (ID ,ID ):\n\n    if not ID .ID .ID (ID ,LIT ):\n        if ID .ID :\n            pass \n        try :\n            pass \n"
    },
    {
        "code": "def __init__(self, sydent):\n    self.sydent = sydent\n",
        "metadata": {
            "file": "py150_files/data/matrix-org/sydent/sydent/http/servlets/threepidbindservlet.py",
            "fix_location": 15,
            "fix_type": "modify",
            "fix_token": ")",
            "id": 39497
        },
        "correct_code": "def ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "def ID (ID ,ID ::\n    ID .ID =ID \n"
    },
    {
        "code": "\n\n@jsonwrap\ndef render_OPTIONS(self, request):\n    send_cors(request)\n    request.setResponseCode(200)\n    return {}\n",
        "metadata": {
            "file": "py150_files/data/matrix-org/sydent/sydent/http/servlets/threepidbindservlet.py",
            "fix_location": 19,
            "fix_type": "modify",
            "fix_token": "ID",
            "id": 39498
        },
        "correct_code": "\n\n@ID \ndef ID (ID ,ID ):\n    ID (ID )\n    ID .ID (LIT )\n    return {}\n",
        "wrong_code": "\n\n@ID \ndef ID (ID ,del ):\n    ID (ID )\n    ID .ID (LIT )\n    return {}\n"
    },
    {
        "code": "\ndef __init__(self, name):\n    self.name_prefix = name\n",
        "metadata": {
            "file": "py150_files/data/matrix-org/synapse/synapse/metrics/__init__.py",
            "fix_location": 8,
            "fix_type": "insert",
            "fix_token": "(",
            "id": 39499
        },
        "correct_code": "\ndef ID (ID ,ID ):\n    ID .ID =ID \n",
        "wrong_code": "\ndef ID ID ,ID ):\n    ID .ID =ID \n"
    },
    {
        "code": "\ndef _register(self, metric_class, name, *args, **kwargs):\n    pass\n",
        "metadata": {
            "file": "py150_files/data/matrix-org/synapse/synapse/metrics/__init__.py",
            "fix_location": 43,
            "fix_type": "delete",
            "id": 39500
        },
        "correct_code": "\ndef ID (ID ,ID ,ID ,*ID ,**ID ):\n    pass \n",
        "wrong_code": "\ndef ID (ID ,ID ,ID ,*ID ,**ID ):\n    pass return \n"
    }
]